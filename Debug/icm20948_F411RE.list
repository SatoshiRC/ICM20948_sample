
icm20948_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08007cb8  08007cb8  00017cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f24  08007f24  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007f24  08007f24  00017f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f2c  08007f2c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007f2c  08007f2c  00017f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f34  08007f34  00017f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000090  08007fc8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08007fc8  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002044c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003663  00000000  00000000  0004050c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00043b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00044c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c26d  00000000  00000000  00045c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162ef  00000000  00000000  00061eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1a6c  00000000  00000000  000781dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119c48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066d4  00000000  00000000  00119c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c9c 	.word	0x08007c9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08007c9c 	.word	0x08007c9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <_ZN8ICM209486whoamiEv>:
//
//ICM20948::~ICM20948() {
//	// TODO Auto-generated destructor stub
//}

uint8_t ICM20948::whoami(){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af04      	add	r7, sp, #16
 8000f06:	6078      	str	r0, [r7, #4]
	    uint8_t adress=0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Read(hi2c, (uint16_t)address<<1, REGISTER.WHO_AM_I, 1, &adress, 1, 1000);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6898      	ldr	r0, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7b1b      	ldrb	r3, [r3, #12]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	b299      	uxth	r1, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	2301      	movs	r3, #1
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	f107 030f 	add.w	r3, r7, #15
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	f002 fb17 	bl	8003564 <HAL_I2C_Mem_Read>
		return adress;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]

	}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_ZN8ICM209488pwrmgmt1Eh>:

	uint8_t ICM20948::pwrmgmt1(uint8_t data){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af04      	add	r7, sp, #16
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
	     HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.PWR_MGMT_1,1,&data,1,1000);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6898      	ldr	r0, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7b1b      	ldrb	r3, [r3, #12]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	b299      	uxth	r1, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	785b      	ldrb	r3, [r3, #1]
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f64:	9302      	str	r3, [sp, #8]
 8000f66:	2301      	movs	r3, #1
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	1cfb      	adds	r3, r7, #3
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	f002 f9fe 	bl	8003370 <HAL_I2C_Mem_Write>
	     return 0;
 8000f74:	2300      	movs	r3, #0
	}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_ZN8ICM209488pwrmgmt2Eh>:
	uint8_t ICM20948::pwrmgmt2(uint8_t data){
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af04      	add	r7, sp, #16
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	70fb      	strb	r3, [r7, #3]
	     HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.PWR_MGMT_2,1,&data,1,1000);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6898      	ldr	r0, [r3, #8]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7b1b      	ldrb	r3, [r3, #12]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	b299      	uxth	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	789b      	ldrb	r3, [r3, #2]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	1cfb      	adds	r3, r7, #3
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	f002 f9df 	bl	8003370 <HAL_I2C_Mem_Write>
	     return 0;
 8000fb2:	2300      	movs	r3, #0
	}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZN8ICM209485resetEv>:
	void ICM20948::reset(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af04      	add	r7, sp, #16
 8000fc2:	6078      	str	r0, [r7, #4]
	    pwrmgmt1(ICM20948_BIT_H_RESET);
 8000fc4:	2180      	movs	r1, #128	; 0x80
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ffba 	bl	8000f40 <_ZN8ICM209488pwrmgmt1Eh>
	    HAL_Delay(100);
 8000fcc:	2064      	movs	r0, #100	; 0x64
 8000fce:	f001 fd85 	bl	8002adc <HAL_Delay>
	    pwrmgmt1(ICM20948_BTT_CLK_PLL);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ffb3 	bl	8000f40 <_ZN8ICM209488pwrmgmt1Eh>
	    HAL_Delay(100);
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	f001 fd7e 	bl	8002adc <HAL_Delay>
	    uint8_t buffer=ICM20948_BIT_INT_ACTL | ICM20948_BIT_INT_OPEN;
 8000fe0:	23c0      	movs	r3, #192	; 0xc0
 8000fe2:	73fb      	strb	r3, [r7, #15]
	    HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.INT_PIN_CFG,1,&buffer,1,1000);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6898      	ldr	r0, [r3, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7b1b      	ldrb	r3, [r3, #12]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	b299      	uxth	r1, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	78db      	ldrb	r3, [r3, #3]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f107 030f 	add.w	r3, r7, #15
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	f002 f9b1 	bl	8003370 <HAL_I2C_Mem_Write>
		}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_ZN8ICM2094814changeUserBankEh>:
	bool ICM20948::changeUserBank(const uint8_t bank){
 8001016:	b580      	push	{r7, lr}
 8001018:	b088      	sub	sp, #32
 800101a:	af04      	add	r7, sp, #16
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	460b      	mov	r3, r1
 8001020:	70fb      	strb	r3, [r7, #3]
	    if(bank>3 || bank<0){
 8001022:	78fb      	ldrb	r3, [r7, #3]
 8001024:	2b03      	cmp	r3, #3
 8001026:	d901      	bls.n	800102c <_ZN8ICM2094814changeUserBankEh+0x16>
	        return false;
 8001028:	2300      	movs	r3, #0
 800102a:	e01b      	b.n	8001064 <_ZN8ICM2094814changeUserBankEh+0x4e>
	    }
	    uint8_t data=bank<<4;
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	b2db      	uxtb	r3, r3
 8001032:	73bb      	strb	r3, [r7, #14]
	    uint8_t res = HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.BANK_SEL,1,&data,1,1000);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6898      	ldr	r0, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7b1b      	ldrb	r3, [r3, #12]
 800103c:	b29b      	uxth	r3, r3
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	b299      	uxth	r1, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	791b      	ldrb	r3, [r3, #4]
 8001046:	b29a      	uxth	r2, r3
 8001048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	2301      	movs	r3, #1
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	f107 030e 	add.w	r3, r7, #14
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	f002 f989 	bl	8003370 <HAL_I2C_Mem_Write>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
	    //printf("data=0x%02x\n",data);
	    //printf("res=%d\n",res);
	    return true;
 8001062:	2301      	movs	r3, #1
	}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh>:

	bool ICM20948::accelConfig(const AccelSensitivity fssel,const bool enableDLPF,const uint8_t configDLPF){
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af04      	add	r7, sp, #16
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	4608      	mov	r0, r1
 8001076:	4611      	mov	r1, r2
 8001078:	461a      	mov	r2, r3
 800107a:	4603      	mov	r3, r0
 800107c:	70fb      	strb	r3, [r7, #3]
 800107e:	460b      	mov	r3, r1
 8001080:	70bb      	strb	r3, [r7, #2]
 8001082:	4613      	mov	r3, r2
 8001084:	707b      	strb	r3, [r7, #1]

	    _accelsensitivity=fssel;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	78fa      	ldrb	r2, [r7, #3]
 800108a:	735a      	strb	r2, [r3, #13]
	    if(configDLPF>7 || configDLPF<0){
 800108c:	787b      	ldrb	r3, [r7, #1]
 800108e:	2b07      	cmp	r3, #7
 8001090:	d901      	bls.n	8001096 <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh+0x2a>
	        return false;
 8001092:	2300      	movs	r3, #0
 8001094:	e038      	b.n	8001108 <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh+0x9c>
	    }
	    uint8_t data=0;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
	    data |=configDLPF<<3;
 800109a:	787b      	ldrb	r3, [r7, #1]
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	b25a      	sxtb	r2, r3
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	73fb      	strb	r3, [r7, #15]
	    data |=(uint8_t)fssel<<1;
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	b25a      	sxtb	r2, r3
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	73fb      	strb	r3, [r7, #15]
	    data |=enableDLPF;
 80010be:	78ba      	ldrb	r2, [r7, #2]
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	73fb      	strb	r3, [r7, #15]
	    changeUserBank(2);
 80010c8:	2102      	movs	r1, #2
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffa3 	bl	8001016 <_ZN8ICM2094814changeUserBankEh>

	    data=HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.ACCEL_CONFIG,1,&data,1,1000);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6898      	ldr	r0, [r3, #8]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7b1b      	ldrb	r3, [r3, #12]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	b299      	uxth	r1, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	795b      	ldrb	r3, [r3, #5]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	2301      	movs	r3, #1
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	f107 030f 	add.w	r3, r7, #15
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	f002 f93b 	bl	8003370 <HAL_I2C_Mem_Write>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73fb      	strb	r3, [r7, #15]
	    //printf("data=%d\n",data);
	    changeUserBank(0);
 80010fe:	2100      	movs	r1, #0
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff88 	bl	8001016 <_ZN8ICM2094814changeUserBankEh>
	    return true;
 8001106:	2301      	movs	r3, #1

	}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_ZN8ICM209488getAccelEh>:
		data=HAL_I2C_Mem_Write(hi2c,(uint16_t)address<<1,REGISTER.GYRO_CONFIG,1,&data,1,1000);
		changeUserBank(0);
		return true;

	}
	float ICM20948::getAccel(uint8_t axis){
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af04      	add	r7, sp, #16
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	70fb      	strb	r3, [r7, #3]
	    const uint8_t REG_ACCEL_H[3]={0x2D,0x2F,0x31};
 800111c:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <_ZN8ICM209488getAccelEh+0xd4>)
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	4611      	mov	r1, r2
 8001126:	8019      	strh	r1, [r3, #0]
 8001128:	3302      	adds	r3, #2
 800112a:	0c12      	lsrs	r2, r2, #16
 800112c:	701a      	strb	r2, [r3, #0]
	    const uint8_t REG_ACCEL_L[3]={0x2E,0x30,0x32};
 800112e:	4a2e      	ldr	r2, [pc, #184]	; (80011e8 <_ZN8ICM209488getAccelEh+0xd8>)
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	4611      	mov	r1, r2
 8001138:	8019      	strh	r1, [r3, #0]
 800113a:	3302      	adds	r3, #2
 800113c:	0c12      	lsrs	r2, r2, #16
 800113e:	701a      	strb	r2, [r3, #0]

	    int8_t accelH;
		HAL_I2C_Mem_Read(hi2c, (uint16_t)address<<1,REG_ACCEL_H[axis],1,(uint8_t*)&accelH,1,1000);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6898      	ldr	r0, [r3, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7b1b      	ldrb	r3, [r3, #12]
 8001148:	b29b      	uxth	r3, r3
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	b299      	uxth	r1, r3
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	f107 0218 	add.w	r2, r7, #24
 8001154:	4413      	add	r3, r2
 8001156:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800115a:	b29a      	uxth	r2, r3
 800115c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001160:	9302      	str	r3, [sp, #8]
 8001162:	2301      	movs	r3, #1
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	f107 030b 	add.w	r3, r7, #11
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	f002 f9f9 	bl	8003564 <HAL_I2C_Mem_Read>
	    int8_t accelL;
	    HAL_I2C_Mem_Read(hi2c, (uint16_t)address<<1,REG_ACCEL_L[axis],1,(uint8_t*)&accelL,1,1000);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6898      	ldr	r0, [r3, #8]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7b1b      	ldrb	r3, [r3, #12]
 800117a:	b29b      	uxth	r3, r3
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b299      	uxth	r1, r3
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	f107 0218 	add.w	r2, r7, #24
 8001186:	4413      	add	r3, r2
 8001188:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800118c:	b29a      	uxth	r2, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2301      	movs	r3, #1
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	f107 030a 	add.w	r3, r7, #10
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	f002 f9e0 	bl	8003564 <HAL_I2C_Mem_Read>
	    int16_t accel=(int16_t)accelH<<8 | (int16_t)accelL;
 80011a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	82fb      	strh	r3, [r7, #22]

	    return (float)accel/ACCEL_SENSITIVITY[(uint8_t)_accelsensitivity];
 80011b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7b5b      	ldrb	r3, [r3, #13]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	3304      	adds	r3, #4
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011d6:	eef0 7a66 	vmov.f32	s15, s13
	}
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	08007cb8 	.word	0x08007cb8
 80011e8:	08007cbc 	.word	0x08007cbc

080011ec <_ZN8ICM209487getGyroEh>:

	float ICM20948::getGyro(uint8_t axis){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af04      	add	r7, sp, #16
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
		const uint8_t REG_GYRO_H[3]={0x33,0x35,0x37};
 80011f8:	4a31      	ldr	r2, [pc, #196]	; (80012c0 <_ZN8ICM209487getGyroEh+0xd4>)
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	4611      	mov	r1, r2
 8001202:	8019      	strh	r1, [r3, #0]
 8001204:	3302      	adds	r3, #2
 8001206:	0c12      	lsrs	r2, r2, #16
 8001208:	701a      	strb	r2, [r3, #0]
		const uint8_t REG_GYRO_L[3]={0x34,0x36,0x38};
 800120a:	4a2e      	ldr	r2, [pc, #184]	; (80012c4 <_ZN8ICM209487getGyroEh+0xd8>)
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	4611      	mov	r1, r2
 8001214:	8019      	strh	r1, [r3, #0]
 8001216:	3302      	adds	r3, #2
 8001218:	0c12      	lsrs	r2, r2, #16
 800121a:	701a      	strb	r2, [r3, #0]

		int8_t gyroH;
		HAL_I2C_Mem_Read(hi2c,(uint16_t)address<<1,REG_GYRO_H[axis],1,(uint8_t*)&gyroH,1,1000);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6898      	ldr	r0, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7b1b      	ldrb	r3, [r3, #12]
 8001224:	b29b      	uxth	r3, r3
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	b299      	uxth	r1, r3
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	f107 0218 	add.w	r2, r7, #24
 8001230:	4413      	add	r3, r2
 8001232:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001236:	b29a      	uxth	r2, r3
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	2301      	movs	r3, #1
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	f107 030b 	add.w	r3, r7, #11
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2301      	movs	r3, #1
 800124a:	f002 f98b 	bl	8003564 <HAL_I2C_Mem_Read>
		int8_t gyroL;
		HAL_I2C_Mem_Read(hi2c,(uint16_t)address<<1,REG_GYRO_L[axis],1,(uint8_t*)&gyroL,1,1000);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6898      	ldr	r0, [r3, #8]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7b1b      	ldrb	r3, [r3, #12]
 8001256:	b29b      	uxth	r3, r3
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	b299      	uxth	r1, r3
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	f107 0218 	add.w	r2, r7, #24
 8001262:	4413      	add	r3, r2
 8001264:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001268:	b29a      	uxth	r2, r3
 800126a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	2301      	movs	r3, #1
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	f107 030a 	add.w	r3, r7, #10
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	f002 f972 	bl	8003564 <HAL_I2C_Mem_Read>
		int16_t gyro=(int16_t)gyroH<<8 | (int16_t)gyroL;
 8001280:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800128c:	b21b      	sxth	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	82fb      	strh	r3, [r7, #22]

		return (float)gyro/GYRO_SENSITIVITY[(uint8_t)_gyrosensitivity];
 8001292:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7b9b      	ldrb	r3, [r3, #14]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	3308      	adds	r3, #8
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012b2:	eef0 7a66 	vmov.f32	s15, s13
	}
 80012b6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	08007cc0 	.word	0x08007cc0
 80012c4:	08007cc4 	.word	0x08007cc4

080012c8 <_ZN8ICM2094812intPinConfigEh>:
			value[n] = (float)((int16_t)buffer[2*n]<<8 | (int16_t)buffer[2*n+1])/ACCEL_SENSITIVITY[(uint8_t)_accelsensitivity];

		}
	}

	void ICM20948::intPinConfig(uint8_t value){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af04      	add	r7, sp, #16
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(hi2c,(uint16_t)address<<1,REGISTER.INT_PIN_CFG,1,&value,1,1000);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6898      	ldr	r0, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	7b1b      	ldrb	r3, [r3, #12]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	b299      	uxth	r1, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	78db      	ldrb	r3, [r3, #3]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	1cfb      	adds	r3, r7, #3
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2301      	movs	r3, #1
 80012f8:	f002 f83a 	bl	8003370 <HAL_I2C_Mem_Write>

	}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <_ZN8ICM209489intenableEh>:

	void ICM20948::intenable(uint8_t value){
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af04      	add	r7, sp, #16
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(hi2c,(uint16_t)address<<1,REGISTER.INT_ENABLE,1,&value,1,1000);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6898      	ldr	r0, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	7b1b      	ldrb	r3, [r3, #12]
 8001318:	b29b      	uxth	r3, r3
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	b299      	uxth	r1, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	79db      	ldrb	r3, [r3, #7]
 8001322:	b29a      	uxth	r2, r3
 8001324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2301      	movs	r3, #1
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	1cfb      	adds	r3, r7, #3
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2301      	movs	r3, #1
 8001334:	f002 f81c 	bl	8003370 <HAL_I2C_Mem_Write>
	}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_ZNSt5arrayIfLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6839      	ldr	r1, [r7, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f805 	bl	800135e <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 8001354:	4603      	mov	r3, r0
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b38      	ldr	r3, [pc, #224]	; (8001478 <MX_GPIO_Init+0xfc>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a37      	ldr	r2, [pc, #220]	; (8001478 <MX_GPIO_Init+0xfc>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b35      	ldr	r3, [pc, #212]	; (8001478 <MX_GPIO_Init+0xfc>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b31      	ldr	r3, [pc, #196]	; (8001478 <MX_GPIO_Init+0xfc>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a30      	ldr	r2, [pc, #192]	; (8001478 <MX_GPIO_Init+0xfc>)
 80013b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <MX_GPIO_Init+0xfc>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <MX_GPIO_Init+0xfc>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a29      	ldr	r2, [pc, #164]	; (8001478 <MX_GPIO_Init+0xfc>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <MX_GPIO_Init+0xfc>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <MX_GPIO_Init+0xfc>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a22      	ldr	r2, [pc, #136]	; (8001478 <MX_GPIO_Init+0xfc>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <MX_GPIO_Init+0xfc>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2120      	movs	r1, #32
 8001406:	481d      	ldr	r0, [pc, #116]	; (800147c <MX_GPIO_Init+0x100>)
 8001408:	f001 fe22 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800140c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001412:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4817      	ldr	r0, [pc, #92]	; (8001480 <MX_GPIO_Init+0x104>)
 8001424:	f001 fc90 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001428:	2320      	movs	r3, #32
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	480f      	ldr	r0, [pc, #60]	; (800147c <MX_GPIO_Init+0x100>)
 8001440:	f001 fc82 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001444:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800144e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001450:	2301      	movs	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4809      	ldr	r0, [pc, #36]	; (8001480 <MX_GPIO_Init+0x104>)
 800145c:	f001 fc74 	bl	8002d48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	2028      	movs	r0, #40	; 0x28
 8001466:	f001 fc38 	bl	8002cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800146a:	2028      	movs	r0, #40	; 0x28
 800146c:	f001 fc51 	bl	8002d12 <HAL_NVIC_EnableIRQ>

}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020800 	.word	0x40020800

08001484 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_I2C1_Init+0x50>)
 800148a:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <MX_I2C1_Init+0x54>)
 800148c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_I2C1_Init+0x50>)
 8001490:	4a12      	ldr	r2, [pc, #72]	; (80014dc <MX_I2C1_Init+0x58>)
 8001492:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_I2C1_Init+0x50>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_I2C1_Init+0x50>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_I2C1_Init+0x50>)
 80014a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <MX_I2C1_Init+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_I2C1_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <MX_I2C1_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_I2C1_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_I2C1_Init+0x50>)
 80014c2:	f001 fe11 	bl	80030e8 <HAL_I2C_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014cc:	f000 f8ce 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000138 	.word	0x20000138
 80014d8:	40005400 	.word	0x40005400
 80014dc:	000186a0 	.word	0x000186a0

080014e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a19      	ldr	r2, [pc, #100]	; (8001564 <HAL_I2C_MspInit+0x84>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d12c      	bne.n	800155c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <HAL_I2C_MspInit+0x88>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a17      	ldr	r2, [pc, #92]	; (8001568 <HAL_I2C_MspInit+0x88>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_I2C_MspInit+0x88>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800151e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001524:	2312      	movs	r3, #18
 8001526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001530:	2304      	movs	r3, #4
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	480c      	ldr	r0, [pc, #48]	; (800156c <HAL_I2C_MspInit+0x8c>)
 800153c:	f001 fc04 	bl	8002d48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_I2C_MspInit+0x88>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_I2C_MspInit+0x88>)
 800154a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800154e:	6413      	str	r3, [r2, #64]	; 0x40
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_I2C_MspInit+0x88>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40005400 	.word	0x40005400
 8001568:	40023800 	.word	0x40023800
 800156c:	40020400 	.word	0x40020400

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001574:	f001 fa40 	bl	80029f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001578:	f000 f80e 	bl	8001598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157c:	f7ff fefe 	bl	800137c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001580:	f000 f9b4 	bl	80018ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001584:	f7ff ff7e 	bl	8001484 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001588:	f000 f93e 	bl	8001808 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  init();
 800158c:	f000 fab0 	bl	8001af0 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001590:	f000 fafc 	bl	8001b8c <loop>
 8001594:	e7fc      	b.n	8001590 <main+0x20>
	...

08001598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b094      	sub	sp, #80	; 0x50
 800159c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	2230      	movs	r2, #48	; 0x30
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f005 ff0c 	bl	80073c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <SystemClock_Config+0xcc>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a27      	ldr	r2, [pc, #156]	; (8001664 <SystemClock_Config+0xcc>)
 80015c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
 80015cc:	4b25      	ldr	r3, [pc, #148]	; (8001664 <SystemClock_Config+0xcc>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <SystemClock_Config+0xd0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a21      	ldr	r2, [pc, #132]	; (8001668 <SystemClock_Config+0xd0>)
 80015e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <SystemClock_Config+0xd0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f4:	2302      	movs	r3, #2
 80015f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f8:	2301      	movs	r3, #1
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015fc:	2310      	movs	r3, #16
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001600:	2302      	movs	r3, #2
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001604:	2300      	movs	r3, #0
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001608:	2310      	movs	r3, #16
 800160a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800160c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001612:	2304      	movs	r3, #4
 8001614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001616:	2304      	movs	r3, #4
 8001618:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161a:	f107 0320 	add.w	r3, r7, #32
 800161e:	4618      	mov	r0, r3
 8001620:	f002 fd22 	bl	8004068 <HAL_RCC_OscConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800162a:	f000 f81f 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162e:	230f      	movs	r3, #15
 8001630:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001632:	2302      	movs	r3, #2
 8001634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800163a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	2102      	movs	r1, #2
 800164a:	4618      	mov	r0, r3
 800164c:	f002 ff84 	bl	8004558 <HAL_RCC_ClockConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001656:	f000 f809 	bl	800166c <Error_Handler>
  }
}
 800165a:	bf00      	nop
 800165c:	3750      	adds	r7, #80	; 0x50
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40007000 	.word	0x40007000

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_MspInit+0x4c>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_MspInit+0x4c>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016b6:	2007      	movs	r0, #7
 80016b8:	f001 fb04 	bl	8002cc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <NMI_Handler+0x4>

080016ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <MemManage_Handler+0x4>

080016da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <BusFault_Handler+0x4>

080016e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <UsageFault_Handler+0x4>

080016e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001714:	f001 f9c2 	bl	8002a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001720:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001724:	f001 fcc8 	bl	80030b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001728:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800172c:	f001 fcc4 	bl	80030b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
	return 1;
 8001738:	2301      	movs	r3, #1
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <_kill>:

int _kill(int pid, int sig)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800174e:	f005 fdd7 	bl	8007300 <__errno>
 8001752:	4603      	mov	r3, r0
 8001754:	2216      	movs	r2, #22
 8001756:	601a      	str	r2, [r3, #0]
	return -1;
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <_exit>:

void _exit (int status)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ffe7 	bl	8001744 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001776:	e7fe      	b.n	8001776 <_exit+0x12>

08001778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001780:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <_sbrk+0x5c>)
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <_sbrk+0x60>)
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <_sbrk+0x64>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <_sbrk+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d207      	bcs.n	80017b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a8:	f005 fdaa 	bl	8007300 <__errno>
 80017ac:	4603      	mov	r3, r0
 80017ae:	220c      	movs	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	e009      	b.n	80017cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <_sbrk+0x64>)
 80017c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20020000 	.word	0x20020000
 80017d8:	00000400 	.word	0x00000400
 80017dc:	200000ac 	.word	0x200000ac
 80017e0:	20000230 	.word	0x20000230

080017e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181c:	463b      	mov	r3, r7
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <MX_TIM1_Init+0x98>)
 8001826:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <MX_TIM1_Init+0x9c>)
 8001828:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <MX_TIM1_Init+0x98>)
 800182c:	2253      	movs	r2, #83	; 0x53
 800182e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_TIM1_Init+0x98>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <MX_TIM1_Init+0x98>)
 8001838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_TIM1_Init+0x98>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_TIM1_Init+0x98>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_TIM1_Init+0x98>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001850:	4813      	ldr	r0, [pc, #76]	; (80018a0 <MX_TIM1_Init+0x98>)
 8001852:	f003 f87d 	bl	8004950 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800185c:	f7ff ff06 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4619      	mov	r1, r3
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <MX_TIM1_Init+0x98>)
 800186e:	f003 f919 	bl	8004aa4 <HAL_TIM_ConfigClockSource>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001878:	f7ff fef8 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001884:	463b      	mov	r3, r7
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_TIM1_Init+0x98>)
 800188a:	f003 faed 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001894:	f7ff feea 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000018c 	.word	0x2000018c
 80018a4:	40010000 	.word	0x40010000

080018a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <HAL_TIM_Base_MspInit+0x3c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10d      	bne.n	80018d6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_TIM_Base_MspInit+0x40>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <HAL_TIM_Base_MspInit+0x40>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <HAL_TIM_Base_MspInit+0x40>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40010000 	.word	0x40010000
 80018e8:	40023800 	.word	0x40023800

080018ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <MX_USART2_UART_Init+0x50>)
 80018f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 80018f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001912:	220c      	movs	r2, #12
 8001914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001924:	f003 fb0e 	bl	8004f44 <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800192e:	f7ff fe9d 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200001d4 	.word	0x200001d4
 800193c:	40004400 	.word	0x40004400

08001940 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a19      	ldr	r2, [pc, #100]	; (80019c4 <HAL_UART_MspInit+0x84>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d12b      	bne.n	80019ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <HAL_UART_MspInit+0x88>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <HAL_UART_MspInit+0x88>)
 800196c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <HAL_UART_MspInit+0x88>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_UART_MspInit+0x88>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <HAL_UART_MspInit+0x88>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_UART_MspInit+0x88>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800199a:	230c      	movs	r3, #12
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019aa:	2307      	movs	r3, #7
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <HAL_UART_MspInit+0x8c>)
 80019b6:	f001 f9c7 	bl	8002d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019ba:	bf00      	nop
 80019bc:	3728      	adds	r7, #40	; 0x28
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40004400 	.word	0x40004400
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020000 	.word	0x40020000

080019d0 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <_ZNSt7__cxx119to_stringEi+0x24>)
 80019e2:	2210      	movs	r2, #16
 80019e4:	4904      	ldr	r1, [pc, #16]	; (80019f8 <_ZNSt7__cxx119to_stringEi+0x28>)
 80019e6:	f000 fe1d 	bl	8002624 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	08007cc8 	.word	0x08007cc8
 80019f8:	08007629 	.word	0x08007629

080019fc <_ZN8ICM20948Ut_C1Ev>:
		SENS_4G,
		SENS_8G,
		SENS_16G,
	};

	const struct{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2206      	movs	r2, #6
 8001a0e:	705a      	strb	r2, [r3, #1]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2207      	movs	r2, #7
 8001a14:	709a      	strb	r2, [r3, #2]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	220f      	movs	r2, #15
 8001a1a:	70da      	strb	r2, [r3, #3]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	227f      	movs	r2, #127	; 0x7f
 8001a20:	711a      	strb	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2214      	movs	r2, #20
 8001a26:	715a      	strb	r2, [r3, #5]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	719a      	strb	r2, [r3, #6]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2211      	movs	r2, #17
 8001a32:	71da      	strb	r2, [r3, #7]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE>:

	enum class Address:uint8_t{
		LOW=0x68,
		HIGH=0x69,
	};
	ICM20948(I2C_HandleTypeDef *hi2c,Address address)
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	71fb      	strb	r3, [r7, #7]
			:hi2c(hi2c),address(address){};
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ffd1 	bl	80019fc <_ZN8ICM20948Ut_C1Ev>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	79fa      	ldrb	r2, [r7, #7]
 8001a64:	731a      	strb	r2, [r3, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE+0x4c>)
 8001a6a:	f103 0410 	add.w	r4, r3, #16
 8001a6e:	4613      	mov	r3, r2
 8001a70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE+0x50>)
 8001a7a:	f103 0420 	add.w	r4, r3, #32
 8001a7e:	4613      	mov	r3, r2
 8001a80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd90      	pop	{r4, r7, pc}
 8001a90:	08007ccc 	.word	0x08007ccc
 8001a94:	08007cdc 	.word	0x08007cdc

08001a98 <_ZN13TIM_StopWatchC1EP17TIM_HandleTypeDefm>:

#include "main.h"

class TIM_StopWatch {
public:
	TIM_StopWatch(TIM_HandleTypeDef *htim=nullptr, uint32_t frequence = 1000000)
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
	:htim(htim),
	 frequence(frequence)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	741a      	strb	r2, [r3, #16]
	{
	}
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ada:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ade:	f004 f96b 	bl	8005db8 <asinf>
 8001ae2:	eef0 7a40 	vmov.f32	s15, s0
 8001ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <init>:
float roll;
float pitch;
float yaw;
/* Variable End */

void init(void){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
   stopwatch.start();
 8001af6:	4822      	ldr	r0, [pc, #136]	; (8001b80 <init+0x90>)
 8001af8:	f003 fd3a 	bl	8005570 <_ZN13TIM_StopWatch5startEv>
	if(icm20948.whoami() == 0xea){
 8001afc:	4821      	ldr	r0, [pc, #132]	; (8001b84 <init+0x94>)
 8001afe:	f7ff f9ff 	bl	8000f00 <_ZN8ICM209486whoamiEv>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2bea      	cmp	r3, #234	; 0xea
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d004      	beq.n	8001b1c <init+0x2c>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8001b12:	2201      	movs	r2, #1
 8001b14:	2120      	movs	r1, #32
 8001b16:	481c      	ldr	r0, [pc, #112]	; (8001b88 <init+0x98>)
 8001b18:	f001 fa9a 	bl	8003050 <HAL_GPIO_WritePin>
	}
	int result = icm20948.whoami();
 8001b1c:	4819      	ldr	r0, [pc, #100]	; (8001b84 <init+0x94>)
 8001b1e:	f7ff f9ef 	bl	8000f00 <_ZN8ICM209486whoamiEv>
 8001b22:	4603      	mov	r3, r0
 8001b24:	607b      	str	r3, [r7, #4]
//		    result=whoami();
		    if(result==0xea){
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2bea      	cmp	r3, #234	; 0xea
 8001b2a:	d125      	bne.n	8001b78 <init+0x88>
//		        printf("ICM20948 confirm\n");
		    	icm20948.reset();
 8001b2c:	4815      	ldr	r0, [pc, #84]	; (8001b84 <init+0x94>)
 8001b2e:	f7ff fa45 	bl	8000fbc <_ZN8ICM209485resetEv>
		    	icm20948.pwrmgmt2(ICM20948_DISABLE_SENSORS);
 8001b32:	213f      	movs	r1, #63	; 0x3f
 8001b34:	4813      	ldr	r0, [pc, #76]	; (8001b84 <init+0x94>)
 8001b36:	f7ff fa22 	bl	8000f7e <_ZN8ICM209488pwrmgmt2Eh>
		    	icm20948.accelConfig(ICM20948::AccelSensitivity::SENS_2G,false,0);
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4810      	ldr	r0, [pc, #64]	; (8001b84 <init+0x94>)
 8001b42:	f7ff fa93 	bl	800106c <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh>
		    	icm20948.pwrmgmt2(ICM20948_ENABLE_SENSORS);
 8001b46:	2100      	movs	r1, #0
 8001b48:	480e      	ldr	r0, [pc, #56]	; (8001b84 <init+0x94>)
 8001b4a:	f7ff fa18 	bl	8000f7e <_ZN8ICM209488pwrmgmt2Eh>
		    	icm20948.intPinConfig(0b01110000);
 8001b4e:	2170      	movs	r1, #112	; 0x70
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <init+0x94>)
 8001b52:	f7ff fbb9 	bl	80012c8 <_ZN8ICM2094812intPinConfigEh>
		    	icm20948.intenable();
 8001b56:	2101      	movs	r1, #1
 8001b58:	480a      	ldr	r0, [pc, #40]	; (8001b84 <init+0x94>)
 8001b5a:	f7ff fbd3 	bl	8001304 <_ZN8ICM209489intenableEh>

		        HAL_Delay(100);
 8001b5e:	2064      	movs	r0, #100	; 0x64
 8001b60:	f000 ffbc 	bl	8002adc <HAL_Delay>
//		        printf("initialized\n");

		        icm20948.changeUserBank(2);
 8001b64:	2102      	movs	r1, #2
 8001b66:	4807      	ldr	r0, [pc, #28]	; (8001b84 <init+0x94>)
 8001b68:	f7ff fa55 	bl	8001016 <_ZN8ICM2094814changeUserBankEh>
		        uint8_t buffer2=0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	70fb      	strb	r3, [r7, #3]
		        //HAL_I2C_Mem_Read(&hi2c1, 0x68<<1,ICM20948::REGISTER.ACCEL_CONFIG,1,&buffer2,1,1000);
		        icm20948.changeUserBank(0);
 8001b70:	2100      	movs	r1, #0
 8001b72:	4804      	ldr	r0, [pc, #16]	; (8001b84 <init+0x94>)
 8001b74:	f7ff fa4f 	bl	8001016 <_ZN8ICM2094814changeUserBankEh>
		    }


}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200000f4 	.word	0x200000f4
 8001b84:	200000b0 	.word	0x200000b0
 8001b88:	40020000 	.word	0x40020000

08001b8c <loop>:

void loop(void){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
stopwatch.update();
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <loop+0x10>)
 8001b92:	f003 fd00 	bl	8005596 <_ZN13TIM_StopWatch6updateEv>
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200000f4 	.word	0x200000f4

08001ba0 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ba4:	ed2d 8b02 	vpush	{d8}
 8001ba8:	b0ca      	sub	sp, #296	; 0x128
 8001baa:	af04      	add	r7, sp, #16
 8001bac:	4602      	mov	r2, r0
 8001bae:	1dbb      	adds	r3, r7, #6
 8001bb0:	801a      	strh	r2, [r3, #0]
//	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
	if (GPIO_Pin == GPIO_PIN_11){
 8001bb2:	1dbb      	adds	r3, r7, #6
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bba:	f040 8511 	bne.w	80025e0 <HAL_GPIO_EXTI_Callback+0xa40>
		timer++;
 8001bbe:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4a32      	ldr	r2, [pc, #200]	; (8001c90 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001bc6:	6013      	str	r3, [r2, #0]
		preTime=time;
 8001bc8:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a32      	ldr	r2, [pc, #200]	; (8001c98 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001bce:	6013      	str	r3, [r2, #0]
		stopwatch.update();
 8001bd0:	4832      	ldr	r0, [pc, #200]	; (8001c9c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001bd2:	f003 fce0 	bl	8005596 <_ZN13TIM_StopWatch6updateEv>
		time=stopwatch.getTimeMS();
 8001bd6:	4831      	ldr	r0, [pc, #196]	; (8001c9c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001bd8:	f003 fd1a 	bl	8005610 <_ZN13TIM_StopWatch9getTimeMSEv>
 8001bdc:	eef0 7a40 	vmov.f32	s15, s0
 8001be0:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001be2:	edc3 7a00 	vstr	s15, [r3]
		stepTime=time-preTime;
 8001be6:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001be8:	ed93 7a00 	vldr	s14, [r3]
 8001bec:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_GPIO_EXTI_Callback+0x100>)
 8001bf8:	edc3 7a00 	vstr	s15, [r3]

//		float accelx = icm20948.getaccel(0);
//		float gyroz = icm20948.getgyro(0);
		for(uint8_t n=0;n<3;n++){
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8001c02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d854      	bhi.n	8001cb4 <HAL_GPIO_EXTI_Callback+0x114>
			gyroValue[n] = icm20948.getGyro(n)*M_PI/180;
 8001c0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4824      	ldr	r0, [pc, #144]	; (8001ca4 <HAL_GPIO_EXTI_Callback+0x104>)
 8001c12:	f7ff faeb 	bl	80011ec <_ZN8ICM209487getGyroEh>
 8001c16:	ee10 3a10 	vmov	r3, s0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fc9c 	bl	8000558 <__aeabi_f2d>
 8001c20:	a319      	add	r3, pc, #100	; (adr r3, 8001c88 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	f7fe fcef 	bl	8000608 <__aeabi_dmul>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x108>)
 8001c38:	f7fe fe10 	bl	800085c <__aeabi_ddiv>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	f897 4117 	ldrb.w	r4, [r7, #279]	; 0x117
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe ff8e 	bl	8000b68 <__aeabi_d2f>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4917      	ldr	r1, [pc, #92]	; (8001cac <HAL_GPIO_EXTI_Callback+0x10c>)
 8001c50:	00a3      	lsls	r3, r4, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	601a      	str	r2, [r3, #0]
			accelValue[n] = icm20948.getAccel(n);
 8001c56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4814      	ldr	r0, [pc, #80]	; (8001cb0 <HAL_GPIO_EXTI_Callback+0x110>)
 8001c5e:	f7ff fb6f 	bl	8001340 <_ZNSt5arrayIfLj3EEixEj>
 8001c62:	4604      	mov	r4, r0
 8001c64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480e      	ldr	r0, [pc, #56]	; (8001ca4 <HAL_GPIO_EXTI_Callback+0x104>)
 8001c6c:	f7ff fa50 	bl	8001110 <_ZN8ICM209488getAccelEh>
 8001c70:	eef0 7a40 	vmov.f32	s15, s0
 8001c74:	edc4 7a00 	vstr	s15, [r4]
		for(uint8_t n=0;n<3;n++){
 8001c78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8001c82:	e7be      	b.n	8001c02 <HAL_GPIO_EXTI_Callback+0x62>
 8001c84:	f3af 8000 	nop.w
 8001c88:	54442d18 	.word	0x54442d18
 8001c8c:	400921fb 	.word	0x400921fb
 8001c90:	200000e4 	.word	0x200000e4
 8001c94:	200000ec 	.word	0x200000ec
 8001c98:	200000e8 	.word	0x200000e8
 8001c9c:	200000f4 	.word	0x200000f4
 8001ca0:	200000f0 	.word	0x200000f0
 8001ca4:	200000b0 	.word	0x200000b0
 8001ca8:	40668000 	.word	0x40668000
 8001cac:	20000114 	.word	0x20000114
 8001cb0:	20000108 	.word	0x20000108
		}
		quaternion qDotOmega;

		 qDotOmega[0]=1/2.0*(-preAttitude[1]*gyroValue[0]-preAttitude[2]*gyroValue[1]-preAttitude[3]*gyroValue[2]);
 8001cb4:	4bdc      	ldr	r3, [pc, #880]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001cb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cba:	eeb1 7a67 	vneg.f32	s14, s15
 8001cbe:	4bdb      	ldr	r3, [pc, #876]	; (800202c <HAL_GPIO_EXTI_Callback+0x48c>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc8:	4bd7      	ldr	r3, [pc, #860]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001cca:	edd3 6a02 	vldr	s13, [r3, #8]
 8001cce:	4bd7      	ldr	r3, [pc, #860]	; (800202c <HAL_GPIO_EXTI_Callback+0x48c>)
 8001cd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cdc:	4bd2      	ldr	r3, [pc, #840]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001cde:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ce2:	4bd2      	ldr	r3, [pc, #840]	; (800202c <HAL_GPIO_EXTI_Callback+0x48c>)
 8001ce4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf0:	ee17 0a90 	vmov	r0, s15
 8001cf4:	f7fe fc30 	bl	8000558 <__aeabi_f2d>
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	4bcc      	ldr	r3, [pc, #816]	; (8002030 <HAL_GPIO_EXTI_Callback+0x490>)
 8001cfe:	f7fe fc83 	bl	8000608 <__aeabi_dmul>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7fe ff2d 	bl	8000b68 <__aeabi_d2f>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		 qDotOmega[1]=1/2.0*(preAttitude[0]*gyroValue[0]+preAttitude[2]*gyroValue[2]-preAttitude[3]*gyroValue[1]);
 8001d14:	4bc4      	ldr	r3, [pc, #784]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001d16:	ed93 7a00 	vldr	s14, [r3]
 8001d1a:	4bc4      	ldr	r3, [pc, #784]	; (800202c <HAL_GPIO_EXTI_Callback+0x48c>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d24:	4bc0      	ldr	r3, [pc, #768]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001d26:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d2a:	4bc0      	ldr	r3, [pc, #768]	; (800202c <HAL_GPIO_EXTI_Callback+0x48c>)
 8001d2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d38:	4bbb      	ldr	r3, [pc, #748]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001d3a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d3e:	4bbb      	ldr	r3, [pc, #748]	; (800202c <HAL_GPIO_EXTI_Callback+0x48c>)
 8001d40:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4c:	ee17 0a90 	vmov	r0, s15
 8001d50:	f7fe fc02 	bl	8000558 <__aeabi_f2d>
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	4bb5      	ldr	r3, [pc, #724]	; (8002030 <HAL_GPIO_EXTI_Callback+0x490>)
 8001d5a:	f7fe fc55 	bl	8000608 <__aeabi_dmul>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7fe feff 	bl	8000b68 <__aeabi_d2f>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		 qDotOmega[2]=1/2.0*(preAttitude[0]*gyroValue[1]-preAttitude[1]*gyroValue[2]+preAttitude[3]*gyroValue[0]);
 8001d70:	4bad      	ldr	r3, [pc, #692]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001d72:	ed93 7a00 	vldr	s14, [r3]
 8001d76:	4bad      	ldr	r3, [pc, #692]	; (800202c <HAL_GPIO_EXTI_Callback+0x48c>)
 8001d78:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d80:	4ba9      	ldr	r3, [pc, #676]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001d82:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d86:	4ba9      	ldr	r3, [pc, #676]	; (800202c <HAL_GPIO_EXTI_Callback+0x48c>)
 8001d88:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d94:	4ba4      	ldr	r3, [pc, #656]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001d96:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d9a:	4ba4      	ldr	r3, [pc, #656]	; (800202c <HAL_GPIO_EXTI_Callback+0x48c>)
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da8:	ee17 0a90 	vmov	r0, s15
 8001dac:	f7fe fbd4 	bl	8000558 <__aeabi_f2d>
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	4b9e      	ldr	r3, [pc, #632]	; (8002030 <HAL_GPIO_EXTI_Callback+0x490>)
 8001db6:	f7fe fc27 	bl	8000608 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe fed1 	bl	8000b68 <__aeabi_d2f>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		 qDotOmega[3]=1/2.0*(preAttitude[0]*gyroValue[2]+preAttitude[1]*gyroValue[1]-preAttitude[2]*gyroValue[0]);
 8001dcc:	4b96      	ldr	r3, [pc, #600]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	4b96      	ldr	r3, [pc, #600]	; (800202c <HAL_GPIO_EXTI_Callback+0x48c>)
 8001dd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ddc:	4b92      	ldr	r3, [pc, #584]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001dde:	edd3 6a01 	vldr	s13, [r3, #4]
 8001de2:	4b92      	ldr	r3, [pc, #584]	; (800202c <HAL_GPIO_EXTI_Callback+0x48c>)
 8001de4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001de8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df0:	4b8d      	ldr	r3, [pc, #564]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001df2:	edd3 6a02 	vldr	s13, [r3, #8]
 8001df6:	4b8d      	ldr	r3, [pc, #564]	; (800202c <HAL_GPIO_EXTI_Callback+0x48c>)
 8001df8:	edd3 7a00 	vldr	s15, [r3]
 8001dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e04:	ee17 0a90 	vmov	r0, s15
 8001e08:	f7fe fba6 	bl	8000558 <__aeabi_f2d>
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	4b87      	ldr	r3, [pc, #540]	; (8002030 <HAL_GPIO_EXTI_Callback+0x490>)
 8001e12:	f7fe fbf9 	bl	8000608 <__aeabi_dmul>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7fe fea3 	bl	8000b68 <__aeabi_d2f>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		 std::array<float,3> f;
		 f[0]=2*(preAttitude[1]*preAttitude[3]-preAttitude[0]*preAttitude[2])-accelValue[0];
 8001e28:	4b7f      	ldr	r3, [pc, #508]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001e2a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e2e:	4b7e      	ldr	r3, [pc, #504]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001e30:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e38:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001e3a:	edd3 6a00 	vldr	s13, [r3]
 8001e3e:	4b7a      	ldr	r3, [pc, #488]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001e40:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4c:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8001e50:	2100      	movs	r1, #0
 8001e52:	4878      	ldr	r0, [pc, #480]	; (8002034 <HAL_GPIO_EXTI_Callback+0x494>)
 8001e54:	f7ff fa74 	bl	8001340 <_ZNSt5arrayIfLj3EEixEj>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	ed93 8a00 	vldr	s16, [r3]
 8001e5e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fa6b 	bl	8001340 <_ZNSt5arrayIfLj3EEixEj>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8001e70:	edc3 7a00 	vstr	s15, [r3]
		 f[1]=2*(preAttitude[0]*preAttitude[1]+preAttitude[2]*preAttitude[3]-accelValue[1]);
 8001e74:	4b6c      	ldr	r3, [pc, #432]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001e76:	ed93 7a00 	vldr	s14, [r3]
 8001e7a:	4b6b      	ldr	r3, [pc, #428]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001e7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e84:	4b68      	ldr	r3, [pc, #416]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001e86:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e8a:	4b67      	ldr	r3, [pc, #412]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001e8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e94:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001e98:	2101      	movs	r1, #1
 8001e9a:	4866      	ldr	r0, [pc, #408]	; (8002034 <HAL_GPIO_EXTI_Callback+0x494>)
 8001e9c:	f7ff fa50 	bl	8001340 <_ZNSt5arrayIfLj3EEixEj>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	edd3 7a00 	vldr	s15, [r3]
 8001ea6:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001eaa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fa45 	bl	8001340 <_ZNSt5arrayIfLj3EEixEj>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	ee78 7a08 	vadd.f32	s15, s16, s16
 8001ebc:	edc3 7a00 	vstr	s15, [r3]
		 f[2]=2*(1/2.0-std::pow(preAttitude[1],2)-std::pow(preAttitude[2],2))-accelValue[2];
 8001ec0:	4b59      	ldr	r3, [pc, #356]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001ec2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ec6:	2002      	movs	r0, #2
 8001ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ecc:	f000 fbe2 	bl	8002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ed0:	ec53 2b10 	vmov	r2, r3, d0
 8001ed4:	f04f 0000 	mov.w	r0, #0
 8001ed8:	4955      	ldr	r1, [pc, #340]	; (8002030 <HAL_GPIO_EXTI_Callback+0x490>)
 8001eda:	f7fe f9dd 	bl	8000298 <__aeabi_dsub>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4614      	mov	r4, r2
 8001ee4:	461d      	mov	r5, r3
 8001ee6:	4b50      	ldr	r3, [pc, #320]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001ee8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001eec:	2002      	movs	r0, #2
 8001eee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef2:	f000 fbcf 	bl	8002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ef6:	ec53 2b10 	vmov	r2, r3, d0
 8001efa:	4620      	mov	r0, r4
 8001efc:	4629      	mov	r1, r5
 8001efe:	f7fe f9cb 	bl	8000298 <__aeabi_dsub>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	f7fe f9c5 	bl	800029c <__adddf3>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4614      	mov	r4, r2
 8001f18:	461d      	mov	r5, r3
 8001f1a:	2102      	movs	r1, #2
 8001f1c:	4845      	ldr	r0, [pc, #276]	; (8002034 <HAL_GPIO_EXTI_Callback+0x494>)
 8001f1e:	f7ff fa0f 	bl	8001340 <_ZNSt5arrayIfLj3EEixEj>
 8001f22:	4603      	mov	r3, r0
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fb16 	bl	8000558 <__aeabi_f2d>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4620      	mov	r0, r4
 8001f32:	4629      	mov	r1, r5
 8001f34:	f7fe f9b0 	bl	8000298 <__aeabi_dsub>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4690      	mov	r8, r2
 8001f3e:	4699      	mov	r9, r3
 8001f40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f44:	2102      	movs	r1, #2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f9fa 	bl	8001340 <_ZNSt5arrayIfLj3EEixEj>
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	4640      	mov	r0, r8
 8001f50:	4649      	mov	r1, r9
 8001f52:	f7fe fe09 	bl	8000b68 <__aeabi_d2f>
 8001f56:	4603      	mov	r3, r0
 8001f58:	6023      	str	r3, [r4, #0]

		 std::array<std::array<float,3>,4> j;
				j[0]= {-2*preAttitude[2], 2*preAttitude[1],0};
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 fbb8 	bl	80026d6 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8001f66:	4601      	mov	r1, r0
 8001f68:	4b2f      	ldr	r3, [pc, #188]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001f6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f6e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001f72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f76:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001f78:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f7c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f80:	460a      	mov	r2, r1
 8001f82:	2300      	movs	r3, #0
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	6053      	str	r3, [r2, #4]
 8001f88:	6093      	str	r3, [r2, #8]
 8001f8a:	ed81 7a00 	vstr	s14, [r1]
 8001f8e:	edc1 7a01 	vstr	s15, [r1, #4]
				j[1]=  {2*preAttitude[3],2*preAttitude[0],-4*preAttitude[1]};
 8001f92:	f107 0308 	add.w	r3, r7, #8
 8001f96:	2101      	movs	r1, #1
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fb9c 	bl	80026d6 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4a21      	ldr	r2, [pc, #132]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001fa2:	edd2 7a03 	vldr	s15, [r2, #12]
 8001fa6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001faa:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001fac:	edd2 7a00 	vldr	s15, [r2]
 8001fb0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fb4:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001fb6:	edd2 7a01 	vldr	s15, [r2, #4]
 8001fba:	eeb9 6a00 	vmov.f32	s12, #144	; 0xc0800000 -4.0
 8001fbe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001fc2:	edc3 6a00 	vstr	s13, [r3]
 8001fc6:	ed83 7a01 	vstr	s14, [r3, #4]
 8001fca:	edc3 7a02 	vstr	s15, [r3, #8]
				j[2]=  {-2*preAttitude[0],2*preAttitude[3],-4*preAttitude[2]};
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fb7e 	bl	80026d6 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a12      	ldr	r2, [pc, #72]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001fde:	edd2 7a00 	vldr	s15, [r2]
 8001fe2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001fe6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001fea:	4a0f      	ldr	r2, [pc, #60]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001fec:	edd2 7a03 	vldr	s15, [r2, #12]
 8001ff0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ff4:	4a0c      	ldr	r2, [pc, #48]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 8001ff6:	edd2 7a02 	vldr	s15, [r2, #8]
 8001ffa:	eeb9 6a00 	vmov.f32	s12, #144	; 0xc0800000 -4.0
 8001ffe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002002:	edc3 6a00 	vstr	s13, [r3]
 8002006:	ed83 7a01 	vstr	s14, [r3, #4]
 800200a:	edc3 7a02 	vstr	s15, [r3, #8]
				j[3]=  {2*preAttitude[1],2*preAttitude[2],0};
 800200e:	f107 0308 	add.w	r3, r7, #8
 8002012:	2103      	movs	r1, #3
 8002014:	4618      	mov	r0, r3
 8002016:	f000 fb5e 	bl	80026d6 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 800201a:	4601      	mov	r1, r0
 800201c:	4b02      	ldr	r3, [pc, #8]	; (8002028 <HAL_GPIO_EXTI_Callback+0x488>)
 800201e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002022:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002026:	e007      	b.n	8002038 <HAL_GPIO_EXTI_Callback+0x498>
 8002028:	20000004 	.word	0x20000004
 800202c:	20000114 	.word	0x20000114
 8002030:	3fe00000 	.word	0x3fe00000
 8002034:	20000108 	.word	0x20000108
 8002038:	4b87      	ldr	r3, [pc, #540]	; (8002258 <HAL_GPIO_EXTI_Callback+0x6b8>)
 800203a:	edd3 7a02 	vldr	s15, [r3, #8]
 800203e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002042:	460a      	mov	r2, r1
 8002044:	2300      	movs	r3, #0
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	6053      	str	r3, [r2, #4]
 800204a:	6093      	str	r3, [r2, #8]
 800204c:	ed81 7a00 	vstr	s14, [r1]
 8002050:	edc1 7a01 	vstr	s15, [r1, #4]

		 quaternion qDotEpsilon={};
 8002054:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
		 for(uint8_t n=0;n<4;n++){
 8002062:	2300      	movs	r3, #0
 8002064:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002068:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800206c:	2b03      	cmp	r3, #3
 800206e:	d845      	bhi.n	80020fc <HAL_GPIO_EXTI_Callback+0x55c>
			 for(uint8_t m=0;m<3;m++){
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8002076:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800207a:	2b02      	cmp	r3, #2
 800207c:	d838      	bhi.n	80020f0 <HAL_GPIO_EXTI_Callback+0x550>
				 qDotEpsilon[n]+= j[n][m]*f[m];
 800207e:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8002082:	f107 0308 	add.w	r3, r7, #8
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fb24 	bl	80026d6 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 800208e:	4602      	mov	r2, r0
 8002090:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002094:	4619      	mov	r1, r3
 8002096:	4610      	mov	r0, r2
 8002098:	f7ff f952 	bl	8001340 <_ZNSt5arrayIfLj3EEixEj>
 800209c:	4603      	mov	r3, r0
 800209e:	ed93 8a00 	vldr	s16, [r3]
 80020a2:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 80020a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff f947 	bl	8001340 <_ZNSt5arrayIfLj3EEixEj>
 80020b2:	4603      	mov	r3, r0
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ee28 7a27 	vmul.f32	s14, s16, s15
 80020bc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80020c6:	4413      	add	r3, r2
 80020c8:	3bb4      	subs	r3, #180	; 0xb4
 80020ca:	edd3 7a00 	vldr	s15, [r3]
 80020ce:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80020d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80020dc:	4413      	add	r3, r2
 80020de:	3bb4      	subs	r3, #180	; 0xb4
 80020e0:	edc3 7a00 	vstr	s15, [r3]
			 for(uint8_t m=0;m<3;m++){
 80020e4:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80020e8:	3301      	adds	r3, #1
 80020ea:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80020ee:	e7c2      	b.n	8002076 <HAL_GPIO_EXTI_Callback+0x4d6>
		 for(uint8_t n=0;n<4;n++){
 80020f0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80020f4:	3301      	adds	r3, #1
 80020f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80020fa:	e7b5      	b.n	8002068 <HAL_GPIO_EXTI_Callback+0x4c8>
			 }
		 }

		 float fSize=std::sqrt(std::pow(qDotEpsilon[0],2)+std::pow(qDotEpsilon[1],2)+std::pow(qDotEpsilon[2],2)+std::pow(qDotEpsilon[3],2));
 80020fc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002100:	2002      	movs	r0, #2
 8002102:	eeb0 0a67 	vmov.f32	s0, s15
 8002106:	f000 fac5 	bl	8002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800210a:	ec55 4b10 	vmov	r4, r5, d0
 800210e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002112:	2002      	movs	r0, #2
 8002114:	eeb0 0a67 	vmov.f32	s0, s15
 8002118:	f000 fabc 	bl	8002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800211c:	ec53 2b10 	vmov	r2, r3, d0
 8002120:	4620      	mov	r0, r4
 8002122:	4629      	mov	r1, r5
 8002124:	f7fe f8ba 	bl	800029c <__adddf3>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4614      	mov	r4, r2
 800212e:	461d      	mov	r5, r3
 8002130:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002134:	2002      	movs	r0, #2
 8002136:	eeb0 0a67 	vmov.f32	s0, s15
 800213a:	f000 faab 	bl	8002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800213e:	ec53 2b10 	vmov	r2, r3, d0
 8002142:	4620      	mov	r0, r4
 8002144:	4629      	mov	r1, r5
 8002146:	f7fe f8a9 	bl	800029c <__adddf3>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4614      	mov	r4, r2
 8002150:	461d      	mov	r5, r3
 8002152:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002156:	2002      	movs	r0, #2
 8002158:	eeb0 0a67 	vmov.f32	s0, s15
 800215c:	f000 fa9a 	bl	8002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002160:	ec53 2b10 	vmov	r2, r3, d0
 8002164:	4620      	mov	r0, r4
 8002166:	4629      	mov	r1, r5
 8002168:	f7fe f898 	bl	800029c <__adddf3>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	ec43 2b17 	vmov	d7, r2, r3
 8002174:	eeb0 0a47 	vmov.f32	s0, s14
 8002178:	eef0 0a67 	vmov.f32	s1, s15
 800217c:	f003 fde8 	bl	8005d50 <sqrt>
 8002180:	ec53 2b10 	vmov	r2, r3, d0
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fcee 	bl	8000b68 <__aeabi_d2f>
 800218c:	4603      	mov	r3, r0
 800218e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110



		 quaternion qDot;
		 float beta=std::sqrt(3/4.0)*M_PI*(5.0/180.0);
 8002192:	4b32      	ldr	r3, [pc, #200]	; (800225c <HAL_GPIO_EXTI_Callback+0x6bc>)
 8002194:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
//		 float beta=0;
		 for(uint8_t n=0;n<4;n++){
 8002198:	2300      	movs	r3, #0
 800219a:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 800219e:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d862      	bhi.n	800226c <HAL_GPIO_EXTI_Callback+0x6cc>
		 qDot[n]=qDotOmega[n]-beta*qDotEpsilon[n]/fSize;
 80021a6:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80021b0:	4413      	add	r3, r2
 80021b2:	3b98      	subs	r3, #152	; 0x98
 80021b4:	ed93 7a00 	vldr	s14, [r3]
 80021b8:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80021c2:	4413      	add	r3, r2
 80021c4:	3bb4      	subs	r3, #180	; 0xb4
 80021c6:	edd3 6a00 	vldr	s13, [r3]
 80021ca:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 80021ce:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80021d2:	edd7 6a44 	vldr	s13, [r7, #272]	; 0x110
 80021d6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80021da:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80021de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80021e8:	4413      	add	r3, r2
 80021ea:	3bc4      	subs	r3, #196	; 0xc4
 80021ec:	edc3 7a00 	vstr	s15, [r3]
		 preAttitude[n]=attitude[n];
 80021f0:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 80021f4:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80021f8:	4919      	ldr	r1, [pc, #100]	; (8002260 <HAL_GPIO_EXTI_Callback+0x6c0>)
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	440a      	add	r2, r1
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	4915      	ldr	r1, [pc, #84]	; (8002258 <HAL_GPIO_EXTI_Callback+0x6b8>)
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	601a      	str	r2, [r3, #0]
		 attitude[n]=preAttitude[n]+qDot[n]*stepTime/1000;
 8002208:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800220c:	4a12      	ldr	r2, [pc, #72]	; (8002258 <HAL_GPIO_EXTI_Callback+0x6b8>)
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	ed93 7a00 	vldr	s14, [r3]
 8002216:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002220:	4413      	add	r3, r2
 8002222:	3bc4      	subs	r3, #196	; 0xc4
 8002224:	edd3 6a00 	vldr	s13, [r3]
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <HAL_GPIO_EXTI_Callback+0x6c4>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002232:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8002268 <HAL_GPIO_EXTI_Callback+0x6c8>
 8002236:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800223a:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800223e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002242:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_GPIO_EXTI_Callback+0x6c0>)
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	edc3 7a00 	vstr	s15, [r3]
		 for(uint8_t n=0;n<4;n++){
 800224c:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8002250:	3301      	adds	r3, #1
 8002252:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8002256:	e7a2      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x5fe>
 8002258:	20000004 	.word	0x20000004
 800225c:	3d9ac70d 	.word	0x3d9ac70d
 8002260:	20000014 	.word	0x20000014
 8002264:	200000f0 	.word	0x200000f0
 8002268:	447a0000 	.word	0x447a0000
		 }

		 roll=std::atan2(2*(attitude[0]*attitude[1]+attitude[2]*attitude[3]) ,std::pow(attitude[0],2)-std::pow(attitude[1],2)-std::pow(attitude[2],2)+std::pow(attitude[3],2));
 800226c:	4be0      	ldr	r3, [pc, #896]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 800226e:	ed93 7a00 	vldr	s14, [r3]
 8002272:	4bdf      	ldr	r3, [pc, #892]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 8002274:	edd3 7a01 	vldr	s15, [r3, #4]
 8002278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800227c:	4bdc      	ldr	r3, [pc, #880]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 800227e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002282:	4bdb      	ldr	r3, [pc, #876]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 8002284:	edd3 7a03 	vldr	s15, [r3, #12]
 8002288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800228c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002290:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8002294:	4bd6      	ldr	r3, [pc, #856]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	2002      	movs	r0, #2
 800229c:	eeb0 0a67 	vmov.f32	s0, s15
 80022a0:	f000 f9f8 	bl	8002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80022a4:	ec55 4b10 	vmov	r4, r5, d0
 80022a8:	4bd1      	ldr	r3, [pc, #836]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 80022aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80022ae:	2002      	movs	r0, #2
 80022b0:	eeb0 0a67 	vmov.f32	s0, s15
 80022b4:	f000 f9ee 	bl	8002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80022b8:	ec53 2b10 	vmov	r2, r3, d0
 80022bc:	4620      	mov	r0, r4
 80022be:	4629      	mov	r1, r5
 80022c0:	f7fd ffea 	bl	8000298 <__aeabi_dsub>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4614      	mov	r4, r2
 80022ca:	461d      	mov	r5, r3
 80022cc:	4bc8      	ldr	r3, [pc, #800]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 80022ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80022d2:	2002      	movs	r0, #2
 80022d4:	eeb0 0a67 	vmov.f32	s0, s15
 80022d8:	f000 f9dc 	bl	8002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80022dc:	ec53 2b10 	vmov	r2, r3, d0
 80022e0:	4620      	mov	r0, r4
 80022e2:	4629      	mov	r1, r5
 80022e4:	f7fd ffd8 	bl	8000298 <__aeabi_dsub>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4614      	mov	r4, r2
 80022ee:	461d      	mov	r5, r3
 80022f0:	4bbf      	ldr	r3, [pc, #764]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 80022f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80022f6:	2002      	movs	r0, #2
 80022f8:	eeb0 0a67 	vmov.f32	s0, s15
 80022fc:	f000 f9ca 	bl	8002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002300:	ec53 2b10 	vmov	r2, r3, d0
 8002304:	4620      	mov	r0, r4
 8002306:	4629      	mov	r1, r5
 8002308:	f7fd ffc8 	bl	800029c <__adddf3>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	ec43 2b17 	vmov	d7, r2, r3
 8002314:	eeb0 1a47 	vmov.f32	s2, s14
 8002318:	eef0 1a67 	vmov.f32	s3, s15
 800231c:	eeb0 0a48 	vmov.f32	s0, s16
 8002320:	f000 f9e8 	bl	80026f4 <_ZSt5atan2IfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002324:	ec53 2b10 	vmov	r2, r3, d0
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	f7fe fc1c 	bl	8000b68 <__aeabi_d2f>
 8002330:	4603      	mov	r3, r0
 8002332:	4ab0      	ldr	r2, [pc, #704]	; (80025f4 <HAL_GPIO_EXTI_Callback+0xa54>)
 8002334:	6013      	str	r3, [r2, #0]

		 pitch=std::asin(2*(attitude[0]*attitude[2]-attitude[1]*attitude[3]));
 8002336:	4bae      	ldr	r3, [pc, #696]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 8002338:	ed93 7a00 	vldr	s14, [r3]
 800233c:	4bac      	ldr	r3, [pc, #688]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 800233e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002346:	4baa      	ldr	r3, [pc, #680]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 8002348:	edd3 6a01 	vldr	s13, [r3, #4]
 800234c:	4ba8      	ldr	r3, [pc, #672]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 800234e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800235e:	eeb0 0a67 	vmov.f32	s0, s15
 8002362:	f7ff fbb5 	bl	8001ad0 <_ZSt4asinf>
 8002366:	eef0 7a40 	vmov.f32	s15, s0
 800236a:	4ba3      	ldr	r3, [pc, #652]	; (80025f8 <HAL_GPIO_EXTI_Callback+0xa58>)
 800236c:	edc3 7a00 	vstr	s15, [r3]

		 yaw=std::atan2(2*(attitude[0]*attitude[3]+attitude[1]*attitude[2])
 8002370:	4b9f      	ldr	r3, [pc, #636]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 8002372:	ed93 7a00 	vldr	s14, [r3]
 8002376:	4b9e      	ldr	r3, [pc, #632]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 8002378:	edd3 7a03 	vldr	s15, [r3, #12]
 800237c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002380:	4b9b      	ldr	r3, [pc, #620]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 8002382:	edd3 6a01 	vldr	s13, [r3, #4]
 8002386:	4b9a      	ldr	r3, [pc, #616]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 8002388:	edd3 7a02 	vldr	s15, [r3, #8]
 800238c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002394:	ee37 8aa7 	vadd.f32	s16, s15, s15
			 ,std::pow(attitude[0],2)+std::pow(attitude[1],2)-std::pow(attitude[2],2)-std::pow(attitude[3],2));
 8002398:	4b95      	ldr	r3, [pc, #596]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	2002      	movs	r0, #2
 80023a0:	eeb0 0a67 	vmov.f32	s0, s15
 80023a4:	f000 f976 	bl	8002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80023a8:	ec55 4b10 	vmov	r4, r5, d0
 80023ac:	4b90      	ldr	r3, [pc, #576]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 80023ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80023b2:	2002      	movs	r0, #2
 80023b4:	eeb0 0a67 	vmov.f32	s0, s15
 80023b8:	f000 f96c 	bl	8002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80023bc:	ec53 2b10 	vmov	r2, r3, d0
 80023c0:	4620      	mov	r0, r4
 80023c2:	4629      	mov	r1, r5
 80023c4:	f7fd ff6a 	bl	800029c <__adddf3>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4614      	mov	r4, r2
 80023ce:	461d      	mov	r5, r3
 80023d0:	4b87      	ldr	r3, [pc, #540]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 80023d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80023d6:	2002      	movs	r0, #2
 80023d8:	eeb0 0a67 	vmov.f32	s0, s15
 80023dc:	f000 f95a 	bl	8002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80023e0:	ec53 2b10 	vmov	r2, r3, d0
 80023e4:	4620      	mov	r0, r4
 80023e6:	4629      	mov	r1, r5
 80023e8:	f7fd ff56 	bl	8000298 <__aeabi_dsub>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4614      	mov	r4, r2
 80023f2:	461d      	mov	r5, r3
 80023f4:	4b7e      	ldr	r3, [pc, #504]	; (80025f0 <HAL_GPIO_EXTI_Callback+0xa50>)
 80023f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80023fa:	2002      	movs	r0, #2
 80023fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002400:	f000 f948 	bl	8002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002404:	ec53 2b10 	vmov	r2, r3, d0
		 yaw=std::atan2(2*(attitude[0]*attitude[3]+attitude[1]*attitude[2])
 8002408:	4620      	mov	r0, r4
 800240a:	4629      	mov	r1, r5
 800240c:	f7fd ff44 	bl	8000298 <__aeabi_dsub>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	ec43 2b17 	vmov	d7, r2, r3
 8002418:	eeb0 1a47 	vmov.f32	s2, s14
 800241c:	eef0 1a67 	vmov.f32	s3, s15
 8002420:	eeb0 0a48 	vmov.f32	s0, s16
 8002424:	f000 f966 	bl	80026f4 <_ZSt5atan2IfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002428:	ec53 2b10 	vmov	r2, r3, d0
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f7fe fb9a 	bl	8000b68 <__aeabi_d2f>
 8002434:	4603      	mov	r3, r0
 8002436:	4a71      	ldr	r2, [pc, #452]	; (80025fc <HAL_GPIO_EXTI_Callback+0xa5c>)
 8002438:	6013      	str	r3, [r2, #0]




//		int16_t num = ((int16_t)(anglez*10))/10;
		int16_t num = stepTime;
 800243a:	4b71      	ldr	r3, [pc, #452]	; (8002600 <HAL_GPIO_EXTI_Callback+0xa60>)
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002444:	ee17 3a90 	vmov	r3, s15
 8002448:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
		std::string str;
 800244c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002450:	4618      	mov	r0, r3
 8002452:	f003 fa6f 	bl	8005934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		str = std::to_string(num);
 8002456:	f9b7 210a 	ldrsh.w	r2, [r7, #266]	; 0x10a
 800245a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fab5 	bl	80019d0 <_ZNSt7__cxx119to_stringEi>
 8002466:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800246a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f003 fa86 	bl	8005982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8002476:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800247a:	4618      	mov	r0, r3
 800247c:	f003 fa7b 	bl	8005976 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		num = (uint16_t)(anglez*1000)%1000;
 8002480:	4b60      	ldr	r3, [pc, #384]	; (8002604 <HAL_GPIO_EXTI_Callback+0xa64>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002608 <HAL_GPIO_EXTI_Callback+0xa68>
 800248a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002492:	ee17 3a90 	vmov	r3, s15
 8002496:	b29b      	uxth	r3, r3
 8002498:	4a5c      	ldr	r2, [pc, #368]	; (800260c <HAL_GPIO_EXTI_Callback+0xa6c>)
 800249a:	fba2 1203 	umull	r1, r2, r2, r3
 800249e:	0992      	lsrs	r2, r2, #6
 80024a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024a4:	fb01 f202 	mul.w	r2, r1, r2
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
		str += "."+std::to_string(num)+"\r\n";
 80024b0:	f9b7 210a 	ldrsh.w	r2, [r7, #266]	; 0x10a
 80024b4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fa88 	bl	80019d0 <_ZNSt7__cxx119to_stringEi>
 80024c0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80024c4:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80024c8:	4951      	ldr	r1, [pc, #324]	; (8002610 <HAL_GPIO_EXTI_Callback+0xa70>)
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f92f 	bl	800272e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80024d0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80024d4:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80024d8:	4a4e      	ldr	r2, [pc, #312]	; (8002614 <HAL_GPIO_EXTI_Callback+0xa74>)
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f93f 	bl	800275e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80024e0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fb42 	bl	8005b74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 80024f0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 fa3e 	bl	8005976 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80024fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 fa39 	bl	8005976 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002504:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002508:	4618      	mov	r0, r3
 800250a:	f003 fa34 	bl	8005976 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		HAL_UART_Transmit(&huart2, (uint8_t *)str.c_str(), str.size(), 100);
 800250e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fb4c 	bl	8005bb0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002518:	4604      	mov	r4, r0
 800251a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fa57 	bl	80059d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8002524:	4603      	mov	r3, r0
 8002526:	b29a      	uxth	r2, r3
 8002528:	2364      	movs	r3, #100	; 0x64
 800252a:	4621      	mov	r1, r4
 800252c:	483a      	ldr	r0, [pc, #232]	; (8002618 <HAL_GPIO_EXTI_Callback+0xa78>)
 800252e:	f002 fd56 	bl	8004fde <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002532:	2120      	movs	r1, #32
 8002534:	4839      	ldr	r0, [pc, #228]	; (800261c <HAL_GPIO_EXTI_Callback+0xa7c>)
 8002536:	f000 fda4 	bl	8003082 <HAL_GPIO_TogglePin>
		uint8_t n=0;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		n=0;
 8002540:	2300      	movs	r3, #0
 8002542:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
//		HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, 0x1A, 1, &n, 1, 100);
		HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, 0x1a, 1, &n, 1, 100);
 8002546:	2364      	movs	r3, #100	; 0x64
 8002548:	9302      	str	r3, [sp, #8]
 800254a:	2301      	movs	r3, #1
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2301      	movs	r3, #1
 8002556:	221a      	movs	r2, #26
 8002558:	21d0      	movs	r1, #208	; 0xd0
 800255a:	4831      	ldr	r0, [pc, #196]	; (8002620 <HAL_GPIO_EXTI_Callback+0xa80>)
 800255c:	f001 f802 	bl	8003564 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, 0x11, 1, &n, 1, 100);
 8002560:	2364      	movs	r3, #100	; 0x64
 8002562:	9302      	str	r3, [sp, #8]
 8002564:	2301      	movs	r3, #1
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2301      	movs	r3, #1
 8002570:	2211      	movs	r2, #17
 8002572:	21d0      	movs	r1, #208	; 0xd0
 8002574:	482a      	ldr	r0, [pc, #168]	; (8002620 <HAL_GPIO_EXTI_Callback+0xa80>)
 8002576:	f000 fff5 	bl	8003564 <HAL_I2C_Mem_Read>
				str = std::to_string(n);
 800257a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800257e:	461a      	mov	r2, r3
 8002580:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fa22 	bl	80019d0 <_ZNSt7__cxx119to_stringEi>
 800258c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002590:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f003 f9f3 	bl	8005982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800259c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 f9e8 	bl	8005976 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				str += "\r\n";
 80025a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025aa:	491a      	ldr	r1, [pc, #104]	; (8002614 <HAL_GPIO_EXTI_Callback+0xa74>)
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 fafb 	bl	8005ba8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
				HAL_UART_Transmit(&huart2, (uint8_t *)str.c_str(), str.size(), 100);
 80025b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025b6:	4618      	mov	r0, r3
 80025b8:	f003 fafa 	bl	8005bb0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80025bc:	4604      	mov	r4, r0
 80025be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 fa05 	bl	80059d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80025c8:	4603      	mov	r3, r0
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	2364      	movs	r3, #100	; 0x64
 80025ce:	4621      	mov	r1, r4
 80025d0:	4811      	ldr	r0, [pc, #68]	; (8002618 <HAL_GPIO_EXTI_Callback+0xa78>)
 80025d2:	f002 fd04 	bl	8004fde <HAL_UART_Transmit>
		std::string str;
 80025d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 f9cb 	bl	8005976 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 80025e0:	bf00      	nop
 80025e2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80025e6:	46bd      	mov	sp, r7
 80025e8:	ecbd 8b02 	vpop	{d8}
 80025ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025f0:	20000014 	.word	0x20000014
 80025f4:	20000120 	.word	0x20000120
 80025f8:	20000124 	.word	0x20000124
 80025fc:	20000128 	.word	0x20000128
 8002600:	200000f0 	.word	0x200000f0
 8002604:	200000e0 	.word	0x200000e0
 8002608:	447a0000 	.word	0x447a0000
 800260c:	10624dd3 	.word	0x10624dd3
 8002610:	08007cec 	.word	0x08007cec
 8002614:	08007cf0 	.word	0x08007cf0
 8002618:	200001d4 	.word	0x200001d4
 800261c:	40020000 	.word	0x40020000
 8002620:	20000138 	.word	0x20000138

08002624 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8002624:	b408      	push	{r3}
 8002626:	b590      	push	{r4, r7, lr}
 8002628:	b088      	sub	sp, #32
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3307      	adds	r3, #7
 8002636:	08db      	lsrs	r3, r3, #3
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	ebad 0d03 	sub.w	sp, sp, r3
 800263e:	466b      	mov	r3, sp
 8002640:	3307      	adds	r3, #7
 8002642:	08db      	lsrs	r3, r3, #3
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8002648:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800264c:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 800264e:	68bc      	ldr	r4, [r7, #8]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	69f8      	ldr	r0, [r7, #28]
 8002658:	47a0      	blx	r4
 800265a:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	18d4      	adds	r4, r2, r3
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	4618      	mov	r0, r3
 8002668:	f002 fff2 	bl	8005650 <_ZNSaIcEC1Ev>
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	4622      	mov	r2, r4
 8002672:	69f9      	ldr	r1, [r7, #28]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f889 	bl	800278c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4618      	mov	r0, r3
 8002680:	f002 ffe7 	bl	8005652 <_ZNSaIcED1Ev>
 8002684:	bf00      	nop
    }
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002690:	b001      	add	sp, #4
 8002692:	4770      	bx	lr

08002694 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8002694:	b5b0      	push	{r4, r5, r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	ed87 0a01 	vstr	s0, [r7, #4]
 800269e:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7fd ff59 	bl	8000558 <__aeabi_f2d>
 80026a6:	4604      	mov	r4, r0
 80026a8:	460d      	mov	r5, r1
 80026aa:	6838      	ldr	r0, [r7, #0]
 80026ac:	f7fd ff42 	bl	8000534 <__aeabi_i2d>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	ec43 2b11 	vmov	d1, r2, r3
 80026b8:	ec45 4b10 	vmov	d0, r4, r5
 80026bc:	f003 fa9a 	bl	8005bf4 <pow>
 80026c0:	eeb0 7a40 	vmov.f32	s14, s0
 80026c4:	eef0 7a60 	vmov.f32	s15, s1
    }
 80026c8:	eeb0 0a47 	vmov.f32	s0, s14
 80026cc:	eef0 0a67 	vmov.f32	s1, s15
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bdb0      	pop	{r4, r5, r7, pc}

080026d6 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>:
      operator[](size_type __n) noexcept
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6839      	ldr	r1, [r7, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f86c 	bl	80027c2 <_ZNSt14__array_traitsISt5arrayIfLj3EELj4EE6_S_refERA4_KS1_j>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_ZSt5atan2IfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80026fe:	ed87 1b00 	vstr	d1, [r7]
      return atan2(__type(__y), __type(__x));
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f7fd ff28 	bl	8000558 <__aeabi_f2d>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	ed97 1b00 	vldr	d1, [r7]
 8002710:	ec43 2b10 	vmov	d0, r2, r3
 8002714:	f003 fa6c 	bl	8005bf0 <atan2>
 8002718:	eeb0 7a40 	vmov.f32	s14, s0
 800271c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002720:	eeb0 0a47 	vmov.f32	s0, s14
 8002724:	eef0 0a67 	vmov.f32	s1, s15
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	2100      	movs	r1, #0
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f003 f9e0 	bl	8005b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8002744:	4603      	mov	r3, r0
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f84d 	bl	80027e6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800274c:	4603      	mov	r3, r0
 800274e:	4619      	mov	r1, r3
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f003 f8f6 	bl	8005942 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	68b8      	ldr	r0, [r7, #8]
 800276e:	f003 fa05 	bl	8005b7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8002772:	4603      	mov	r3, r0
 8002774:	4618      	mov	r0, r3
 8002776:	f000 f836 	bl	80027e6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800277a:	4603      	mov	r3, r0
 800277c:	4619      	mov	r1, r3
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f003 f8df 	bl	8005942 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800279a:	68fc      	ldr	r4, [r7, #12]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f003 f81a 	bl	80057d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80027a2:	4603      	mov	r3, r0
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	4619      	mov	r1, r3
 80027a8:	4620      	mov	r0, r4
 80027aa:	f003 fa03 	bl	8005bb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f822 	bl	80027fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd90      	pop	{r4, r7, pc}

080027c2 <_ZNSt14__array_traitsISt5arrayIfLj3EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f804 	bl	800281a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8002812:	bf00      	nop
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800281a:	b590      	push	{r4, r7, lr}
 800281c:	b087      	sub	sp, #28
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8002828:	4623      	mov	r3, r4
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f804 	bl	800283c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	bd90      	pop	{r4, r7, pc}

0800283c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800284a:	68b8      	ldr	r0, [r7, #8]
 800284c:	f000 f83e 	bl	80028cc <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	d001      	beq.n	8002862 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8002868:	4817      	ldr	r0, [pc, #92]	; (80028c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 800286a:	f002 fef6 	bl	800565a <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	68b8      	ldr	r0, [r7, #8]
 8002872:	f000 f83b 	bl	80028ec <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8002876:	4603      	mov	r3, r0
 8002878:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b0f      	cmp	r3, #15
 800287e:	d910      	bls.n	80028a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	2200      	movs	r2, #0
 8002886:	4619      	mov	r1, r3
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f002 ffad 	bl	80057e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800288e:	4603      	mov	r3, r0
 8002890:	4619      	mov	r1, r3
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f002 ff9b 	bl	80057ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	4619      	mov	r1, r3
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f002 ff9c 	bl	80057da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f002 ff95 	bl	80057d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80028a8:	4603      	mov	r3, r0
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 ffff 	bl	80058b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	4619      	mov	r1, r3
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f002 ff90 	bl	80057de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80028be:	bf00      	nop
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	08007cf4 	.word	0x08007cf4

080028cc <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bf0c      	ite	eq
 80028da:	2301      	moveq	r3, #1
 80028dc:	2300      	movne	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80028ec:	b5b0      	push	{r4, r5, r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80028f6:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f80a 	bl	8002914 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8002900:	462a      	mov	r2, r5
 8002902:	6839      	ldr	r1, [r7, #0]
 8002904:	4620      	mov	r0, r4
 8002906:	f000 f80f 	bl	8002928 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800290a:	4603      	mov	r3, r0
    }
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bdb0      	pop	{r4, r5, r7, pc}

08002914 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
    }
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <_Z41__static_initialization_and_destruction_0ii>:
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10e      	bne.n	8002976 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800295e:	4293      	cmp	r3, r2
 8002960:	d109      	bne.n	8002976 <_Z41__static_initialization_and_destruction_0ii+0x2e>
ICM20948 icm20948(&hi2c1,ICM20948::Address::LOW);
 8002962:	2268      	movs	r2, #104	; 0x68
 8002964:	4906      	ldr	r1, [pc, #24]	; (8002980 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002966:	4807      	ldr	r0, [pc, #28]	; (8002984 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002968:	f7ff f86c 	bl	8001a44 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE>
TIM_StopWatch stopwatch(&htim1);
 800296c:	4a06      	ldr	r2, [pc, #24]	; (8002988 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800296e:	4907      	ldr	r1, [pc, #28]	; (800298c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002970:	4807      	ldr	r0, [pc, #28]	; (8002990 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002972:	f7ff f891 	bl	8001a98 <_ZN13TIM_StopWatchC1EP17TIM_HandleTypeDefm>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000138 	.word	0x20000138
 8002984:	200000b0 	.word	0x200000b0
 8002988:	000f4240 	.word	0x000f4240
 800298c:	2000018c 	.word	0x2000018c
 8002990:	200000f4 	.word	0x200000f4

08002994 <_GLOBAL__sub_I_icm20948>:
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
 8002998:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800299c:	2001      	movs	r0, #1
 800299e:	f7ff ffd3 	bl	8002948 <_Z41__static_initialization_and_destruction_0ii>
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029a8:	480d      	ldr	r0, [pc, #52]	; (80029e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029aa:	490e      	ldr	r1, [pc, #56]	; (80029e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029ac:	4a0e      	ldr	r2, [pc, #56]	; (80029e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029b0:	e002      	b.n	80029b8 <LoopCopyDataInit>

080029b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029b6:	3304      	adds	r3, #4

080029b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029bc:	d3f9      	bcc.n	80029b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029be:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029c0:	4c0b      	ldr	r4, [pc, #44]	; (80029f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029c4:	e001      	b.n	80029ca <LoopFillZerobss>

080029c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c8:	3204      	adds	r2, #4

080029ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029cc:	d3fb      	bcc.n	80029c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029ce:	f7fe ff09 	bl	80017e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029d2:	f004 fc9b 	bl	800730c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029d6:	f7fe fdcb 	bl	8001570 <main>
  bx  lr    
 80029da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029e4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80029e8:	08007f38 	.word	0x08007f38
  ldr r2, =_sbss
 80029ec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80029f0:	2000022c 	.word	0x2000022c

080029f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029f4:	e7fe      	b.n	80029f4 <ADC_IRQHandler>
	...

080029f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029fc:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <HAL_Init+0x40>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a0d      	ldr	r2, [pc, #52]	; (8002a38 <HAL_Init+0x40>)
 8002a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_Init+0x40>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <HAL_Init+0x40>)
 8002a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <HAL_Init+0x40>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <HAL_Init+0x40>)
 8002a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a20:	2003      	movs	r0, #3
 8002a22:	f000 f94f 	bl	8002cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f000 f808 	bl	8002a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a2c:	f7fe fe24 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023c00 	.word	0x40023c00

08002a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a44:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_InitTick+0x54>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_InitTick+0x58>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f967 	bl	8002d2e <HAL_SYSTICK_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00e      	b.n	8002a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b0f      	cmp	r3, #15
 8002a6e:	d80a      	bhi.n	8002a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a70:	2200      	movs	r2, #0
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295
 8002a78:	f000 f92f 	bl	8002cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a7c:	4a06      	ldr	r2, [pc, #24]	; (8002a98 <HAL_InitTick+0x5c>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e000      	b.n	8002a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000000 	.word	0x20000000
 8002a94:	20000028 	.word	0x20000028
 8002a98:	20000024 	.word	0x20000024

08002a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_IncTick+0x20>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_IncTick+0x24>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <HAL_IncTick+0x24>)
 8002aae:	6013      	str	r3, [r2, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000028 	.word	0x20000028
 8002ac0:	20000218 	.word	0x20000218

08002ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <HAL_GetTick+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000218 	.word	0x20000218

08002adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ae4:	f7ff ffee 	bl	8002ac4 <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d005      	beq.n	8002b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_Delay+0x44>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b02:	bf00      	nop
 8002b04:	f7ff ffde 	bl	8002ac4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d8f7      	bhi.n	8002b04 <HAL_Delay+0x28>
  {
  }
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000028 	.word	0x20000028

08002b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b40:	4013      	ands	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b56:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	60d3      	str	r3, [r2, #12]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <__NVIC_GetPriorityGrouping+0x18>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	f003 0307 	and.w	r3, r3, #7
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0b      	blt.n	8002bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <__NVIC_EnableIRQ+0x38>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	db0a      	blt.n	8002bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	490c      	ldr	r1, [pc, #48]	; (8002c10 <__NVIC_SetPriority+0x4c>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	0112      	lsls	r2, r2, #4
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	440b      	add	r3, r1
 8002be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bec:	e00a      	b.n	8002c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4908      	ldr	r1, [pc, #32]	; (8002c14 <__NVIC_SetPriority+0x50>)
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	3b04      	subs	r3, #4
 8002bfc:	0112      	lsls	r2, r2, #4
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	440b      	add	r3, r1
 8002c02:	761a      	strb	r2, [r3, #24]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f1c3 0307 	rsb	r3, r3, #7
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	bf28      	it	cs
 8002c36:	2304      	movcs	r3, #4
 8002c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d902      	bls.n	8002c48 <NVIC_EncodePriority+0x30>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3b03      	subs	r3, #3
 8002c46:	e000      	b.n	8002c4a <NVIC_EncodePriority+0x32>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c60:	f04f 31ff 	mov.w	r1, #4294967295
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43d9      	mvns	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c70:	4313      	orrs	r3, r2
         );
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	; 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c90:	d301      	bcc.n	8002c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00f      	b.n	8002cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <SysTick_Config+0x40>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9e:	210f      	movs	r1, #15
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f7ff ff8e 	bl	8002bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <SysTick_Config+0x40>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cae:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <SysTick_Config+0x40>)
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	e000e010 	.word	0xe000e010

08002cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff29 	bl	8002b24 <__NVIC_SetPriorityGrouping>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cec:	f7ff ff3e 	bl	8002b6c <__NVIC_GetPriorityGrouping>
 8002cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	6978      	ldr	r0, [r7, #20]
 8002cf8:	f7ff ff8e 	bl	8002c18 <NVIC_EncodePriority>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff5d 	bl	8002bc4 <__NVIC_SetPriority>
}
 8002d0a:	bf00      	nop
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff31 	bl	8002b88 <__NVIC_EnableIRQ>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ffa2 	bl	8002c80 <SysTick_Config>
 8002d3c:	4603      	mov	r3, r0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e159      	b.n	8003018 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	f040 8148 	bne.w	8003012 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d005      	beq.n	8002d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d130      	bne.n	8002dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 0201 	and.w	r2, r3, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d017      	beq.n	8002e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d123      	bne.n	8002e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	08da      	lsrs	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3208      	adds	r2, #8
 8002e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	08da      	lsrs	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3208      	adds	r2, #8
 8002e86:	69b9      	ldr	r1, [r7, #24]
 8002e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	2203      	movs	r2, #3
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0203 	and.w	r2, r3, #3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80a2 	beq.w	8003012 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b57      	ldr	r3, [pc, #348]	; (8003030 <HAL_GPIO_Init+0x2e8>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	4a56      	ldr	r2, [pc, #344]	; (8003030 <HAL_GPIO_Init+0x2e8>)
 8002ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002edc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ede:	4b54      	ldr	r3, [pc, #336]	; (8003030 <HAL_GPIO_Init+0x2e8>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eea:	4a52      	ldr	r2, [pc, #328]	; (8003034 <HAL_GPIO_Init+0x2ec>)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	220f      	movs	r2, #15
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a49      	ldr	r2, [pc, #292]	; (8003038 <HAL_GPIO_Init+0x2f0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d019      	beq.n	8002f4a <HAL_GPIO_Init+0x202>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a48      	ldr	r2, [pc, #288]	; (800303c <HAL_GPIO_Init+0x2f4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_GPIO_Init+0x1fe>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a47      	ldr	r2, [pc, #284]	; (8003040 <HAL_GPIO_Init+0x2f8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00d      	beq.n	8002f42 <HAL_GPIO_Init+0x1fa>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a46      	ldr	r2, [pc, #280]	; (8003044 <HAL_GPIO_Init+0x2fc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <HAL_GPIO_Init+0x1f6>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a45      	ldr	r2, [pc, #276]	; (8003048 <HAL_GPIO_Init+0x300>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <HAL_GPIO_Init+0x1f2>
 8002f36:	2304      	movs	r3, #4
 8002f38:	e008      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f3a:	2307      	movs	r3, #7
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e004      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	f002 0203 	and.w	r2, r2, #3
 8002f52:	0092      	lsls	r2, r2, #2
 8002f54:	4093      	lsls	r3, r2
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f5c:	4935      	ldr	r1, [pc, #212]	; (8003034 <HAL_GPIO_Init+0x2ec>)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6a:	4b38      	ldr	r3, [pc, #224]	; (800304c <HAL_GPIO_Init+0x304>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f8e:	4a2f      	ldr	r2, [pc, #188]	; (800304c <HAL_GPIO_Init+0x304>)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f94:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_GPIO_Init+0x304>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb8:	4a24      	ldr	r2, [pc, #144]	; (800304c <HAL_GPIO_Init+0x304>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fbe:	4b23      	ldr	r3, [pc, #140]	; (800304c <HAL_GPIO_Init+0x304>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fe2:	4a1a      	ldr	r2, [pc, #104]	; (800304c <HAL_GPIO_Init+0x304>)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe8:	4b18      	ldr	r3, [pc, #96]	; (800304c <HAL_GPIO_Init+0x304>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800300c:	4a0f      	ldr	r2, [pc, #60]	; (800304c <HAL_GPIO_Init+0x304>)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3301      	adds	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b0f      	cmp	r3, #15
 800301c:	f67f aea2 	bls.w	8002d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3724      	adds	r7, #36	; 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	40013800 	.word	0x40013800
 8003038:	40020000 	.word	0x40020000
 800303c:	40020400 	.word	0x40020400
 8003040:	40020800 	.word	0x40020800
 8003044:	40020c00 	.word	0x40020c00
 8003048:	40021000 	.word	0x40021000
 800304c:	40013c00 	.word	0x40013c00

08003050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
 800305c:	4613      	mov	r3, r2
 800305e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003060:	787b      	ldrb	r3, [r7, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800306c:	e003      	b.n	8003076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	041a      	lsls	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	619a      	str	r2, [r3, #24]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003094:	887a      	ldrh	r2, [r7, #2]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4013      	ands	r3, r2
 800309a:	041a      	lsls	r2, r3, #16
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	43d9      	mvns	r1, r3
 80030a0:	887b      	ldrh	r3, [r7, #2]
 80030a2:	400b      	ands	r3, r1
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	619a      	str	r2, [r3, #24]
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030ce:	4a05      	ldr	r2, [pc, #20]	; (80030e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe fd62 	bl	8001ba0 <HAL_GPIO_EXTI_Callback>
  }
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40013c00 	.word	0x40013c00

080030e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e12b      	b.n	8003352 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe f9e6 	bl	80014e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	; 0x24
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800313a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800314a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800314c:	f001 fbd8 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 8003150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4a81      	ldr	r2, [pc, #516]	; (800335c <HAL_I2C_Init+0x274>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d807      	bhi.n	800316c <HAL_I2C_Init+0x84>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4a80      	ldr	r2, [pc, #512]	; (8003360 <HAL_I2C_Init+0x278>)
 8003160:	4293      	cmp	r3, r2
 8003162:	bf94      	ite	ls
 8003164:	2301      	movls	r3, #1
 8003166:	2300      	movhi	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e006      	b.n	800317a <HAL_I2C_Init+0x92>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a7d      	ldr	r2, [pc, #500]	; (8003364 <HAL_I2C_Init+0x27c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	bf94      	ite	ls
 8003174:	2301      	movls	r3, #1
 8003176:	2300      	movhi	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e0e7      	b.n	8003352 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a78      	ldr	r2, [pc, #480]	; (8003368 <HAL_I2C_Init+0x280>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0c9b      	lsrs	r3, r3, #18
 800318c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a6a      	ldr	r2, [pc, #424]	; (800335c <HAL_I2C_Init+0x274>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d802      	bhi.n	80031bc <HAL_I2C_Init+0xd4>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	3301      	adds	r3, #1
 80031ba:	e009      	b.n	80031d0 <HAL_I2C_Init+0xe8>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	4a69      	ldr	r2, [pc, #420]	; (800336c <HAL_I2C_Init+0x284>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	3301      	adds	r3, #1
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	495c      	ldr	r1, [pc, #368]	; (800335c <HAL_I2C_Init+0x274>)
 80031ec:	428b      	cmp	r3, r1
 80031ee:	d819      	bhi.n	8003224 <HAL_I2C_Init+0x13c>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1e59      	subs	r1, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fe:	1c59      	adds	r1, r3, #1
 8003200:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003204:	400b      	ands	r3, r1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_I2C_Init+0x138>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1e59      	subs	r1, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fbb1 f3f3 	udiv	r3, r1, r3
 8003218:	3301      	adds	r3, #1
 800321a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321e:	e051      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 8003220:	2304      	movs	r3, #4
 8003222:	e04f      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d111      	bne.n	8003250 <HAL_I2C_Init+0x168>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1e58      	subs	r0, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	440b      	add	r3, r1
 800323a:	fbb0 f3f3 	udiv	r3, r0, r3
 800323e:	3301      	adds	r3, #1
 8003240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	e012      	b.n	8003276 <HAL_I2C_Init+0x18e>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1e58      	subs	r0, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	0099      	lsls	r1, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	fbb0 f3f3 	udiv	r3, r0, r3
 8003266:	3301      	adds	r3, #1
 8003268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Init+0x196>
 800327a:	2301      	movs	r3, #1
 800327c:	e022      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10e      	bne.n	80032a4 <HAL_I2C_Init+0x1bc>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e58      	subs	r0, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	440b      	add	r3, r1
 8003294:	fbb0 f3f3 	udiv	r3, r0, r3
 8003298:	3301      	adds	r3, #1
 800329a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a2:	e00f      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1e58      	subs	r0, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	0099      	lsls	r1, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	6809      	ldr	r1, [r1, #0]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6911      	ldr	r1, [r2, #16]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68d2      	ldr	r2, [r2, #12]
 80032fe:	4311      	orrs	r1, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	430b      	orrs	r3, r1
 8003306:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	000186a0 	.word	0x000186a0
 8003360:	001e847f 	.word	0x001e847f
 8003364:	003d08ff 	.word	0x003d08ff
 8003368:	431bde83 	.word	0x431bde83
 800336c:	10624dd3 	.word	0x10624dd3

08003370 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	4608      	mov	r0, r1
 800337a:	4611      	mov	r1, r2
 800337c:	461a      	mov	r2, r3
 800337e:	4603      	mov	r3, r0
 8003380:	817b      	strh	r3, [r7, #10]
 8003382:	460b      	mov	r3, r1
 8003384:	813b      	strh	r3, [r7, #8]
 8003386:	4613      	mov	r3, r2
 8003388:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800338a:	f7ff fb9b 	bl	8002ac4 <HAL_GetTick>
 800338e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b20      	cmp	r3, #32
 800339a:	f040 80d9 	bne.w	8003550 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2319      	movs	r3, #25
 80033a4:	2201      	movs	r2, #1
 80033a6:	496d      	ldr	r1, [pc, #436]	; (800355c <HAL_I2C_Mem_Write+0x1ec>)
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fc7f 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033b4:	2302      	movs	r3, #2
 80033b6:	e0cc      	b.n	8003552 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_I2C_Mem_Write+0x56>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e0c5      	b.n	8003552 <HAL_I2C_Mem_Write+0x1e2>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d007      	beq.n	80033ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2221      	movs	r2, #33	; 0x21
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2240      	movs	r2, #64	; 0x40
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a3a      	ldr	r2, [r7, #32]
 8003416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800341c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4a4d      	ldr	r2, [pc, #308]	; (8003560 <HAL_I2C_Mem_Write+0x1f0>)
 800342c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800342e:	88f8      	ldrh	r0, [r7, #6]
 8003430:	893a      	ldrh	r2, [r7, #8]
 8003432:	8979      	ldrh	r1, [r7, #10]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	4603      	mov	r3, r0
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fab6 	bl	80039b0 <I2C_RequestMemoryWrite>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d052      	beq.n	80034f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e081      	b.n	8003552 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fd00 	bl	8003e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2b04      	cmp	r3, #4
 8003464:	d107      	bne.n	8003476 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003474:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e06b      	b.n	8003552 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	781a      	ldrb	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d11b      	bne.n	80034f0 <HAL_I2C_Mem_Write+0x180>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d017      	beq.n	80034f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1aa      	bne.n	800344e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fcec 	bl	8003eda <I2C_WaitOnBTFFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00d      	beq.n	8003524 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	2b04      	cmp	r3, #4
 800350e:	d107      	bne.n	8003520 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e016      	b.n	8003552 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	e000      	b.n	8003552 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003550:	2302      	movs	r3, #2
  }
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	00100002 	.word	0x00100002
 8003560:	ffff0000 	.word	0xffff0000

08003564 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08c      	sub	sp, #48	; 0x30
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	4608      	mov	r0, r1
 800356e:	4611      	mov	r1, r2
 8003570:	461a      	mov	r2, r3
 8003572:	4603      	mov	r3, r0
 8003574:	817b      	strh	r3, [r7, #10]
 8003576:	460b      	mov	r3, r1
 8003578:	813b      	strh	r3, [r7, #8]
 800357a:	4613      	mov	r3, r2
 800357c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800357e:	f7ff faa1 	bl	8002ac4 <HAL_GetTick>
 8003582:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b20      	cmp	r3, #32
 800358e:	f040 8208 	bne.w	80039a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	2319      	movs	r3, #25
 8003598:	2201      	movs	r2, #1
 800359a:	497b      	ldr	r1, [pc, #492]	; (8003788 <HAL_I2C_Mem_Read+0x224>)
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 fb85 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
 80035aa:	e1fb      	b.n	80039a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_I2C_Mem_Read+0x56>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e1f4      	b.n	80039a4 <HAL_I2C_Mem_Read+0x440>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d007      	beq.n	80035e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2222      	movs	r2, #34	; 0x22
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2240      	movs	r2, #64	; 0x40
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003610:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4a5b      	ldr	r2, [pc, #364]	; (800378c <HAL_I2C_Mem_Read+0x228>)
 8003620:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003622:	88f8      	ldrh	r0, [r7, #6]
 8003624:	893a      	ldrh	r2, [r7, #8]
 8003626:	8979      	ldrh	r1, [r7, #10]
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	4603      	mov	r3, r0
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fa52 	bl	8003adc <I2C_RequestMemoryRead>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e1b0      	b.n	80039a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	d113      	bne.n	8003672 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364a:	2300      	movs	r3, #0
 800364c:	623b      	str	r3, [r7, #32]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	623b      	str	r3, [r7, #32]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	623b      	str	r3, [r7, #32]
 800365e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	e184      	b.n	800397c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003676:	2b01      	cmp	r3, #1
 8003678:	d11b      	bne.n	80036b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003688:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e164      	b.n	800397c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d11b      	bne.n	80036f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	e144      	b.n	800397c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003708:	e138      	b.n	800397c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	2b03      	cmp	r3, #3
 8003710:	f200 80f1 	bhi.w	80038f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	2b01      	cmp	r3, #1
 800371a:	d123      	bne.n	8003764 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fc1b 	bl	8003f5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e139      	b.n	80039a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003762:	e10b      	b.n	800397c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003768:	2b02      	cmp	r3, #2
 800376a:	d14e      	bne.n	800380a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	2200      	movs	r2, #0
 8003774:	4906      	ldr	r1, [pc, #24]	; (8003790 <HAL_I2C_Mem_Read+0x22c>)
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 fa98 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e10e      	b.n	80039a4 <HAL_I2C_Mem_Read+0x440>
 8003786:	bf00      	nop
 8003788:	00100002 	.word	0x00100002
 800378c:	ffff0000 	.word	0xffff0000
 8003790:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003808:	e0b8      	b.n	800397c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	2200      	movs	r2, #0
 8003812:	4966      	ldr	r1, [pc, #408]	; (80039ac <HAL_I2C_Mem_Read+0x448>)
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fa49 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0bf      	b.n	80039a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386c:	2200      	movs	r2, #0
 800386e:	494f      	ldr	r1, [pc, #316]	; (80039ac <HAL_I2C_Mem_Read+0x448>)
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fa1b 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e091      	b.n	80039a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038f4:	e042      	b.n	800397c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 fb2e 	bl	8003f5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e04c      	b.n	80039a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b04      	cmp	r3, #4
 8003948:	d118      	bne.n	800397c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003980:	2b00      	cmp	r3, #0
 8003982:	f47f aec2 	bne.w	800370a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	e000      	b.n	80039a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039a2:	2302      	movs	r3, #2
  }
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3728      	adds	r7, #40	; 0x28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	00010004 	.word	0x00010004

080039b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	4608      	mov	r0, r1
 80039ba:	4611      	mov	r1, r2
 80039bc:	461a      	mov	r2, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	817b      	strh	r3, [r7, #10]
 80039c2:	460b      	mov	r3, r1
 80039c4:	813b      	strh	r3, [r7, #8]
 80039c6:	4613      	mov	r3, r2
 80039c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f960 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00d      	beq.n	8003a0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a00:	d103      	bne.n	8003a0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e05f      	b.n	8003ace <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a0e:	897b      	ldrh	r3, [r7, #10]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	6a3a      	ldr	r2, [r7, #32]
 8003a22:	492d      	ldr	r1, [pc, #180]	; (8003ad8 <I2C_RequestMemoryWrite+0x128>)
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f998 	bl	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e04c      	b.n	8003ace <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	6a39      	ldr	r1, [r7, #32]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fa02 	bl	8003e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00d      	beq.n	8003a76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d107      	bne.n	8003a72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e02b      	b.n	8003ace <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d105      	bne.n	8003a88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a7c:	893b      	ldrh	r3, [r7, #8]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	611a      	str	r2, [r3, #16]
 8003a86:	e021      	b.n	8003acc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a88:	893b      	ldrh	r3, [r7, #8]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	6a39      	ldr	r1, [r7, #32]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f9dc 	bl	8003e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00d      	beq.n	8003ac2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d107      	bne.n	8003abe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e005      	b.n	8003ace <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac2:	893b      	ldrh	r3, [r7, #8]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	00010002 	.word	0x00010002

08003adc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	817b      	strh	r3, [r7, #10]
 8003aee:	460b      	mov	r3, r1
 8003af0:	813b      	strh	r3, [r7, #8]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f8c2 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3c:	d103      	bne.n	8003b46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e0aa      	b.n	8003ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b4a:	897b      	ldrh	r3, [r7, #10]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	6a3a      	ldr	r2, [r7, #32]
 8003b5e:	4952      	ldr	r1, [pc, #328]	; (8003ca8 <I2C_RequestMemoryRead+0x1cc>)
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f8fa 	bl	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e097      	b.n	8003ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	6a39      	ldr	r1, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f964 	bl	8003e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d107      	bne.n	8003bae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e076      	b.n	8003ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d105      	bne.n	8003bc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb8:	893b      	ldrh	r3, [r7, #8]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	611a      	str	r2, [r3, #16]
 8003bc2:	e021      	b.n	8003c08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bc4:	893b      	ldrh	r3, [r7, #8]
 8003bc6:	0a1b      	lsrs	r3, r3, #8
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	6a39      	ldr	r1, [r7, #32]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f93e 	bl	8003e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00d      	beq.n	8003bfe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d107      	bne.n	8003bfa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e050      	b.n	8003ca0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bfe:	893b      	ldrh	r3, [r7, #8]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	6a39      	ldr	r1, [r7, #32]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f923 	bl	8003e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00d      	beq.n	8003c34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d107      	bne.n	8003c30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e035      	b.n	8003ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f82b 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00d      	beq.n	8003c78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6a:	d103      	bne.n	8003c74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e013      	b.n	8003ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c78:	897b      	ldrh	r3, [r7, #10]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	6a3a      	ldr	r2, [r7, #32]
 8003c8c:	4906      	ldr	r1, [pc, #24]	; (8003ca8 <I2C_RequestMemoryRead+0x1cc>)
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f863 	bl	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	00010002 	.word	0x00010002

08003cac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cbc:	e025      	b.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d021      	beq.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc6:	f7fe fefd 	bl	8002ac4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d116      	bne.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f043 0220 	orr.w	r2, r3, #32
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e023      	b.n	8003d52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d10d      	bne.n	8003d30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf0c      	ite	eq
 8003d26:	2301      	moveq	r3, #1
 8003d28:	2300      	movne	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	e00c      	b.n	8003d4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	43da      	mvns	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bf0c      	ite	eq
 8003d42:	2301      	moveq	r3, #1
 8003d44:	2300      	movne	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d0b6      	beq.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d68:	e051      	b.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d78:	d123      	bne.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f043 0204 	orr.w	r2, r3, #4
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e046      	b.n	8003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc8:	d021      	beq.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dca:	f7fe fe7b 	bl	8002ac4 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d302      	bcc.n	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d116      	bne.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f043 0220 	orr.w	r2, r3, #32
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e020      	b.n	8003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10c      	bne.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4013      	ands	r3, r2
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bf14      	ite	ne
 8003e2a:	2301      	movne	r3, #1
 8003e2c:	2300      	moveq	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	e00b      	b.n	8003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	43da      	mvns	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d18d      	bne.n	8003d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e64:	e02d      	b.n	8003ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f8ce 	bl	8004008 <I2C_IsAcknowledgeFailed>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e02d      	b.n	8003ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d021      	beq.n	8003ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7e:	f7fe fe21 	bl	8002ac4 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d302      	bcc.n	8003e94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d116      	bne.n	8003ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f043 0220 	orr.w	r2, r3, #32
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e007      	b.n	8003ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ecc:	2b80      	cmp	r3, #128	; 0x80
 8003ece:	d1ca      	bne.n	8003e66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ee6:	e02d      	b.n	8003f44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f88d 	bl	8004008 <I2C_IsAcknowledgeFailed>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e02d      	b.n	8003f54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efe:	d021      	beq.n	8003f44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f00:	f7fe fde0 	bl	8002ac4 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d302      	bcc.n	8003f16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d116      	bne.n	8003f44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e007      	b.n	8003f54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d1ca      	bne.n	8003ee8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f68:	e042      	b.n	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d119      	bne.n	8003fac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0210 	mvn.w	r2, #16
 8003f80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e029      	b.n	8004000 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fac:	f7fe fd8a 	bl	8002ac4 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d302      	bcc.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d116      	bne.n	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e007      	b.n	8004000 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d1b5      	bne.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401e:	d11b      	bne.n	8004058 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004028:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	f043 0204 	orr.w	r2, r3, #4
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e264      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d075      	beq.n	8004172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004086:	4ba3      	ldr	r3, [pc, #652]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b04      	cmp	r3, #4
 8004090:	d00c      	beq.n	80040ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004092:	4ba0      	ldr	r3, [pc, #640]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409a:	2b08      	cmp	r3, #8
 800409c:	d112      	bne.n	80040c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800409e:	4b9d      	ldr	r3, [pc, #628]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040aa:	d10b      	bne.n	80040c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ac:	4b99      	ldr	r3, [pc, #612]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d05b      	beq.n	8004170 <HAL_RCC_OscConfig+0x108>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d157      	bne.n	8004170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e23f      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040cc:	d106      	bne.n	80040dc <HAL_RCC_OscConfig+0x74>
 80040ce:	4b91      	ldr	r3, [pc, #580]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a90      	ldr	r2, [pc, #576]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e01d      	b.n	8004118 <HAL_RCC_OscConfig+0xb0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e4:	d10c      	bne.n	8004100 <HAL_RCC_OscConfig+0x98>
 80040e6:	4b8b      	ldr	r3, [pc, #556]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a8a      	ldr	r2, [pc, #552]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	4b88      	ldr	r3, [pc, #544]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a87      	ldr	r2, [pc, #540]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e00b      	b.n	8004118 <HAL_RCC_OscConfig+0xb0>
 8004100:	4b84      	ldr	r3, [pc, #528]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a83      	ldr	r2, [pc, #524]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	4b81      	ldr	r3, [pc, #516]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a80      	ldr	r2, [pc, #512]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d013      	beq.n	8004148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fe fcd0 	bl	8002ac4 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004128:	f7fe fccc 	bl	8002ac4 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	; 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e204      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	4b76      	ldr	r3, [pc, #472]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0xc0>
 8004146:	e014      	b.n	8004172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fe fcbc 	bl	8002ac4 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004150:	f7fe fcb8 	bl	8002ac4 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e1f0      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004162:	4b6c      	ldr	r3, [pc, #432]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0xe8>
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d063      	beq.n	8004246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800417e:	4b65      	ldr	r3, [pc, #404]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418a:	4b62      	ldr	r3, [pc, #392]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004192:	2b08      	cmp	r3, #8
 8004194:	d11c      	bne.n	80041d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004196:	4b5f      	ldr	r3, [pc, #380]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d116      	bne.n	80041d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a2:	4b5c      	ldr	r3, [pc, #368]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_RCC_OscConfig+0x152>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d001      	beq.n	80041ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e1c4      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ba:	4b56      	ldr	r3, [pc, #344]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4952      	ldr	r1, [pc, #328]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ce:	e03a      	b.n	8004246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d020      	beq.n	800421a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d8:	4b4f      	ldr	r3, [pc, #316]	; (8004318 <HAL_RCC_OscConfig+0x2b0>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fe fc71 	bl	8002ac4 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041e6:	f7fe fc6d 	bl	8002ac4 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e1a5      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	4b46      	ldr	r3, [pc, #280]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004204:	4b43      	ldr	r3, [pc, #268]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4940      	ldr	r1, [pc, #256]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]
 8004218:	e015      	b.n	8004246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421a:	4b3f      	ldr	r3, [pc, #252]	; (8004318 <HAL_RCC_OscConfig+0x2b0>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fe fc50 	bl	8002ac4 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004228:	f7fe fc4c 	bl	8002ac4 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e184      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423a:	4b36      	ldr	r3, [pc, #216]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d030      	beq.n	80042b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d016      	beq.n	8004288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800425a:	4b30      	ldr	r3, [pc, #192]	; (800431c <HAL_RCC_OscConfig+0x2b4>)
 800425c:	2201      	movs	r2, #1
 800425e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004260:	f7fe fc30 	bl	8002ac4 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004268:	f7fe fc2c 	bl	8002ac4 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e164      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427a:	4b26      	ldr	r3, [pc, #152]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 800427c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x200>
 8004286:	e015      	b.n	80042b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004288:	4b24      	ldr	r3, [pc, #144]	; (800431c <HAL_RCC_OscConfig+0x2b4>)
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428e:	f7fe fc19 	bl	8002ac4 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004296:	f7fe fc15 	bl	8002ac4 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e14d      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a8:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80042aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f0      	bne.n	8004296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80a0 	beq.w	8004402 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042c2:	2300      	movs	r3, #0
 80042c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c6:	4b13      	ldr	r3, [pc, #76]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10f      	bne.n	80042f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	4a0e      	ldr	r2, [pc, #56]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e0:	6413      	str	r3, [r2, #64]	; 0x40
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ee:	2301      	movs	r3, #1
 80042f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f2:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCC_OscConfig+0x2b8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d121      	bne.n	8004342 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_RCC_OscConfig+0x2b8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a07      	ldr	r2, [pc, #28]	; (8004320 <HAL_RCC_OscConfig+0x2b8>)
 8004304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430a:	f7fe fbdb 	bl	8002ac4 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004310:	e011      	b.n	8004336 <HAL_RCC_OscConfig+0x2ce>
 8004312:	bf00      	nop
 8004314:	40023800 	.word	0x40023800
 8004318:	42470000 	.word	0x42470000
 800431c:	42470e80 	.word	0x42470e80
 8004320:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004324:	f7fe fbce 	bl	8002ac4 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e106      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004336:	4b85      	ldr	r3, [pc, #532]	; (800454c <HAL_RCC_OscConfig+0x4e4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d106      	bne.n	8004358 <HAL_RCC_OscConfig+0x2f0>
 800434a:	4b81      	ldr	r3, [pc, #516]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	4a80      	ldr	r2, [pc, #512]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	6713      	str	r3, [r2, #112]	; 0x70
 8004356:	e01c      	b.n	8004392 <HAL_RCC_OscConfig+0x32a>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b05      	cmp	r3, #5
 800435e:	d10c      	bne.n	800437a <HAL_RCC_OscConfig+0x312>
 8004360:	4b7b      	ldr	r3, [pc, #492]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	4a7a      	ldr	r2, [pc, #488]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004366:	f043 0304 	orr.w	r3, r3, #4
 800436a:	6713      	str	r3, [r2, #112]	; 0x70
 800436c:	4b78      	ldr	r3, [pc, #480]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	4a77      	ldr	r2, [pc, #476]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	6713      	str	r3, [r2, #112]	; 0x70
 8004378:	e00b      	b.n	8004392 <HAL_RCC_OscConfig+0x32a>
 800437a:	4b75      	ldr	r3, [pc, #468]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	4a74      	ldr	r2, [pc, #464]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004380:	f023 0301 	bic.w	r3, r3, #1
 8004384:	6713      	str	r3, [r2, #112]	; 0x70
 8004386:	4b72      	ldr	r3, [pc, #456]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	4a71      	ldr	r2, [pc, #452]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 800438c:	f023 0304 	bic.w	r3, r3, #4
 8004390:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d015      	beq.n	80043c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439a:	f7fe fb93 	bl	8002ac4 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a0:	e00a      	b.n	80043b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a2:	f7fe fb8f 	bl	8002ac4 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e0c5      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b8:	4b65      	ldr	r3, [pc, #404]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0ee      	beq.n	80043a2 <HAL_RCC_OscConfig+0x33a>
 80043c4:	e014      	b.n	80043f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c6:	f7fe fb7d 	bl	8002ac4 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fe fb79 	bl	8002ac4 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e0af      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e4:	4b5a      	ldr	r3, [pc, #360]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1ee      	bne.n	80043ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d105      	bne.n	8004402 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f6:	4b56      	ldr	r3, [pc, #344]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	4a55      	ldr	r2, [pc, #340]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 80043fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004400:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 809b 	beq.w	8004542 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800440c:	4b50      	ldr	r3, [pc, #320]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 030c 	and.w	r3, r3, #12
 8004414:	2b08      	cmp	r3, #8
 8004416:	d05c      	beq.n	80044d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d141      	bne.n	80044a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004420:	4b4c      	ldr	r3, [pc, #304]	; (8004554 <HAL_RCC_OscConfig+0x4ec>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004426:	f7fe fb4d 	bl	8002ac4 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442e:	f7fe fb49 	bl	8002ac4 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e081      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004440:	4b43      	ldr	r3, [pc, #268]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69da      	ldr	r2, [r3, #28]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	019b      	lsls	r3, r3, #6
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	085b      	lsrs	r3, r3, #1
 8004464:	3b01      	subs	r3, #1
 8004466:	041b      	lsls	r3, r3, #16
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	061b      	lsls	r3, r3, #24
 8004470:	4937      	ldr	r1, [pc, #220]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004472:	4313      	orrs	r3, r2
 8004474:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004476:	4b37      	ldr	r3, [pc, #220]	; (8004554 <HAL_RCC_OscConfig+0x4ec>)
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fe fb22 	bl	8002ac4 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004484:	f7fe fb1e 	bl	8002ac4 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e056      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004496:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x41c>
 80044a2:	e04e      	b.n	8004542 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a4:	4b2b      	ldr	r3, [pc, #172]	; (8004554 <HAL_RCC_OscConfig+0x4ec>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044aa:	f7fe fb0b 	bl	8002ac4 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b2:	f7fe fb07 	bl	8002ac4 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e03f      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c4:	4b22      	ldr	r3, [pc, #136]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f0      	bne.n	80044b2 <HAL_RCC_OscConfig+0x44a>
 80044d0:	e037      	b.n	8004542 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e032      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044de:	4b1c      	ldr	r3, [pc, #112]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d028      	beq.n	800453e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d121      	bne.n	800453e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d11a      	bne.n	800453e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800450e:	4013      	ands	r3, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004514:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004516:	4293      	cmp	r3, r2
 8004518:	d111      	bne.n	800453e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	3b01      	subs	r3, #1
 8004528:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800452a:	429a      	cmp	r2, r3
 800452c:	d107      	bne.n	800453e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d001      	beq.n	8004542 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40007000 	.word	0x40007000
 8004550:	40023800 	.word	0x40023800
 8004554:	42470060 	.word	0x42470060

08004558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0cc      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800456c:	4b68      	ldr	r3, [pc, #416]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d90c      	bls.n	8004594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b65      	ldr	r3, [pc, #404]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b63      	ldr	r3, [pc, #396]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0b8      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d020      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045ac:	4b59      	ldr	r3, [pc, #356]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4a58      	ldr	r2, [pc, #352]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045c4:	4b53      	ldr	r3, [pc, #332]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a52      	ldr	r2, [pc, #328]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d0:	4b50      	ldr	r3, [pc, #320]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	494d      	ldr	r1, [pc, #308]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d044      	beq.n	8004678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d107      	bne.n	8004606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f6:	4b47      	ldr	r3, [pc, #284]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d119      	bne.n	8004636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e07f      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d003      	beq.n	8004616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004612:	2b03      	cmp	r3, #3
 8004614:	d107      	bne.n	8004626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004616:	4b3f      	ldr	r3, [pc, #252]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e06f      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004626:	4b3b      	ldr	r3, [pc, #236]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e067      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004636:	4b37      	ldr	r3, [pc, #220]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f023 0203 	bic.w	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4934      	ldr	r1, [pc, #208]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	4313      	orrs	r3, r2
 8004646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004648:	f7fe fa3c 	bl	8002ac4 <HAL_GetTick>
 800464c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464e:	e00a      	b.n	8004666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004650:	f7fe fa38 	bl	8002ac4 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	f241 3288 	movw	r2, #5000	; 0x1388
 800465e:	4293      	cmp	r3, r2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e04f      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 020c 	and.w	r2, r3, #12
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	429a      	cmp	r2, r3
 8004676:	d1eb      	bne.n	8004650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004678:	4b25      	ldr	r3, [pc, #148]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d20c      	bcs.n	80046a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004686:	4b22      	ldr	r3, [pc, #136]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b20      	ldr	r3, [pc, #128]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e032      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ac:	4b19      	ldr	r3, [pc, #100]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4916      	ldr	r1, [pc, #88]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	490e      	ldr	r1, [pc, #56]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046de:	f000 f821 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 80046e2:	4602      	mov	r2, r0
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	490a      	ldr	r1, [pc, #40]	; (8004718 <HAL_RCC_ClockConfig+0x1c0>)
 80046f0:	5ccb      	ldrb	r3, [r1, r3]
 80046f2:	fa22 f303 	lsr.w	r3, r2, r3
 80046f6:	4a09      	ldr	r2, [pc, #36]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 80046f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe f99c 	bl	8002a3c <HAL_InitTick>

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40023c00 	.word	0x40023c00
 8004714:	40023800 	.word	0x40023800
 8004718:	08007d20 	.word	0x08007d20
 800471c:	20000000 	.word	0x20000000
 8004720:	20000024 	.word	0x20000024

08004724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004724:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	2300      	movs	r3, #0
 8004736:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800473c:	4b67      	ldr	r3, [pc, #412]	; (80048dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 030c 	and.w	r3, r3, #12
 8004744:	2b08      	cmp	r3, #8
 8004746:	d00d      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x40>
 8004748:	2b08      	cmp	r3, #8
 800474a:	f200 80bd 	bhi.w	80048c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x34>
 8004752:	2b04      	cmp	r3, #4
 8004754:	d003      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0x3a>
 8004756:	e0b7      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004758:	4b61      	ldr	r3, [pc, #388]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800475a:	60bb      	str	r3, [r7, #8]
       break;
 800475c:	e0b7      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800475e:	4b61      	ldr	r3, [pc, #388]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004760:	60bb      	str	r3, [r7, #8]
      break;
 8004762:	e0b4      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004764:	4b5d      	ldr	r3, [pc, #372]	; (80048dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800476c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800476e:	4b5b      	ldr	r3, [pc, #364]	; (80048dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d04d      	beq.n	8004816 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477a:	4b58      	ldr	r3, [pc, #352]	; (80048dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	099b      	lsrs	r3, r3, #6
 8004780:	461a      	mov	r2, r3
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	f240 10ff 	movw	r0, #511	; 0x1ff
 800478a:	f04f 0100 	mov.w	r1, #0
 800478e:	ea02 0800 	and.w	r8, r2, r0
 8004792:	ea03 0901 	and.w	r9, r3, r1
 8004796:	4640      	mov	r0, r8
 8004798:	4649      	mov	r1, r9
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	014b      	lsls	r3, r1, #5
 80047a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047a8:	0142      	lsls	r2, r0, #5
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	ebb0 0008 	subs.w	r0, r0, r8
 80047b2:	eb61 0109 	sbc.w	r1, r1, r9
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	018b      	lsls	r3, r1, #6
 80047c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047c4:	0182      	lsls	r2, r0, #6
 80047c6:	1a12      	subs	r2, r2, r0
 80047c8:	eb63 0301 	sbc.w	r3, r3, r1
 80047cc:	f04f 0000 	mov.w	r0, #0
 80047d0:	f04f 0100 	mov.w	r1, #0
 80047d4:	00d9      	lsls	r1, r3, #3
 80047d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047da:	00d0      	lsls	r0, r2, #3
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	eb12 0208 	adds.w	r2, r2, r8
 80047e4:	eb43 0309 	adc.w	r3, r3, r9
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	0259      	lsls	r1, r3, #9
 80047f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80047f6:	0250      	lsls	r0, r2, #9
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4610      	mov	r0, r2
 80047fe:	4619      	mov	r1, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	461a      	mov	r2, r3
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	f7fc f9fe 	bl	8000c08 <__aeabi_uldivmod>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4613      	mov	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e04a      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004816:	4b31      	ldr	r3, [pc, #196]	; (80048dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	099b      	lsrs	r3, r3, #6
 800481c:	461a      	mov	r2, r3
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004826:	f04f 0100 	mov.w	r1, #0
 800482a:	ea02 0400 	and.w	r4, r2, r0
 800482e:	ea03 0501 	and.w	r5, r3, r1
 8004832:	4620      	mov	r0, r4
 8004834:	4629      	mov	r1, r5
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	014b      	lsls	r3, r1, #5
 8004840:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004844:	0142      	lsls	r2, r0, #5
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	1b00      	subs	r0, r0, r4
 800484c:	eb61 0105 	sbc.w	r1, r1, r5
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	018b      	lsls	r3, r1, #6
 800485a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800485e:	0182      	lsls	r2, r0, #6
 8004860:	1a12      	subs	r2, r2, r0
 8004862:	eb63 0301 	sbc.w	r3, r3, r1
 8004866:	f04f 0000 	mov.w	r0, #0
 800486a:	f04f 0100 	mov.w	r1, #0
 800486e:	00d9      	lsls	r1, r3, #3
 8004870:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004874:	00d0      	lsls	r0, r2, #3
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	1912      	adds	r2, r2, r4
 800487c:	eb45 0303 	adc.w	r3, r5, r3
 8004880:	f04f 0000 	mov.w	r0, #0
 8004884:	f04f 0100 	mov.w	r1, #0
 8004888:	0299      	lsls	r1, r3, #10
 800488a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800488e:	0290      	lsls	r0, r2, #10
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4610      	mov	r0, r2
 8004896:	4619      	mov	r1, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	461a      	mov	r2, r3
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	f7fc f9b2 	bl	8000c08 <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4613      	mov	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	3301      	adds	r3, #1
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	60bb      	str	r3, [r7, #8]
      break;
 80048c6:	e002      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048c8:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048ca:	60bb      	str	r3, [r7, #8]
      break;
 80048cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ce:	68bb      	ldr	r3, [r7, #8]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048da:	bf00      	nop
 80048dc:	40023800 	.word	0x40023800
 80048e0:	00f42400 	.word	0x00f42400
 80048e4:	007a1200 	.word	0x007a1200

080048e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ec:	4b03      	ldr	r3, [pc, #12]	; (80048fc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000000 	.word	0x20000000

08004900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004904:	f7ff fff0 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b05      	ldr	r3, [pc, #20]	; (8004920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	0a9b      	lsrs	r3, r3, #10
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	4903      	ldr	r1, [pc, #12]	; (8004924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800491c:	4618      	mov	r0, r3
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40023800 	.word	0x40023800
 8004924:	08007d30 	.word	0x08007d30

08004928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800492c:	f7ff ffdc 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004930:	4602      	mov	r2, r0
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	0b5b      	lsrs	r3, r3, #13
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	4903      	ldr	r1, [pc, #12]	; (800494c <HAL_RCC_GetPCLK2Freq+0x24>)
 800493e:	5ccb      	ldrb	r3, [r1, r3]
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004944:	4618      	mov	r0, r3
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40023800 	.word	0x40023800
 800494c:	08007d30 	.word	0x08007d30

08004950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e041      	b.n	80049e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc ff96 	bl	80018a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f000 f950 	bl	8004c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d001      	beq.n	8004a08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e03c      	b.n	8004a82 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1e      	ldr	r2, [pc, #120]	; (8004a90 <HAL_TIM_Base_Start+0xa0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d018      	beq.n	8004a4c <HAL_TIM_Base_Start+0x5c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a22:	d013      	beq.n	8004a4c <HAL_TIM_Base_Start+0x5c>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a1a      	ldr	r2, [pc, #104]	; (8004a94 <HAL_TIM_Base_Start+0xa4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00e      	beq.n	8004a4c <HAL_TIM_Base_Start+0x5c>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <HAL_TIM_Base_Start+0xa8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d009      	beq.n	8004a4c <HAL_TIM_Base_Start+0x5c>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <HAL_TIM_Base_Start+0xac>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d004      	beq.n	8004a4c <HAL_TIM_Base_Start+0x5c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a16      	ldr	r2, [pc, #88]	; (8004aa0 <HAL_TIM_Base_Start+0xb0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d111      	bne.n	8004a70 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b06      	cmp	r3, #6
 8004a5c:	d010      	beq.n	8004a80 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0201 	orr.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6e:	e007      	b.n	8004a80 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40010000 	.word	0x40010000
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40000800 	.word	0x40000800
 8004a9c:	40000c00 	.word	0x40000c00
 8004aa0:	40014000 	.word	0x40014000

08004aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e0b4      	b.n	8004c2a <HAL_TIM_ConfigClockSource+0x186>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af8:	d03e      	beq.n	8004b78 <HAL_TIM_ConfigClockSource+0xd4>
 8004afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afe:	f200 8087 	bhi.w	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b06:	f000 8086 	beq.w	8004c16 <HAL_TIM_ConfigClockSource+0x172>
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0e:	d87f      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b70      	cmp	r3, #112	; 0x70
 8004b12:	d01a      	beq.n	8004b4a <HAL_TIM_ConfigClockSource+0xa6>
 8004b14:	2b70      	cmp	r3, #112	; 0x70
 8004b16:	d87b      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b60      	cmp	r3, #96	; 0x60
 8004b1a:	d050      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x11a>
 8004b1c:	2b60      	cmp	r3, #96	; 0x60
 8004b1e:	d877      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b50      	cmp	r3, #80	; 0x50
 8004b22:	d03c      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0xfa>
 8004b24:	2b50      	cmp	r3, #80	; 0x50
 8004b26:	d873      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d058      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x13a>
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d86f      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b30      	cmp	r3, #48	; 0x30
 8004b32:	d064      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b34:	2b30      	cmp	r3, #48	; 0x30
 8004b36:	d86b      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d060      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d867      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d05c      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d05a      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b48:	e062      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6899      	ldr	r1, [r3, #8]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f000 f965 	bl	8004e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	609a      	str	r2, [r3, #8]
      break;
 8004b76:	e04f      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	6899      	ldr	r1, [r3, #8]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f000 f94e 	bl	8004e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b9a:	609a      	str	r2, [r3, #8]
      break;
 8004b9c:	e03c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6859      	ldr	r1, [r3, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	461a      	mov	r2, r3
 8004bac:	f000 f8c2 	bl	8004d34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2150      	movs	r1, #80	; 0x50
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 f91b 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 8004bbc:	e02c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6859      	ldr	r1, [r3, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f000 f8e1 	bl	8004d92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2160      	movs	r1, #96	; 0x60
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f90b 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 8004bdc:	e01c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 f8a2 	bl	8004d34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2140      	movs	r1, #64	; 0x40
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f8fb 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e00c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f000 f8f2 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 8004c0e:	e003      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
      break;
 8004c14:	e000      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a34      	ldr	r2, [pc, #208]	; (8004d18 <TIM_Base_SetConfig+0xe4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00f      	beq.n	8004c6c <TIM_Base_SetConfig+0x38>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c52:	d00b      	beq.n	8004c6c <TIM_Base_SetConfig+0x38>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a31      	ldr	r2, [pc, #196]	; (8004d1c <TIM_Base_SetConfig+0xe8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d007      	beq.n	8004c6c <TIM_Base_SetConfig+0x38>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a30      	ldr	r2, [pc, #192]	; (8004d20 <TIM_Base_SetConfig+0xec>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_Base_SetConfig+0x38>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a2f      	ldr	r2, [pc, #188]	; (8004d24 <TIM_Base_SetConfig+0xf0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d108      	bne.n	8004c7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a25      	ldr	r2, [pc, #148]	; (8004d18 <TIM_Base_SetConfig+0xe4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01b      	beq.n	8004cbe <TIM_Base_SetConfig+0x8a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8c:	d017      	beq.n	8004cbe <TIM_Base_SetConfig+0x8a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a22      	ldr	r2, [pc, #136]	; (8004d1c <TIM_Base_SetConfig+0xe8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <TIM_Base_SetConfig+0x8a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a21      	ldr	r2, [pc, #132]	; (8004d20 <TIM_Base_SetConfig+0xec>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00f      	beq.n	8004cbe <TIM_Base_SetConfig+0x8a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a20      	ldr	r2, [pc, #128]	; (8004d24 <TIM_Base_SetConfig+0xf0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00b      	beq.n	8004cbe <TIM_Base_SetConfig+0x8a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a1f      	ldr	r2, [pc, #124]	; (8004d28 <TIM_Base_SetConfig+0xf4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d007      	beq.n	8004cbe <TIM_Base_SetConfig+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a1e      	ldr	r2, [pc, #120]	; (8004d2c <TIM_Base_SetConfig+0xf8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d003      	beq.n	8004cbe <TIM_Base_SetConfig+0x8a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a1d      	ldr	r2, [pc, #116]	; (8004d30 <TIM_Base_SetConfig+0xfc>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d108      	bne.n	8004cd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a08      	ldr	r2, [pc, #32]	; (8004d18 <TIM_Base_SetConfig+0xe4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d103      	bne.n	8004d04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	615a      	str	r2, [r3, #20]
}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40000c00 	.word	0x40000c00
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40014400 	.word	0x40014400
 8004d30:	40014800 	.word	0x40014800

08004d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f023 030a 	bic.w	r3, r3, #10
 8004d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b087      	sub	sp, #28
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f023 0210 	bic.w	r2, r3, #16
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	031b      	lsls	r3, r3, #12
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f043 0307 	orr.w	r3, r3, #7
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	609a      	str	r2, [r3, #8]
}
 8004e1c:	bf00      	nop
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	021a      	lsls	r2, r3, #8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	609a      	str	r2, [r3, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e050      	b.n	8004f22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a1c      	ldr	r2, [pc, #112]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d018      	beq.n	8004ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ecc:	d013      	beq.n	8004ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a18      	ldr	r2, [pc, #96]	; (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00e      	beq.n	8004ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a16      	ldr	r2, [pc, #88]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d009      	beq.n	8004ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a15      	ldr	r2, [pc, #84]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d004      	beq.n	8004ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d10c      	bne.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40014000 	.word	0x40014000

08004f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e03f      	b.n	8004fd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fc fce8 	bl	8001940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2224      	movs	r2, #36	; 0x24
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f929 	bl	80051e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b08a      	sub	sp, #40	; 0x28
 8004fe2:	af02      	add	r7, sp, #8
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	603b      	str	r3, [r7, #0]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d17c      	bne.n	80050f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_UART_Transmit+0x2c>
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e075      	b.n	80050fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_UART_Transmit+0x3e>
 8005018:	2302      	movs	r3, #2
 800501a:	e06e      	b.n	80050fa <HAL_UART_Transmit+0x11c>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2221      	movs	r2, #33	; 0x21
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005032:	f7fd fd47 	bl	8002ac4 <HAL_GetTick>
 8005036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	88fa      	ldrh	r2, [r7, #6]
 800503c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	88fa      	ldrh	r2, [r7, #6]
 8005042:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504c:	d108      	bne.n	8005060 <HAL_UART_Transmit+0x82>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d104      	bne.n	8005060 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	e003      	b.n	8005068 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005064:	2300      	movs	r3, #0
 8005066:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005070:	e02a      	b.n	80050c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2200      	movs	r2, #0
 800507a:	2180      	movs	r1, #128	; 0x80
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f840 	bl	8005102 <UART_WaitOnFlagUntilTimeout>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e036      	b.n	80050fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10b      	bne.n	80050aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	3302      	adds	r3, #2
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	e007      	b.n	80050ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	781a      	ldrb	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	3301      	adds	r3, #1
 80050b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1cf      	bne.n	8005072 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	2140      	movs	r1, #64	; 0x40
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f810 	bl	8005102 <UART_WaitOnFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e006      	b.n	80050fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	e000      	b.n	80050fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050f8:	2302      	movs	r3, #2
  }
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b090      	sub	sp, #64	; 0x40
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	603b      	str	r3, [r7, #0]
 800510e:	4613      	mov	r3, r2
 8005110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005112:	e050      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511a:	d04c      	beq.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800511c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <UART_WaitOnFlagUntilTimeout+0x30>
 8005122:	f7fd fccf 	bl	8002ac4 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800512e:	429a      	cmp	r2, r3
 8005130:	d241      	bcs.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	330c      	adds	r3, #12
 8005138:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	330c      	adds	r3, #12
 8005150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005152:	637a      	str	r2, [r7, #52]	; 0x34
 8005154:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005156:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1e5      	bne.n	8005132 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3314      	adds	r3, #20
 800516c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	613b      	str	r3, [r7, #16]
   return(result);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f023 0301 	bic.w	r3, r3, #1
 800517c:	63bb      	str	r3, [r7, #56]	; 0x38
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3314      	adds	r3, #20
 8005184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005186:	623a      	str	r2, [r7, #32]
 8005188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	69f9      	ldr	r1, [r7, #28]
 800518c:	6a3a      	ldr	r2, [r7, #32]
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	61bb      	str	r3, [r7, #24]
   return(result);
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e5      	bne.n	8005166 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e00f      	b.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4013      	ands	r3, r2
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	bf0c      	ite	eq
 80051c6:	2301      	moveq	r3, #1
 80051c8:	2300      	movne	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	461a      	mov	r2, r3
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d09f      	beq.n	8005114 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3740      	adds	r7, #64	; 0x40
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e4:	b09f      	sub	sp, #124	; 0x7c
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f6:	68d9      	ldr	r1, [r3, #12]
 80051f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	ea40 0301 	orr.w	r3, r0, r1
 8005200:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	431a      	orrs	r2, r3
 800520c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	431a      	orrs	r2, r3
 8005212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	4313      	orrs	r3, r2
 8005218:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800521a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005224:	f021 010c 	bic.w	r1, r1, #12
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800522e:	430b      	orrs	r3, r1
 8005230:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800523c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523e:	6999      	ldr	r1, [r3, #24]
 8005240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	ea40 0301 	orr.w	r3, r0, r1
 8005248:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800524a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4bc5      	ldr	r3, [pc, #788]	; (8005564 <UART_SetConfig+0x384>)
 8005250:	429a      	cmp	r2, r3
 8005252:	d004      	beq.n	800525e <UART_SetConfig+0x7e>
 8005254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4bc3      	ldr	r3, [pc, #780]	; (8005568 <UART_SetConfig+0x388>)
 800525a:	429a      	cmp	r2, r3
 800525c:	d103      	bne.n	8005266 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800525e:	f7ff fb63 	bl	8004928 <HAL_RCC_GetPCLK2Freq>
 8005262:	6778      	str	r0, [r7, #116]	; 0x74
 8005264:	e002      	b.n	800526c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005266:	f7ff fb4b 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 800526a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800526c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005274:	f040 80b6 	bne.w	80053e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800527a:	461c      	mov	r4, r3
 800527c:	f04f 0500 	mov.w	r5, #0
 8005280:	4622      	mov	r2, r4
 8005282:	462b      	mov	r3, r5
 8005284:	1891      	adds	r1, r2, r2
 8005286:	6439      	str	r1, [r7, #64]	; 0x40
 8005288:	415b      	adcs	r3, r3
 800528a:	647b      	str	r3, [r7, #68]	; 0x44
 800528c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005290:	1912      	adds	r2, r2, r4
 8005292:	eb45 0303 	adc.w	r3, r5, r3
 8005296:	f04f 0000 	mov.w	r0, #0
 800529a:	f04f 0100 	mov.w	r1, #0
 800529e:	00d9      	lsls	r1, r3, #3
 80052a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052a4:	00d0      	lsls	r0, r2, #3
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	1911      	adds	r1, r2, r4
 80052ac:	6639      	str	r1, [r7, #96]	; 0x60
 80052ae:	416b      	adcs	r3, r5
 80052b0:	667b      	str	r3, [r7, #100]	; 0x64
 80052b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	1891      	adds	r1, r2, r2
 80052be:	63b9      	str	r1, [r7, #56]	; 0x38
 80052c0:	415b      	adcs	r3, r3
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052cc:	f7fb fc9c 	bl	8000c08 <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4ba5      	ldr	r3, [pc, #660]	; (800556c <UART_SetConfig+0x38c>)
 80052d6:	fba3 2302 	umull	r2, r3, r3, r2
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	011e      	lsls	r6, r3, #4
 80052de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e0:	461c      	mov	r4, r3
 80052e2:	f04f 0500 	mov.w	r5, #0
 80052e6:	4622      	mov	r2, r4
 80052e8:	462b      	mov	r3, r5
 80052ea:	1891      	adds	r1, r2, r2
 80052ec:	6339      	str	r1, [r7, #48]	; 0x30
 80052ee:	415b      	adcs	r3, r3
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
 80052f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052f6:	1912      	adds	r2, r2, r4
 80052f8:	eb45 0303 	adc.w	r3, r5, r3
 80052fc:	f04f 0000 	mov.w	r0, #0
 8005300:	f04f 0100 	mov.w	r1, #0
 8005304:	00d9      	lsls	r1, r3, #3
 8005306:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800530a:	00d0      	lsls	r0, r2, #3
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	1911      	adds	r1, r2, r4
 8005312:	65b9      	str	r1, [r7, #88]	; 0x58
 8005314:	416b      	adcs	r3, r5
 8005316:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	461a      	mov	r2, r3
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	1891      	adds	r1, r2, r2
 8005324:	62b9      	str	r1, [r7, #40]	; 0x28
 8005326:	415b      	adcs	r3, r3
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800532a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800532e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005332:	f7fb fc69 	bl	8000c08 <__aeabi_uldivmod>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4b8c      	ldr	r3, [pc, #560]	; (800556c <UART_SetConfig+0x38c>)
 800533c:	fba3 1302 	umull	r1, r3, r3, r2
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	2164      	movs	r1, #100	; 0x64
 8005344:	fb01 f303 	mul.w	r3, r1, r3
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	3332      	adds	r3, #50	; 0x32
 800534e:	4a87      	ldr	r2, [pc, #540]	; (800556c <UART_SetConfig+0x38c>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800535c:	441e      	add	r6, r3
 800535e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005360:	4618      	mov	r0, r3
 8005362:	f04f 0100 	mov.w	r1, #0
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	1894      	adds	r4, r2, r2
 800536c:	623c      	str	r4, [r7, #32]
 800536e:	415b      	adcs	r3, r3
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
 8005372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005376:	1812      	adds	r2, r2, r0
 8005378:	eb41 0303 	adc.w	r3, r1, r3
 800537c:	f04f 0400 	mov.w	r4, #0
 8005380:	f04f 0500 	mov.w	r5, #0
 8005384:	00dd      	lsls	r5, r3, #3
 8005386:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800538a:	00d4      	lsls	r4, r2, #3
 800538c:	4622      	mov	r2, r4
 800538e:	462b      	mov	r3, r5
 8005390:	1814      	adds	r4, r2, r0
 8005392:	653c      	str	r4, [r7, #80]	; 0x50
 8005394:	414b      	adcs	r3, r1
 8005396:	657b      	str	r3, [r7, #84]	; 0x54
 8005398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	461a      	mov	r2, r3
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	1891      	adds	r1, r2, r2
 80053a4:	61b9      	str	r1, [r7, #24]
 80053a6:	415b      	adcs	r3, r3
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053b2:	f7fb fc29 	bl	8000c08 <__aeabi_uldivmod>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4b6c      	ldr	r3, [pc, #432]	; (800556c <UART_SetConfig+0x38c>)
 80053bc:	fba3 1302 	umull	r1, r3, r3, r2
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	2164      	movs	r1, #100	; 0x64
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	3332      	adds	r3, #50	; 0x32
 80053ce:	4a67      	ldr	r2, [pc, #412]	; (800556c <UART_SetConfig+0x38c>)
 80053d0:	fba2 2303 	umull	r2, r3, r2, r3
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	f003 0207 	and.w	r2, r3, #7
 80053da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4432      	add	r2, r6
 80053e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053e2:	e0b9      	b.n	8005558 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053e6:	461c      	mov	r4, r3
 80053e8:	f04f 0500 	mov.w	r5, #0
 80053ec:	4622      	mov	r2, r4
 80053ee:	462b      	mov	r3, r5
 80053f0:	1891      	adds	r1, r2, r2
 80053f2:	6139      	str	r1, [r7, #16]
 80053f4:	415b      	adcs	r3, r3
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053fc:	1912      	adds	r2, r2, r4
 80053fe:	eb45 0303 	adc.w	r3, r5, r3
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f04f 0100 	mov.w	r1, #0
 800540a:	00d9      	lsls	r1, r3, #3
 800540c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005410:	00d0      	lsls	r0, r2, #3
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	eb12 0804 	adds.w	r8, r2, r4
 800541a:	eb43 0905 	adc.w	r9, r3, r5
 800541e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4618      	mov	r0, r3
 8005424:	f04f 0100 	mov.w	r1, #0
 8005428:	f04f 0200 	mov.w	r2, #0
 800542c:	f04f 0300 	mov.w	r3, #0
 8005430:	008b      	lsls	r3, r1, #2
 8005432:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005436:	0082      	lsls	r2, r0, #2
 8005438:	4640      	mov	r0, r8
 800543a:	4649      	mov	r1, r9
 800543c:	f7fb fbe4 	bl	8000c08 <__aeabi_uldivmod>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4b49      	ldr	r3, [pc, #292]	; (800556c <UART_SetConfig+0x38c>)
 8005446:	fba3 2302 	umull	r2, r3, r3, r2
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	011e      	lsls	r6, r3, #4
 800544e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005450:	4618      	mov	r0, r3
 8005452:	f04f 0100 	mov.w	r1, #0
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	1894      	adds	r4, r2, r2
 800545c:	60bc      	str	r4, [r7, #8]
 800545e:	415b      	adcs	r3, r3
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005466:	1812      	adds	r2, r2, r0
 8005468:	eb41 0303 	adc.w	r3, r1, r3
 800546c:	f04f 0400 	mov.w	r4, #0
 8005470:	f04f 0500 	mov.w	r5, #0
 8005474:	00dd      	lsls	r5, r3, #3
 8005476:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800547a:	00d4      	lsls	r4, r2, #3
 800547c:	4622      	mov	r2, r4
 800547e:	462b      	mov	r3, r5
 8005480:	1814      	adds	r4, r2, r0
 8005482:	64bc      	str	r4, [r7, #72]	; 0x48
 8005484:	414b      	adcs	r3, r1
 8005486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	4618      	mov	r0, r3
 800548e:	f04f 0100 	mov.w	r1, #0
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	008b      	lsls	r3, r1, #2
 800549c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054a0:	0082      	lsls	r2, r0, #2
 80054a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80054a6:	f7fb fbaf 	bl	8000c08 <__aeabi_uldivmod>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4b2f      	ldr	r3, [pc, #188]	; (800556c <UART_SetConfig+0x38c>)
 80054b0:	fba3 1302 	umull	r1, r3, r3, r2
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	2164      	movs	r1, #100	; 0x64
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	3332      	adds	r3, #50	; 0x32
 80054c2:	4a2a      	ldr	r2, [pc, #168]	; (800556c <UART_SetConfig+0x38c>)
 80054c4:	fba2 2303 	umull	r2, r3, r2, r3
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ce:	441e      	add	r6, r3
 80054d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054d2:	4618      	mov	r0, r3
 80054d4:	f04f 0100 	mov.w	r1, #0
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	1894      	adds	r4, r2, r2
 80054de:	603c      	str	r4, [r7, #0]
 80054e0:	415b      	adcs	r3, r3
 80054e2:	607b      	str	r3, [r7, #4]
 80054e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054e8:	1812      	adds	r2, r2, r0
 80054ea:	eb41 0303 	adc.w	r3, r1, r3
 80054ee:	f04f 0400 	mov.w	r4, #0
 80054f2:	f04f 0500 	mov.w	r5, #0
 80054f6:	00dd      	lsls	r5, r3, #3
 80054f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054fc:	00d4      	lsls	r4, r2, #3
 80054fe:	4622      	mov	r2, r4
 8005500:	462b      	mov	r3, r5
 8005502:	eb12 0a00 	adds.w	sl, r2, r0
 8005506:	eb43 0b01 	adc.w	fp, r3, r1
 800550a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	4618      	mov	r0, r3
 8005510:	f04f 0100 	mov.w	r1, #0
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	008b      	lsls	r3, r1, #2
 800551e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005522:	0082      	lsls	r2, r0, #2
 8005524:	4650      	mov	r0, sl
 8005526:	4659      	mov	r1, fp
 8005528:	f7fb fb6e 	bl	8000c08 <__aeabi_uldivmod>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4b0e      	ldr	r3, [pc, #56]	; (800556c <UART_SetConfig+0x38c>)
 8005532:	fba3 1302 	umull	r1, r3, r3, r2
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	2164      	movs	r1, #100	; 0x64
 800553a:	fb01 f303 	mul.w	r3, r1, r3
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	3332      	adds	r3, #50	; 0x32
 8005544:	4a09      	ldr	r2, [pc, #36]	; (800556c <UART_SetConfig+0x38c>)
 8005546:	fba2 2303 	umull	r2, r3, r2, r3
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	f003 020f 	and.w	r2, r3, #15
 8005550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4432      	add	r2, r6
 8005556:	609a      	str	r2, [r3, #8]
}
 8005558:	bf00      	nop
 800555a:	377c      	adds	r7, #124	; 0x7c
 800555c:	46bd      	mov	sp, r7
 800555e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005562:	bf00      	nop
 8005564:	40011000 	.word	0x40011000
 8005568:	40011400 	.word	0x40011400
 800556c:	51eb851f 	.word	0x51eb851f

08005570 <_ZN13TIM_StopWatch5startEv>:
 *      Author: conat
 */

#include "TIMStopWatch.h"

void TIM_StopWatch::start(){
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	update();
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f80c 	bl	8005596 <_ZN13TIM_StopWatch6updateEv>
	HAL_TIM_Base_Start(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fa34 	bl	80049f0 <HAL_TIM_Base_Start>
	isStart = true;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	741a      	strb	r2, [r3, #16]
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <_ZN13TIM_StopWatch6updateEv>:
	count = 0;
	__HAL_TIM_SET_COUNTER(htim, 0);
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
}

void TIM_StopWatch::update(){
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
	uint32_t cnt = __HAL_TIM_GET_COUNTER(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	60fb      	str	r3, [r7, #12]

	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE)) {//over_flow
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	bf0c      	ite	eq
 80055b8:	2301      	moveq	r3, #1
 80055ba:	2300      	movne	r3, #0
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d014      	beq.n	80055ec <_ZN13TIM_StopWatch6updateEv+0x56>
		count += cnt - (befCount - __HAL_TIM_GET_AUTORELOAD(htim));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	1ad2      	subs	r2, r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	441a      	add	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	441a      	add	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	609a      	str	r2, [r3, #8]
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0201 	mvn.w	r2, #1
 80055e8:	611a      	str	r2, [r3, #16]
 80055ea:	e008      	b.n	80055fe <_ZN13TIM_StopWatch6updateEv+0x68>
	} else {
		count += cnt - befCount;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	68f9      	ldr	r1, [r7, #12]
 80055f6:	1acb      	subs	r3, r1, r3
 80055f8:	441a      	add	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	609a      	str	r2, [r3, #8]
	}

	befCount = cnt;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	60da      	str	r2, [r3, #12]
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <_ZN13TIM_StopWatch9getTimeMSEv>:

float TIM_StopWatch::getTimeMS(){
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	return count / (float)frequence * 1000.0f;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	ee07 3a90 	vmov	s15, r3
 8005620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	ee07 3a90 	vmov	s15, r3
 800562c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005634:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800564c <_ZN13TIM_StopWatch9getTimeMSEv+0x3c>
 8005638:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800563c:	eeb0 0a67 	vmov.f32	s0, s15
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	447a0000 	.word	0x447a0000

08005650 <_ZNSaIcEC1Ev>:
 8005650:	4770      	bx	lr

08005652 <_ZNSaIcED1Ev>:
 8005652:	4770      	bx	lr

08005654 <_ZSt17__throw_bad_allocv>:
 8005654:	b508      	push	{r3, lr}
 8005656:	f001 fe4b 	bl	80072f0 <abort>

0800565a <_ZSt19__throw_logic_errorPKc>:
 800565a:	b508      	push	{r3, lr}
 800565c:	f001 fe48 	bl	80072f0 <abort>

08005660 <_ZSt20__throw_length_errorPKc>:
 8005660:	b508      	push	{r3, lr}
 8005662:	f001 fe45 	bl	80072f0 <abort>

08005666 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8005666:	b40f      	push	{r0, r1, r2, r3}
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	f107 0418 	add.w	r4, r7, #24
 8005672:	f854 2b04 	ldr.w	r2, [r4], #4
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	4610      	mov	r0, r2
 800567a:	f7fa fe01 	bl	8000280 <strlen>
 800567e:	f200 2307 	addw	r3, r0, #519	; 0x207
 8005682:	f023 0307 	bic.w	r3, r3, #7
 8005686:	ebad 0d03 	sub.w	sp, sp, r3
 800568a:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	60fc      	str	r4, [r7, #12]
 8005692:	4623      	mov	r3, r4
 8005694:	4668      	mov	r0, sp
 8005696:	f000 f855 	bl	8005744 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800569a:	f001 fe29 	bl	80072f0 <abort>
	...

080056a0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b09c      	sub	sp, #112	; 0x70
 80056a4:	4606      	mov	r6, r0
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	460c      	mov	r4, r1
 80056aa:	1ba4      	subs	r4, r4, r6
 80056ac:	490e      	ldr	r1, [pc, #56]	; (80056e8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80056ae:	2269      	movs	r2, #105	; 0x69
 80056b0:	1d38      	adds	r0, r7, #4
 80056b2:	f001 fe5f 	bl	8007374 <memcpy>
 80056b6:	f104 0370 	add.w	r3, r4, #112	; 0x70
 80056ba:	f023 0307 	bic.w	r3, r3, #7
 80056be:	ebad 0d03 	sub.w	sp, sp, r3
 80056c2:	466d      	mov	r5, sp
 80056c4:	2268      	movs	r2, #104	; 0x68
 80056c6:	1d39      	adds	r1, r7, #4
 80056c8:	4628      	mov	r0, r5
 80056ca:	f001 fe53 	bl	8007374 <memcpy>
 80056ce:	4622      	mov	r2, r4
 80056d0:	4631      	mov	r1, r6
 80056d2:	f105 0068 	add.w	r0, r5, #104	; 0x68
 80056d6:	442c      	add	r4, r5
 80056d8:	f001 fe4c 	bl	8007374 <memcpy>
 80056dc:	2300      	movs	r3, #0
 80056de:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80056e2:	4628      	mov	r0, r5
 80056e4:	f7ff ffb9 	bl	800565a <_ZSt19__throw_logic_errorPKc>
 80056e8:	08007d38 	.word	0x08007d38

080056ec <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80056ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	b084      	sub	sp, #16
 80056f4:	466d      	mov	r5, sp
 80056f6:	f105 040c 	add.w	r4, r5, #12
 80056fa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8005740 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 80056fe:	4623      	mov	r3, r4
 8005700:	f04f 0c0a 	mov.w	ip, #10
 8005704:	fbb2 f6fc 	udiv	r6, r2, ip
 8005708:	fb0c 2e16 	mls	lr, ip, r6, r2
 800570c:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8005710:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8005714:	4696      	mov	lr, r2
 8005716:	f1be 0f09 	cmp.w	lr, #9
 800571a:	4632      	mov	r2, r6
 800571c:	d8f2      	bhi.n	8005704 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800571e:	1ae4      	subs	r4, r4, r3
 8005720:	428c      	cmp	r4, r1
 8005722:	d809      	bhi.n	8005738 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8005724:	f1c4 010c 	rsb	r1, r4, #12
 8005728:	4622      	mov	r2, r4
 800572a:	4429      	add	r1, r5
 800572c:	f001 fe22 	bl	8007374 <memcpy>
 8005730:	4620      	mov	r0, r4
 8005732:	46bd      	mov	sp, r7
 8005734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005738:	f04f 34ff 	mov.w	r4, #4294967295
 800573c:	e7f8      	b.n	8005730 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800573e:	bf00      	nop
 8005740:	08007da1 	.word	0x08007da1

08005744 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8005744:	3901      	subs	r1, #1
 8005746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800574a:	4607      	mov	r7, r0
 800574c:	4615      	mov	r5, r2
 800574e:	eb00 0801 	add.w	r8, r0, r1
 8005752:	4604      	mov	r4, r0
 8005754:	782a      	ldrb	r2, [r5, #0]
 8005756:	b362      	cbz	r2, 80057b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8005758:	4544      	cmp	r4, r8
 800575a:	d22e      	bcs.n	80057ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800575c:	2a25      	cmp	r2, #37	; 0x25
 800575e:	d107      	bne.n	8005770 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8005760:	786a      	ldrb	r2, [r5, #1]
 8005762:	2a73      	cmp	r2, #115	; 0x73
 8005764:	d009      	beq.n	800577a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8005766:	2a7a      	cmp	r2, #122	; 0x7a
 8005768:	d012      	beq.n	8005790 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800576a:	2a25      	cmp	r2, #37	; 0x25
 800576c:	d100      	bne.n	8005770 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800576e:	3501      	adds	r5, #1
 8005770:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005774:	f804 2b01 	strb.w	r2, [r4], #1
 8005778:	e7ec      	b.n	8005754 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800577a:	f853 2b04 	ldr.w	r2, [r3], #4
 800577e:	3a01      	subs	r2, #1
 8005780:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005784:	b1e9      	cbz	r1, 80057c2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 8005786:	4544      	cmp	r4, r8
 8005788:	d017      	beq.n	80057ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800578a:	f804 1b01 	strb.w	r1, [r4], #1
 800578e:	e7f7      	b.n	8005780 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8005790:	78aa      	ldrb	r2, [r5, #2]
 8005792:	2a75      	cmp	r2, #117	; 0x75
 8005794:	d1ec      	bne.n	8005770 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8005796:	461e      	mov	r6, r3
 8005798:	eba8 0104 	sub.w	r1, r8, r4
 800579c:	f856 2b04 	ldr.w	r2, [r6], #4
 80057a0:	4620      	mov	r0, r4
 80057a2:	f7ff ffa3 	bl	80056ec <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80057a6:	2800      	cmp	r0, #0
 80057a8:	dd07      	ble.n	80057ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80057aa:	4404      	add	r4, r0
 80057ac:	3503      	adds	r5, #3
 80057ae:	4633      	mov	r3, r6
 80057b0:	e7d0      	b.n	8005754 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80057b2:	7022      	strb	r2, [r4, #0]
 80057b4:	1be0      	subs	r0, r4, r7
 80057b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ba:	4621      	mov	r1, r4
 80057bc:	4638      	mov	r0, r7
 80057be:	f7ff ff6f 	bl	80056a0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80057c2:	3502      	adds	r5, #2
 80057c4:	e7c6      	b.n	8005754 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>

080057c6 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80057c6:	b10a      	cbz	r2, 80057cc <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80057c8:	f001 bdd4 	b.w	8007374 <memcpy>
 80057cc:	4770      	bx	lr

080057ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80057ce:	6001      	str	r1, [r0, #0]
 80057d0:	4770      	bx	lr

080057d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80057d2:	6800      	ldr	r0, [r0, #0]
 80057d4:	4770      	bx	lr

080057d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80057d6:	3008      	adds	r0, #8
 80057d8:	4770      	bx	lr

080057da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80057da:	6081      	str	r1, [r0, #8]
 80057dc:	4770      	bx	lr

080057de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80057de:	6803      	ldr	r3, [r0, #0]
 80057e0:	6041      	str	r1, [r0, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	545a      	strb	r2, [r3, r1]
 80057e6:	4770      	bx	lr

080057e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80057e8:	b508      	push	{r3, lr}
 80057ea:	680b      	ldr	r3, [r1, #0]
 80057ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f0:	d302      	bcc.n	80057f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80057f2:	480d      	ldr	r0, [pc, #52]	; (8005828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80057f4:	f7ff ff34 	bl	8005660 <_ZSt20__throw_length_errorPKc>
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d90b      	bls.n	8005814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80057fc:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8005800:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8005804:	d206      	bcs.n	8005814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005806:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800580a:	bf2a      	itet	cs
 800580c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8005810:	6008      	strcc	r0, [r1, #0]
 8005812:	600b      	strcs	r3, [r1, #0]
 8005814:	6808      	ldr	r0, [r1, #0]
 8005816:	3001      	adds	r0, #1
 8005818:	d501      	bpl.n	800581e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800581a:	f7ff ff1b 	bl	8005654 <_ZSt17__throw_bad_allocv>
 800581e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005822:	f000 b9cb 	b.w	8005bbc <_Znwj>
 8005826:	bf00      	nop
 8005828:	08007dac 	.word	0x08007dac

0800582c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800582c:	f850 3b08 	ldr.w	r3, [r0], #8
 8005830:	4283      	cmp	r3, r0
 8005832:	d002      	beq.n	800583a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8005834:	4618      	mov	r0, r3
 8005836:	f000 b9bf 	b.w	8005bb8 <_ZdlPv>
 800583a:	4770      	bx	lr

0800583c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 800583c:	b508      	push	{r3, lr}
 800583e:	4603      	mov	r3, r0
 8005840:	4608      	mov	r0, r1
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4298      	cmp	r0, r3
 8005846:	4611      	mov	r1, r2
 8005848:	d903      	bls.n	8005852 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 800584a:	4602      	mov	r2, r0
 800584c:	4801      	ldr	r0, [pc, #4]	; (8005854 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800584e:	f7ff ff0a 	bl	8005666 <_ZSt24__throw_out_of_range_fmtPKcz>
 8005852:	bd08      	pop	{r3, pc}
 8005854:	08007dc4 	.word	0x08007dc4

08005858 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8005858:	6840      	ldr	r0, [r0, #4]
 800585a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800585e:	3901      	subs	r1, #1
 8005860:	1a09      	subs	r1, r1, r0
 8005862:	4291      	cmp	r1, r2
 8005864:	b508      	push	{r3, lr}
 8005866:	d202      	bcs.n	800586e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fef9 	bl	8005660 <_ZSt20__throw_length_errorPKc>
 800586e:	bd08      	pop	{r3, pc}

08005870 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8005870:	6803      	ldr	r3, [r0, #0]
 8005872:	428b      	cmp	r3, r1
 8005874:	d806      	bhi.n	8005884 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8005876:	6840      	ldr	r0, [r0, #4]
 8005878:	4418      	add	r0, r3
 800587a:	4281      	cmp	r1, r0
 800587c:	bf94      	ite	ls
 800587e:	2000      	movls	r0, #0
 8005880:	2001      	movhi	r0, #1
 8005882:	4770      	bx	lr
 8005884:	2001      	movs	r0, #1
 8005886:	4770      	bx	lr

08005888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005888:	2a01      	cmp	r2, #1
 800588a:	b510      	push	{r4, lr}
 800588c:	d102      	bne.n	8005894 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800588e:	780a      	ldrb	r2, [r1, #0]
 8005890:	7002      	strb	r2, [r0, #0]
 8005892:	bd10      	pop	{r4, pc}
 8005894:	f7ff ff97 	bl	80057c6 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005898:	e7fb      	b.n	8005892 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800589a:	2a01      	cmp	r2, #1
 800589c:	b430      	push	{r4, r5}
 800589e:	d103      	bne.n	80058a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80058a0:	780b      	ldrb	r3, [r1, #0]
 80058a2:	7003      	strb	r3, [r0, #0]
 80058a4:	bc30      	pop	{r4, r5}
 80058a6:	4770      	bx	lr
 80058a8:	2a00      	cmp	r2, #0
 80058aa:	d0fb      	beq.n	80058a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80058ac:	bc30      	pop	{r4, r5}
 80058ae:	f001 bd6f 	b.w	8007390 <memmove>

080058b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80058b2:	b508      	push	{r3, lr}
 80058b4:	1a52      	subs	r2, r2, r1
 80058b6:	f7ff ffe7 	bl	8005888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80058ba:	bd08      	pop	{r3, pc}

080058bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80058bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80058c2:	461f      	mov	r7, r3
 80058c4:	6843      	ldr	r3, [r0, #4]
 80058c6:	eb01 0802 	add.w	r8, r1, r2
 80058ca:	1ab2      	subs	r2, r6, r2
 80058cc:	441a      	add	r2, r3
 80058ce:	eba3 0908 	sub.w	r9, r3, r8
 80058d2:	4603      	mov	r3, r0
 80058d4:	9201      	str	r2, [sp, #4]
 80058d6:	f853 2b08 	ldr.w	r2, [r3], #8
 80058da:	429a      	cmp	r2, r3
 80058dc:	bf18      	it	ne
 80058de:	6882      	ldrne	r2, [r0, #8]
 80058e0:	460d      	mov	r5, r1
 80058e2:	bf08      	it	eq
 80058e4:	220f      	moveq	r2, #15
 80058e6:	a901      	add	r1, sp, #4
 80058e8:	4604      	mov	r4, r0
 80058ea:	f7ff ff7d 	bl	80057e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80058ee:	4682      	mov	sl, r0
 80058f0:	b11d      	cbz	r5, 80058fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80058f2:	6821      	ldr	r1, [r4, #0]
 80058f4:	462a      	mov	r2, r5
 80058f6:	f7ff ffc7 	bl	8005888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80058fa:	b137      	cbz	r7, 800590a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80058fc:	b12e      	cbz	r6, 800590a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80058fe:	4632      	mov	r2, r6
 8005900:	4639      	mov	r1, r7
 8005902:	eb0a 0005 	add.w	r0, sl, r5
 8005906:	f7ff ffbf 	bl	8005888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800590a:	f1b9 0f00 	cmp.w	r9, #0
 800590e:	d007      	beq.n	8005920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8005910:	6821      	ldr	r1, [r4, #0]
 8005912:	4435      	add	r5, r6
 8005914:	464a      	mov	r2, r9
 8005916:	4441      	add	r1, r8
 8005918:	eb0a 0005 	add.w	r0, sl, r5
 800591c:	f7ff ffb4 	bl	8005888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005920:	4620      	mov	r0, r4
 8005922:	f7ff ff83 	bl	800582c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005926:	9b01      	ldr	r3, [sp, #4]
 8005928:	f8c4 a000 	str.w	sl, [r4]
 800592c:	60a3      	str	r3, [r4, #8]
 800592e:	b002      	add	sp, #8
 8005930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8005934:	f100 0208 	add.w	r2, r0, #8
 8005938:	6002      	str	r2, [r0, #0]
 800593a:	2200      	movs	r2, #0
 800593c:	6042      	str	r2, [r0, #4]
 800593e:	7202      	strb	r2, [r0, #8]
 8005940:	4770      	bx	lr

08005942 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8005942:	b570      	push	{r4, r5, r6, lr}
 8005944:	4604      	mov	r4, r0
 8005946:	460e      	mov	r6, r1
 8005948:	3008      	adds	r0, #8
 800594a:	6020      	str	r0, [r4, #0]
 800594c:	f856 3b08 	ldr.w	r3, [r6], #8
 8005950:	429e      	cmp	r6, r3
 8005952:	460d      	mov	r5, r1
 8005954:	d10b      	bne.n	800596e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8005956:	2210      	movs	r2, #16
 8005958:	4631      	mov	r1, r6
 800595a:	f7ff ff34 	bl	80057c6 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800595e:	686b      	ldr	r3, [r5, #4]
 8005960:	6063      	str	r3, [r4, #4]
 8005962:	2300      	movs	r3, #0
 8005964:	602e      	str	r6, [r5, #0]
 8005966:	606b      	str	r3, [r5, #4]
 8005968:	722b      	strb	r3, [r5, #8]
 800596a:	4620      	mov	r0, r4
 800596c:	bd70      	pop	{r4, r5, r6, pc}
 800596e:	6023      	str	r3, [r4, #0]
 8005970:	688b      	ldr	r3, [r1, #8]
 8005972:	60a3      	str	r3, [r4, #8]
 8005974:	e7f3      	b.n	800595e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08005976 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8005976:	b510      	push	{r4, lr}
 8005978:	4604      	mov	r4, r0
 800597a:	f7ff ff57 	bl	800582c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800597e:	4620      	mov	r0, r4
 8005980:	bd10      	pop	{r4, pc}

08005982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8005982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005984:	460d      	mov	r5, r1
 8005986:	f851 3b08 	ldr.w	r3, [r1], #8
 800598a:	686a      	ldr	r2, [r5, #4]
 800598c:	4299      	cmp	r1, r3
 800598e:	4604      	mov	r4, r0
 8005990:	6800      	ldr	r0, [r0, #0]
 8005992:	d10d      	bne.n	80059b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8005994:	b10a      	cbz	r2, 800599a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 8005996:	f7ff ff77 	bl	8005888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800599a:	686b      	ldr	r3, [r5, #4]
 800599c:	6822      	ldr	r2, [r4, #0]
 800599e:	6063      	str	r3, [r4, #4]
 80059a0:	2100      	movs	r1, #0
 80059a2:	54d1      	strb	r1, [r2, r3]
 80059a4:	682a      	ldr	r2, [r5, #0]
 80059a6:	2300      	movs	r3, #0
 80059a8:	606b      	str	r3, [r5, #4]
 80059aa:	7013      	strb	r3, [r2, #0]
 80059ac:	4620      	mov	r0, r4
 80059ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b0:	e9c4 3200 	strd	r3, r2, [r4]
 80059b4:	f104 0708 	add.w	r7, r4, #8
 80059b8:	42b8      	cmp	r0, r7
 80059ba:	68ab      	ldr	r3, [r5, #8]
 80059bc:	bf18      	it	ne
 80059be:	68a6      	ldrne	r6, [r4, #8]
 80059c0:	60a3      	str	r3, [r4, #8]
 80059c2:	bf08      	it	eq
 80059c4:	2000      	moveq	r0, #0
 80059c6:	b110      	cbz	r0, 80059ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 80059c8:	6028      	str	r0, [r5, #0]
 80059ca:	60ae      	str	r6, [r5, #8]
 80059cc:	e7ea      	b.n	80059a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 80059ce:	6029      	str	r1, [r5, #0]
 80059d0:	e7e8      	b.n	80059a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

080059d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 80059d2:	6840      	ldr	r0, [r0, #4]
 80059d4:	4770      	bx	lr
	...

080059d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80059d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059de:	4614      	mov	r4, r2
 80059e0:	4680      	mov	r8, r0
 80059e2:	462a      	mov	r2, r5
 80059e4:	4689      	mov	r9, r1
 80059e6:	461f      	mov	r7, r3
 80059e8:	4621      	mov	r1, r4
 80059ea:	4b39      	ldr	r3, [pc, #228]	; (8005ad0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 80059ec:	f7ff ff34 	bl	8005858 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80059f0:	4642      	mov	r2, r8
 80059f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80059f6:	f852 6b08 	ldr.w	r6, [r2], #8
 80059fa:	4296      	cmp	r6, r2
 80059fc:	bf18      	it	ne
 80059fe:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8005a02:	eba5 0b04 	sub.w	fp, r5, r4
 8005a06:	eb03 0a0b 	add.w	sl, r3, fp
 8005a0a:	bf08      	it	eq
 8005a0c:	220f      	moveq	r2, #15
 8005a0e:	4552      	cmp	r2, sl
 8005a10:	d351      	bcc.n	8005ab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8005a12:	444e      	add	r6, r9
 8005a14:	4639      	mov	r1, r7
 8005a16:	44a1      	add	r9, r4
 8005a18:	4640      	mov	r0, r8
 8005a1a:	eba3 0909 	sub.w	r9, r3, r9
 8005a1e:	f7ff ff27 	bl	8005870 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8005a22:	b180      	cbz	r0, 8005a46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8005a24:	f1b9 0f00 	cmp.w	r9, #0
 8005a28:	d006      	beq.n	8005a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8005a2a:	42ac      	cmp	r4, r5
 8005a2c:	d004      	beq.n	8005a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8005a2e:	464a      	mov	r2, r9
 8005a30:	1931      	adds	r1, r6, r4
 8005a32:	1970      	adds	r0, r6, r5
 8005a34:	f7ff ff31 	bl	800589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005a38:	b315      	cbz	r5, 8005a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8005a3a:	462a      	mov	r2, r5
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	4630      	mov	r0, r6
 8005a40:	f7ff ff22 	bl	8005888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005a44:	e01c      	b.n	8005a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8005a46:	b135      	cbz	r5, 8005a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8005a48:	42ac      	cmp	r4, r5
 8005a4a:	d33c      	bcc.n	8005ac6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8005a4c:	462a      	mov	r2, r5
 8005a4e:	4639      	mov	r1, r7
 8005a50:	4630      	mov	r0, r6
 8005a52:	f7ff ff22 	bl	800589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005a56:	f1b9 0f00 	cmp.w	r9, #0
 8005a5a:	d011      	beq.n	8005a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8005a5c:	42ac      	cmp	r4, r5
 8005a5e:	d00f      	beq.n	8005a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8005a60:	464a      	mov	r2, r9
 8005a62:	1931      	adds	r1, r6, r4
 8005a64:	1970      	adds	r0, r6, r5
 8005a66:	f7ff ff18 	bl	800589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005a6a:	42ac      	cmp	r4, r5
 8005a6c:	d208      	bcs.n	8005a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8005a6e:	4434      	add	r4, r6
 8005a70:	197b      	adds	r3, r7, r5
 8005a72:	429c      	cmp	r4, r3
 8005a74:	d30f      	bcc.n	8005a96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 8005a76:	462a      	mov	r2, r5
 8005a78:	4639      	mov	r1, r7
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	f7ff ff0d 	bl	800589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005a80:	f8d8 3000 	ldr.w	r3, [r8]
 8005a84:	f8c8 a004 	str.w	sl, [r8, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	f803 200a 	strb.w	r2, [r3, sl]
 8005a90:	b003      	add	sp, #12
 8005a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a96:	42bc      	cmp	r4, r7
 8005a98:	d803      	bhi.n	8005aa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8005a9a:	462a      	mov	r2, r5
 8005a9c:	eb07 010b 	add.w	r1, r7, fp
 8005aa0:	e7cd      	b.n	8005a3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8005aa2:	1be4      	subs	r4, r4, r7
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f7ff fef6 	bl	800589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005aae:	1b2a      	subs	r2, r5, r4
 8005ab0:	1971      	adds	r1, r6, r5
 8005ab2:	1930      	adds	r0, r6, r4
 8005ab4:	e7c4      	b.n	8005a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8005ab6:	9500      	str	r5, [sp, #0]
 8005ab8:	463b      	mov	r3, r7
 8005aba:	4622      	mov	r2, r4
 8005abc:	4649      	mov	r1, r9
 8005abe:	4640      	mov	r0, r8
 8005ac0:	f7ff fefc 	bl	80058bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8005ac4:	e7dc      	b.n	8005a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8005ac6:	f1b9 0f00 	cmp.w	r9, #0
 8005aca:	d0d0      	beq.n	8005a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8005acc:	e7c8      	b.n	8005a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8005ace:	bf00      	nop
 8005ad0:	08007e11 	.word	0x08007e11

08005ad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8005ad4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	4615      	mov	r5, r2
 8005ada:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8005adc:	9303      	str	r3, [sp, #12]
 8005ade:	460e      	mov	r6, r1
 8005ae0:	f7ff feac 	bl	800583c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8005ae4:	6862      	ldr	r2, [r4, #4]
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	1b92      	subs	r2, r2, r6
 8005aea:	4601      	mov	r1, r0
 8005aec:	42aa      	cmp	r2, r5
 8005aee:	9808      	ldr	r0, [sp, #32]
 8005af0:	9000      	str	r0, [sp, #0]
 8005af2:	bf28      	it	cs
 8005af4:	462a      	movcs	r2, r5
 8005af6:	4620      	mov	r0, r4
 8005af8:	f7ff ff6e 	bl	80059d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8005afc:	b004      	add	sp, #16
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
 8005b00:	08007dfb 	.word	0x08007dfb

08005b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8005b04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b06:	4604      	mov	r4, r0
 8005b08:	4610      	mov	r0, r2
 8005b0a:	9103      	str	r1, [sp, #12]
 8005b0c:	9202      	str	r2, [sp, #8]
 8005b0e:	f7fa fbb7 	bl	8000280 <strlen>
 8005b12:	9b02      	ldr	r3, [sp, #8]
 8005b14:	9000      	str	r0, [sp, #0]
 8005b16:	9903      	ldr	r1, [sp, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f7ff ffda 	bl	8005ad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8005b20:	b004      	add	sp, #16
 8005b22:	bd10      	pop	{r4, pc}

08005b24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8005b24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b26:	4604      	mov	r4, r0
 8005b28:	4623      	mov	r3, r4
 8005b2a:	6840      	ldr	r0, [r0, #4]
 8005b2c:	f853 6b08 	ldr.w	r6, [r3], #8
 8005b30:	429e      	cmp	r6, r3
 8005b32:	bf18      	it	ne
 8005b34:	68a3      	ldrne	r3, [r4, #8]
 8005b36:	eb00 0502 	add.w	r5, r0, r2
 8005b3a:	bf08      	it	eq
 8005b3c:	230f      	moveq	r3, #15
 8005b3e:	429d      	cmp	r5, r3
 8005b40:	d80a      	bhi.n	8005b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8005b42:	b112      	cbz	r2, 8005b4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8005b44:	4430      	add	r0, r6
 8005b46:	f7ff fe9f 	bl	8005888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	6065      	str	r5, [r4, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	4620      	mov	r0, r4
 8005b52:	555a      	strb	r2, [r3, r5]
 8005b54:	b002      	add	sp, #8
 8005b56:	bd70      	pop	{r4, r5, r6, pc}
 8005b58:	9200      	str	r2, [sp, #0]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4601      	mov	r1, r0
 8005b60:	4620      	mov	r0, r4
 8005b62:	f7ff feab 	bl	80058bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8005b66:	e7f0      	b.n	8005b4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08005b68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8005b68:	b508      	push	{r3, lr}
 8005b6a:	e9d1 1200 	ldrd	r1, r2, [r1]
 8005b6e:	f7ff ffd9 	bl	8005b24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8005b72:	bd08      	pop	{r3, pc}

08005b74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 8005b74:	b508      	push	{r3, lr}
 8005b76:	f7ff fff7 	bl	8005b68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8005b7a:	bd08      	pop	{r3, pc}

08005b7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8005b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b7e:	4604      	mov	r4, r0
 8005b80:	4608      	mov	r0, r1
 8005b82:	460d      	mov	r5, r1
 8005b84:	f7fa fb7c 	bl	8000280 <strlen>
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8005b8a:	9001      	str	r0, [sp, #4]
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	2100      	movs	r1, #0
 8005b90:	4620      	mov	r0, r4
 8005b92:	f7ff fe61 	bl	8005858 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8005b96:	9a01      	ldr	r2, [sp, #4]
 8005b98:	4629      	mov	r1, r5
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f7ff ffc2 	bl	8005b24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8005ba0:	b003      	add	sp, #12
 8005ba2:	bd30      	pop	{r4, r5, pc}
 8005ba4:	08007e2a 	.word	0x08007e2a

08005ba8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 8005ba8:	b508      	push	{r3, lr}
 8005baa:	f7ff ffe7 	bl	8005b7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8005bae:	bd08      	pop	{r3, pc}

08005bb0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8005bb0:	6800      	ldr	r0, [r0, #0]
 8005bb2:	4770      	bx	lr

08005bb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8005bb4:	6001      	str	r1, [r0, #0]
 8005bb6:	4770      	bx	lr

08005bb8 <_ZdlPv>:
 8005bb8:	f001 bbd4 	b.w	8007364 <free>

08005bbc <_Znwj>:
 8005bbc:	2801      	cmp	r0, #1
 8005bbe:	bf38      	it	cc
 8005bc0:	2001      	movcc	r0, #1
 8005bc2:	b510      	push	{r4, lr}
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f001 fbc4 	bl	8007354 <malloc>
 8005bcc:	b930      	cbnz	r0, 8005bdc <_Znwj+0x20>
 8005bce:	f000 f807 	bl	8005be0 <_ZSt15get_new_handlerv>
 8005bd2:	b908      	cbnz	r0, 8005bd8 <_Znwj+0x1c>
 8005bd4:	f001 fb8c 	bl	80072f0 <abort>
 8005bd8:	4780      	blx	r0
 8005bda:	e7f4      	b.n	8005bc6 <_Znwj+0xa>
 8005bdc:	bd10      	pop	{r4, pc}
	...

08005be0 <_ZSt15get_new_handlerv>:
 8005be0:	4b02      	ldr	r3, [pc, #8]	; (8005bec <_ZSt15get_new_handlerv+0xc>)
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	f3bf 8f5b 	dmb	ish
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	2000012c 	.word	0x2000012c

08005bf0 <atan2>:
 8005bf0:	f000 b916 	b.w	8005e20 <__ieee754_atan2>

08005bf4 <pow>:
 8005bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf8:	ec59 8b10 	vmov	r8, r9, d0
 8005bfc:	ec57 6b11 	vmov	r6, r7, d1
 8005c00:	f000 f9da 	bl	8005fb8 <__ieee754_pow>
 8005c04:	4b4e      	ldr	r3, [pc, #312]	; (8005d40 <pow+0x14c>)
 8005c06:	f993 3000 	ldrsb.w	r3, [r3]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	ec55 4b10 	vmov	r4, r5, d0
 8005c10:	d015      	beq.n	8005c3e <pow+0x4a>
 8005c12:	4632      	mov	r2, r6
 8005c14:	463b      	mov	r3, r7
 8005c16:	4630      	mov	r0, r6
 8005c18:	4639      	mov	r1, r7
 8005c1a:	f7fa ff8f 	bl	8000b3c <__aeabi_dcmpun>
 8005c1e:	b970      	cbnz	r0, 8005c3e <pow+0x4a>
 8005c20:	4642      	mov	r2, r8
 8005c22:	464b      	mov	r3, r9
 8005c24:	4640      	mov	r0, r8
 8005c26:	4649      	mov	r1, r9
 8005c28:	f7fa ff88 	bl	8000b3c <__aeabi_dcmpun>
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2300      	movs	r3, #0
 8005c30:	b148      	cbz	r0, 8005c46 <pow+0x52>
 8005c32:	4630      	mov	r0, r6
 8005c34:	4639      	mov	r1, r7
 8005c36:	f7fa ff4f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d17d      	bne.n	8005d3a <pow+0x146>
 8005c3e:	ec45 4b10 	vmov	d0, r4, r5
 8005c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c46:	4640      	mov	r0, r8
 8005c48:	4649      	mov	r1, r9
 8005c4a:	f7fa ff45 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c4e:	b1e0      	cbz	r0, 8005c8a <pow+0x96>
 8005c50:	2200      	movs	r2, #0
 8005c52:	2300      	movs	r3, #0
 8005c54:	4630      	mov	r0, r6
 8005c56:	4639      	mov	r1, r7
 8005c58:	f7fa ff3e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d16c      	bne.n	8005d3a <pow+0x146>
 8005c60:	ec47 6b10 	vmov	d0, r6, r7
 8005c64:	f001 fa11 	bl	800708a <finite>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d0e8      	beq.n	8005c3e <pow+0x4a>
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2300      	movs	r3, #0
 8005c70:	4630      	mov	r0, r6
 8005c72:	4639      	mov	r1, r7
 8005c74:	f7fa ff3a 	bl	8000aec <__aeabi_dcmplt>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	d0e0      	beq.n	8005c3e <pow+0x4a>
 8005c7c:	f001 fb40 	bl	8007300 <__errno>
 8005c80:	2321      	movs	r3, #33	; 0x21
 8005c82:	6003      	str	r3, [r0, #0]
 8005c84:	2400      	movs	r4, #0
 8005c86:	4d2f      	ldr	r5, [pc, #188]	; (8005d44 <pow+0x150>)
 8005c88:	e7d9      	b.n	8005c3e <pow+0x4a>
 8005c8a:	ec45 4b10 	vmov	d0, r4, r5
 8005c8e:	f001 f9fc 	bl	800708a <finite>
 8005c92:	bbb8      	cbnz	r0, 8005d04 <pow+0x110>
 8005c94:	ec49 8b10 	vmov	d0, r8, r9
 8005c98:	f001 f9f7 	bl	800708a <finite>
 8005c9c:	b390      	cbz	r0, 8005d04 <pow+0x110>
 8005c9e:	ec47 6b10 	vmov	d0, r6, r7
 8005ca2:	f001 f9f2 	bl	800708a <finite>
 8005ca6:	b368      	cbz	r0, 8005d04 <pow+0x110>
 8005ca8:	4622      	mov	r2, r4
 8005caa:	462b      	mov	r3, r5
 8005cac:	4620      	mov	r0, r4
 8005cae:	4629      	mov	r1, r5
 8005cb0:	f7fa ff44 	bl	8000b3c <__aeabi_dcmpun>
 8005cb4:	b160      	cbz	r0, 8005cd0 <pow+0xdc>
 8005cb6:	f001 fb23 	bl	8007300 <__errno>
 8005cba:	2321      	movs	r3, #33	; 0x21
 8005cbc:	6003      	str	r3, [r0, #0]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	f7fa fdc9 	bl	800085c <__aeabi_ddiv>
 8005cca:	4604      	mov	r4, r0
 8005ccc:	460d      	mov	r5, r1
 8005cce:	e7b6      	b.n	8005c3e <pow+0x4a>
 8005cd0:	f001 fb16 	bl	8007300 <__errno>
 8005cd4:	2322      	movs	r3, #34	; 0x22
 8005cd6:	6003      	str	r3, [r0, #0]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2300      	movs	r3, #0
 8005cdc:	4640      	mov	r0, r8
 8005cde:	4649      	mov	r1, r9
 8005ce0:	f7fa ff04 	bl	8000aec <__aeabi_dcmplt>
 8005ce4:	2400      	movs	r4, #0
 8005ce6:	b158      	cbz	r0, 8005d00 <pow+0x10c>
 8005ce8:	ec47 6b10 	vmov	d0, r6, r7
 8005cec:	f001 f9e0 	bl	80070b0 <rint>
 8005cf0:	4632      	mov	r2, r6
 8005cf2:	ec51 0b10 	vmov	r0, r1, d0
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	f7fa feee 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d0c2      	beq.n	8005c86 <pow+0x92>
 8005d00:	4d11      	ldr	r5, [pc, #68]	; (8005d48 <pow+0x154>)
 8005d02:	e79c      	b.n	8005c3e <pow+0x4a>
 8005d04:	2200      	movs	r2, #0
 8005d06:	2300      	movs	r3, #0
 8005d08:	4620      	mov	r0, r4
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	f7fa fee4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d094      	beq.n	8005c3e <pow+0x4a>
 8005d14:	ec49 8b10 	vmov	d0, r8, r9
 8005d18:	f001 f9b7 	bl	800708a <finite>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d08e      	beq.n	8005c3e <pow+0x4a>
 8005d20:	ec47 6b10 	vmov	d0, r6, r7
 8005d24:	f001 f9b1 	bl	800708a <finite>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d088      	beq.n	8005c3e <pow+0x4a>
 8005d2c:	f001 fae8 	bl	8007300 <__errno>
 8005d30:	2322      	movs	r3, #34	; 0x22
 8005d32:	6003      	str	r3, [r0, #0]
 8005d34:	2400      	movs	r4, #0
 8005d36:	2500      	movs	r5, #0
 8005d38:	e781      	b.n	8005c3e <pow+0x4a>
 8005d3a:	4d04      	ldr	r5, [pc, #16]	; (8005d4c <pow+0x158>)
 8005d3c:	2400      	movs	r4, #0
 8005d3e:	e77e      	b.n	8005c3e <pow+0x4a>
 8005d40:	20000029 	.word	0x20000029
 8005d44:	fff00000 	.word	0xfff00000
 8005d48:	7ff00000 	.word	0x7ff00000
 8005d4c:	3ff00000 	.word	0x3ff00000

08005d50 <sqrt>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	ed2d 8b02 	vpush	{d8}
 8005d56:	ec55 4b10 	vmov	r4, r5, d0
 8005d5a:	f000 fe4f 	bl	80069fc <__ieee754_sqrt>
 8005d5e:	4b15      	ldr	r3, [pc, #84]	; (8005db4 <sqrt+0x64>)
 8005d60:	eeb0 8a40 	vmov.f32	s16, s0
 8005d64:	eef0 8a60 	vmov.f32	s17, s1
 8005d68:	f993 3000 	ldrsb.w	r3, [r3]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	d019      	beq.n	8005da4 <sqrt+0x54>
 8005d70:	4622      	mov	r2, r4
 8005d72:	462b      	mov	r3, r5
 8005d74:	4620      	mov	r0, r4
 8005d76:	4629      	mov	r1, r5
 8005d78:	f7fa fee0 	bl	8000b3c <__aeabi_dcmpun>
 8005d7c:	b990      	cbnz	r0, 8005da4 <sqrt+0x54>
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2300      	movs	r3, #0
 8005d82:	4620      	mov	r0, r4
 8005d84:	4629      	mov	r1, r5
 8005d86:	f7fa feb1 	bl	8000aec <__aeabi_dcmplt>
 8005d8a:	b158      	cbz	r0, 8005da4 <sqrt+0x54>
 8005d8c:	f001 fab8 	bl	8007300 <__errno>
 8005d90:	2321      	movs	r3, #33	; 0x21
 8005d92:	6003      	str	r3, [r0, #0]
 8005d94:	2200      	movs	r2, #0
 8005d96:	2300      	movs	r3, #0
 8005d98:	4610      	mov	r0, r2
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	f7fa fd5e 	bl	800085c <__aeabi_ddiv>
 8005da0:	ec41 0b18 	vmov	d8, r0, r1
 8005da4:	eeb0 0a48 	vmov.f32	s0, s16
 8005da8:	eef0 0a68 	vmov.f32	s1, s17
 8005dac:	ecbd 8b02 	vpop	{d8}
 8005db0:	bd38      	pop	{r3, r4, r5, pc}
 8005db2:	bf00      	nop
 8005db4:	20000029 	.word	0x20000029

08005db8 <asinf>:
 8005db8:	b508      	push	{r3, lr}
 8005dba:	ed2d 8b02 	vpush	{d8}
 8005dbe:	eeb0 8a40 	vmov.f32	s16, s0
 8005dc2:	f000 fecf 	bl	8006b64 <__ieee754_asinf>
 8005dc6:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <asinf+0x5c>)
 8005dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	eef0 8a40 	vmov.f32	s17, s0
 8005dd2:	d01a      	beq.n	8005e0a <asinf+0x52>
 8005dd4:	eeb4 8a48 	vcmp.f32	s16, s16
 8005dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ddc:	d615      	bvs.n	8005e0a <asinf+0x52>
 8005dde:	eeb0 0a48 	vmov.f32	s0, s16
 8005de2:	f001 fa77 	bl	80072d4 <fabsf>
 8005de6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005dea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df2:	dd0a      	ble.n	8005e0a <asinf+0x52>
 8005df4:	f001 fa84 	bl	8007300 <__errno>
 8005df8:	ecbd 8b02 	vpop	{d8}
 8005dfc:	2321      	movs	r3, #33	; 0x21
 8005dfe:	6003      	str	r3, [r0, #0]
 8005e00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005e04:	4804      	ldr	r0, [pc, #16]	; (8005e18 <asinf+0x60>)
 8005e06:	f001 ba6d 	b.w	80072e4 <nanf>
 8005e0a:	eeb0 0a68 	vmov.f32	s0, s17
 8005e0e:	ecbd 8b02 	vpop	{d8}
 8005e12:	bd08      	pop	{r3, pc}
 8005e14:	20000029 	.word	0x20000029
 8005e18:	08007da0 	.word	0x08007da0
 8005e1c:	00000000 	.word	0x00000000

08005e20 <__ieee754_atan2>:
 8005e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e24:	ec57 6b11 	vmov	r6, r7, d1
 8005e28:	4273      	negs	r3, r6
 8005e2a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8005fb0 <__ieee754_atan2+0x190>
 8005e2e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8005e32:	4333      	orrs	r3, r6
 8005e34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005e38:	4573      	cmp	r3, lr
 8005e3a:	ec51 0b10 	vmov	r0, r1, d0
 8005e3e:	ee11 8a10 	vmov	r8, s2
 8005e42:	d80a      	bhi.n	8005e5a <__ieee754_atan2+0x3a>
 8005e44:	4244      	negs	r4, r0
 8005e46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e4a:	4304      	orrs	r4, r0
 8005e4c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005e50:	4574      	cmp	r4, lr
 8005e52:	ee10 9a10 	vmov	r9, s0
 8005e56:	468c      	mov	ip, r1
 8005e58:	d907      	bls.n	8005e6a <__ieee754_atan2+0x4a>
 8005e5a:	4632      	mov	r2, r6
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	f7fa fa1d 	bl	800029c <__adddf3>
 8005e62:	ec41 0b10 	vmov	d0, r0, r1
 8005e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e6a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8005e6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005e72:	4334      	orrs	r4, r6
 8005e74:	d103      	bne.n	8005e7e <__ieee754_atan2+0x5e>
 8005e76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e7a:	f000 bf5d 	b.w	8006d38 <atan>
 8005e7e:	17bc      	asrs	r4, r7, #30
 8005e80:	f004 0402 	and.w	r4, r4, #2
 8005e84:	ea53 0909 	orrs.w	r9, r3, r9
 8005e88:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005e8c:	d107      	bne.n	8005e9e <__ieee754_atan2+0x7e>
 8005e8e:	2c02      	cmp	r4, #2
 8005e90:	d060      	beq.n	8005f54 <__ieee754_atan2+0x134>
 8005e92:	2c03      	cmp	r4, #3
 8005e94:	d1e5      	bne.n	8005e62 <__ieee754_atan2+0x42>
 8005e96:	a142      	add	r1, pc, #264	; (adr r1, 8005fa0 <__ieee754_atan2+0x180>)
 8005e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e9c:	e7e1      	b.n	8005e62 <__ieee754_atan2+0x42>
 8005e9e:	ea52 0808 	orrs.w	r8, r2, r8
 8005ea2:	d106      	bne.n	8005eb2 <__ieee754_atan2+0x92>
 8005ea4:	f1bc 0f00 	cmp.w	ip, #0
 8005ea8:	da5f      	bge.n	8005f6a <__ieee754_atan2+0x14a>
 8005eaa:	a13f      	add	r1, pc, #252	; (adr r1, 8005fa8 <__ieee754_atan2+0x188>)
 8005eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eb0:	e7d7      	b.n	8005e62 <__ieee754_atan2+0x42>
 8005eb2:	4572      	cmp	r2, lr
 8005eb4:	d10f      	bne.n	8005ed6 <__ieee754_atan2+0xb6>
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ebc:	d107      	bne.n	8005ece <__ieee754_atan2+0xae>
 8005ebe:	2c02      	cmp	r4, #2
 8005ec0:	d84c      	bhi.n	8005f5c <__ieee754_atan2+0x13c>
 8005ec2:	4b35      	ldr	r3, [pc, #212]	; (8005f98 <__ieee754_atan2+0x178>)
 8005ec4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005ec8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005ecc:	e7c9      	b.n	8005e62 <__ieee754_atan2+0x42>
 8005ece:	2c02      	cmp	r4, #2
 8005ed0:	d848      	bhi.n	8005f64 <__ieee754_atan2+0x144>
 8005ed2:	4b32      	ldr	r3, [pc, #200]	; (8005f9c <__ieee754_atan2+0x17c>)
 8005ed4:	e7f6      	b.n	8005ec4 <__ieee754_atan2+0xa4>
 8005ed6:	4573      	cmp	r3, lr
 8005ed8:	d0e4      	beq.n	8005ea4 <__ieee754_atan2+0x84>
 8005eda:	1a9b      	subs	r3, r3, r2
 8005edc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005ee0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005ee4:	da1e      	bge.n	8005f24 <__ieee754_atan2+0x104>
 8005ee6:	2f00      	cmp	r7, #0
 8005ee8:	da01      	bge.n	8005eee <__ieee754_atan2+0xce>
 8005eea:	323c      	adds	r2, #60	; 0x3c
 8005eec:	db1e      	blt.n	8005f2c <__ieee754_atan2+0x10c>
 8005eee:	4632      	mov	r2, r6
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	f7fa fcb3 	bl	800085c <__aeabi_ddiv>
 8005ef6:	ec41 0b10 	vmov	d0, r0, r1
 8005efa:	f001 f8bd 	bl	8007078 <fabs>
 8005efe:	f000 ff1b 	bl	8006d38 <atan>
 8005f02:	ec51 0b10 	vmov	r0, r1, d0
 8005f06:	2c01      	cmp	r4, #1
 8005f08:	d013      	beq.n	8005f32 <__ieee754_atan2+0x112>
 8005f0a:	2c02      	cmp	r4, #2
 8005f0c:	d015      	beq.n	8005f3a <__ieee754_atan2+0x11a>
 8005f0e:	2c00      	cmp	r4, #0
 8005f10:	d0a7      	beq.n	8005e62 <__ieee754_atan2+0x42>
 8005f12:	a319      	add	r3, pc, #100	; (adr r3, 8005f78 <__ieee754_atan2+0x158>)
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f7fa f9be 	bl	8000298 <__aeabi_dsub>
 8005f1c:	a318      	add	r3, pc, #96	; (adr r3, 8005f80 <__ieee754_atan2+0x160>)
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	e014      	b.n	8005f4e <__ieee754_atan2+0x12e>
 8005f24:	a118      	add	r1, pc, #96	; (adr r1, 8005f88 <__ieee754_atan2+0x168>)
 8005f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f2a:	e7ec      	b.n	8005f06 <__ieee754_atan2+0xe6>
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	2100      	movs	r1, #0
 8005f30:	e7e9      	b.n	8005f06 <__ieee754_atan2+0xe6>
 8005f32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f36:	4619      	mov	r1, r3
 8005f38:	e793      	b.n	8005e62 <__ieee754_atan2+0x42>
 8005f3a:	a30f      	add	r3, pc, #60	; (adr r3, 8005f78 <__ieee754_atan2+0x158>)
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f7fa f9aa 	bl	8000298 <__aeabi_dsub>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	a10d      	add	r1, pc, #52	; (adr r1, 8005f80 <__ieee754_atan2+0x160>)
 8005f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f4e:	f7fa f9a3 	bl	8000298 <__aeabi_dsub>
 8005f52:	e786      	b.n	8005e62 <__ieee754_atan2+0x42>
 8005f54:	a10a      	add	r1, pc, #40	; (adr r1, 8005f80 <__ieee754_atan2+0x160>)
 8005f56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f5a:	e782      	b.n	8005e62 <__ieee754_atan2+0x42>
 8005f5c:	a10c      	add	r1, pc, #48	; (adr r1, 8005f90 <__ieee754_atan2+0x170>)
 8005f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f62:	e77e      	b.n	8005e62 <__ieee754_atan2+0x42>
 8005f64:	2000      	movs	r0, #0
 8005f66:	2100      	movs	r1, #0
 8005f68:	e77b      	b.n	8005e62 <__ieee754_atan2+0x42>
 8005f6a:	a107      	add	r1, pc, #28	; (adr r1, 8005f88 <__ieee754_atan2+0x168>)
 8005f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f70:	e777      	b.n	8005e62 <__ieee754_atan2+0x42>
 8005f72:	bf00      	nop
 8005f74:	f3af 8000 	nop.w
 8005f78:	33145c07 	.word	0x33145c07
 8005f7c:	3ca1a626 	.word	0x3ca1a626
 8005f80:	54442d18 	.word	0x54442d18
 8005f84:	400921fb 	.word	0x400921fb
 8005f88:	54442d18 	.word	0x54442d18
 8005f8c:	3ff921fb 	.word	0x3ff921fb
 8005f90:	54442d18 	.word	0x54442d18
 8005f94:	3fe921fb 	.word	0x3fe921fb
 8005f98:	08007e40 	.word	0x08007e40
 8005f9c:	08007e58 	.word	0x08007e58
 8005fa0:	54442d18 	.word	0x54442d18
 8005fa4:	c00921fb 	.word	0xc00921fb
 8005fa8:	54442d18 	.word	0x54442d18
 8005fac:	bff921fb 	.word	0xbff921fb
 8005fb0:	7ff00000 	.word	0x7ff00000
 8005fb4:	00000000 	.word	0x00000000

08005fb8 <__ieee754_pow>:
 8005fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	ed2d 8b06 	vpush	{d8-d10}
 8005fc0:	b08d      	sub	sp, #52	; 0x34
 8005fc2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005fc6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8005fca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005fce:	ea56 0100 	orrs.w	r1, r6, r0
 8005fd2:	ec53 2b10 	vmov	r2, r3, d0
 8005fd6:	f000 84d1 	beq.w	800697c <__ieee754_pow+0x9c4>
 8005fda:	497f      	ldr	r1, [pc, #508]	; (80061d8 <__ieee754_pow+0x220>)
 8005fdc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005fe0:	428c      	cmp	r4, r1
 8005fe2:	ee10 8a10 	vmov	r8, s0
 8005fe6:	4699      	mov	r9, r3
 8005fe8:	dc09      	bgt.n	8005ffe <__ieee754_pow+0x46>
 8005fea:	d103      	bne.n	8005ff4 <__ieee754_pow+0x3c>
 8005fec:	b97a      	cbnz	r2, 800600e <__ieee754_pow+0x56>
 8005fee:	42a6      	cmp	r6, r4
 8005ff0:	dd02      	ble.n	8005ff8 <__ieee754_pow+0x40>
 8005ff2:	e00c      	b.n	800600e <__ieee754_pow+0x56>
 8005ff4:	428e      	cmp	r6, r1
 8005ff6:	dc02      	bgt.n	8005ffe <__ieee754_pow+0x46>
 8005ff8:	428e      	cmp	r6, r1
 8005ffa:	d110      	bne.n	800601e <__ieee754_pow+0x66>
 8005ffc:	b178      	cbz	r0, 800601e <__ieee754_pow+0x66>
 8005ffe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006002:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006006:	ea54 0308 	orrs.w	r3, r4, r8
 800600a:	f000 84b7 	beq.w	800697c <__ieee754_pow+0x9c4>
 800600e:	4873      	ldr	r0, [pc, #460]	; (80061dc <__ieee754_pow+0x224>)
 8006010:	b00d      	add	sp, #52	; 0x34
 8006012:	ecbd 8b06 	vpop	{d8-d10}
 8006016:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601a:	f001 b841 	b.w	80070a0 <nan>
 800601e:	f1b9 0f00 	cmp.w	r9, #0
 8006022:	da36      	bge.n	8006092 <__ieee754_pow+0xda>
 8006024:	496e      	ldr	r1, [pc, #440]	; (80061e0 <__ieee754_pow+0x228>)
 8006026:	428e      	cmp	r6, r1
 8006028:	dc51      	bgt.n	80060ce <__ieee754_pow+0x116>
 800602a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800602e:	428e      	cmp	r6, r1
 8006030:	f340 84af 	ble.w	8006992 <__ieee754_pow+0x9da>
 8006034:	1531      	asrs	r1, r6, #20
 8006036:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800603a:	2914      	cmp	r1, #20
 800603c:	dd0f      	ble.n	800605e <__ieee754_pow+0xa6>
 800603e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8006042:	fa20 fc01 	lsr.w	ip, r0, r1
 8006046:	fa0c f101 	lsl.w	r1, ip, r1
 800604a:	4281      	cmp	r1, r0
 800604c:	f040 84a1 	bne.w	8006992 <__ieee754_pow+0x9da>
 8006050:	f00c 0c01 	and.w	ip, ip, #1
 8006054:	f1cc 0102 	rsb	r1, ip, #2
 8006058:	9100      	str	r1, [sp, #0]
 800605a:	b180      	cbz	r0, 800607e <__ieee754_pow+0xc6>
 800605c:	e059      	b.n	8006112 <__ieee754_pow+0x15a>
 800605e:	2800      	cmp	r0, #0
 8006060:	d155      	bne.n	800610e <__ieee754_pow+0x156>
 8006062:	f1c1 0114 	rsb	r1, r1, #20
 8006066:	fa46 fc01 	asr.w	ip, r6, r1
 800606a:	fa0c f101 	lsl.w	r1, ip, r1
 800606e:	42b1      	cmp	r1, r6
 8006070:	f040 848c 	bne.w	800698c <__ieee754_pow+0x9d4>
 8006074:	f00c 0c01 	and.w	ip, ip, #1
 8006078:	f1cc 0102 	rsb	r1, ip, #2
 800607c:	9100      	str	r1, [sp, #0]
 800607e:	4959      	ldr	r1, [pc, #356]	; (80061e4 <__ieee754_pow+0x22c>)
 8006080:	428e      	cmp	r6, r1
 8006082:	d12d      	bne.n	80060e0 <__ieee754_pow+0x128>
 8006084:	2f00      	cmp	r7, #0
 8006086:	da79      	bge.n	800617c <__ieee754_pow+0x1c4>
 8006088:	4956      	ldr	r1, [pc, #344]	; (80061e4 <__ieee754_pow+0x22c>)
 800608a:	2000      	movs	r0, #0
 800608c:	f7fa fbe6 	bl	800085c <__aeabi_ddiv>
 8006090:	e016      	b.n	80060c0 <__ieee754_pow+0x108>
 8006092:	2100      	movs	r1, #0
 8006094:	9100      	str	r1, [sp, #0]
 8006096:	2800      	cmp	r0, #0
 8006098:	d13b      	bne.n	8006112 <__ieee754_pow+0x15a>
 800609a:	494f      	ldr	r1, [pc, #316]	; (80061d8 <__ieee754_pow+0x220>)
 800609c:	428e      	cmp	r6, r1
 800609e:	d1ee      	bne.n	800607e <__ieee754_pow+0xc6>
 80060a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80060a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80060a8:	ea53 0308 	orrs.w	r3, r3, r8
 80060ac:	f000 8466 	beq.w	800697c <__ieee754_pow+0x9c4>
 80060b0:	4b4d      	ldr	r3, [pc, #308]	; (80061e8 <__ieee754_pow+0x230>)
 80060b2:	429c      	cmp	r4, r3
 80060b4:	dd0d      	ble.n	80060d2 <__ieee754_pow+0x11a>
 80060b6:	2f00      	cmp	r7, #0
 80060b8:	f280 8464 	bge.w	8006984 <__ieee754_pow+0x9cc>
 80060bc:	2000      	movs	r0, #0
 80060be:	2100      	movs	r1, #0
 80060c0:	ec41 0b10 	vmov	d0, r0, r1
 80060c4:	b00d      	add	sp, #52	; 0x34
 80060c6:	ecbd 8b06 	vpop	{d8-d10}
 80060ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ce:	2102      	movs	r1, #2
 80060d0:	e7e0      	b.n	8006094 <__ieee754_pow+0xdc>
 80060d2:	2f00      	cmp	r7, #0
 80060d4:	daf2      	bge.n	80060bc <__ieee754_pow+0x104>
 80060d6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80060da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80060de:	e7ef      	b.n	80060c0 <__ieee754_pow+0x108>
 80060e0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80060e4:	d104      	bne.n	80060f0 <__ieee754_pow+0x138>
 80060e6:	4610      	mov	r0, r2
 80060e8:	4619      	mov	r1, r3
 80060ea:	f7fa fa8d 	bl	8000608 <__aeabi_dmul>
 80060ee:	e7e7      	b.n	80060c0 <__ieee754_pow+0x108>
 80060f0:	493e      	ldr	r1, [pc, #248]	; (80061ec <__ieee754_pow+0x234>)
 80060f2:	428f      	cmp	r7, r1
 80060f4:	d10d      	bne.n	8006112 <__ieee754_pow+0x15a>
 80060f6:	f1b9 0f00 	cmp.w	r9, #0
 80060fa:	db0a      	blt.n	8006112 <__ieee754_pow+0x15a>
 80060fc:	ec43 2b10 	vmov	d0, r2, r3
 8006100:	b00d      	add	sp, #52	; 0x34
 8006102:	ecbd 8b06 	vpop	{d8-d10}
 8006106:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610a:	f000 bc77 	b.w	80069fc <__ieee754_sqrt>
 800610e:	2100      	movs	r1, #0
 8006110:	9100      	str	r1, [sp, #0]
 8006112:	ec43 2b10 	vmov	d0, r2, r3
 8006116:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800611a:	f000 ffad 	bl	8007078 <fabs>
 800611e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006122:	ec51 0b10 	vmov	r0, r1, d0
 8006126:	f1b8 0f00 	cmp.w	r8, #0
 800612a:	d12a      	bne.n	8006182 <__ieee754_pow+0x1ca>
 800612c:	b12c      	cbz	r4, 800613a <__ieee754_pow+0x182>
 800612e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80061e4 <__ieee754_pow+0x22c>
 8006132:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8006136:	45e6      	cmp	lr, ip
 8006138:	d123      	bne.n	8006182 <__ieee754_pow+0x1ca>
 800613a:	2f00      	cmp	r7, #0
 800613c:	da05      	bge.n	800614a <__ieee754_pow+0x192>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	2000      	movs	r0, #0
 8006144:	4927      	ldr	r1, [pc, #156]	; (80061e4 <__ieee754_pow+0x22c>)
 8006146:	f7fa fb89 	bl	800085c <__aeabi_ddiv>
 800614a:	f1b9 0f00 	cmp.w	r9, #0
 800614e:	dab7      	bge.n	80060c0 <__ieee754_pow+0x108>
 8006150:	9b00      	ldr	r3, [sp, #0]
 8006152:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006156:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800615a:	4323      	orrs	r3, r4
 800615c:	d108      	bne.n	8006170 <__ieee754_pow+0x1b8>
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	4610      	mov	r0, r2
 8006164:	4619      	mov	r1, r3
 8006166:	f7fa f897 	bl	8000298 <__aeabi_dsub>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	e78d      	b.n	800608c <__ieee754_pow+0xd4>
 8006170:	9b00      	ldr	r3, [sp, #0]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d1a4      	bne.n	80060c0 <__ieee754_pow+0x108>
 8006176:	4602      	mov	r2, r0
 8006178:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800617c:	4610      	mov	r0, r2
 800617e:	4619      	mov	r1, r3
 8006180:	e79e      	b.n	80060c0 <__ieee754_pow+0x108>
 8006182:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8006186:	f10c 35ff 	add.w	r5, ip, #4294967295
 800618a:	950a      	str	r5, [sp, #40]	; 0x28
 800618c:	9d00      	ldr	r5, [sp, #0]
 800618e:	46ac      	mov	ip, r5
 8006190:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006192:	ea5c 0505 	orrs.w	r5, ip, r5
 8006196:	d0e4      	beq.n	8006162 <__ieee754_pow+0x1aa>
 8006198:	4b15      	ldr	r3, [pc, #84]	; (80061f0 <__ieee754_pow+0x238>)
 800619a:	429e      	cmp	r6, r3
 800619c:	f340 80fc 	ble.w	8006398 <__ieee754_pow+0x3e0>
 80061a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80061a4:	429e      	cmp	r6, r3
 80061a6:	4b10      	ldr	r3, [pc, #64]	; (80061e8 <__ieee754_pow+0x230>)
 80061a8:	dd07      	ble.n	80061ba <__ieee754_pow+0x202>
 80061aa:	429c      	cmp	r4, r3
 80061ac:	dc0a      	bgt.n	80061c4 <__ieee754_pow+0x20c>
 80061ae:	2f00      	cmp	r7, #0
 80061b0:	da84      	bge.n	80060bc <__ieee754_pow+0x104>
 80061b2:	a307      	add	r3, pc, #28	; (adr r3, 80061d0 <__ieee754_pow+0x218>)
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	e795      	b.n	80060e6 <__ieee754_pow+0x12e>
 80061ba:	429c      	cmp	r4, r3
 80061bc:	dbf7      	blt.n	80061ae <__ieee754_pow+0x1f6>
 80061be:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <__ieee754_pow+0x22c>)
 80061c0:	429c      	cmp	r4, r3
 80061c2:	dd17      	ble.n	80061f4 <__ieee754_pow+0x23c>
 80061c4:	2f00      	cmp	r7, #0
 80061c6:	dcf4      	bgt.n	80061b2 <__ieee754_pow+0x1fa>
 80061c8:	e778      	b.n	80060bc <__ieee754_pow+0x104>
 80061ca:	bf00      	nop
 80061cc:	f3af 8000 	nop.w
 80061d0:	8800759c 	.word	0x8800759c
 80061d4:	7e37e43c 	.word	0x7e37e43c
 80061d8:	7ff00000 	.word	0x7ff00000
 80061dc:	08007da0 	.word	0x08007da0
 80061e0:	433fffff 	.word	0x433fffff
 80061e4:	3ff00000 	.word	0x3ff00000
 80061e8:	3fefffff 	.word	0x3fefffff
 80061ec:	3fe00000 	.word	0x3fe00000
 80061f0:	41e00000 	.word	0x41e00000
 80061f4:	4b64      	ldr	r3, [pc, #400]	; (8006388 <__ieee754_pow+0x3d0>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	f7fa f84e 	bl	8000298 <__aeabi_dsub>
 80061fc:	a356      	add	r3, pc, #344	; (adr r3, 8006358 <__ieee754_pow+0x3a0>)
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	4604      	mov	r4, r0
 8006204:	460d      	mov	r5, r1
 8006206:	f7fa f9ff 	bl	8000608 <__aeabi_dmul>
 800620a:	a355      	add	r3, pc, #340	; (adr r3, 8006360 <__ieee754_pow+0x3a8>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	4606      	mov	r6, r0
 8006212:	460f      	mov	r7, r1
 8006214:	4620      	mov	r0, r4
 8006216:	4629      	mov	r1, r5
 8006218:	f7fa f9f6 	bl	8000608 <__aeabi_dmul>
 800621c:	4b5b      	ldr	r3, [pc, #364]	; (800638c <__ieee754_pow+0x3d4>)
 800621e:	4682      	mov	sl, r0
 8006220:	468b      	mov	fp, r1
 8006222:	2200      	movs	r2, #0
 8006224:	4620      	mov	r0, r4
 8006226:	4629      	mov	r1, r5
 8006228:	f7fa f9ee 	bl	8000608 <__aeabi_dmul>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	a14d      	add	r1, pc, #308	; (adr r1, 8006368 <__ieee754_pow+0x3b0>)
 8006232:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006236:	f7fa f82f 	bl	8000298 <__aeabi_dsub>
 800623a:	4622      	mov	r2, r4
 800623c:	462b      	mov	r3, r5
 800623e:	f7fa f9e3 	bl	8000608 <__aeabi_dmul>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	2000      	movs	r0, #0
 8006248:	4951      	ldr	r1, [pc, #324]	; (8006390 <__ieee754_pow+0x3d8>)
 800624a:	f7fa f825 	bl	8000298 <__aeabi_dsub>
 800624e:	4622      	mov	r2, r4
 8006250:	4680      	mov	r8, r0
 8006252:	4689      	mov	r9, r1
 8006254:	462b      	mov	r3, r5
 8006256:	4620      	mov	r0, r4
 8006258:	4629      	mov	r1, r5
 800625a:	f7fa f9d5 	bl	8000608 <__aeabi_dmul>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4640      	mov	r0, r8
 8006264:	4649      	mov	r1, r9
 8006266:	f7fa f9cf 	bl	8000608 <__aeabi_dmul>
 800626a:	a341      	add	r3, pc, #260	; (adr r3, 8006370 <__ieee754_pow+0x3b8>)
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	f7fa f9ca 	bl	8000608 <__aeabi_dmul>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4650      	mov	r0, sl
 800627a:	4659      	mov	r1, fp
 800627c:	f7fa f80c 	bl	8000298 <__aeabi_dsub>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4680      	mov	r8, r0
 8006286:	4689      	mov	r9, r1
 8006288:	4630      	mov	r0, r6
 800628a:	4639      	mov	r1, r7
 800628c:	f7fa f806 	bl	800029c <__adddf3>
 8006290:	2400      	movs	r4, #0
 8006292:	4632      	mov	r2, r6
 8006294:	463b      	mov	r3, r7
 8006296:	4620      	mov	r0, r4
 8006298:	460d      	mov	r5, r1
 800629a:	f7f9 fffd 	bl	8000298 <__aeabi_dsub>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4640      	mov	r0, r8
 80062a4:	4649      	mov	r1, r9
 80062a6:	f7f9 fff7 	bl	8000298 <__aeabi_dsub>
 80062aa:	9b00      	ldr	r3, [sp, #0]
 80062ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062ae:	3b01      	subs	r3, #1
 80062b0:	4313      	orrs	r3, r2
 80062b2:	4682      	mov	sl, r0
 80062b4:	468b      	mov	fp, r1
 80062b6:	f040 81f1 	bne.w	800669c <__ieee754_pow+0x6e4>
 80062ba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006378 <__ieee754_pow+0x3c0>
 80062be:	eeb0 8a47 	vmov.f32	s16, s14
 80062c2:	eef0 8a67 	vmov.f32	s17, s15
 80062c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062ca:	2600      	movs	r6, #0
 80062cc:	4632      	mov	r2, r6
 80062ce:	463b      	mov	r3, r7
 80062d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062d4:	f7f9 ffe0 	bl	8000298 <__aeabi_dsub>
 80062d8:	4622      	mov	r2, r4
 80062da:	462b      	mov	r3, r5
 80062dc:	f7fa f994 	bl	8000608 <__aeabi_dmul>
 80062e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062e4:	4680      	mov	r8, r0
 80062e6:	4689      	mov	r9, r1
 80062e8:	4650      	mov	r0, sl
 80062ea:	4659      	mov	r1, fp
 80062ec:	f7fa f98c 	bl	8000608 <__aeabi_dmul>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4640      	mov	r0, r8
 80062f6:	4649      	mov	r1, r9
 80062f8:	f7f9 ffd0 	bl	800029c <__adddf3>
 80062fc:	4632      	mov	r2, r6
 80062fe:	463b      	mov	r3, r7
 8006300:	4680      	mov	r8, r0
 8006302:	4689      	mov	r9, r1
 8006304:	4620      	mov	r0, r4
 8006306:	4629      	mov	r1, r5
 8006308:	f7fa f97e 	bl	8000608 <__aeabi_dmul>
 800630c:	460b      	mov	r3, r1
 800630e:	4604      	mov	r4, r0
 8006310:	460d      	mov	r5, r1
 8006312:	4602      	mov	r2, r0
 8006314:	4649      	mov	r1, r9
 8006316:	4640      	mov	r0, r8
 8006318:	f7f9 ffc0 	bl	800029c <__adddf3>
 800631c:	4b1d      	ldr	r3, [pc, #116]	; (8006394 <__ieee754_pow+0x3dc>)
 800631e:	4299      	cmp	r1, r3
 8006320:	ec45 4b19 	vmov	d9, r4, r5
 8006324:	4606      	mov	r6, r0
 8006326:	460f      	mov	r7, r1
 8006328:	468b      	mov	fp, r1
 800632a:	f340 82fe 	ble.w	800692a <__ieee754_pow+0x972>
 800632e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006332:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006336:	4303      	orrs	r3, r0
 8006338:	f000 81f0 	beq.w	800671c <__ieee754_pow+0x764>
 800633c:	a310      	add	r3, pc, #64	; (adr r3, 8006380 <__ieee754_pow+0x3c8>)
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	ec51 0b18 	vmov	r0, r1, d8
 8006346:	f7fa f95f 	bl	8000608 <__aeabi_dmul>
 800634a:	a30d      	add	r3, pc, #52	; (adr r3, 8006380 <__ieee754_pow+0x3c8>)
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	e6cb      	b.n	80060ea <__ieee754_pow+0x132>
 8006352:	bf00      	nop
 8006354:	f3af 8000 	nop.w
 8006358:	60000000 	.word	0x60000000
 800635c:	3ff71547 	.word	0x3ff71547
 8006360:	f85ddf44 	.word	0xf85ddf44
 8006364:	3e54ae0b 	.word	0x3e54ae0b
 8006368:	55555555 	.word	0x55555555
 800636c:	3fd55555 	.word	0x3fd55555
 8006370:	652b82fe 	.word	0x652b82fe
 8006374:	3ff71547 	.word	0x3ff71547
 8006378:	00000000 	.word	0x00000000
 800637c:	bff00000 	.word	0xbff00000
 8006380:	8800759c 	.word	0x8800759c
 8006384:	7e37e43c 	.word	0x7e37e43c
 8006388:	3ff00000 	.word	0x3ff00000
 800638c:	3fd00000 	.word	0x3fd00000
 8006390:	3fe00000 	.word	0x3fe00000
 8006394:	408fffff 	.word	0x408fffff
 8006398:	4bd7      	ldr	r3, [pc, #860]	; (80066f8 <__ieee754_pow+0x740>)
 800639a:	ea03 0309 	and.w	r3, r3, r9
 800639e:	2200      	movs	r2, #0
 80063a0:	b92b      	cbnz	r3, 80063ae <__ieee754_pow+0x3f6>
 80063a2:	4bd6      	ldr	r3, [pc, #856]	; (80066fc <__ieee754_pow+0x744>)
 80063a4:	f7fa f930 	bl	8000608 <__aeabi_dmul>
 80063a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80063ac:	460c      	mov	r4, r1
 80063ae:	1523      	asrs	r3, r4, #20
 80063b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80063b4:	4413      	add	r3, r2
 80063b6:	9309      	str	r3, [sp, #36]	; 0x24
 80063b8:	4bd1      	ldr	r3, [pc, #836]	; (8006700 <__ieee754_pow+0x748>)
 80063ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80063be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80063c2:	429c      	cmp	r4, r3
 80063c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80063c8:	dd08      	ble.n	80063dc <__ieee754_pow+0x424>
 80063ca:	4bce      	ldr	r3, [pc, #824]	; (8006704 <__ieee754_pow+0x74c>)
 80063cc:	429c      	cmp	r4, r3
 80063ce:	f340 8163 	ble.w	8006698 <__ieee754_pow+0x6e0>
 80063d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d4:	3301      	adds	r3, #1
 80063d6:	9309      	str	r3, [sp, #36]	; 0x24
 80063d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80063dc:	2400      	movs	r4, #0
 80063de:	00e3      	lsls	r3, r4, #3
 80063e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80063e2:	4bc9      	ldr	r3, [pc, #804]	; (8006708 <__ieee754_pow+0x750>)
 80063e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063e8:	ed93 7b00 	vldr	d7, [r3]
 80063ec:	4629      	mov	r1, r5
 80063ee:	ec53 2b17 	vmov	r2, r3, d7
 80063f2:	eeb0 8a47 	vmov.f32	s16, s14
 80063f6:	eef0 8a67 	vmov.f32	s17, s15
 80063fa:	4682      	mov	sl, r0
 80063fc:	f7f9 ff4c 	bl	8000298 <__aeabi_dsub>
 8006400:	4652      	mov	r2, sl
 8006402:	4606      	mov	r6, r0
 8006404:	460f      	mov	r7, r1
 8006406:	462b      	mov	r3, r5
 8006408:	ec51 0b18 	vmov	r0, r1, d8
 800640c:	f7f9 ff46 	bl	800029c <__adddf3>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	2000      	movs	r0, #0
 8006416:	49bd      	ldr	r1, [pc, #756]	; (800670c <__ieee754_pow+0x754>)
 8006418:	f7fa fa20 	bl	800085c <__aeabi_ddiv>
 800641c:	ec41 0b19 	vmov	d9, r0, r1
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4630      	mov	r0, r6
 8006426:	4639      	mov	r1, r7
 8006428:	f7fa f8ee 	bl	8000608 <__aeabi_dmul>
 800642c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006430:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006434:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006438:	2300      	movs	r3, #0
 800643a:	9304      	str	r3, [sp, #16]
 800643c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006440:	46ab      	mov	fp, r5
 8006442:	106d      	asrs	r5, r5, #1
 8006444:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006448:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800644c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006450:	2200      	movs	r2, #0
 8006452:	4640      	mov	r0, r8
 8006454:	4649      	mov	r1, r9
 8006456:	4614      	mov	r4, r2
 8006458:	461d      	mov	r5, r3
 800645a:	f7fa f8d5 	bl	8000608 <__aeabi_dmul>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4630      	mov	r0, r6
 8006464:	4639      	mov	r1, r7
 8006466:	f7f9 ff17 	bl	8000298 <__aeabi_dsub>
 800646a:	ec53 2b18 	vmov	r2, r3, d8
 800646e:	4606      	mov	r6, r0
 8006470:	460f      	mov	r7, r1
 8006472:	4620      	mov	r0, r4
 8006474:	4629      	mov	r1, r5
 8006476:	f7f9 ff0f 	bl	8000298 <__aeabi_dsub>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4650      	mov	r0, sl
 8006480:	4659      	mov	r1, fp
 8006482:	f7f9 ff09 	bl	8000298 <__aeabi_dsub>
 8006486:	4642      	mov	r2, r8
 8006488:	464b      	mov	r3, r9
 800648a:	f7fa f8bd 	bl	8000608 <__aeabi_dmul>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4630      	mov	r0, r6
 8006494:	4639      	mov	r1, r7
 8006496:	f7f9 feff 	bl	8000298 <__aeabi_dsub>
 800649a:	ec53 2b19 	vmov	r2, r3, d9
 800649e:	f7fa f8b3 	bl	8000608 <__aeabi_dmul>
 80064a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064a6:	ec41 0b18 	vmov	d8, r0, r1
 80064aa:	4610      	mov	r0, r2
 80064ac:	4619      	mov	r1, r3
 80064ae:	f7fa f8ab 	bl	8000608 <__aeabi_dmul>
 80064b2:	a37d      	add	r3, pc, #500	; (adr r3, 80066a8 <__ieee754_pow+0x6f0>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	4604      	mov	r4, r0
 80064ba:	460d      	mov	r5, r1
 80064bc:	f7fa f8a4 	bl	8000608 <__aeabi_dmul>
 80064c0:	a37b      	add	r3, pc, #492	; (adr r3, 80066b0 <__ieee754_pow+0x6f8>)
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	f7f9 fee9 	bl	800029c <__adddf3>
 80064ca:	4622      	mov	r2, r4
 80064cc:	462b      	mov	r3, r5
 80064ce:	f7fa f89b 	bl	8000608 <__aeabi_dmul>
 80064d2:	a379      	add	r3, pc, #484	; (adr r3, 80066b8 <__ieee754_pow+0x700>)
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f7f9 fee0 	bl	800029c <__adddf3>
 80064dc:	4622      	mov	r2, r4
 80064de:	462b      	mov	r3, r5
 80064e0:	f7fa f892 	bl	8000608 <__aeabi_dmul>
 80064e4:	a376      	add	r3, pc, #472	; (adr r3, 80066c0 <__ieee754_pow+0x708>)
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f7f9 fed7 	bl	800029c <__adddf3>
 80064ee:	4622      	mov	r2, r4
 80064f0:	462b      	mov	r3, r5
 80064f2:	f7fa f889 	bl	8000608 <__aeabi_dmul>
 80064f6:	a374      	add	r3, pc, #464	; (adr r3, 80066c8 <__ieee754_pow+0x710>)
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	f7f9 fece 	bl	800029c <__adddf3>
 8006500:	4622      	mov	r2, r4
 8006502:	462b      	mov	r3, r5
 8006504:	f7fa f880 	bl	8000608 <__aeabi_dmul>
 8006508:	a371      	add	r3, pc, #452	; (adr r3, 80066d0 <__ieee754_pow+0x718>)
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	f7f9 fec5 	bl	800029c <__adddf3>
 8006512:	4622      	mov	r2, r4
 8006514:	4606      	mov	r6, r0
 8006516:	460f      	mov	r7, r1
 8006518:	462b      	mov	r3, r5
 800651a:	4620      	mov	r0, r4
 800651c:	4629      	mov	r1, r5
 800651e:	f7fa f873 	bl	8000608 <__aeabi_dmul>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4630      	mov	r0, r6
 8006528:	4639      	mov	r1, r7
 800652a:	f7fa f86d 	bl	8000608 <__aeabi_dmul>
 800652e:	4642      	mov	r2, r8
 8006530:	4604      	mov	r4, r0
 8006532:	460d      	mov	r5, r1
 8006534:	464b      	mov	r3, r9
 8006536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800653a:	f7f9 feaf 	bl	800029c <__adddf3>
 800653e:	ec53 2b18 	vmov	r2, r3, d8
 8006542:	f7fa f861 	bl	8000608 <__aeabi_dmul>
 8006546:	4622      	mov	r2, r4
 8006548:	462b      	mov	r3, r5
 800654a:	f7f9 fea7 	bl	800029c <__adddf3>
 800654e:	4642      	mov	r2, r8
 8006550:	4682      	mov	sl, r0
 8006552:	468b      	mov	fp, r1
 8006554:	464b      	mov	r3, r9
 8006556:	4640      	mov	r0, r8
 8006558:	4649      	mov	r1, r9
 800655a:	f7fa f855 	bl	8000608 <__aeabi_dmul>
 800655e:	4b6c      	ldr	r3, [pc, #432]	; (8006710 <__ieee754_pow+0x758>)
 8006560:	2200      	movs	r2, #0
 8006562:	4606      	mov	r6, r0
 8006564:	460f      	mov	r7, r1
 8006566:	f7f9 fe99 	bl	800029c <__adddf3>
 800656a:	4652      	mov	r2, sl
 800656c:	465b      	mov	r3, fp
 800656e:	f7f9 fe95 	bl	800029c <__adddf3>
 8006572:	9c04      	ldr	r4, [sp, #16]
 8006574:	460d      	mov	r5, r1
 8006576:	4622      	mov	r2, r4
 8006578:	460b      	mov	r3, r1
 800657a:	4640      	mov	r0, r8
 800657c:	4649      	mov	r1, r9
 800657e:	f7fa f843 	bl	8000608 <__aeabi_dmul>
 8006582:	4b63      	ldr	r3, [pc, #396]	; (8006710 <__ieee754_pow+0x758>)
 8006584:	4680      	mov	r8, r0
 8006586:	4689      	mov	r9, r1
 8006588:	2200      	movs	r2, #0
 800658a:	4620      	mov	r0, r4
 800658c:	4629      	mov	r1, r5
 800658e:	f7f9 fe83 	bl	8000298 <__aeabi_dsub>
 8006592:	4632      	mov	r2, r6
 8006594:	463b      	mov	r3, r7
 8006596:	f7f9 fe7f 	bl	8000298 <__aeabi_dsub>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4650      	mov	r0, sl
 80065a0:	4659      	mov	r1, fp
 80065a2:	f7f9 fe79 	bl	8000298 <__aeabi_dsub>
 80065a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065aa:	f7fa f82d 	bl	8000608 <__aeabi_dmul>
 80065ae:	4622      	mov	r2, r4
 80065b0:	4606      	mov	r6, r0
 80065b2:	460f      	mov	r7, r1
 80065b4:	462b      	mov	r3, r5
 80065b6:	ec51 0b18 	vmov	r0, r1, d8
 80065ba:	f7fa f825 	bl	8000608 <__aeabi_dmul>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4630      	mov	r0, r6
 80065c4:	4639      	mov	r1, r7
 80065c6:	f7f9 fe69 	bl	800029c <__adddf3>
 80065ca:	4606      	mov	r6, r0
 80065cc:	460f      	mov	r7, r1
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	4640      	mov	r0, r8
 80065d4:	4649      	mov	r1, r9
 80065d6:	f7f9 fe61 	bl	800029c <__adddf3>
 80065da:	9c04      	ldr	r4, [sp, #16]
 80065dc:	a33e      	add	r3, pc, #248	; (adr r3, 80066d8 <__ieee754_pow+0x720>)
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	4620      	mov	r0, r4
 80065e4:	460d      	mov	r5, r1
 80065e6:	f7fa f80f 	bl	8000608 <__aeabi_dmul>
 80065ea:	4642      	mov	r2, r8
 80065ec:	ec41 0b18 	vmov	d8, r0, r1
 80065f0:	464b      	mov	r3, r9
 80065f2:	4620      	mov	r0, r4
 80065f4:	4629      	mov	r1, r5
 80065f6:	f7f9 fe4f 	bl	8000298 <__aeabi_dsub>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4630      	mov	r0, r6
 8006600:	4639      	mov	r1, r7
 8006602:	f7f9 fe49 	bl	8000298 <__aeabi_dsub>
 8006606:	a336      	add	r3, pc, #216	; (adr r3, 80066e0 <__ieee754_pow+0x728>)
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	f7f9 fffc 	bl	8000608 <__aeabi_dmul>
 8006610:	a335      	add	r3, pc, #212	; (adr r3, 80066e8 <__ieee754_pow+0x730>)
 8006612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006616:	4606      	mov	r6, r0
 8006618:	460f      	mov	r7, r1
 800661a:	4620      	mov	r0, r4
 800661c:	4629      	mov	r1, r5
 800661e:	f7f9 fff3 	bl	8000608 <__aeabi_dmul>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	4630      	mov	r0, r6
 8006628:	4639      	mov	r1, r7
 800662a:	f7f9 fe37 	bl	800029c <__adddf3>
 800662e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006630:	4b38      	ldr	r3, [pc, #224]	; (8006714 <__ieee754_pow+0x75c>)
 8006632:	4413      	add	r3, r2
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f7f9 fe30 	bl	800029c <__adddf3>
 800663c:	4682      	mov	sl, r0
 800663e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006640:	468b      	mov	fp, r1
 8006642:	f7f9 ff77 	bl	8000534 <__aeabi_i2d>
 8006646:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006648:	4b33      	ldr	r3, [pc, #204]	; (8006718 <__ieee754_pow+0x760>)
 800664a:	4413      	add	r3, r2
 800664c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006650:	4606      	mov	r6, r0
 8006652:	460f      	mov	r7, r1
 8006654:	4652      	mov	r2, sl
 8006656:	465b      	mov	r3, fp
 8006658:	ec51 0b18 	vmov	r0, r1, d8
 800665c:	f7f9 fe1e 	bl	800029c <__adddf3>
 8006660:	4642      	mov	r2, r8
 8006662:	464b      	mov	r3, r9
 8006664:	f7f9 fe1a 	bl	800029c <__adddf3>
 8006668:	4632      	mov	r2, r6
 800666a:	463b      	mov	r3, r7
 800666c:	f7f9 fe16 	bl	800029c <__adddf3>
 8006670:	9c04      	ldr	r4, [sp, #16]
 8006672:	4632      	mov	r2, r6
 8006674:	463b      	mov	r3, r7
 8006676:	4620      	mov	r0, r4
 8006678:	460d      	mov	r5, r1
 800667a:	f7f9 fe0d 	bl	8000298 <__aeabi_dsub>
 800667e:	4642      	mov	r2, r8
 8006680:	464b      	mov	r3, r9
 8006682:	f7f9 fe09 	bl	8000298 <__aeabi_dsub>
 8006686:	ec53 2b18 	vmov	r2, r3, d8
 800668a:	f7f9 fe05 	bl	8000298 <__aeabi_dsub>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4650      	mov	r0, sl
 8006694:	4659      	mov	r1, fp
 8006696:	e606      	b.n	80062a6 <__ieee754_pow+0x2ee>
 8006698:	2401      	movs	r4, #1
 800669a:	e6a0      	b.n	80063de <__ieee754_pow+0x426>
 800669c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80066f0 <__ieee754_pow+0x738>
 80066a0:	e60d      	b.n	80062be <__ieee754_pow+0x306>
 80066a2:	bf00      	nop
 80066a4:	f3af 8000 	nop.w
 80066a8:	4a454eef 	.word	0x4a454eef
 80066ac:	3fca7e28 	.word	0x3fca7e28
 80066b0:	93c9db65 	.word	0x93c9db65
 80066b4:	3fcd864a 	.word	0x3fcd864a
 80066b8:	a91d4101 	.word	0xa91d4101
 80066bc:	3fd17460 	.word	0x3fd17460
 80066c0:	518f264d 	.word	0x518f264d
 80066c4:	3fd55555 	.word	0x3fd55555
 80066c8:	db6fabff 	.word	0xdb6fabff
 80066cc:	3fdb6db6 	.word	0x3fdb6db6
 80066d0:	33333303 	.word	0x33333303
 80066d4:	3fe33333 	.word	0x3fe33333
 80066d8:	e0000000 	.word	0xe0000000
 80066dc:	3feec709 	.word	0x3feec709
 80066e0:	dc3a03fd 	.word	0xdc3a03fd
 80066e4:	3feec709 	.word	0x3feec709
 80066e8:	145b01f5 	.word	0x145b01f5
 80066ec:	be3e2fe0 	.word	0xbe3e2fe0
 80066f0:	00000000 	.word	0x00000000
 80066f4:	3ff00000 	.word	0x3ff00000
 80066f8:	7ff00000 	.word	0x7ff00000
 80066fc:	43400000 	.word	0x43400000
 8006700:	0003988e 	.word	0x0003988e
 8006704:	000bb679 	.word	0x000bb679
 8006708:	08007e70 	.word	0x08007e70
 800670c:	3ff00000 	.word	0x3ff00000
 8006710:	40080000 	.word	0x40080000
 8006714:	08007e90 	.word	0x08007e90
 8006718:	08007e80 	.word	0x08007e80
 800671c:	a3b5      	add	r3, pc, #724	; (adr r3, 80069f4 <__ieee754_pow+0xa3c>)
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	4640      	mov	r0, r8
 8006724:	4649      	mov	r1, r9
 8006726:	f7f9 fdb9 	bl	800029c <__adddf3>
 800672a:	4622      	mov	r2, r4
 800672c:	ec41 0b1a 	vmov	d10, r0, r1
 8006730:	462b      	mov	r3, r5
 8006732:	4630      	mov	r0, r6
 8006734:	4639      	mov	r1, r7
 8006736:	f7f9 fdaf 	bl	8000298 <__aeabi_dsub>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	ec51 0b1a 	vmov	r0, r1, d10
 8006742:	f7fa f9f1 	bl	8000b28 <__aeabi_dcmpgt>
 8006746:	2800      	cmp	r0, #0
 8006748:	f47f adf8 	bne.w	800633c <__ieee754_pow+0x384>
 800674c:	4aa4      	ldr	r2, [pc, #656]	; (80069e0 <__ieee754_pow+0xa28>)
 800674e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006752:	4293      	cmp	r3, r2
 8006754:	f340 810b 	ble.w	800696e <__ieee754_pow+0x9b6>
 8006758:	151b      	asrs	r3, r3, #20
 800675a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800675e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006762:	fa4a f303 	asr.w	r3, sl, r3
 8006766:	445b      	add	r3, fp
 8006768:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800676c:	4e9d      	ldr	r6, [pc, #628]	; (80069e4 <__ieee754_pow+0xa2c>)
 800676e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006772:	4116      	asrs	r6, r2
 8006774:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006778:	2000      	movs	r0, #0
 800677a:	ea23 0106 	bic.w	r1, r3, r6
 800677e:	f1c2 0214 	rsb	r2, r2, #20
 8006782:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006786:	fa4a fa02 	asr.w	sl, sl, r2
 800678a:	f1bb 0f00 	cmp.w	fp, #0
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4620      	mov	r0, r4
 8006794:	4629      	mov	r1, r5
 8006796:	bfb8      	it	lt
 8006798:	f1ca 0a00 	rsblt	sl, sl, #0
 800679c:	f7f9 fd7c 	bl	8000298 <__aeabi_dsub>
 80067a0:	ec41 0b19 	vmov	d9, r0, r1
 80067a4:	4642      	mov	r2, r8
 80067a6:	464b      	mov	r3, r9
 80067a8:	ec51 0b19 	vmov	r0, r1, d9
 80067ac:	f7f9 fd76 	bl	800029c <__adddf3>
 80067b0:	2400      	movs	r4, #0
 80067b2:	a379      	add	r3, pc, #484	; (adr r3, 8006998 <__ieee754_pow+0x9e0>)
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	4620      	mov	r0, r4
 80067ba:	460d      	mov	r5, r1
 80067bc:	f7f9 ff24 	bl	8000608 <__aeabi_dmul>
 80067c0:	ec53 2b19 	vmov	r2, r3, d9
 80067c4:	4606      	mov	r6, r0
 80067c6:	460f      	mov	r7, r1
 80067c8:	4620      	mov	r0, r4
 80067ca:	4629      	mov	r1, r5
 80067cc:	f7f9 fd64 	bl	8000298 <__aeabi_dsub>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4640      	mov	r0, r8
 80067d6:	4649      	mov	r1, r9
 80067d8:	f7f9 fd5e 	bl	8000298 <__aeabi_dsub>
 80067dc:	a370      	add	r3, pc, #448	; (adr r3, 80069a0 <__ieee754_pow+0x9e8>)
 80067de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e2:	f7f9 ff11 	bl	8000608 <__aeabi_dmul>
 80067e6:	a370      	add	r3, pc, #448	; (adr r3, 80069a8 <__ieee754_pow+0x9f0>)
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	4680      	mov	r8, r0
 80067ee:	4689      	mov	r9, r1
 80067f0:	4620      	mov	r0, r4
 80067f2:	4629      	mov	r1, r5
 80067f4:	f7f9 ff08 	bl	8000608 <__aeabi_dmul>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4640      	mov	r0, r8
 80067fe:	4649      	mov	r1, r9
 8006800:	f7f9 fd4c 	bl	800029c <__adddf3>
 8006804:	4604      	mov	r4, r0
 8006806:	460d      	mov	r5, r1
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4630      	mov	r0, r6
 800680e:	4639      	mov	r1, r7
 8006810:	f7f9 fd44 	bl	800029c <__adddf3>
 8006814:	4632      	mov	r2, r6
 8006816:	463b      	mov	r3, r7
 8006818:	4680      	mov	r8, r0
 800681a:	4689      	mov	r9, r1
 800681c:	f7f9 fd3c 	bl	8000298 <__aeabi_dsub>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4620      	mov	r0, r4
 8006826:	4629      	mov	r1, r5
 8006828:	f7f9 fd36 	bl	8000298 <__aeabi_dsub>
 800682c:	4642      	mov	r2, r8
 800682e:	4606      	mov	r6, r0
 8006830:	460f      	mov	r7, r1
 8006832:	464b      	mov	r3, r9
 8006834:	4640      	mov	r0, r8
 8006836:	4649      	mov	r1, r9
 8006838:	f7f9 fee6 	bl	8000608 <__aeabi_dmul>
 800683c:	a35c      	add	r3, pc, #368	; (adr r3, 80069b0 <__ieee754_pow+0x9f8>)
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	4604      	mov	r4, r0
 8006844:	460d      	mov	r5, r1
 8006846:	f7f9 fedf 	bl	8000608 <__aeabi_dmul>
 800684a:	a35b      	add	r3, pc, #364	; (adr r3, 80069b8 <__ieee754_pow+0xa00>)
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f7f9 fd22 	bl	8000298 <__aeabi_dsub>
 8006854:	4622      	mov	r2, r4
 8006856:	462b      	mov	r3, r5
 8006858:	f7f9 fed6 	bl	8000608 <__aeabi_dmul>
 800685c:	a358      	add	r3, pc, #352	; (adr r3, 80069c0 <__ieee754_pow+0xa08>)
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	f7f9 fd1b 	bl	800029c <__adddf3>
 8006866:	4622      	mov	r2, r4
 8006868:	462b      	mov	r3, r5
 800686a:	f7f9 fecd 	bl	8000608 <__aeabi_dmul>
 800686e:	a356      	add	r3, pc, #344	; (adr r3, 80069c8 <__ieee754_pow+0xa10>)
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	f7f9 fd10 	bl	8000298 <__aeabi_dsub>
 8006878:	4622      	mov	r2, r4
 800687a:	462b      	mov	r3, r5
 800687c:	f7f9 fec4 	bl	8000608 <__aeabi_dmul>
 8006880:	a353      	add	r3, pc, #332	; (adr r3, 80069d0 <__ieee754_pow+0xa18>)
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	f7f9 fd09 	bl	800029c <__adddf3>
 800688a:	4622      	mov	r2, r4
 800688c:	462b      	mov	r3, r5
 800688e:	f7f9 febb 	bl	8000608 <__aeabi_dmul>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4640      	mov	r0, r8
 8006898:	4649      	mov	r1, r9
 800689a:	f7f9 fcfd 	bl	8000298 <__aeabi_dsub>
 800689e:	4604      	mov	r4, r0
 80068a0:	460d      	mov	r5, r1
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4640      	mov	r0, r8
 80068a8:	4649      	mov	r1, r9
 80068aa:	f7f9 fead 	bl	8000608 <__aeabi_dmul>
 80068ae:	2200      	movs	r2, #0
 80068b0:	ec41 0b19 	vmov	d9, r0, r1
 80068b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068b8:	4620      	mov	r0, r4
 80068ba:	4629      	mov	r1, r5
 80068bc:	f7f9 fcec 	bl	8000298 <__aeabi_dsub>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	ec51 0b19 	vmov	r0, r1, d9
 80068c8:	f7f9 ffc8 	bl	800085c <__aeabi_ddiv>
 80068cc:	4632      	mov	r2, r6
 80068ce:	4604      	mov	r4, r0
 80068d0:	460d      	mov	r5, r1
 80068d2:	463b      	mov	r3, r7
 80068d4:	4640      	mov	r0, r8
 80068d6:	4649      	mov	r1, r9
 80068d8:	f7f9 fe96 	bl	8000608 <__aeabi_dmul>
 80068dc:	4632      	mov	r2, r6
 80068de:	463b      	mov	r3, r7
 80068e0:	f7f9 fcdc 	bl	800029c <__adddf3>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4620      	mov	r0, r4
 80068ea:	4629      	mov	r1, r5
 80068ec:	f7f9 fcd4 	bl	8000298 <__aeabi_dsub>
 80068f0:	4642      	mov	r2, r8
 80068f2:	464b      	mov	r3, r9
 80068f4:	f7f9 fcd0 	bl	8000298 <__aeabi_dsub>
 80068f8:	460b      	mov	r3, r1
 80068fa:	4602      	mov	r2, r0
 80068fc:	493a      	ldr	r1, [pc, #232]	; (80069e8 <__ieee754_pow+0xa30>)
 80068fe:	2000      	movs	r0, #0
 8006900:	f7f9 fcca 	bl	8000298 <__aeabi_dsub>
 8006904:	e9cd 0100 	strd	r0, r1, [sp]
 8006908:	9b01      	ldr	r3, [sp, #4]
 800690a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800690e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006912:	da2f      	bge.n	8006974 <__ieee754_pow+0x9bc>
 8006914:	4650      	mov	r0, sl
 8006916:	ed9d 0b00 	vldr	d0, [sp]
 800691a:	f000 fc55 	bl	80071c8 <scalbn>
 800691e:	ec51 0b10 	vmov	r0, r1, d0
 8006922:	ec53 2b18 	vmov	r2, r3, d8
 8006926:	f7ff bbe0 	b.w	80060ea <__ieee754_pow+0x132>
 800692a:	4b30      	ldr	r3, [pc, #192]	; (80069ec <__ieee754_pow+0xa34>)
 800692c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006930:	429e      	cmp	r6, r3
 8006932:	f77f af0b 	ble.w	800674c <__ieee754_pow+0x794>
 8006936:	4b2e      	ldr	r3, [pc, #184]	; (80069f0 <__ieee754_pow+0xa38>)
 8006938:	440b      	add	r3, r1
 800693a:	4303      	orrs	r3, r0
 800693c:	d00b      	beq.n	8006956 <__ieee754_pow+0x99e>
 800693e:	a326      	add	r3, pc, #152	; (adr r3, 80069d8 <__ieee754_pow+0xa20>)
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	ec51 0b18 	vmov	r0, r1, d8
 8006948:	f7f9 fe5e 	bl	8000608 <__aeabi_dmul>
 800694c:	a322      	add	r3, pc, #136	; (adr r3, 80069d8 <__ieee754_pow+0xa20>)
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f7ff bbca 	b.w	80060ea <__ieee754_pow+0x132>
 8006956:	4622      	mov	r2, r4
 8006958:	462b      	mov	r3, r5
 800695a:	f7f9 fc9d 	bl	8000298 <__aeabi_dsub>
 800695e:	4642      	mov	r2, r8
 8006960:	464b      	mov	r3, r9
 8006962:	f7fa f8d7 	bl	8000b14 <__aeabi_dcmpge>
 8006966:	2800      	cmp	r0, #0
 8006968:	f43f aef0 	beq.w	800674c <__ieee754_pow+0x794>
 800696c:	e7e7      	b.n	800693e <__ieee754_pow+0x986>
 800696e:	f04f 0a00 	mov.w	sl, #0
 8006972:	e717      	b.n	80067a4 <__ieee754_pow+0x7ec>
 8006974:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006978:	4619      	mov	r1, r3
 800697a:	e7d2      	b.n	8006922 <__ieee754_pow+0x96a>
 800697c:	491a      	ldr	r1, [pc, #104]	; (80069e8 <__ieee754_pow+0xa30>)
 800697e:	2000      	movs	r0, #0
 8006980:	f7ff bb9e 	b.w	80060c0 <__ieee754_pow+0x108>
 8006984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006988:	f7ff bb9a 	b.w	80060c0 <__ieee754_pow+0x108>
 800698c:	9000      	str	r0, [sp, #0]
 800698e:	f7ff bb76 	b.w	800607e <__ieee754_pow+0xc6>
 8006992:	2100      	movs	r1, #0
 8006994:	f7ff bb60 	b.w	8006058 <__ieee754_pow+0xa0>
 8006998:	00000000 	.word	0x00000000
 800699c:	3fe62e43 	.word	0x3fe62e43
 80069a0:	fefa39ef 	.word	0xfefa39ef
 80069a4:	3fe62e42 	.word	0x3fe62e42
 80069a8:	0ca86c39 	.word	0x0ca86c39
 80069ac:	be205c61 	.word	0xbe205c61
 80069b0:	72bea4d0 	.word	0x72bea4d0
 80069b4:	3e663769 	.word	0x3e663769
 80069b8:	c5d26bf1 	.word	0xc5d26bf1
 80069bc:	3ebbbd41 	.word	0x3ebbbd41
 80069c0:	af25de2c 	.word	0xaf25de2c
 80069c4:	3f11566a 	.word	0x3f11566a
 80069c8:	16bebd93 	.word	0x16bebd93
 80069cc:	3f66c16c 	.word	0x3f66c16c
 80069d0:	5555553e 	.word	0x5555553e
 80069d4:	3fc55555 	.word	0x3fc55555
 80069d8:	c2f8f359 	.word	0xc2f8f359
 80069dc:	01a56e1f 	.word	0x01a56e1f
 80069e0:	3fe00000 	.word	0x3fe00000
 80069e4:	000fffff 	.word	0x000fffff
 80069e8:	3ff00000 	.word	0x3ff00000
 80069ec:	4090cbff 	.word	0x4090cbff
 80069f0:	3f6f3400 	.word	0x3f6f3400
 80069f4:	652b82fe 	.word	0x652b82fe
 80069f8:	3c971547 	.word	0x3c971547

080069fc <__ieee754_sqrt>:
 80069fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a00:	ec55 4b10 	vmov	r4, r5, d0
 8006a04:	4e56      	ldr	r6, [pc, #344]	; (8006b60 <__ieee754_sqrt+0x164>)
 8006a06:	43ae      	bics	r6, r5
 8006a08:	ee10 0a10 	vmov	r0, s0
 8006a0c:	ee10 3a10 	vmov	r3, s0
 8006a10:	4629      	mov	r1, r5
 8006a12:	462a      	mov	r2, r5
 8006a14:	d110      	bne.n	8006a38 <__ieee754_sqrt+0x3c>
 8006a16:	ee10 2a10 	vmov	r2, s0
 8006a1a:	462b      	mov	r3, r5
 8006a1c:	f7f9 fdf4 	bl	8000608 <__aeabi_dmul>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4620      	mov	r0, r4
 8006a26:	4629      	mov	r1, r5
 8006a28:	f7f9 fc38 	bl	800029c <__adddf3>
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	460d      	mov	r5, r1
 8006a30:	ec45 4b10 	vmov	d0, r4, r5
 8006a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a38:	2d00      	cmp	r5, #0
 8006a3a:	dc10      	bgt.n	8006a5e <__ieee754_sqrt+0x62>
 8006a3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006a40:	4330      	orrs	r0, r6
 8006a42:	d0f5      	beq.n	8006a30 <__ieee754_sqrt+0x34>
 8006a44:	b15d      	cbz	r5, 8006a5e <__ieee754_sqrt+0x62>
 8006a46:	ee10 2a10 	vmov	r2, s0
 8006a4a:	462b      	mov	r3, r5
 8006a4c:	ee10 0a10 	vmov	r0, s0
 8006a50:	f7f9 fc22 	bl	8000298 <__aeabi_dsub>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	f7f9 ff00 	bl	800085c <__aeabi_ddiv>
 8006a5c:	e7e6      	b.n	8006a2c <__ieee754_sqrt+0x30>
 8006a5e:	1509      	asrs	r1, r1, #20
 8006a60:	d076      	beq.n	8006b50 <__ieee754_sqrt+0x154>
 8006a62:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006a66:	07ce      	lsls	r6, r1, #31
 8006a68:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8006a6c:	bf5e      	ittt	pl
 8006a6e:	0fda      	lsrpl	r2, r3, #31
 8006a70:	005b      	lslpl	r3, r3, #1
 8006a72:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006a76:	0fda      	lsrs	r2, r3, #31
 8006a78:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006a7c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006a80:	2000      	movs	r0, #0
 8006a82:	106d      	asrs	r5, r5, #1
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	f04f 0e16 	mov.w	lr, #22
 8006a8a:	4684      	mov	ip, r0
 8006a8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a90:	eb0c 0401 	add.w	r4, ip, r1
 8006a94:	4294      	cmp	r4, r2
 8006a96:	bfde      	ittt	le
 8006a98:	1b12      	suble	r2, r2, r4
 8006a9a:	eb04 0c01 	addle.w	ip, r4, r1
 8006a9e:	1840      	addle	r0, r0, r1
 8006aa0:	0052      	lsls	r2, r2, #1
 8006aa2:	f1be 0e01 	subs.w	lr, lr, #1
 8006aa6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006aaa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006aae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006ab2:	d1ed      	bne.n	8006a90 <__ieee754_sqrt+0x94>
 8006ab4:	4671      	mov	r1, lr
 8006ab6:	2720      	movs	r7, #32
 8006ab8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006abc:	4562      	cmp	r2, ip
 8006abe:	eb04 060e 	add.w	r6, r4, lr
 8006ac2:	dc02      	bgt.n	8006aca <__ieee754_sqrt+0xce>
 8006ac4:	d113      	bne.n	8006aee <__ieee754_sqrt+0xf2>
 8006ac6:	429e      	cmp	r6, r3
 8006ac8:	d811      	bhi.n	8006aee <__ieee754_sqrt+0xf2>
 8006aca:	2e00      	cmp	r6, #0
 8006acc:	eb06 0e04 	add.w	lr, r6, r4
 8006ad0:	da43      	bge.n	8006b5a <__ieee754_sqrt+0x15e>
 8006ad2:	f1be 0f00 	cmp.w	lr, #0
 8006ad6:	db40      	blt.n	8006b5a <__ieee754_sqrt+0x15e>
 8006ad8:	f10c 0801 	add.w	r8, ip, #1
 8006adc:	eba2 020c 	sub.w	r2, r2, ip
 8006ae0:	429e      	cmp	r6, r3
 8006ae2:	bf88      	it	hi
 8006ae4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006ae8:	1b9b      	subs	r3, r3, r6
 8006aea:	4421      	add	r1, r4
 8006aec:	46c4      	mov	ip, r8
 8006aee:	0052      	lsls	r2, r2, #1
 8006af0:	3f01      	subs	r7, #1
 8006af2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006af6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006afa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006afe:	d1dd      	bne.n	8006abc <__ieee754_sqrt+0xc0>
 8006b00:	4313      	orrs	r3, r2
 8006b02:	d006      	beq.n	8006b12 <__ieee754_sqrt+0x116>
 8006b04:	1c4c      	adds	r4, r1, #1
 8006b06:	bf13      	iteet	ne
 8006b08:	3101      	addne	r1, #1
 8006b0a:	3001      	addeq	r0, #1
 8006b0c:	4639      	moveq	r1, r7
 8006b0e:	f021 0101 	bicne.w	r1, r1, #1
 8006b12:	1043      	asrs	r3, r0, #1
 8006b14:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006b18:	0849      	lsrs	r1, r1, #1
 8006b1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006b1e:	07c2      	lsls	r2, r0, #31
 8006b20:	bf48      	it	mi
 8006b22:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006b26:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	463d      	mov	r5, r7
 8006b2e:	e77f      	b.n	8006a30 <__ieee754_sqrt+0x34>
 8006b30:	0ada      	lsrs	r2, r3, #11
 8006b32:	3815      	subs	r0, #21
 8006b34:	055b      	lsls	r3, r3, #21
 8006b36:	2a00      	cmp	r2, #0
 8006b38:	d0fa      	beq.n	8006b30 <__ieee754_sqrt+0x134>
 8006b3a:	02d7      	lsls	r7, r2, #11
 8006b3c:	d50a      	bpl.n	8006b54 <__ieee754_sqrt+0x158>
 8006b3e:	f1c1 0420 	rsb	r4, r1, #32
 8006b42:	fa23 f404 	lsr.w	r4, r3, r4
 8006b46:	1e4d      	subs	r5, r1, #1
 8006b48:	408b      	lsls	r3, r1
 8006b4a:	4322      	orrs	r2, r4
 8006b4c:	1b41      	subs	r1, r0, r5
 8006b4e:	e788      	b.n	8006a62 <__ieee754_sqrt+0x66>
 8006b50:	4608      	mov	r0, r1
 8006b52:	e7f0      	b.n	8006b36 <__ieee754_sqrt+0x13a>
 8006b54:	0052      	lsls	r2, r2, #1
 8006b56:	3101      	adds	r1, #1
 8006b58:	e7ef      	b.n	8006b3a <__ieee754_sqrt+0x13e>
 8006b5a:	46e0      	mov	r8, ip
 8006b5c:	e7be      	b.n	8006adc <__ieee754_sqrt+0xe0>
 8006b5e:	bf00      	nop
 8006b60:	7ff00000 	.word	0x7ff00000

08006b64 <__ieee754_asinf>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	ee10 5a10 	vmov	r5, s0
 8006b6a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8006b6e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006b72:	ed2d 8b04 	vpush	{d8-d9}
 8006b76:	d10c      	bne.n	8006b92 <__ieee754_asinf+0x2e>
 8006b78:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8006cf0 <__ieee754_asinf+0x18c>
 8006b7c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8006cf4 <__ieee754_asinf+0x190>
 8006b80:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006b84:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006b88:	eeb0 0a67 	vmov.f32	s0, s15
 8006b8c:	ecbd 8b04 	vpop	{d8-d9}
 8006b90:	bd38      	pop	{r3, r4, r5, pc}
 8006b92:	dd04      	ble.n	8006b9e <__ieee754_asinf+0x3a>
 8006b94:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006b98:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006b9c:	e7f6      	b.n	8006b8c <__ieee754_asinf+0x28>
 8006b9e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006ba2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8006ba6:	da0b      	bge.n	8006bc0 <__ieee754_asinf+0x5c>
 8006ba8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8006bac:	da52      	bge.n	8006c54 <__ieee754_asinf+0xf0>
 8006bae:	eddf 7a52 	vldr	s15, [pc, #328]	; 8006cf8 <__ieee754_asinf+0x194>
 8006bb2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006bb6:	eef4 7ae8 	vcmpe.f32	s15, s17
 8006bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bbe:	dce5      	bgt.n	8006b8c <__ieee754_asinf+0x28>
 8006bc0:	f000 fb88 	bl	80072d4 <fabsf>
 8006bc4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8006bc8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8006bcc:	ee20 8a08 	vmul.f32	s16, s0, s16
 8006bd0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8006cfc <__ieee754_asinf+0x198>
 8006bd4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8006d00 <__ieee754_asinf+0x19c>
 8006bd8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8006d04 <__ieee754_asinf+0x1a0>
 8006bdc:	eea8 7a27 	vfma.f32	s14, s16, s15
 8006be0:	eddf 7a49 	vldr	s15, [pc, #292]	; 8006d08 <__ieee754_asinf+0x1a4>
 8006be4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006be8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8006d0c <__ieee754_asinf+0x1a8>
 8006bec:	eea7 7a88 	vfma.f32	s14, s15, s16
 8006bf0:	eddf 7a47 	vldr	s15, [pc, #284]	; 8006d10 <__ieee754_asinf+0x1ac>
 8006bf4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006bf8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8006d14 <__ieee754_asinf+0x1b0>
 8006bfc:	eea7 9a88 	vfma.f32	s18, s15, s16
 8006c00:	eddf 7a45 	vldr	s15, [pc, #276]	; 8006d18 <__ieee754_asinf+0x1b4>
 8006c04:	eee8 7a07 	vfma.f32	s15, s16, s14
 8006c08:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006d1c <__ieee754_asinf+0x1b8>
 8006c0c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8006c10:	eddf 7a43 	vldr	s15, [pc, #268]	; 8006d20 <__ieee754_asinf+0x1bc>
 8006c14:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006c18:	eeb0 0a48 	vmov.f32	s0, s16
 8006c1c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8006c20:	f000 f886 	bl	8006d30 <__ieee754_sqrtf>
 8006c24:	4b3f      	ldr	r3, [pc, #252]	; (8006d24 <__ieee754_asinf+0x1c0>)
 8006c26:	ee29 9a08 	vmul.f32	s18, s18, s16
 8006c2a:	429c      	cmp	r4, r3
 8006c2c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8006c30:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006c34:	dd3d      	ble.n	8006cb2 <__ieee754_asinf+0x14e>
 8006c36:	eea0 0a06 	vfma.f32	s0, s0, s12
 8006c3a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8006d28 <__ieee754_asinf+0x1c4>
 8006c3e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8006c42:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8006cf4 <__ieee754_asinf+0x190>
 8006c46:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006c4a:	2d00      	cmp	r5, #0
 8006c4c:	bfd8      	it	le
 8006c4e:	eeb1 0a40 	vnegle.f32	s0, s0
 8006c52:	e79b      	b.n	8006b8c <__ieee754_asinf+0x28>
 8006c54:	ee60 7a00 	vmul.f32	s15, s0, s0
 8006c58:	eddf 6a28 	vldr	s13, [pc, #160]	; 8006cfc <__ieee754_asinf+0x198>
 8006c5c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8006d00 <__ieee754_asinf+0x19c>
 8006c60:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8006d14 <__ieee754_asinf+0x1b0>
 8006c64:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006c68:	eddf 6a27 	vldr	s13, [pc, #156]	; 8006d08 <__ieee754_asinf+0x1a4>
 8006c6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006c70:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006d0c <__ieee754_asinf+0x1a8>
 8006c74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c78:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006d10 <__ieee754_asinf+0x1ac>
 8006c7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006c80:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8006d04 <__ieee754_asinf+0x1a0>
 8006c84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c88:	eddf 6a23 	vldr	s13, [pc, #140]	; 8006d18 <__ieee754_asinf+0x1b4>
 8006c8c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8006c90:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8006d1c <__ieee754_asinf+0x1b8>
 8006c94:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8006c98:	eddf 6a21 	vldr	s13, [pc, #132]	; 8006d20 <__ieee754_asinf+0x1bc>
 8006c9c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ca4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8006ca8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8006cac:	eea0 0a27 	vfma.f32	s0, s0, s15
 8006cb0:	e76c      	b.n	8006b8c <__ieee754_asinf+0x28>
 8006cb2:	ee10 3a10 	vmov	r3, s0
 8006cb6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006cba:	f023 030f 	bic.w	r3, r3, #15
 8006cbe:	ee07 3a10 	vmov	s14, r3
 8006cc2:	eea7 8a47 	vfms.f32	s16, s14, s14
 8006cc6:	ee70 7a07 	vadd.f32	s15, s0, s14
 8006cca:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006cce:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8006cd2:	eddf 7a07 	vldr	s15, [pc, #28]	; 8006cf0 <__ieee754_asinf+0x18c>
 8006cd6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8006cda:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8006cde:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8006d2c <__ieee754_asinf+0x1c8>
 8006ce2:	eeb0 6a40 	vmov.f32	s12, s0
 8006ce6:	eea7 6a66 	vfms.f32	s12, s14, s13
 8006cea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006cee:	e7aa      	b.n	8006c46 <__ieee754_asinf+0xe2>
 8006cf0:	b33bbd2e 	.word	0xb33bbd2e
 8006cf4:	3fc90fdb 	.word	0x3fc90fdb
 8006cf8:	7149f2ca 	.word	0x7149f2ca
 8006cfc:	3811ef08 	.word	0x3811ef08
 8006d00:	3a4f7f04 	.word	0x3a4f7f04
 8006d04:	3e2aaaab 	.word	0x3e2aaaab
 8006d08:	bd241146 	.word	0xbd241146
 8006d0c:	3e4e0aa8 	.word	0x3e4e0aa8
 8006d10:	bea6b090 	.word	0xbea6b090
 8006d14:	3d9dc62e 	.word	0x3d9dc62e
 8006d18:	bf303361 	.word	0xbf303361
 8006d1c:	4001572d 	.word	0x4001572d
 8006d20:	c019d139 	.word	0xc019d139
 8006d24:	3f799999 	.word	0x3f799999
 8006d28:	333bbd2e 	.word	0x333bbd2e
 8006d2c:	3f490fdb 	.word	0x3f490fdb

08006d30 <__ieee754_sqrtf>:
 8006d30:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006d34:	4770      	bx	lr
	...

08006d38 <atan>:
 8006d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	ec55 4b10 	vmov	r4, r5, d0
 8006d40:	4bc3      	ldr	r3, [pc, #780]	; (8007050 <atan+0x318>)
 8006d42:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006d46:	429e      	cmp	r6, r3
 8006d48:	46ab      	mov	fp, r5
 8006d4a:	dd18      	ble.n	8006d7e <atan+0x46>
 8006d4c:	4bc1      	ldr	r3, [pc, #772]	; (8007054 <atan+0x31c>)
 8006d4e:	429e      	cmp	r6, r3
 8006d50:	dc01      	bgt.n	8006d56 <atan+0x1e>
 8006d52:	d109      	bne.n	8006d68 <atan+0x30>
 8006d54:	b144      	cbz	r4, 8006d68 <atan+0x30>
 8006d56:	4622      	mov	r2, r4
 8006d58:	462b      	mov	r3, r5
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	f7f9 fa9d 	bl	800029c <__adddf3>
 8006d62:	4604      	mov	r4, r0
 8006d64:	460d      	mov	r5, r1
 8006d66:	e006      	b.n	8006d76 <atan+0x3e>
 8006d68:	f1bb 0f00 	cmp.w	fp, #0
 8006d6c:	f300 8131 	bgt.w	8006fd2 <atan+0x29a>
 8006d70:	a59b      	add	r5, pc, #620	; (adr r5, 8006fe0 <atan+0x2a8>)
 8006d72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d76:	ec45 4b10 	vmov	d0, r4, r5
 8006d7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7e:	4bb6      	ldr	r3, [pc, #728]	; (8007058 <atan+0x320>)
 8006d80:	429e      	cmp	r6, r3
 8006d82:	dc14      	bgt.n	8006dae <atan+0x76>
 8006d84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006d88:	429e      	cmp	r6, r3
 8006d8a:	dc0d      	bgt.n	8006da8 <atan+0x70>
 8006d8c:	a396      	add	r3, pc, #600	; (adr r3, 8006fe8 <atan+0x2b0>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	ee10 0a10 	vmov	r0, s0
 8006d96:	4629      	mov	r1, r5
 8006d98:	f7f9 fa80 	bl	800029c <__adddf3>
 8006d9c:	4baf      	ldr	r3, [pc, #700]	; (800705c <atan+0x324>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f7f9 fec2 	bl	8000b28 <__aeabi_dcmpgt>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d1e6      	bne.n	8006d76 <atan+0x3e>
 8006da8:	f04f 3aff 	mov.w	sl, #4294967295
 8006dac:	e02b      	b.n	8006e06 <atan+0xce>
 8006dae:	f000 f963 	bl	8007078 <fabs>
 8006db2:	4bab      	ldr	r3, [pc, #684]	; (8007060 <atan+0x328>)
 8006db4:	429e      	cmp	r6, r3
 8006db6:	ec55 4b10 	vmov	r4, r5, d0
 8006dba:	f300 80bf 	bgt.w	8006f3c <atan+0x204>
 8006dbe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006dc2:	429e      	cmp	r6, r3
 8006dc4:	f300 80a0 	bgt.w	8006f08 <atan+0x1d0>
 8006dc8:	ee10 2a10 	vmov	r2, s0
 8006dcc:	ee10 0a10 	vmov	r0, s0
 8006dd0:	462b      	mov	r3, r5
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	f7f9 fa62 	bl	800029c <__adddf3>
 8006dd8:	4ba0      	ldr	r3, [pc, #640]	; (800705c <atan+0x324>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f7f9 fa5c 	bl	8000298 <__aeabi_dsub>
 8006de0:	2200      	movs	r2, #0
 8006de2:	4606      	mov	r6, r0
 8006de4:	460f      	mov	r7, r1
 8006de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006dea:	4620      	mov	r0, r4
 8006dec:	4629      	mov	r1, r5
 8006dee:	f7f9 fa55 	bl	800029c <__adddf3>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4630      	mov	r0, r6
 8006df8:	4639      	mov	r1, r7
 8006dfa:	f7f9 fd2f 	bl	800085c <__aeabi_ddiv>
 8006dfe:	f04f 0a00 	mov.w	sl, #0
 8006e02:	4604      	mov	r4, r0
 8006e04:	460d      	mov	r5, r1
 8006e06:	4622      	mov	r2, r4
 8006e08:	462b      	mov	r3, r5
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	f7f9 fbfb 	bl	8000608 <__aeabi_dmul>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4680      	mov	r8, r0
 8006e18:	4689      	mov	r9, r1
 8006e1a:	f7f9 fbf5 	bl	8000608 <__aeabi_dmul>
 8006e1e:	a374      	add	r3, pc, #464	; (adr r3, 8006ff0 <atan+0x2b8>)
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	4606      	mov	r6, r0
 8006e26:	460f      	mov	r7, r1
 8006e28:	f7f9 fbee 	bl	8000608 <__aeabi_dmul>
 8006e2c:	a372      	add	r3, pc, #456	; (adr r3, 8006ff8 <atan+0x2c0>)
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	f7f9 fa33 	bl	800029c <__adddf3>
 8006e36:	4632      	mov	r2, r6
 8006e38:	463b      	mov	r3, r7
 8006e3a:	f7f9 fbe5 	bl	8000608 <__aeabi_dmul>
 8006e3e:	a370      	add	r3, pc, #448	; (adr r3, 8007000 <atan+0x2c8>)
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	f7f9 fa2a 	bl	800029c <__adddf3>
 8006e48:	4632      	mov	r2, r6
 8006e4a:	463b      	mov	r3, r7
 8006e4c:	f7f9 fbdc 	bl	8000608 <__aeabi_dmul>
 8006e50:	a36d      	add	r3, pc, #436	; (adr r3, 8007008 <atan+0x2d0>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 fa21 	bl	800029c <__adddf3>
 8006e5a:	4632      	mov	r2, r6
 8006e5c:	463b      	mov	r3, r7
 8006e5e:	f7f9 fbd3 	bl	8000608 <__aeabi_dmul>
 8006e62:	a36b      	add	r3, pc, #428	; (adr r3, 8007010 <atan+0x2d8>)
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	f7f9 fa18 	bl	800029c <__adddf3>
 8006e6c:	4632      	mov	r2, r6
 8006e6e:	463b      	mov	r3, r7
 8006e70:	f7f9 fbca 	bl	8000608 <__aeabi_dmul>
 8006e74:	a368      	add	r3, pc, #416	; (adr r3, 8007018 <atan+0x2e0>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	f7f9 fa0f 	bl	800029c <__adddf3>
 8006e7e:	4642      	mov	r2, r8
 8006e80:	464b      	mov	r3, r9
 8006e82:	f7f9 fbc1 	bl	8000608 <__aeabi_dmul>
 8006e86:	a366      	add	r3, pc, #408	; (adr r3, 8007020 <atan+0x2e8>)
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	4689      	mov	r9, r1
 8006e90:	4630      	mov	r0, r6
 8006e92:	4639      	mov	r1, r7
 8006e94:	f7f9 fbb8 	bl	8000608 <__aeabi_dmul>
 8006e98:	a363      	add	r3, pc, #396	; (adr r3, 8007028 <atan+0x2f0>)
 8006e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9e:	f7f9 f9fb 	bl	8000298 <__aeabi_dsub>
 8006ea2:	4632      	mov	r2, r6
 8006ea4:	463b      	mov	r3, r7
 8006ea6:	f7f9 fbaf 	bl	8000608 <__aeabi_dmul>
 8006eaa:	a361      	add	r3, pc, #388	; (adr r3, 8007030 <atan+0x2f8>)
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	f7f9 f9f2 	bl	8000298 <__aeabi_dsub>
 8006eb4:	4632      	mov	r2, r6
 8006eb6:	463b      	mov	r3, r7
 8006eb8:	f7f9 fba6 	bl	8000608 <__aeabi_dmul>
 8006ebc:	a35e      	add	r3, pc, #376	; (adr r3, 8007038 <atan+0x300>)
 8006ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec2:	f7f9 f9e9 	bl	8000298 <__aeabi_dsub>
 8006ec6:	4632      	mov	r2, r6
 8006ec8:	463b      	mov	r3, r7
 8006eca:	f7f9 fb9d 	bl	8000608 <__aeabi_dmul>
 8006ece:	a35c      	add	r3, pc, #368	; (adr r3, 8007040 <atan+0x308>)
 8006ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed4:	f7f9 f9e0 	bl	8000298 <__aeabi_dsub>
 8006ed8:	4632      	mov	r2, r6
 8006eda:	463b      	mov	r3, r7
 8006edc:	f7f9 fb94 	bl	8000608 <__aeabi_dmul>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	f7f9 f9d8 	bl	800029c <__adddf3>
 8006eec:	4622      	mov	r2, r4
 8006eee:	462b      	mov	r3, r5
 8006ef0:	f7f9 fb8a 	bl	8000608 <__aeabi_dmul>
 8006ef4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	d14b      	bne.n	8006f96 <atan+0x25e>
 8006efe:	4620      	mov	r0, r4
 8006f00:	4629      	mov	r1, r5
 8006f02:	f7f9 f9c9 	bl	8000298 <__aeabi_dsub>
 8006f06:	e72c      	b.n	8006d62 <atan+0x2a>
 8006f08:	ee10 0a10 	vmov	r0, s0
 8006f0c:	4b53      	ldr	r3, [pc, #332]	; (800705c <atan+0x324>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	4629      	mov	r1, r5
 8006f12:	f7f9 f9c1 	bl	8000298 <__aeabi_dsub>
 8006f16:	4b51      	ldr	r3, [pc, #324]	; (800705c <atan+0x324>)
 8006f18:	4606      	mov	r6, r0
 8006f1a:	460f      	mov	r7, r1
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	4620      	mov	r0, r4
 8006f20:	4629      	mov	r1, r5
 8006f22:	f7f9 f9bb 	bl	800029c <__adddf3>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	4639      	mov	r1, r7
 8006f2e:	f7f9 fc95 	bl	800085c <__aeabi_ddiv>
 8006f32:	f04f 0a01 	mov.w	sl, #1
 8006f36:	4604      	mov	r4, r0
 8006f38:	460d      	mov	r5, r1
 8006f3a:	e764      	b.n	8006e06 <atan+0xce>
 8006f3c:	4b49      	ldr	r3, [pc, #292]	; (8007064 <atan+0x32c>)
 8006f3e:	429e      	cmp	r6, r3
 8006f40:	da1d      	bge.n	8006f7e <atan+0x246>
 8006f42:	ee10 0a10 	vmov	r0, s0
 8006f46:	4b48      	ldr	r3, [pc, #288]	; (8007068 <atan+0x330>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	f7f9 f9a4 	bl	8000298 <__aeabi_dsub>
 8006f50:	4b45      	ldr	r3, [pc, #276]	; (8007068 <atan+0x330>)
 8006f52:	4606      	mov	r6, r0
 8006f54:	460f      	mov	r7, r1
 8006f56:	2200      	movs	r2, #0
 8006f58:	4620      	mov	r0, r4
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	f7f9 fb54 	bl	8000608 <__aeabi_dmul>
 8006f60:	4b3e      	ldr	r3, [pc, #248]	; (800705c <atan+0x324>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	f7f9 f99a 	bl	800029c <__adddf3>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	4639      	mov	r1, r7
 8006f70:	f7f9 fc74 	bl	800085c <__aeabi_ddiv>
 8006f74:	f04f 0a02 	mov.w	sl, #2
 8006f78:	4604      	mov	r4, r0
 8006f7a:	460d      	mov	r5, r1
 8006f7c:	e743      	b.n	8006e06 <atan+0xce>
 8006f7e:	462b      	mov	r3, r5
 8006f80:	ee10 2a10 	vmov	r2, s0
 8006f84:	4939      	ldr	r1, [pc, #228]	; (800706c <atan+0x334>)
 8006f86:	2000      	movs	r0, #0
 8006f88:	f7f9 fc68 	bl	800085c <__aeabi_ddiv>
 8006f8c:	f04f 0a03 	mov.w	sl, #3
 8006f90:	4604      	mov	r4, r0
 8006f92:	460d      	mov	r5, r1
 8006f94:	e737      	b.n	8006e06 <atan+0xce>
 8006f96:	4b36      	ldr	r3, [pc, #216]	; (8007070 <atan+0x338>)
 8006f98:	4e36      	ldr	r6, [pc, #216]	; (8007074 <atan+0x33c>)
 8006f9a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006f9e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006fa2:	e9da 2300 	ldrd	r2, r3, [sl]
 8006fa6:	f7f9 f977 	bl	8000298 <__aeabi_dsub>
 8006faa:	4622      	mov	r2, r4
 8006fac:	462b      	mov	r3, r5
 8006fae:	f7f9 f973 	bl	8000298 <__aeabi_dsub>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006fba:	f7f9 f96d 	bl	8000298 <__aeabi_dsub>
 8006fbe:	f1bb 0f00 	cmp.w	fp, #0
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	460d      	mov	r5, r1
 8006fc6:	f6bf aed6 	bge.w	8006d76 <atan+0x3e>
 8006fca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fce:	461d      	mov	r5, r3
 8006fd0:	e6d1      	b.n	8006d76 <atan+0x3e>
 8006fd2:	a51d      	add	r5, pc, #116	; (adr r5, 8007048 <atan+0x310>)
 8006fd4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006fd8:	e6cd      	b.n	8006d76 <atan+0x3e>
 8006fda:	bf00      	nop
 8006fdc:	f3af 8000 	nop.w
 8006fe0:	54442d18 	.word	0x54442d18
 8006fe4:	bff921fb 	.word	0xbff921fb
 8006fe8:	8800759c 	.word	0x8800759c
 8006fec:	7e37e43c 	.word	0x7e37e43c
 8006ff0:	e322da11 	.word	0xe322da11
 8006ff4:	3f90ad3a 	.word	0x3f90ad3a
 8006ff8:	24760deb 	.word	0x24760deb
 8006ffc:	3fa97b4b 	.word	0x3fa97b4b
 8007000:	a0d03d51 	.word	0xa0d03d51
 8007004:	3fb10d66 	.word	0x3fb10d66
 8007008:	c54c206e 	.word	0xc54c206e
 800700c:	3fb745cd 	.word	0x3fb745cd
 8007010:	920083ff 	.word	0x920083ff
 8007014:	3fc24924 	.word	0x3fc24924
 8007018:	5555550d 	.word	0x5555550d
 800701c:	3fd55555 	.word	0x3fd55555
 8007020:	2c6a6c2f 	.word	0x2c6a6c2f
 8007024:	bfa2b444 	.word	0xbfa2b444
 8007028:	52defd9a 	.word	0x52defd9a
 800702c:	3fadde2d 	.word	0x3fadde2d
 8007030:	af749a6d 	.word	0xaf749a6d
 8007034:	3fb3b0f2 	.word	0x3fb3b0f2
 8007038:	fe231671 	.word	0xfe231671
 800703c:	3fbc71c6 	.word	0x3fbc71c6
 8007040:	9998ebc4 	.word	0x9998ebc4
 8007044:	3fc99999 	.word	0x3fc99999
 8007048:	54442d18 	.word	0x54442d18
 800704c:	3ff921fb 	.word	0x3ff921fb
 8007050:	440fffff 	.word	0x440fffff
 8007054:	7ff00000 	.word	0x7ff00000
 8007058:	3fdbffff 	.word	0x3fdbffff
 800705c:	3ff00000 	.word	0x3ff00000
 8007060:	3ff2ffff 	.word	0x3ff2ffff
 8007064:	40038000 	.word	0x40038000
 8007068:	3ff80000 	.word	0x3ff80000
 800706c:	bff00000 	.word	0xbff00000
 8007070:	08007ec0 	.word	0x08007ec0
 8007074:	08007ea0 	.word	0x08007ea0

08007078 <fabs>:
 8007078:	ec51 0b10 	vmov	r0, r1, d0
 800707c:	ee10 2a10 	vmov	r2, s0
 8007080:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007084:	ec43 2b10 	vmov	d0, r2, r3
 8007088:	4770      	bx	lr

0800708a <finite>:
 800708a:	b082      	sub	sp, #8
 800708c:	ed8d 0b00 	vstr	d0, [sp]
 8007090:	9801      	ldr	r0, [sp, #4]
 8007092:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007096:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800709a:	0fc0      	lsrs	r0, r0, #31
 800709c:	b002      	add	sp, #8
 800709e:	4770      	bx	lr

080070a0 <nan>:
 80070a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80070a8 <nan+0x8>
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	00000000 	.word	0x00000000
 80070ac:	7ff80000 	.word	0x7ff80000

080070b0 <rint>:
 80070b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070b2:	ec51 0b10 	vmov	r0, r1, d0
 80070b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80070ba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80070be:	2e13      	cmp	r6, #19
 80070c0:	ee10 4a10 	vmov	r4, s0
 80070c4:	460b      	mov	r3, r1
 80070c6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80070ca:	dc58      	bgt.n	800717e <rint+0xce>
 80070cc:	2e00      	cmp	r6, #0
 80070ce:	da2b      	bge.n	8007128 <rint+0x78>
 80070d0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80070d4:	4302      	orrs	r2, r0
 80070d6:	d023      	beq.n	8007120 <rint+0x70>
 80070d8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80070dc:	4302      	orrs	r2, r0
 80070de:	4254      	negs	r4, r2
 80070e0:	4314      	orrs	r4, r2
 80070e2:	0c4b      	lsrs	r3, r1, #17
 80070e4:	0b24      	lsrs	r4, r4, #12
 80070e6:	045b      	lsls	r3, r3, #17
 80070e8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80070ec:	ea44 0103 	orr.w	r1, r4, r3
 80070f0:	4b32      	ldr	r3, [pc, #200]	; (80071bc <rint+0x10c>)
 80070f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80070f6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	4630      	mov	r0, r6
 8007100:	4639      	mov	r1, r7
 8007102:	f7f9 f8cb 	bl	800029c <__adddf3>
 8007106:	e9cd 0100 	strd	r0, r1, [sp]
 800710a:	463b      	mov	r3, r7
 800710c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007110:	4632      	mov	r2, r6
 8007112:	f7f9 f8c1 	bl	8000298 <__aeabi_dsub>
 8007116:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800711a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800711e:	4639      	mov	r1, r7
 8007120:	ec41 0b10 	vmov	d0, r0, r1
 8007124:	b003      	add	sp, #12
 8007126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007128:	4a25      	ldr	r2, [pc, #148]	; (80071c0 <rint+0x110>)
 800712a:	4132      	asrs	r2, r6
 800712c:	ea01 0702 	and.w	r7, r1, r2
 8007130:	4307      	orrs	r7, r0
 8007132:	d0f5      	beq.n	8007120 <rint+0x70>
 8007134:	0851      	lsrs	r1, r2, #1
 8007136:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800713a:	4314      	orrs	r4, r2
 800713c:	d00c      	beq.n	8007158 <rint+0xa8>
 800713e:	ea23 0201 	bic.w	r2, r3, r1
 8007142:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007146:	2e13      	cmp	r6, #19
 8007148:	fa43 f606 	asr.w	r6, r3, r6
 800714c:	bf0c      	ite	eq
 800714e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007152:	2400      	movne	r4, #0
 8007154:	ea42 0306 	orr.w	r3, r2, r6
 8007158:	4918      	ldr	r1, [pc, #96]	; (80071bc <rint+0x10c>)
 800715a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800715e:	4622      	mov	r2, r4
 8007160:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007164:	4620      	mov	r0, r4
 8007166:	4629      	mov	r1, r5
 8007168:	f7f9 f898 	bl	800029c <__adddf3>
 800716c:	e9cd 0100 	strd	r0, r1, [sp]
 8007170:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007174:	4622      	mov	r2, r4
 8007176:	462b      	mov	r3, r5
 8007178:	f7f9 f88e 	bl	8000298 <__aeabi_dsub>
 800717c:	e7d0      	b.n	8007120 <rint+0x70>
 800717e:	2e33      	cmp	r6, #51	; 0x33
 8007180:	dd07      	ble.n	8007192 <rint+0xe2>
 8007182:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007186:	d1cb      	bne.n	8007120 <rint+0x70>
 8007188:	ee10 2a10 	vmov	r2, s0
 800718c:	f7f9 f886 	bl	800029c <__adddf3>
 8007190:	e7c6      	b.n	8007120 <rint+0x70>
 8007192:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007196:	f04f 36ff 	mov.w	r6, #4294967295
 800719a:	40d6      	lsrs	r6, r2
 800719c:	4230      	tst	r0, r6
 800719e:	d0bf      	beq.n	8007120 <rint+0x70>
 80071a0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80071a4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80071a8:	bf1f      	itttt	ne
 80071aa:	ea24 0101 	bicne.w	r1, r4, r1
 80071ae:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80071b2:	fa44 f202 	asrne.w	r2, r4, r2
 80071b6:	ea41 0402 	orrne.w	r4, r1, r2
 80071ba:	e7cd      	b.n	8007158 <rint+0xa8>
 80071bc:	08007ee0 	.word	0x08007ee0
 80071c0:	000fffff 	.word	0x000fffff
 80071c4:	00000000 	.word	0x00000000

080071c8 <scalbn>:
 80071c8:	b570      	push	{r4, r5, r6, lr}
 80071ca:	ec55 4b10 	vmov	r4, r5, d0
 80071ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80071d2:	4606      	mov	r6, r0
 80071d4:	462b      	mov	r3, r5
 80071d6:	b99a      	cbnz	r2, 8007200 <scalbn+0x38>
 80071d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80071dc:	4323      	orrs	r3, r4
 80071de:	d036      	beq.n	800724e <scalbn+0x86>
 80071e0:	4b39      	ldr	r3, [pc, #228]	; (80072c8 <scalbn+0x100>)
 80071e2:	4629      	mov	r1, r5
 80071e4:	ee10 0a10 	vmov	r0, s0
 80071e8:	2200      	movs	r2, #0
 80071ea:	f7f9 fa0d 	bl	8000608 <__aeabi_dmul>
 80071ee:	4b37      	ldr	r3, [pc, #220]	; (80072cc <scalbn+0x104>)
 80071f0:	429e      	cmp	r6, r3
 80071f2:	4604      	mov	r4, r0
 80071f4:	460d      	mov	r5, r1
 80071f6:	da10      	bge.n	800721a <scalbn+0x52>
 80071f8:	a32b      	add	r3, pc, #172	; (adr r3, 80072a8 <scalbn+0xe0>)
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	e03a      	b.n	8007276 <scalbn+0xae>
 8007200:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007204:	428a      	cmp	r2, r1
 8007206:	d10c      	bne.n	8007222 <scalbn+0x5a>
 8007208:	ee10 2a10 	vmov	r2, s0
 800720c:	4620      	mov	r0, r4
 800720e:	4629      	mov	r1, r5
 8007210:	f7f9 f844 	bl	800029c <__adddf3>
 8007214:	4604      	mov	r4, r0
 8007216:	460d      	mov	r5, r1
 8007218:	e019      	b.n	800724e <scalbn+0x86>
 800721a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800721e:	460b      	mov	r3, r1
 8007220:	3a36      	subs	r2, #54	; 0x36
 8007222:	4432      	add	r2, r6
 8007224:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007228:	428a      	cmp	r2, r1
 800722a:	dd08      	ble.n	800723e <scalbn+0x76>
 800722c:	2d00      	cmp	r5, #0
 800722e:	a120      	add	r1, pc, #128	; (adr r1, 80072b0 <scalbn+0xe8>)
 8007230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007234:	da1c      	bge.n	8007270 <scalbn+0xa8>
 8007236:	a120      	add	r1, pc, #128	; (adr r1, 80072b8 <scalbn+0xf0>)
 8007238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800723c:	e018      	b.n	8007270 <scalbn+0xa8>
 800723e:	2a00      	cmp	r2, #0
 8007240:	dd08      	ble.n	8007254 <scalbn+0x8c>
 8007242:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007246:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800724a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800724e:	ec45 4b10 	vmov	d0, r4, r5
 8007252:	bd70      	pop	{r4, r5, r6, pc}
 8007254:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007258:	da19      	bge.n	800728e <scalbn+0xc6>
 800725a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800725e:	429e      	cmp	r6, r3
 8007260:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007264:	dd0a      	ble.n	800727c <scalbn+0xb4>
 8007266:	a112      	add	r1, pc, #72	; (adr r1, 80072b0 <scalbn+0xe8>)
 8007268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e2      	bne.n	8007236 <scalbn+0x6e>
 8007270:	a30f      	add	r3, pc, #60	; (adr r3, 80072b0 <scalbn+0xe8>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f7f9 f9c7 	bl	8000608 <__aeabi_dmul>
 800727a:	e7cb      	b.n	8007214 <scalbn+0x4c>
 800727c:	a10a      	add	r1, pc, #40	; (adr r1, 80072a8 <scalbn+0xe0>)
 800727e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0b8      	beq.n	80071f8 <scalbn+0x30>
 8007286:	a10e      	add	r1, pc, #56	; (adr r1, 80072c0 <scalbn+0xf8>)
 8007288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800728c:	e7b4      	b.n	80071f8 <scalbn+0x30>
 800728e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007292:	3236      	adds	r2, #54	; 0x36
 8007294:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007298:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800729c:	4620      	mov	r0, r4
 800729e:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <scalbn+0x108>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	e7e8      	b.n	8007276 <scalbn+0xae>
 80072a4:	f3af 8000 	nop.w
 80072a8:	c2f8f359 	.word	0xc2f8f359
 80072ac:	01a56e1f 	.word	0x01a56e1f
 80072b0:	8800759c 	.word	0x8800759c
 80072b4:	7e37e43c 	.word	0x7e37e43c
 80072b8:	8800759c 	.word	0x8800759c
 80072bc:	fe37e43c 	.word	0xfe37e43c
 80072c0:	c2f8f359 	.word	0xc2f8f359
 80072c4:	81a56e1f 	.word	0x81a56e1f
 80072c8:	43500000 	.word	0x43500000
 80072cc:	ffff3cb0 	.word	0xffff3cb0
 80072d0:	3c900000 	.word	0x3c900000

080072d4 <fabsf>:
 80072d4:	ee10 3a10 	vmov	r3, s0
 80072d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072dc:	ee00 3a10 	vmov	s0, r3
 80072e0:	4770      	bx	lr
	...

080072e4 <nanf>:
 80072e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80072ec <nanf+0x8>
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	7fc00000 	.word	0x7fc00000

080072f0 <abort>:
 80072f0:	b508      	push	{r3, lr}
 80072f2:	2006      	movs	r0, #6
 80072f4:	f000 f950 	bl	8007598 <raise>
 80072f8:	2001      	movs	r0, #1
 80072fa:	f7fa fa33 	bl	8001764 <_exit>
	...

08007300 <__errno>:
 8007300:	4b01      	ldr	r3, [pc, #4]	; (8007308 <__errno+0x8>)
 8007302:	6818      	ldr	r0, [r3, #0]
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	2000002c 	.word	0x2000002c

0800730c <__libc_init_array>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	4d0d      	ldr	r5, [pc, #52]	; (8007344 <__libc_init_array+0x38>)
 8007310:	4c0d      	ldr	r4, [pc, #52]	; (8007348 <__libc_init_array+0x3c>)
 8007312:	1b64      	subs	r4, r4, r5
 8007314:	10a4      	asrs	r4, r4, #2
 8007316:	2600      	movs	r6, #0
 8007318:	42a6      	cmp	r6, r4
 800731a:	d109      	bne.n	8007330 <__libc_init_array+0x24>
 800731c:	4d0b      	ldr	r5, [pc, #44]	; (800734c <__libc_init_array+0x40>)
 800731e:	4c0c      	ldr	r4, [pc, #48]	; (8007350 <__libc_init_array+0x44>)
 8007320:	f000 fcbc 	bl	8007c9c <_init>
 8007324:	1b64      	subs	r4, r4, r5
 8007326:	10a4      	asrs	r4, r4, #2
 8007328:	2600      	movs	r6, #0
 800732a:	42a6      	cmp	r6, r4
 800732c:	d105      	bne.n	800733a <__libc_init_array+0x2e>
 800732e:	bd70      	pop	{r4, r5, r6, pc}
 8007330:	f855 3b04 	ldr.w	r3, [r5], #4
 8007334:	4798      	blx	r3
 8007336:	3601      	adds	r6, #1
 8007338:	e7ee      	b.n	8007318 <__libc_init_array+0xc>
 800733a:	f855 3b04 	ldr.w	r3, [r5], #4
 800733e:	4798      	blx	r3
 8007340:	3601      	adds	r6, #1
 8007342:	e7f2      	b.n	800732a <__libc_init_array+0x1e>
 8007344:	08007f2c 	.word	0x08007f2c
 8007348:	08007f2c 	.word	0x08007f2c
 800734c:	08007f2c 	.word	0x08007f2c
 8007350:	08007f34 	.word	0x08007f34

08007354 <malloc>:
 8007354:	4b02      	ldr	r3, [pc, #8]	; (8007360 <malloc+0xc>)
 8007356:	4601      	mov	r1, r0
 8007358:	6818      	ldr	r0, [r3, #0]
 800735a:	f000 b88b 	b.w	8007474 <_malloc_r>
 800735e:	bf00      	nop
 8007360:	2000002c 	.word	0x2000002c

08007364 <free>:
 8007364:	4b02      	ldr	r3, [pc, #8]	; (8007370 <free+0xc>)
 8007366:	4601      	mov	r1, r0
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	f000 b833 	b.w	80073d4 <_free_r>
 800736e:	bf00      	nop
 8007370:	2000002c 	.word	0x2000002c

08007374 <memcpy>:
 8007374:	440a      	add	r2, r1
 8007376:	4291      	cmp	r1, r2
 8007378:	f100 33ff 	add.w	r3, r0, #4294967295
 800737c:	d100      	bne.n	8007380 <memcpy+0xc>
 800737e:	4770      	bx	lr
 8007380:	b510      	push	{r4, lr}
 8007382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800738a:	4291      	cmp	r1, r2
 800738c:	d1f9      	bne.n	8007382 <memcpy+0xe>
 800738e:	bd10      	pop	{r4, pc}

08007390 <memmove>:
 8007390:	4288      	cmp	r0, r1
 8007392:	b510      	push	{r4, lr}
 8007394:	eb01 0402 	add.w	r4, r1, r2
 8007398:	d902      	bls.n	80073a0 <memmove+0x10>
 800739a:	4284      	cmp	r4, r0
 800739c:	4623      	mov	r3, r4
 800739e:	d807      	bhi.n	80073b0 <memmove+0x20>
 80073a0:	1e43      	subs	r3, r0, #1
 80073a2:	42a1      	cmp	r1, r4
 80073a4:	d008      	beq.n	80073b8 <memmove+0x28>
 80073a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073ae:	e7f8      	b.n	80073a2 <memmove+0x12>
 80073b0:	4402      	add	r2, r0
 80073b2:	4601      	mov	r1, r0
 80073b4:	428a      	cmp	r2, r1
 80073b6:	d100      	bne.n	80073ba <memmove+0x2a>
 80073b8:	bd10      	pop	{r4, pc}
 80073ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073c2:	e7f7      	b.n	80073b4 <memmove+0x24>

080073c4 <memset>:
 80073c4:	4402      	add	r2, r0
 80073c6:	4603      	mov	r3, r0
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d100      	bne.n	80073ce <memset+0xa>
 80073cc:	4770      	bx	lr
 80073ce:	f803 1b01 	strb.w	r1, [r3], #1
 80073d2:	e7f9      	b.n	80073c8 <memset+0x4>

080073d4 <_free_r>:
 80073d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073d6:	2900      	cmp	r1, #0
 80073d8:	d048      	beq.n	800746c <_free_r+0x98>
 80073da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073de:	9001      	str	r0, [sp, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f1a1 0404 	sub.w	r4, r1, #4
 80073e6:	bfb8      	it	lt
 80073e8:	18e4      	addlt	r4, r4, r3
 80073ea:	f000 f92b 	bl	8007644 <__malloc_lock>
 80073ee:	4a20      	ldr	r2, [pc, #128]	; (8007470 <_free_r+0x9c>)
 80073f0:	9801      	ldr	r0, [sp, #4]
 80073f2:	6813      	ldr	r3, [r2, #0]
 80073f4:	4615      	mov	r5, r2
 80073f6:	b933      	cbnz	r3, 8007406 <_free_r+0x32>
 80073f8:	6063      	str	r3, [r4, #4]
 80073fa:	6014      	str	r4, [r2, #0]
 80073fc:	b003      	add	sp, #12
 80073fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007402:	f000 b925 	b.w	8007650 <__malloc_unlock>
 8007406:	42a3      	cmp	r3, r4
 8007408:	d90b      	bls.n	8007422 <_free_r+0x4e>
 800740a:	6821      	ldr	r1, [r4, #0]
 800740c:	1862      	adds	r2, r4, r1
 800740e:	4293      	cmp	r3, r2
 8007410:	bf04      	itt	eq
 8007412:	681a      	ldreq	r2, [r3, #0]
 8007414:	685b      	ldreq	r3, [r3, #4]
 8007416:	6063      	str	r3, [r4, #4]
 8007418:	bf04      	itt	eq
 800741a:	1852      	addeq	r2, r2, r1
 800741c:	6022      	streq	r2, [r4, #0]
 800741e:	602c      	str	r4, [r5, #0]
 8007420:	e7ec      	b.n	80073fc <_free_r+0x28>
 8007422:	461a      	mov	r2, r3
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	b10b      	cbz	r3, 800742c <_free_r+0x58>
 8007428:	42a3      	cmp	r3, r4
 800742a:	d9fa      	bls.n	8007422 <_free_r+0x4e>
 800742c:	6811      	ldr	r1, [r2, #0]
 800742e:	1855      	adds	r5, r2, r1
 8007430:	42a5      	cmp	r5, r4
 8007432:	d10b      	bne.n	800744c <_free_r+0x78>
 8007434:	6824      	ldr	r4, [r4, #0]
 8007436:	4421      	add	r1, r4
 8007438:	1854      	adds	r4, r2, r1
 800743a:	42a3      	cmp	r3, r4
 800743c:	6011      	str	r1, [r2, #0]
 800743e:	d1dd      	bne.n	80073fc <_free_r+0x28>
 8007440:	681c      	ldr	r4, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	6053      	str	r3, [r2, #4]
 8007446:	4421      	add	r1, r4
 8007448:	6011      	str	r1, [r2, #0]
 800744a:	e7d7      	b.n	80073fc <_free_r+0x28>
 800744c:	d902      	bls.n	8007454 <_free_r+0x80>
 800744e:	230c      	movs	r3, #12
 8007450:	6003      	str	r3, [r0, #0]
 8007452:	e7d3      	b.n	80073fc <_free_r+0x28>
 8007454:	6825      	ldr	r5, [r4, #0]
 8007456:	1961      	adds	r1, r4, r5
 8007458:	428b      	cmp	r3, r1
 800745a:	bf04      	itt	eq
 800745c:	6819      	ldreq	r1, [r3, #0]
 800745e:	685b      	ldreq	r3, [r3, #4]
 8007460:	6063      	str	r3, [r4, #4]
 8007462:	bf04      	itt	eq
 8007464:	1949      	addeq	r1, r1, r5
 8007466:	6021      	streq	r1, [r4, #0]
 8007468:	6054      	str	r4, [r2, #4]
 800746a:	e7c7      	b.n	80073fc <_free_r+0x28>
 800746c:	b003      	add	sp, #12
 800746e:	bd30      	pop	{r4, r5, pc}
 8007470:	20000130 	.word	0x20000130

08007474 <_malloc_r>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	1ccd      	adds	r5, r1, #3
 8007478:	f025 0503 	bic.w	r5, r5, #3
 800747c:	3508      	adds	r5, #8
 800747e:	2d0c      	cmp	r5, #12
 8007480:	bf38      	it	cc
 8007482:	250c      	movcc	r5, #12
 8007484:	2d00      	cmp	r5, #0
 8007486:	4606      	mov	r6, r0
 8007488:	db01      	blt.n	800748e <_malloc_r+0x1a>
 800748a:	42a9      	cmp	r1, r5
 800748c:	d903      	bls.n	8007496 <_malloc_r+0x22>
 800748e:	230c      	movs	r3, #12
 8007490:	6033      	str	r3, [r6, #0]
 8007492:	2000      	movs	r0, #0
 8007494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007496:	f000 f8d5 	bl	8007644 <__malloc_lock>
 800749a:	4921      	ldr	r1, [pc, #132]	; (8007520 <_malloc_r+0xac>)
 800749c:	680a      	ldr	r2, [r1, #0]
 800749e:	4614      	mov	r4, r2
 80074a0:	b99c      	cbnz	r4, 80074ca <_malloc_r+0x56>
 80074a2:	4f20      	ldr	r7, [pc, #128]	; (8007524 <_malloc_r+0xb0>)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	b923      	cbnz	r3, 80074b2 <_malloc_r+0x3e>
 80074a8:	4621      	mov	r1, r4
 80074aa:	4630      	mov	r0, r6
 80074ac:	f000 f83c 	bl	8007528 <_sbrk_r>
 80074b0:	6038      	str	r0, [r7, #0]
 80074b2:	4629      	mov	r1, r5
 80074b4:	4630      	mov	r0, r6
 80074b6:	f000 f837 	bl	8007528 <_sbrk_r>
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	d123      	bne.n	8007506 <_malloc_r+0x92>
 80074be:	230c      	movs	r3, #12
 80074c0:	6033      	str	r3, [r6, #0]
 80074c2:	4630      	mov	r0, r6
 80074c4:	f000 f8c4 	bl	8007650 <__malloc_unlock>
 80074c8:	e7e3      	b.n	8007492 <_malloc_r+0x1e>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	1b5b      	subs	r3, r3, r5
 80074ce:	d417      	bmi.n	8007500 <_malloc_r+0x8c>
 80074d0:	2b0b      	cmp	r3, #11
 80074d2:	d903      	bls.n	80074dc <_malloc_r+0x68>
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	441c      	add	r4, r3
 80074d8:	6025      	str	r5, [r4, #0]
 80074da:	e004      	b.n	80074e6 <_malloc_r+0x72>
 80074dc:	6863      	ldr	r3, [r4, #4]
 80074de:	42a2      	cmp	r2, r4
 80074e0:	bf0c      	ite	eq
 80074e2:	600b      	streq	r3, [r1, #0]
 80074e4:	6053      	strne	r3, [r2, #4]
 80074e6:	4630      	mov	r0, r6
 80074e8:	f000 f8b2 	bl	8007650 <__malloc_unlock>
 80074ec:	f104 000b 	add.w	r0, r4, #11
 80074f0:	1d23      	adds	r3, r4, #4
 80074f2:	f020 0007 	bic.w	r0, r0, #7
 80074f6:	1ac2      	subs	r2, r0, r3
 80074f8:	d0cc      	beq.n	8007494 <_malloc_r+0x20>
 80074fa:	1a1b      	subs	r3, r3, r0
 80074fc:	50a3      	str	r3, [r4, r2]
 80074fe:	e7c9      	b.n	8007494 <_malloc_r+0x20>
 8007500:	4622      	mov	r2, r4
 8007502:	6864      	ldr	r4, [r4, #4]
 8007504:	e7cc      	b.n	80074a0 <_malloc_r+0x2c>
 8007506:	1cc4      	adds	r4, r0, #3
 8007508:	f024 0403 	bic.w	r4, r4, #3
 800750c:	42a0      	cmp	r0, r4
 800750e:	d0e3      	beq.n	80074d8 <_malloc_r+0x64>
 8007510:	1a21      	subs	r1, r4, r0
 8007512:	4630      	mov	r0, r6
 8007514:	f000 f808 	bl	8007528 <_sbrk_r>
 8007518:	3001      	adds	r0, #1
 800751a:	d1dd      	bne.n	80074d8 <_malloc_r+0x64>
 800751c:	e7cf      	b.n	80074be <_malloc_r+0x4a>
 800751e:	bf00      	nop
 8007520:	20000130 	.word	0x20000130
 8007524:	20000134 	.word	0x20000134

08007528 <_sbrk_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d06      	ldr	r5, [pc, #24]	; (8007544 <_sbrk_r+0x1c>)
 800752c:	2300      	movs	r3, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	602b      	str	r3, [r5, #0]
 8007534:	f7fa f920 	bl	8001778 <_sbrk>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_sbrk_r+0x1a>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_sbrk_r+0x1a>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	2000021c 	.word	0x2000021c

08007548 <_raise_r>:
 8007548:	291f      	cmp	r1, #31
 800754a:	b538      	push	{r3, r4, r5, lr}
 800754c:	4604      	mov	r4, r0
 800754e:	460d      	mov	r5, r1
 8007550:	d904      	bls.n	800755c <_raise_r+0x14>
 8007552:	2316      	movs	r3, #22
 8007554:	6003      	str	r3, [r0, #0]
 8007556:	f04f 30ff 	mov.w	r0, #4294967295
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800755e:	b112      	cbz	r2, 8007566 <_raise_r+0x1e>
 8007560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007564:	b94b      	cbnz	r3, 800757a <_raise_r+0x32>
 8007566:	4620      	mov	r0, r4
 8007568:	f000 f830 	bl	80075cc <_getpid_r>
 800756c:	462a      	mov	r2, r5
 800756e:	4601      	mov	r1, r0
 8007570:	4620      	mov	r0, r4
 8007572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007576:	f000 b817 	b.w	80075a8 <_kill_r>
 800757a:	2b01      	cmp	r3, #1
 800757c:	d00a      	beq.n	8007594 <_raise_r+0x4c>
 800757e:	1c59      	adds	r1, r3, #1
 8007580:	d103      	bne.n	800758a <_raise_r+0x42>
 8007582:	2316      	movs	r3, #22
 8007584:	6003      	str	r3, [r0, #0]
 8007586:	2001      	movs	r0, #1
 8007588:	e7e7      	b.n	800755a <_raise_r+0x12>
 800758a:	2400      	movs	r4, #0
 800758c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007590:	4628      	mov	r0, r5
 8007592:	4798      	blx	r3
 8007594:	2000      	movs	r0, #0
 8007596:	e7e0      	b.n	800755a <_raise_r+0x12>

08007598 <raise>:
 8007598:	4b02      	ldr	r3, [pc, #8]	; (80075a4 <raise+0xc>)
 800759a:	4601      	mov	r1, r0
 800759c:	6818      	ldr	r0, [r3, #0]
 800759e:	f7ff bfd3 	b.w	8007548 <_raise_r>
 80075a2:	bf00      	nop
 80075a4:	2000002c 	.word	0x2000002c

080075a8 <_kill_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4d07      	ldr	r5, [pc, #28]	; (80075c8 <_kill_r+0x20>)
 80075ac:	2300      	movs	r3, #0
 80075ae:	4604      	mov	r4, r0
 80075b0:	4608      	mov	r0, r1
 80075b2:	4611      	mov	r1, r2
 80075b4:	602b      	str	r3, [r5, #0]
 80075b6:	f7fa f8c5 	bl	8001744 <_kill>
 80075ba:	1c43      	adds	r3, r0, #1
 80075bc:	d102      	bne.n	80075c4 <_kill_r+0x1c>
 80075be:	682b      	ldr	r3, [r5, #0]
 80075c0:	b103      	cbz	r3, 80075c4 <_kill_r+0x1c>
 80075c2:	6023      	str	r3, [r4, #0]
 80075c4:	bd38      	pop	{r3, r4, r5, pc}
 80075c6:	bf00      	nop
 80075c8:	2000021c 	.word	0x2000021c

080075cc <_getpid_r>:
 80075cc:	f7fa b8b2 	b.w	8001734 <_getpid>

080075d0 <_vsniprintf_r>:
 80075d0:	b530      	push	{r4, r5, lr}
 80075d2:	1e14      	subs	r4, r2, #0
 80075d4:	4605      	mov	r5, r0
 80075d6:	b09b      	sub	sp, #108	; 0x6c
 80075d8:	4618      	mov	r0, r3
 80075da:	da05      	bge.n	80075e8 <_vsniprintf_r+0x18>
 80075dc:	238b      	movs	r3, #139	; 0x8b
 80075de:	602b      	str	r3, [r5, #0]
 80075e0:	f04f 30ff 	mov.w	r0, #4294967295
 80075e4:	b01b      	add	sp, #108	; 0x6c
 80075e6:	bd30      	pop	{r4, r5, pc}
 80075e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80075ec:	f8ad 300c 	strh.w	r3, [sp, #12]
 80075f0:	bf14      	ite	ne
 80075f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80075f6:	4623      	moveq	r3, r4
 80075f8:	9302      	str	r3, [sp, #8]
 80075fa:	9305      	str	r3, [sp, #20]
 80075fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007600:	9100      	str	r1, [sp, #0]
 8007602:	9104      	str	r1, [sp, #16]
 8007604:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007608:	4602      	mov	r2, r0
 800760a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800760c:	4669      	mov	r1, sp
 800760e:	4628      	mov	r0, r5
 8007610:	f000 f880 	bl	8007714 <_svfiprintf_r>
 8007614:	1c43      	adds	r3, r0, #1
 8007616:	bfbc      	itt	lt
 8007618:	238b      	movlt	r3, #139	; 0x8b
 800761a:	602b      	strlt	r3, [r5, #0]
 800761c:	2c00      	cmp	r4, #0
 800761e:	d0e1      	beq.n	80075e4 <_vsniprintf_r+0x14>
 8007620:	9b00      	ldr	r3, [sp, #0]
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	e7dd      	b.n	80075e4 <_vsniprintf_r+0x14>

08007628 <vsniprintf>:
 8007628:	b507      	push	{r0, r1, r2, lr}
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	460a      	mov	r2, r1
 8007630:	4601      	mov	r1, r0
 8007632:	4803      	ldr	r0, [pc, #12]	; (8007640 <vsniprintf+0x18>)
 8007634:	6800      	ldr	r0, [r0, #0]
 8007636:	f7ff ffcb 	bl	80075d0 <_vsniprintf_r>
 800763a:	b003      	add	sp, #12
 800763c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007640:	2000002c 	.word	0x2000002c

08007644 <__malloc_lock>:
 8007644:	4801      	ldr	r0, [pc, #4]	; (800764c <__malloc_lock+0x8>)
 8007646:	f000 baf9 	b.w	8007c3c <__retarget_lock_acquire_recursive>
 800764a:	bf00      	nop
 800764c:	20000224 	.word	0x20000224

08007650 <__malloc_unlock>:
 8007650:	4801      	ldr	r0, [pc, #4]	; (8007658 <__malloc_unlock+0x8>)
 8007652:	f000 baf4 	b.w	8007c3e <__retarget_lock_release_recursive>
 8007656:	bf00      	nop
 8007658:	20000224 	.word	0x20000224

0800765c <__ssputs_r>:
 800765c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007660:	688e      	ldr	r6, [r1, #8]
 8007662:	429e      	cmp	r6, r3
 8007664:	4682      	mov	sl, r0
 8007666:	460c      	mov	r4, r1
 8007668:	4690      	mov	r8, r2
 800766a:	461f      	mov	r7, r3
 800766c:	d838      	bhi.n	80076e0 <__ssputs_r+0x84>
 800766e:	898a      	ldrh	r2, [r1, #12]
 8007670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007674:	d032      	beq.n	80076dc <__ssputs_r+0x80>
 8007676:	6825      	ldr	r5, [r4, #0]
 8007678:	6909      	ldr	r1, [r1, #16]
 800767a:	eba5 0901 	sub.w	r9, r5, r1
 800767e:	6965      	ldr	r5, [r4, #20]
 8007680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007684:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007688:	3301      	adds	r3, #1
 800768a:	444b      	add	r3, r9
 800768c:	106d      	asrs	r5, r5, #1
 800768e:	429d      	cmp	r5, r3
 8007690:	bf38      	it	cc
 8007692:	461d      	movcc	r5, r3
 8007694:	0553      	lsls	r3, r2, #21
 8007696:	d531      	bpl.n	80076fc <__ssputs_r+0xa0>
 8007698:	4629      	mov	r1, r5
 800769a:	f7ff feeb 	bl	8007474 <_malloc_r>
 800769e:	4606      	mov	r6, r0
 80076a0:	b950      	cbnz	r0, 80076b8 <__ssputs_r+0x5c>
 80076a2:	230c      	movs	r3, #12
 80076a4:	f8ca 3000 	str.w	r3, [sl]
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ae:	81a3      	strh	r3, [r4, #12]
 80076b0:	f04f 30ff 	mov.w	r0, #4294967295
 80076b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b8:	6921      	ldr	r1, [r4, #16]
 80076ba:	464a      	mov	r2, r9
 80076bc:	f7ff fe5a 	bl	8007374 <memcpy>
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ca:	81a3      	strh	r3, [r4, #12]
 80076cc:	6126      	str	r6, [r4, #16]
 80076ce:	6165      	str	r5, [r4, #20]
 80076d0:	444e      	add	r6, r9
 80076d2:	eba5 0509 	sub.w	r5, r5, r9
 80076d6:	6026      	str	r6, [r4, #0]
 80076d8:	60a5      	str	r5, [r4, #8]
 80076da:	463e      	mov	r6, r7
 80076dc:	42be      	cmp	r6, r7
 80076de:	d900      	bls.n	80076e2 <__ssputs_r+0x86>
 80076e0:	463e      	mov	r6, r7
 80076e2:	4632      	mov	r2, r6
 80076e4:	6820      	ldr	r0, [r4, #0]
 80076e6:	4641      	mov	r1, r8
 80076e8:	f7ff fe52 	bl	8007390 <memmove>
 80076ec:	68a3      	ldr	r3, [r4, #8]
 80076ee:	6822      	ldr	r2, [r4, #0]
 80076f0:	1b9b      	subs	r3, r3, r6
 80076f2:	4432      	add	r2, r6
 80076f4:	60a3      	str	r3, [r4, #8]
 80076f6:	6022      	str	r2, [r4, #0]
 80076f8:	2000      	movs	r0, #0
 80076fa:	e7db      	b.n	80076b4 <__ssputs_r+0x58>
 80076fc:	462a      	mov	r2, r5
 80076fe:	f000 fa9f 	bl	8007c40 <_realloc_r>
 8007702:	4606      	mov	r6, r0
 8007704:	2800      	cmp	r0, #0
 8007706:	d1e1      	bne.n	80076cc <__ssputs_r+0x70>
 8007708:	6921      	ldr	r1, [r4, #16]
 800770a:	4650      	mov	r0, sl
 800770c:	f7ff fe62 	bl	80073d4 <_free_r>
 8007710:	e7c7      	b.n	80076a2 <__ssputs_r+0x46>
	...

08007714 <_svfiprintf_r>:
 8007714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	4698      	mov	r8, r3
 800771a:	898b      	ldrh	r3, [r1, #12]
 800771c:	061b      	lsls	r3, r3, #24
 800771e:	b09d      	sub	sp, #116	; 0x74
 8007720:	4607      	mov	r7, r0
 8007722:	460d      	mov	r5, r1
 8007724:	4614      	mov	r4, r2
 8007726:	d50e      	bpl.n	8007746 <_svfiprintf_r+0x32>
 8007728:	690b      	ldr	r3, [r1, #16]
 800772a:	b963      	cbnz	r3, 8007746 <_svfiprintf_r+0x32>
 800772c:	2140      	movs	r1, #64	; 0x40
 800772e:	f7ff fea1 	bl	8007474 <_malloc_r>
 8007732:	6028      	str	r0, [r5, #0]
 8007734:	6128      	str	r0, [r5, #16]
 8007736:	b920      	cbnz	r0, 8007742 <_svfiprintf_r+0x2e>
 8007738:	230c      	movs	r3, #12
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	f04f 30ff 	mov.w	r0, #4294967295
 8007740:	e0d1      	b.n	80078e6 <_svfiprintf_r+0x1d2>
 8007742:	2340      	movs	r3, #64	; 0x40
 8007744:	616b      	str	r3, [r5, #20]
 8007746:	2300      	movs	r3, #0
 8007748:	9309      	str	r3, [sp, #36]	; 0x24
 800774a:	2320      	movs	r3, #32
 800774c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007750:	f8cd 800c 	str.w	r8, [sp, #12]
 8007754:	2330      	movs	r3, #48	; 0x30
 8007756:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007900 <_svfiprintf_r+0x1ec>
 800775a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800775e:	f04f 0901 	mov.w	r9, #1
 8007762:	4623      	mov	r3, r4
 8007764:	469a      	mov	sl, r3
 8007766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800776a:	b10a      	cbz	r2, 8007770 <_svfiprintf_r+0x5c>
 800776c:	2a25      	cmp	r2, #37	; 0x25
 800776e:	d1f9      	bne.n	8007764 <_svfiprintf_r+0x50>
 8007770:	ebba 0b04 	subs.w	fp, sl, r4
 8007774:	d00b      	beq.n	800778e <_svfiprintf_r+0x7a>
 8007776:	465b      	mov	r3, fp
 8007778:	4622      	mov	r2, r4
 800777a:	4629      	mov	r1, r5
 800777c:	4638      	mov	r0, r7
 800777e:	f7ff ff6d 	bl	800765c <__ssputs_r>
 8007782:	3001      	adds	r0, #1
 8007784:	f000 80aa 	beq.w	80078dc <_svfiprintf_r+0x1c8>
 8007788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800778a:	445a      	add	r2, fp
 800778c:	9209      	str	r2, [sp, #36]	; 0x24
 800778e:	f89a 3000 	ldrb.w	r3, [sl]
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 80a2 	beq.w	80078dc <_svfiprintf_r+0x1c8>
 8007798:	2300      	movs	r3, #0
 800779a:	f04f 32ff 	mov.w	r2, #4294967295
 800779e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077a2:	f10a 0a01 	add.w	sl, sl, #1
 80077a6:	9304      	str	r3, [sp, #16]
 80077a8:	9307      	str	r3, [sp, #28]
 80077aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077ae:	931a      	str	r3, [sp, #104]	; 0x68
 80077b0:	4654      	mov	r4, sl
 80077b2:	2205      	movs	r2, #5
 80077b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b8:	4851      	ldr	r0, [pc, #324]	; (8007900 <_svfiprintf_r+0x1ec>)
 80077ba:	f7f8 fd11 	bl	80001e0 <memchr>
 80077be:	9a04      	ldr	r2, [sp, #16]
 80077c0:	b9d8      	cbnz	r0, 80077fa <_svfiprintf_r+0xe6>
 80077c2:	06d0      	lsls	r0, r2, #27
 80077c4:	bf44      	itt	mi
 80077c6:	2320      	movmi	r3, #32
 80077c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077cc:	0711      	lsls	r1, r2, #28
 80077ce:	bf44      	itt	mi
 80077d0:	232b      	movmi	r3, #43	; 0x2b
 80077d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077d6:	f89a 3000 	ldrb.w	r3, [sl]
 80077da:	2b2a      	cmp	r3, #42	; 0x2a
 80077dc:	d015      	beq.n	800780a <_svfiprintf_r+0xf6>
 80077de:	9a07      	ldr	r2, [sp, #28]
 80077e0:	4654      	mov	r4, sl
 80077e2:	2000      	movs	r0, #0
 80077e4:	f04f 0c0a 	mov.w	ip, #10
 80077e8:	4621      	mov	r1, r4
 80077ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ee:	3b30      	subs	r3, #48	; 0x30
 80077f0:	2b09      	cmp	r3, #9
 80077f2:	d94e      	bls.n	8007892 <_svfiprintf_r+0x17e>
 80077f4:	b1b0      	cbz	r0, 8007824 <_svfiprintf_r+0x110>
 80077f6:	9207      	str	r2, [sp, #28]
 80077f8:	e014      	b.n	8007824 <_svfiprintf_r+0x110>
 80077fa:	eba0 0308 	sub.w	r3, r0, r8
 80077fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007802:	4313      	orrs	r3, r2
 8007804:	9304      	str	r3, [sp, #16]
 8007806:	46a2      	mov	sl, r4
 8007808:	e7d2      	b.n	80077b0 <_svfiprintf_r+0x9c>
 800780a:	9b03      	ldr	r3, [sp, #12]
 800780c:	1d19      	adds	r1, r3, #4
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	9103      	str	r1, [sp, #12]
 8007812:	2b00      	cmp	r3, #0
 8007814:	bfbb      	ittet	lt
 8007816:	425b      	neglt	r3, r3
 8007818:	f042 0202 	orrlt.w	r2, r2, #2
 800781c:	9307      	strge	r3, [sp, #28]
 800781e:	9307      	strlt	r3, [sp, #28]
 8007820:	bfb8      	it	lt
 8007822:	9204      	strlt	r2, [sp, #16]
 8007824:	7823      	ldrb	r3, [r4, #0]
 8007826:	2b2e      	cmp	r3, #46	; 0x2e
 8007828:	d10c      	bne.n	8007844 <_svfiprintf_r+0x130>
 800782a:	7863      	ldrb	r3, [r4, #1]
 800782c:	2b2a      	cmp	r3, #42	; 0x2a
 800782e:	d135      	bne.n	800789c <_svfiprintf_r+0x188>
 8007830:	9b03      	ldr	r3, [sp, #12]
 8007832:	1d1a      	adds	r2, r3, #4
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	9203      	str	r2, [sp, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	bfb8      	it	lt
 800783c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007840:	3402      	adds	r4, #2
 8007842:	9305      	str	r3, [sp, #20]
 8007844:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007910 <_svfiprintf_r+0x1fc>
 8007848:	7821      	ldrb	r1, [r4, #0]
 800784a:	2203      	movs	r2, #3
 800784c:	4650      	mov	r0, sl
 800784e:	f7f8 fcc7 	bl	80001e0 <memchr>
 8007852:	b140      	cbz	r0, 8007866 <_svfiprintf_r+0x152>
 8007854:	2340      	movs	r3, #64	; 0x40
 8007856:	eba0 000a 	sub.w	r0, r0, sl
 800785a:	fa03 f000 	lsl.w	r0, r3, r0
 800785e:	9b04      	ldr	r3, [sp, #16]
 8007860:	4303      	orrs	r3, r0
 8007862:	3401      	adds	r4, #1
 8007864:	9304      	str	r3, [sp, #16]
 8007866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786a:	4826      	ldr	r0, [pc, #152]	; (8007904 <_svfiprintf_r+0x1f0>)
 800786c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007870:	2206      	movs	r2, #6
 8007872:	f7f8 fcb5 	bl	80001e0 <memchr>
 8007876:	2800      	cmp	r0, #0
 8007878:	d038      	beq.n	80078ec <_svfiprintf_r+0x1d8>
 800787a:	4b23      	ldr	r3, [pc, #140]	; (8007908 <_svfiprintf_r+0x1f4>)
 800787c:	bb1b      	cbnz	r3, 80078c6 <_svfiprintf_r+0x1b2>
 800787e:	9b03      	ldr	r3, [sp, #12]
 8007880:	3307      	adds	r3, #7
 8007882:	f023 0307 	bic.w	r3, r3, #7
 8007886:	3308      	adds	r3, #8
 8007888:	9303      	str	r3, [sp, #12]
 800788a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800788c:	4433      	add	r3, r6
 800788e:	9309      	str	r3, [sp, #36]	; 0x24
 8007890:	e767      	b.n	8007762 <_svfiprintf_r+0x4e>
 8007892:	fb0c 3202 	mla	r2, ip, r2, r3
 8007896:	460c      	mov	r4, r1
 8007898:	2001      	movs	r0, #1
 800789a:	e7a5      	b.n	80077e8 <_svfiprintf_r+0xd4>
 800789c:	2300      	movs	r3, #0
 800789e:	3401      	adds	r4, #1
 80078a0:	9305      	str	r3, [sp, #20]
 80078a2:	4619      	mov	r1, r3
 80078a4:	f04f 0c0a 	mov.w	ip, #10
 80078a8:	4620      	mov	r0, r4
 80078aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ae:	3a30      	subs	r2, #48	; 0x30
 80078b0:	2a09      	cmp	r2, #9
 80078b2:	d903      	bls.n	80078bc <_svfiprintf_r+0x1a8>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0c5      	beq.n	8007844 <_svfiprintf_r+0x130>
 80078b8:	9105      	str	r1, [sp, #20]
 80078ba:	e7c3      	b.n	8007844 <_svfiprintf_r+0x130>
 80078bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80078c0:	4604      	mov	r4, r0
 80078c2:	2301      	movs	r3, #1
 80078c4:	e7f0      	b.n	80078a8 <_svfiprintf_r+0x194>
 80078c6:	ab03      	add	r3, sp, #12
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	462a      	mov	r2, r5
 80078cc:	4b0f      	ldr	r3, [pc, #60]	; (800790c <_svfiprintf_r+0x1f8>)
 80078ce:	a904      	add	r1, sp, #16
 80078d0:	4638      	mov	r0, r7
 80078d2:	f3af 8000 	nop.w
 80078d6:	1c42      	adds	r2, r0, #1
 80078d8:	4606      	mov	r6, r0
 80078da:	d1d6      	bne.n	800788a <_svfiprintf_r+0x176>
 80078dc:	89ab      	ldrh	r3, [r5, #12]
 80078de:	065b      	lsls	r3, r3, #25
 80078e0:	f53f af2c 	bmi.w	800773c <_svfiprintf_r+0x28>
 80078e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078e6:	b01d      	add	sp, #116	; 0x74
 80078e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ec:	ab03      	add	r3, sp, #12
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	462a      	mov	r2, r5
 80078f2:	4b06      	ldr	r3, [pc, #24]	; (800790c <_svfiprintf_r+0x1f8>)
 80078f4:	a904      	add	r1, sp, #16
 80078f6:	4638      	mov	r0, r7
 80078f8:	f000 f87a 	bl	80079f0 <_printf_i>
 80078fc:	e7eb      	b.n	80078d6 <_svfiprintf_r+0x1c2>
 80078fe:	bf00      	nop
 8007900:	08007ef0 	.word	0x08007ef0
 8007904:	08007efa 	.word	0x08007efa
 8007908:	00000000 	.word	0x00000000
 800790c:	0800765d 	.word	0x0800765d
 8007910:	08007ef6 	.word	0x08007ef6

08007914 <_printf_common>:
 8007914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007918:	4616      	mov	r6, r2
 800791a:	4699      	mov	r9, r3
 800791c:	688a      	ldr	r2, [r1, #8]
 800791e:	690b      	ldr	r3, [r1, #16]
 8007920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007924:	4293      	cmp	r3, r2
 8007926:	bfb8      	it	lt
 8007928:	4613      	movlt	r3, r2
 800792a:	6033      	str	r3, [r6, #0]
 800792c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007930:	4607      	mov	r7, r0
 8007932:	460c      	mov	r4, r1
 8007934:	b10a      	cbz	r2, 800793a <_printf_common+0x26>
 8007936:	3301      	adds	r3, #1
 8007938:	6033      	str	r3, [r6, #0]
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	0699      	lsls	r1, r3, #26
 800793e:	bf42      	ittt	mi
 8007940:	6833      	ldrmi	r3, [r6, #0]
 8007942:	3302      	addmi	r3, #2
 8007944:	6033      	strmi	r3, [r6, #0]
 8007946:	6825      	ldr	r5, [r4, #0]
 8007948:	f015 0506 	ands.w	r5, r5, #6
 800794c:	d106      	bne.n	800795c <_printf_common+0x48>
 800794e:	f104 0a19 	add.w	sl, r4, #25
 8007952:	68e3      	ldr	r3, [r4, #12]
 8007954:	6832      	ldr	r2, [r6, #0]
 8007956:	1a9b      	subs	r3, r3, r2
 8007958:	42ab      	cmp	r3, r5
 800795a:	dc26      	bgt.n	80079aa <_printf_common+0x96>
 800795c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007960:	1e13      	subs	r3, r2, #0
 8007962:	6822      	ldr	r2, [r4, #0]
 8007964:	bf18      	it	ne
 8007966:	2301      	movne	r3, #1
 8007968:	0692      	lsls	r2, r2, #26
 800796a:	d42b      	bmi.n	80079c4 <_printf_common+0xb0>
 800796c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007970:	4649      	mov	r1, r9
 8007972:	4638      	mov	r0, r7
 8007974:	47c0      	blx	r8
 8007976:	3001      	adds	r0, #1
 8007978:	d01e      	beq.n	80079b8 <_printf_common+0xa4>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	68e5      	ldr	r5, [r4, #12]
 800797e:	6832      	ldr	r2, [r6, #0]
 8007980:	f003 0306 	and.w	r3, r3, #6
 8007984:	2b04      	cmp	r3, #4
 8007986:	bf08      	it	eq
 8007988:	1aad      	subeq	r5, r5, r2
 800798a:	68a3      	ldr	r3, [r4, #8]
 800798c:	6922      	ldr	r2, [r4, #16]
 800798e:	bf0c      	ite	eq
 8007990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007994:	2500      	movne	r5, #0
 8007996:	4293      	cmp	r3, r2
 8007998:	bfc4      	itt	gt
 800799a:	1a9b      	subgt	r3, r3, r2
 800799c:	18ed      	addgt	r5, r5, r3
 800799e:	2600      	movs	r6, #0
 80079a0:	341a      	adds	r4, #26
 80079a2:	42b5      	cmp	r5, r6
 80079a4:	d11a      	bne.n	80079dc <_printf_common+0xc8>
 80079a6:	2000      	movs	r0, #0
 80079a8:	e008      	b.n	80079bc <_printf_common+0xa8>
 80079aa:	2301      	movs	r3, #1
 80079ac:	4652      	mov	r2, sl
 80079ae:	4649      	mov	r1, r9
 80079b0:	4638      	mov	r0, r7
 80079b2:	47c0      	blx	r8
 80079b4:	3001      	adds	r0, #1
 80079b6:	d103      	bne.n	80079c0 <_printf_common+0xac>
 80079b8:	f04f 30ff 	mov.w	r0, #4294967295
 80079bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c0:	3501      	adds	r5, #1
 80079c2:	e7c6      	b.n	8007952 <_printf_common+0x3e>
 80079c4:	18e1      	adds	r1, r4, r3
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	2030      	movs	r0, #48	; 0x30
 80079ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079ce:	4422      	add	r2, r4
 80079d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079d8:	3302      	adds	r3, #2
 80079da:	e7c7      	b.n	800796c <_printf_common+0x58>
 80079dc:	2301      	movs	r3, #1
 80079de:	4622      	mov	r2, r4
 80079e0:	4649      	mov	r1, r9
 80079e2:	4638      	mov	r0, r7
 80079e4:	47c0      	blx	r8
 80079e6:	3001      	adds	r0, #1
 80079e8:	d0e6      	beq.n	80079b8 <_printf_common+0xa4>
 80079ea:	3601      	adds	r6, #1
 80079ec:	e7d9      	b.n	80079a2 <_printf_common+0x8e>
	...

080079f0 <_printf_i>:
 80079f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079f4:	460c      	mov	r4, r1
 80079f6:	4691      	mov	r9, r2
 80079f8:	7e27      	ldrb	r7, [r4, #24]
 80079fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079fc:	2f78      	cmp	r7, #120	; 0x78
 80079fe:	4680      	mov	r8, r0
 8007a00:	469a      	mov	sl, r3
 8007a02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a06:	d807      	bhi.n	8007a18 <_printf_i+0x28>
 8007a08:	2f62      	cmp	r7, #98	; 0x62
 8007a0a:	d80a      	bhi.n	8007a22 <_printf_i+0x32>
 8007a0c:	2f00      	cmp	r7, #0
 8007a0e:	f000 80d8 	beq.w	8007bc2 <_printf_i+0x1d2>
 8007a12:	2f58      	cmp	r7, #88	; 0x58
 8007a14:	f000 80a3 	beq.w	8007b5e <_printf_i+0x16e>
 8007a18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a20:	e03a      	b.n	8007a98 <_printf_i+0xa8>
 8007a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a26:	2b15      	cmp	r3, #21
 8007a28:	d8f6      	bhi.n	8007a18 <_printf_i+0x28>
 8007a2a:	a001      	add	r0, pc, #4	; (adr r0, 8007a30 <_printf_i+0x40>)
 8007a2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007a30:	08007a89 	.word	0x08007a89
 8007a34:	08007a9d 	.word	0x08007a9d
 8007a38:	08007a19 	.word	0x08007a19
 8007a3c:	08007a19 	.word	0x08007a19
 8007a40:	08007a19 	.word	0x08007a19
 8007a44:	08007a19 	.word	0x08007a19
 8007a48:	08007a9d 	.word	0x08007a9d
 8007a4c:	08007a19 	.word	0x08007a19
 8007a50:	08007a19 	.word	0x08007a19
 8007a54:	08007a19 	.word	0x08007a19
 8007a58:	08007a19 	.word	0x08007a19
 8007a5c:	08007ba9 	.word	0x08007ba9
 8007a60:	08007acd 	.word	0x08007acd
 8007a64:	08007b8b 	.word	0x08007b8b
 8007a68:	08007a19 	.word	0x08007a19
 8007a6c:	08007a19 	.word	0x08007a19
 8007a70:	08007bcb 	.word	0x08007bcb
 8007a74:	08007a19 	.word	0x08007a19
 8007a78:	08007acd 	.word	0x08007acd
 8007a7c:	08007a19 	.word	0x08007a19
 8007a80:	08007a19 	.word	0x08007a19
 8007a84:	08007b93 	.word	0x08007b93
 8007a88:	680b      	ldr	r3, [r1, #0]
 8007a8a:	1d1a      	adds	r2, r3, #4
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	600a      	str	r2, [r1, #0]
 8007a90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e0a3      	b.n	8007be4 <_printf_i+0x1f4>
 8007a9c:	6825      	ldr	r5, [r4, #0]
 8007a9e:	6808      	ldr	r0, [r1, #0]
 8007aa0:	062e      	lsls	r6, r5, #24
 8007aa2:	f100 0304 	add.w	r3, r0, #4
 8007aa6:	d50a      	bpl.n	8007abe <_printf_i+0xce>
 8007aa8:	6805      	ldr	r5, [r0, #0]
 8007aaa:	600b      	str	r3, [r1, #0]
 8007aac:	2d00      	cmp	r5, #0
 8007aae:	da03      	bge.n	8007ab8 <_printf_i+0xc8>
 8007ab0:	232d      	movs	r3, #45	; 0x2d
 8007ab2:	426d      	negs	r5, r5
 8007ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ab8:	485e      	ldr	r0, [pc, #376]	; (8007c34 <_printf_i+0x244>)
 8007aba:	230a      	movs	r3, #10
 8007abc:	e019      	b.n	8007af2 <_printf_i+0x102>
 8007abe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007ac2:	6805      	ldr	r5, [r0, #0]
 8007ac4:	600b      	str	r3, [r1, #0]
 8007ac6:	bf18      	it	ne
 8007ac8:	b22d      	sxthne	r5, r5
 8007aca:	e7ef      	b.n	8007aac <_printf_i+0xbc>
 8007acc:	680b      	ldr	r3, [r1, #0]
 8007ace:	6825      	ldr	r5, [r4, #0]
 8007ad0:	1d18      	adds	r0, r3, #4
 8007ad2:	6008      	str	r0, [r1, #0]
 8007ad4:	0628      	lsls	r0, r5, #24
 8007ad6:	d501      	bpl.n	8007adc <_printf_i+0xec>
 8007ad8:	681d      	ldr	r5, [r3, #0]
 8007ada:	e002      	b.n	8007ae2 <_printf_i+0xf2>
 8007adc:	0669      	lsls	r1, r5, #25
 8007ade:	d5fb      	bpl.n	8007ad8 <_printf_i+0xe8>
 8007ae0:	881d      	ldrh	r5, [r3, #0]
 8007ae2:	4854      	ldr	r0, [pc, #336]	; (8007c34 <_printf_i+0x244>)
 8007ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ae6:	bf0c      	ite	eq
 8007ae8:	2308      	moveq	r3, #8
 8007aea:	230a      	movne	r3, #10
 8007aec:	2100      	movs	r1, #0
 8007aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007af2:	6866      	ldr	r6, [r4, #4]
 8007af4:	60a6      	str	r6, [r4, #8]
 8007af6:	2e00      	cmp	r6, #0
 8007af8:	bfa2      	ittt	ge
 8007afa:	6821      	ldrge	r1, [r4, #0]
 8007afc:	f021 0104 	bicge.w	r1, r1, #4
 8007b00:	6021      	strge	r1, [r4, #0]
 8007b02:	b90d      	cbnz	r5, 8007b08 <_printf_i+0x118>
 8007b04:	2e00      	cmp	r6, #0
 8007b06:	d04d      	beq.n	8007ba4 <_printf_i+0x1b4>
 8007b08:	4616      	mov	r6, r2
 8007b0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b0e:	fb03 5711 	mls	r7, r3, r1, r5
 8007b12:	5dc7      	ldrb	r7, [r0, r7]
 8007b14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b18:	462f      	mov	r7, r5
 8007b1a:	42bb      	cmp	r3, r7
 8007b1c:	460d      	mov	r5, r1
 8007b1e:	d9f4      	bls.n	8007b0a <_printf_i+0x11a>
 8007b20:	2b08      	cmp	r3, #8
 8007b22:	d10b      	bne.n	8007b3c <_printf_i+0x14c>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	07df      	lsls	r7, r3, #31
 8007b28:	d508      	bpl.n	8007b3c <_printf_i+0x14c>
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	6861      	ldr	r1, [r4, #4]
 8007b2e:	4299      	cmp	r1, r3
 8007b30:	bfde      	ittt	le
 8007b32:	2330      	movle	r3, #48	; 0x30
 8007b34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b3c:	1b92      	subs	r2, r2, r6
 8007b3e:	6122      	str	r2, [r4, #16]
 8007b40:	f8cd a000 	str.w	sl, [sp]
 8007b44:	464b      	mov	r3, r9
 8007b46:	aa03      	add	r2, sp, #12
 8007b48:	4621      	mov	r1, r4
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	f7ff fee2 	bl	8007914 <_printf_common>
 8007b50:	3001      	adds	r0, #1
 8007b52:	d14c      	bne.n	8007bee <_printf_i+0x1fe>
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295
 8007b58:	b004      	add	sp, #16
 8007b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5e:	4835      	ldr	r0, [pc, #212]	; (8007c34 <_printf_i+0x244>)
 8007b60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	680e      	ldr	r6, [r1, #0]
 8007b68:	061f      	lsls	r7, r3, #24
 8007b6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007b6e:	600e      	str	r6, [r1, #0]
 8007b70:	d514      	bpl.n	8007b9c <_printf_i+0x1ac>
 8007b72:	07d9      	lsls	r1, r3, #31
 8007b74:	bf44      	itt	mi
 8007b76:	f043 0320 	orrmi.w	r3, r3, #32
 8007b7a:	6023      	strmi	r3, [r4, #0]
 8007b7c:	b91d      	cbnz	r5, 8007b86 <_printf_i+0x196>
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	f023 0320 	bic.w	r3, r3, #32
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	2310      	movs	r3, #16
 8007b88:	e7b0      	b.n	8007aec <_printf_i+0xfc>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	f043 0320 	orr.w	r3, r3, #32
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	2378      	movs	r3, #120	; 0x78
 8007b94:	4828      	ldr	r0, [pc, #160]	; (8007c38 <_printf_i+0x248>)
 8007b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b9a:	e7e3      	b.n	8007b64 <_printf_i+0x174>
 8007b9c:	065e      	lsls	r6, r3, #25
 8007b9e:	bf48      	it	mi
 8007ba0:	b2ad      	uxthmi	r5, r5
 8007ba2:	e7e6      	b.n	8007b72 <_printf_i+0x182>
 8007ba4:	4616      	mov	r6, r2
 8007ba6:	e7bb      	b.n	8007b20 <_printf_i+0x130>
 8007ba8:	680b      	ldr	r3, [r1, #0]
 8007baa:	6826      	ldr	r6, [r4, #0]
 8007bac:	6960      	ldr	r0, [r4, #20]
 8007bae:	1d1d      	adds	r5, r3, #4
 8007bb0:	600d      	str	r5, [r1, #0]
 8007bb2:	0635      	lsls	r5, r6, #24
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	d501      	bpl.n	8007bbc <_printf_i+0x1cc>
 8007bb8:	6018      	str	r0, [r3, #0]
 8007bba:	e002      	b.n	8007bc2 <_printf_i+0x1d2>
 8007bbc:	0671      	lsls	r1, r6, #25
 8007bbe:	d5fb      	bpl.n	8007bb8 <_printf_i+0x1c8>
 8007bc0:	8018      	strh	r0, [r3, #0]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	6123      	str	r3, [r4, #16]
 8007bc6:	4616      	mov	r6, r2
 8007bc8:	e7ba      	b.n	8007b40 <_printf_i+0x150>
 8007bca:	680b      	ldr	r3, [r1, #0]
 8007bcc:	1d1a      	adds	r2, r3, #4
 8007bce:	600a      	str	r2, [r1, #0]
 8007bd0:	681e      	ldr	r6, [r3, #0]
 8007bd2:	6862      	ldr	r2, [r4, #4]
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7f8 fb02 	bl	80001e0 <memchr>
 8007bdc:	b108      	cbz	r0, 8007be2 <_printf_i+0x1f2>
 8007bde:	1b80      	subs	r0, r0, r6
 8007be0:	6060      	str	r0, [r4, #4]
 8007be2:	6863      	ldr	r3, [r4, #4]
 8007be4:	6123      	str	r3, [r4, #16]
 8007be6:	2300      	movs	r3, #0
 8007be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bec:	e7a8      	b.n	8007b40 <_printf_i+0x150>
 8007bee:	6923      	ldr	r3, [r4, #16]
 8007bf0:	4632      	mov	r2, r6
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	47d0      	blx	sl
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d0ab      	beq.n	8007b54 <_printf_i+0x164>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	079b      	lsls	r3, r3, #30
 8007c00:	d413      	bmi.n	8007c2a <_printf_i+0x23a>
 8007c02:	68e0      	ldr	r0, [r4, #12]
 8007c04:	9b03      	ldr	r3, [sp, #12]
 8007c06:	4298      	cmp	r0, r3
 8007c08:	bfb8      	it	lt
 8007c0a:	4618      	movlt	r0, r3
 8007c0c:	e7a4      	b.n	8007b58 <_printf_i+0x168>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	4632      	mov	r2, r6
 8007c12:	4649      	mov	r1, r9
 8007c14:	4640      	mov	r0, r8
 8007c16:	47d0      	blx	sl
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d09b      	beq.n	8007b54 <_printf_i+0x164>
 8007c1c:	3501      	adds	r5, #1
 8007c1e:	68e3      	ldr	r3, [r4, #12]
 8007c20:	9903      	ldr	r1, [sp, #12]
 8007c22:	1a5b      	subs	r3, r3, r1
 8007c24:	42ab      	cmp	r3, r5
 8007c26:	dcf2      	bgt.n	8007c0e <_printf_i+0x21e>
 8007c28:	e7eb      	b.n	8007c02 <_printf_i+0x212>
 8007c2a:	2500      	movs	r5, #0
 8007c2c:	f104 0619 	add.w	r6, r4, #25
 8007c30:	e7f5      	b.n	8007c1e <_printf_i+0x22e>
 8007c32:	bf00      	nop
 8007c34:	08007f01 	.word	0x08007f01
 8007c38:	08007f12 	.word	0x08007f12

08007c3c <__retarget_lock_acquire_recursive>:
 8007c3c:	4770      	bx	lr

08007c3e <__retarget_lock_release_recursive>:
 8007c3e:	4770      	bx	lr

08007c40 <_realloc_r>:
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c42:	4607      	mov	r7, r0
 8007c44:	4614      	mov	r4, r2
 8007c46:	460e      	mov	r6, r1
 8007c48:	b921      	cbnz	r1, 8007c54 <_realloc_r+0x14>
 8007c4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c4e:	4611      	mov	r1, r2
 8007c50:	f7ff bc10 	b.w	8007474 <_malloc_r>
 8007c54:	b922      	cbnz	r2, 8007c60 <_realloc_r+0x20>
 8007c56:	f7ff fbbd 	bl	80073d4 <_free_r>
 8007c5a:	4625      	mov	r5, r4
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c60:	f000 f814 	bl	8007c8c <_malloc_usable_size_r>
 8007c64:	42a0      	cmp	r0, r4
 8007c66:	d20f      	bcs.n	8007c88 <_realloc_r+0x48>
 8007c68:	4621      	mov	r1, r4
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	f7ff fc02 	bl	8007474 <_malloc_r>
 8007c70:	4605      	mov	r5, r0
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d0f2      	beq.n	8007c5c <_realloc_r+0x1c>
 8007c76:	4631      	mov	r1, r6
 8007c78:	4622      	mov	r2, r4
 8007c7a:	f7ff fb7b 	bl	8007374 <memcpy>
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4638      	mov	r0, r7
 8007c82:	f7ff fba7 	bl	80073d4 <_free_r>
 8007c86:	e7e9      	b.n	8007c5c <_realloc_r+0x1c>
 8007c88:	4635      	mov	r5, r6
 8007c8a:	e7e7      	b.n	8007c5c <_realloc_r+0x1c>

08007c8c <_malloc_usable_size_r>:
 8007c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c90:	1f18      	subs	r0, r3, #4
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bfbc      	itt	lt
 8007c96:	580b      	ldrlt	r3, [r1, r0]
 8007c98:	18c0      	addlt	r0, r0, r3
 8007c9a:	4770      	bx	lr

08007c9c <_init>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	bf00      	nop
 8007ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca2:	bc08      	pop	{r3}
 8007ca4:	469e      	mov	lr, r3
 8007ca6:	4770      	bx	lr

08007ca8 <_fini>:
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007caa:	bf00      	nop
 8007cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cae:	bc08      	pop	{r3}
 8007cb0:	469e      	mov	lr, r3
 8007cb2:	4770      	bx	lr
