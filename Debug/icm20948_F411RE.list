
icm20948_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005684  08005684  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800568c  0800568c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800569c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  0800570c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  0800570c  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018da3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf3  00000000  00000000  00038e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  0003ba38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  0003ca60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e3b  00000000  00000000  0003d998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001412b  00000000  00000000  000447d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fa13  00000000  00000000  000588fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8311  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d48  00000000  00000000  000f8364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005440 	.word	0x08005440

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08005440 	.word	0x08005440

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_uldivmod>:
 8000a24:	b953      	cbnz	r3, 8000a3c <__aeabi_uldivmod+0x18>
 8000a26:	b94a      	cbnz	r2, 8000a3c <__aeabi_uldivmod+0x18>
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	bf08      	it	eq
 8000a2c:	2800      	cmpeq	r0, #0
 8000a2e:	bf1c      	itt	ne
 8000a30:	f04f 31ff 	movne.w	r1, #4294967295
 8000a34:	f04f 30ff 	movne.w	r0, #4294967295
 8000a38:	f000 b974 	b.w	8000d24 <__aeabi_idiv0>
 8000a3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a44:	f000 f806 	bl	8000a54 <__udivmoddi4>
 8000a48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a50:	b004      	add	sp, #16
 8000a52:	4770      	bx	lr

08000a54 <__udivmoddi4>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	9d08      	ldr	r5, [sp, #32]
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	468e      	mov	lr, r1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d14d      	bne.n	8000afe <__udivmoddi4+0xaa>
 8000a62:	428a      	cmp	r2, r1
 8000a64:	4694      	mov	ip, r2
 8000a66:	d969      	bls.n	8000b3c <__udivmoddi4+0xe8>
 8000a68:	fab2 f282 	clz	r2, r2
 8000a6c:	b152      	cbz	r2, 8000a84 <__udivmoddi4+0x30>
 8000a6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a72:	f1c2 0120 	rsb	r1, r2, #32
 8000a76:	fa20 f101 	lsr.w	r1, r0, r1
 8000a7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a82:	4094      	lsls	r4, r2
 8000a84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a88:	0c21      	lsrs	r1, r4, #16
 8000a8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a8e:	fa1f f78c 	uxth.w	r7, ip
 8000a92:	fb08 e316 	mls	r3, r8, r6, lr
 8000a96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a9a:	fb06 f107 	mul.w	r1, r6, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d90a      	bls.n	8000ab8 <__udivmoddi4+0x64>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aaa:	f080 811f 	bcs.w	8000cec <__udivmoddi4+0x298>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 811c 	bls.w	8000cec <__udivmoddi4+0x298>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	4463      	add	r3, ip
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b2a4      	uxth	r4, r4
 8000abc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ac0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ac4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac8:	fb00 f707 	mul.w	r7, r0, r7
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	d90a      	bls.n	8000ae6 <__udivmoddi4+0x92>
 8000ad0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad8:	f080 810a 	bcs.w	8000cf0 <__udivmoddi4+0x29c>
 8000adc:	42a7      	cmp	r7, r4
 8000ade:	f240 8107 	bls.w	8000cf0 <__udivmoddi4+0x29c>
 8000ae2:	4464      	add	r4, ip
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aea:	1be4      	subs	r4, r4, r7
 8000aec:	2600      	movs	r6, #0
 8000aee:	b11d      	cbz	r5, 8000af8 <__udivmoddi4+0xa4>
 8000af0:	40d4      	lsrs	r4, r2
 8000af2:	2300      	movs	r3, #0
 8000af4:	e9c5 4300 	strd	r4, r3, [r5]
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d909      	bls.n	8000b16 <__udivmoddi4+0xc2>
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	f000 80ef 	beq.w	8000ce6 <__udivmoddi4+0x292>
 8000b08:	2600      	movs	r6, #0
 8000b0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0e:	4630      	mov	r0, r6
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	fab3 f683 	clz	r6, r3
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d14a      	bne.n	8000bb4 <__udivmoddi4+0x160>
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d302      	bcc.n	8000b28 <__udivmoddi4+0xd4>
 8000b22:	4282      	cmp	r2, r0
 8000b24:	f200 80f9 	bhi.w	8000d1a <__udivmoddi4+0x2c6>
 8000b28:	1a84      	subs	r4, r0, r2
 8000b2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b2e:	2001      	movs	r0, #1
 8000b30:	469e      	mov	lr, r3
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	d0e0      	beq.n	8000af8 <__udivmoddi4+0xa4>
 8000b36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b3a:	e7dd      	b.n	8000af8 <__udivmoddi4+0xa4>
 8000b3c:	b902      	cbnz	r2, 8000b40 <__udivmoddi4+0xec>
 8000b3e:	deff      	udf	#255	; 0xff
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	f040 8092 	bne.w	8000c6e <__udivmoddi4+0x21a>
 8000b4a:	eba1 010c 	sub.w	r1, r1, ip
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f fe8c 	uxth.w	lr, ip
 8000b56:	2601      	movs	r6, #1
 8000b58:	0c20      	lsrs	r0, r4, #16
 8000b5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b66:	fb0e f003 	mul.w	r0, lr, r3
 8000b6a:	4288      	cmp	r0, r1
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0x12c>
 8000b6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x12a>
 8000b78:	4288      	cmp	r0, r1
 8000b7a:	f200 80cb 	bhi.w	8000d14 <__udivmoddi4+0x2c0>
 8000b7e:	4643      	mov	r3, r8
 8000b80:	1a09      	subs	r1, r1, r0
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b88:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b90:	fb0e fe00 	mul.w	lr, lr, r0
 8000b94:	45a6      	cmp	lr, r4
 8000b96:	d908      	bls.n	8000baa <__udivmoddi4+0x156>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x154>
 8000ba2:	45a6      	cmp	lr, r4
 8000ba4:	f200 80bb 	bhi.w	8000d1e <__udivmoddi4+0x2ca>
 8000ba8:	4608      	mov	r0, r1
 8000baa:	eba4 040e 	sub.w	r4, r4, lr
 8000bae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bb2:	e79c      	b.n	8000aee <__udivmoddi4+0x9a>
 8000bb4:	f1c6 0720 	rsb	r7, r6, #32
 8000bb8:	40b3      	lsls	r3, r6
 8000bba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bc2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bca:	431c      	orrs	r4, r3
 8000bcc:	40f9      	lsrs	r1, r7
 8000bce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bd2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bd6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bda:	0c20      	lsrs	r0, r4, #16
 8000bdc:	fa1f fe8c 	uxth.w	lr, ip
 8000be0:	fb09 1118 	mls	r1, r9, r8, r1
 8000be4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000be8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bec:	4288      	cmp	r0, r1
 8000bee:	fa02 f206 	lsl.w	r2, r2, r6
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b8>
 8000bf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bfc:	f080 8088 	bcs.w	8000d10 <__udivmoddi4+0x2bc>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f240 8085 	bls.w	8000d10 <__udivmoddi4+0x2bc>
 8000c06:	f1a8 0802 	sub.w	r8, r8, #2
 8000c0a:	4461      	add	r1, ip
 8000c0c:	1a09      	subs	r1, r1, r0
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c14:	fb09 1110 	mls	r1, r9, r0, r1
 8000c18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c20:	458e      	cmp	lr, r1
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1e2>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2c:	d26c      	bcs.n	8000d08 <__udivmoddi4+0x2b4>
 8000c2e:	458e      	cmp	lr, r1
 8000c30:	d96a      	bls.n	8000d08 <__udivmoddi4+0x2b4>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4461      	add	r1, ip
 8000c36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c3e:	eba1 010e 	sub.w	r1, r1, lr
 8000c42:	42a1      	cmp	r1, r4
 8000c44:	46c8      	mov	r8, r9
 8000c46:	46a6      	mov	lr, r4
 8000c48:	d356      	bcc.n	8000cf8 <__udivmoddi4+0x2a4>
 8000c4a:	d053      	beq.n	8000cf4 <__udivmoddi4+0x2a0>
 8000c4c:	b15d      	cbz	r5, 8000c66 <__udivmoddi4+0x212>
 8000c4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c52:	eb61 010e 	sbc.w	r1, r1, lr
 8000c56:	fa01 f707 	lsl.w	r7, r1, r7
 8000c5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c5e:	40f1      	lsrs	r1, r6
 8000c60:	431f      	orrs	r7, r3
 8000c62:	e9c5 7100 	strd	r7, r1, [r5]
 8000c66:	2600      	movs	r6, #0
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	f1c2 0320 	rsb	r3, r2, #32
 8000c72:	40d8      	lsrs	r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	4301      	orrs	r1, r0
 8000c80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c90:	0c0b      	lsrs	r3, r1, #16
 8000c92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c96:	fb00 f60e 	mul.w	r6, r0, lr
 8000c9a:	429e      	cmp	r6, r3
 8000c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x260>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000caa:	d22f      	bcs.n	8000d0c <__udivmoddi4+0x2b8>
 8000cac:	429e      	cmp	r6, r3
 8000cae:	d92d      	bls.n	8000d0c <__udivmoddi4+0x2b8>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1b9b      	subs	r3, r3, r6
 8000cb6:	b289      	uxth	r1, r1
 8000cb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x28a>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cd4:	d216      	bcs.n	8000d04 <__udivmoddi4+0x2b0>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d914      	bls.n	8000d04 <__udivmoddi4+0x2b0>
 8000cda:	3e02      	subs	r6, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	1ac9      	subs	r1, r1, r3
 8000ce0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ce4:	e738      	b.n	8000b58 <__udivmoddi4+0x104>
 8000ce6:	462e      	mov	r6, r5
 8000ce8:	4628      	mov	r0, r5
 8000cea:	e705      	b.n	8000af8 <__udivmoddi4+0xa4>
 8000cec:	4606      	mov	r6, r0
 8000cee:	e6e3      	b.n	8000ab8 <__udivmoddi4+0x64>
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	e6f8      	b.n	8000ae6 <__udivmoddi4+0x92>
 8000cf4:	454b      	cmp	r3, r9
 8000cf6:	d2a9      	bcs.n	8000c4c <__udivmoddi4+0x1f8>
 8000cf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cfc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d00:	3801      	subs	r0, #1
 8000d02:	e7a3      	b.n	8000c4c <__udivmoddi4+0x1f8>
 8000d04:	4646      	mov	r6, r8
 8000d06:	e7ea      	b.n	8000cde <__udivmoddi4+0x28a>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	e794      	b.n	8000c36 <__udivmoddi4+0x1e2>
 8000d0c:	4640      	mov	r0, r8
 8000d0e:	e7d1      	b.n	8000cb4 <__udivmoddi4+0x260>
 8000d10:	46d0      	mov	r8, sl
 8000d12:	e77b      	b.n	8000c0c <__udivmoddi4+0x1b8>
 8000d14:	3b02      	subs	r3, #2
 8000d16:	4461      	add	r1, ip
 8000d18:	e732      	b.n	8000b80 <__udivmoddi4+0x12c>
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	e709      	b.n	8000b32 <__udivmoddi4+0xde>
 8000d1e:	4464      	add	r4, ip
 8000d20:	3802      	subs	r0, #2
 8000d22:	e742      	b.n	8000baa <__udivmoddi4+0x156>

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b38      	ldr	r3, [pc, #224]	; (8000e24 <MX_GPIO_Init+0xfc>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a37      	ldr	r2, [pc, #220]	; (8000e24 <MX_GPIO_Init+0xfc>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b35      	ldr	r3, [pc, #212]	; (8000e24 <MX_GPIO_Init+0xfc>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <MX_GPIO_Init+0xfc>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <MX_GPIO_Init+0xfc>)
 8000d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <MX_GPIO_Init+0xfc>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <MX_GPIO_Init+0xfc>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a29      	ldr	r2, [pc, #164]	; (8000e24 <MX_GPIO_Init+0xfc>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <MX_GPIO_Init+0xfc>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <MX_GPIO_Init+0xfc>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a22      	ldr	r2, [pc, #136]	; (8000e24 <MX_GPIO_Init+0xfc>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <MX_GPIO_Init+0xfc>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2120      	movs	r1, #32
 8000db2:	481d      	ldr	r0, [pc, #116]	; (8000e28 <MX_GPIO_Init+0x100>)
 8000db4:	f001 fb3a 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dbe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4817      	ldr	r0, [pc, #92]	; (8000e2c <MX_GPIO_Init+0x104>)
 8000dd0:	f001 f9a8 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dd4:	2320      	movs	r3, #32
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	480f      	ldr	r0, [pc, #60]	; (8000e28 <MX_GPIO_Init+0x100>)
 8000dec:	f001 f99a 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000df0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	4809      	ldr	r0, [pc, #36]	; (8000e2c <MX_GPIO_Init+0x104>)
 8000e08:	f001 f98c 	bl	8002124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2028      	movs	r0, #40	; 0x28
 8000e12:	f001 f950 	bl	80020b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e16:	2028      	movs	r0, #40	; 0x28
 8000e18:	f001 f969 	bl	80020ee <HAL_NVIC_EnableIRQ>

}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40020800 	.word	0x40020800

08000e30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e36:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <MX_I2C1_Init+0x54>)
 8000e38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e3c:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <MX_I2C1_Init+0x58>)
 8000e3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e6e:	f001 fb29 	bl	80024c4 <HAL_I2C_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e78:	f000 f8ce 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2000008c 	.word	0x2000008c
 8000e84:	40005400 	.word	0x40005400
 8000e88:	000186a0 	.word	0x000186a0

08000e8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a19      	ldr	r2, [pc, #100]	; (8000f10 <HAL_I2C_MspInit+0x84>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d12c      	bne.n	8000f08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <HAL_I2C_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <HAL_I2C_MspInit+0x88>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_I2C_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed0:	2312      	movs	r3, #18
 8000ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000edc:	2304      	movs	r3, #4
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480c      	ldr	r0, [pc, #48]	; (8000f18 <HAL_I2C_MspInit+0x8c>)
 8000ee8:	f001 f91c 	bl	8002124 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_I2C_MspInit+0x88>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_I2C_MspInit+0x88>)
 8000ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_I2C_MspInit+0x88>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	; 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40005400 	.word	0x40005400
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020400 	.word	0x40020400

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f000 ff58 	bl	8001dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f80e 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f7ff fefe 	bl	8000d28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f2c:	f000 f9b4 	bl	8001298 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f30:	f7ff ff7e 	bl	8000e30 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f34:	f000 f93e 	bl	80011b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000f38:	f000 fc5a 	bl	80017f0 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000f3c:	f000 fc9a 	bl	8001874 <loop>
 8000f40:	e7fc      	b.n	8000f3c <main+0x20>
	...

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	; 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	2230      	movs	r2, #48	; 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f004 f92a 	bl	80051ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <SystemClock_Config+0xcc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	4a27      	ldr	r2, [pc, #156]	; (8001010 <SystemClock_Config+0xcc>)
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <SystemClock_Config+0xd0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a21      	ldr	r2, [pc, #132]	; (8001014 <SystemClock_Config+0xd0>)
 8000f8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa8:	2310      	movs	r3, #16
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fac:	2302      	movs	r3, #2
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fb8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fa3a 	bl	8003444 <HAL_RCC_OscConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fd6:	f000 f81f 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fda:	230f      	movs	r3, #15
 8000fdc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 fc9c 	bl	8003934 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001002:	f000 f809 	bl	8001018 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3750      	adds	r7, #80	; 0x50
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>
	...

08001024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_MspInit+0x4c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <HAL_MspInit+0x4c>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_MspInit+0x4c>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4a08      	ldr	r2, [pc, #32]	; (8001070 <HAL_MspInit+0x4c>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_MspInit+0x4c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001062:	2007      	movs	r0, #7
 8001064:	f001 f81c 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <NMI_Handler+0x4>

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c0:	f000 feda 	bl	8001e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80010cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010d0:	f001 f9e0 	bl	8002494 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010d8:	f001 f9dc 	bl	8002494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
	return 1;
 80010e4:	2301      	movs	r3, #1
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <_kill>:

int _kill(int pid, int sig)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010fa:	f003 fff5 	bl	80050e8 <__errno>
 80010fe:	4603      	mov	r3, r0
 8001100:	2216      	movs	r2, #22
 8001102:	601a      	str	r2, [r3, #0]
	return -1;
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_exit>:

void _exit (int status)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ffe7 	bl	80010f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001122:	e7fe      	b.n	8001122 <_exit+0x12>

08001124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800112c:	4a14      	ldr	r2, [pc, #80]	; (8001180 <_sbrk+0x5c>)
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <_sbrk+0x60>)
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <_sbrk+0x64>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <_sbrk+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d207      	bcs.n	8001164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001154:	f003 ffc8 	bl	80050e8 <__errno>
 8001158:	4603      	mov	r3, r0
 800115a:	220c      	movs	r2, #12
 800115c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e009      	b.n	8001178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <_sbrk+0x64>)
 8001174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20020000 	.word	0x20020000
 8001184:	00000400 	.word	0x00000400
 8001188:	200000e0 	.word	0x200000e0
 800118c:	200001d8 	.word	0x200001d8

08001190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <SystemInit+0x20>)
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <SystemInit+0x20>)
 800119c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c8:	463b      	mov	r3, r7
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <MX_TIM1_Init+0x98>)
 80011d2:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <MX_TIM1_Init+0x9c>)
 80011d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <MX_TIM1_Init+0x98>)
 80011d8:	2253      	movs	r2, #83	; 0x53
 80011da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MX_TIM1_Init+0x98>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <MX_TIM1_Init+0x98>)
 80011e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_TIM1_Init+0x98>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_TIM1_Init+0x98>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_TIM1_Init+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <MX_TIM1_Init+0x98>)
 80011fe:	f002 fdb9 	bl	8003d74 <HAL_TIM_Base_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001208:	f7ff ff06 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001210:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4619      	mov	r1, r3
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <MX_TIM1_Init+0x98>)
 800121a:	f002 fe55 	bl	8003ec8 <HAL_TIM_ConfigClockSource>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001224:	f7ff fef8 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_TIM1_Init+0x98>)
 8001236:	f003 f829 	bl	800428c <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001240:	f7ff feea 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200000e4 	.word	0x200000e4
 8001250:	40010000 	.word	0x40010000

08001254 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <HAL_TIM_Base_MspInit+0x3c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d10d      	bne.n	8001282 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_TIM_Base_MspInit+0x40>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <HAL_TIM_Base_MspInit+0x40>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <HAL_TIM_Base_MspInit+0x40>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40010000 	.word	0x40010000
 8001294:	40023800 	.word	0x40023800

08001298 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <MX_USART2_UART_Init+0x50>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012d0:	f003 f84a 	bl	8004368 <HAL_UART_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012da:	f7ff fe9d 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000012c 	.word	0x2000012c
 80012e8:	40004400 	.word	0x40004400

080012ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a19      	ldr	r2, [pc, #100]	; (8001370 <HAL_UART_MspInit+0x84>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d12b      	bne.n	8001366 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_UART_MspInit+0x88>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a17      	ldr	r2, [pc, #92]	; (8001374 <HAL_UART_MspInit+0x88>)
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_UART_MspInit+0x88>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_UART_MspInit+0x88>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a10      	ldr	r2, [pc, #64]	; (8001374 <HAL_UART_MspInit+0x88>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_UART_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001346:	230c      	movs	r3, #12
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001356:	2307      	movs	r3, #7
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <HAL_UART_MspInit+0x8c>)
 8001362:	f000 fedf 	bl	8002124 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001366:	bf00      	nop
 8001368:	3728      	adds	r7, #40	; 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40004400 	.word	0x40004400
 8001374:	40023800 	.word	0x40023800
 8001378:	40020000 	.word	0x40020000

0800137c <_ZN8ICM20948Ut_C1Ev>:
		SENS_4G,
		SENS_8G,
		SENS_16G,
	};

	const struct{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2206      	movs	r2, #6
 800138e:	705a      	strb	r2, [r3, #1]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2207      	movs	r2, #7
 8001394:	709a      	strb	r2, [r3, #2]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	220f      	movs	r2, #15
 800139a:	70da      	strb	r2, [r3, #3]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	227f      	movs	r2, #127	; 0x7f
 80013a0:	711a      	strb	r2, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2214      	movs	r2, #20
 80013a6:	715a      	strb	r2, [r3, #5]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	719a      	strb	r2, [r3, #6]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2211      	movs	r2, #17
 80013b2:	71da      	strb	r2, [r3, #7]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <_ZN8ICM20948C1Ev>:
	ICM20948(){};
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <_ZN8ICM20948C1Ev+0x44>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3304      	adds	r3, #4
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ffd0 	bl	800137c <_ZN8ICM20948Ut_C1Ev>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <_ZN8ICM20948C1Ev+0x48>)
 80013e0:	f103 0410 	add.w	r4, r3, #16
 80013e4:	4613      	mov	r3, r2
 80013e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <_ZN8ICM20948C1Ev+0x4c>)
 80013f0:	f103 0420 	add.w	r4, r3, #32
 80013f4:	4613      	mov	r3, r2
 80013f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	08005574 	.word	0x08005574
 800140c:	08005458 	.word	0x08005458
 8001410:	08005468 	.word	0x08005468

08001414 <_ZN8ICM20948D1Ev>:
	virtual ~ICM20948(){};
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <_ZN8ICM20948D1Ev+0x1c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	08005574 	.word	0x08005574

08001434 <_ZN8ICM20948D0Ev>:
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ffe9 	bl	8001414 <_ZN8ICM20948D1Ev>
 8001442:	2130      	movs	r1, #48	; 0x30
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f003 fb51 	bl	8004aec <_ZdlPvj>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_ZN8ICM209486whoamiEv>:
		uint8_t GYRO_CONFIG = 0x01;
		uint8_t INT_ENABLE = 0x11;

	}REGISTER;

	uint8_t whoami(){
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af04      	add	r7, sp, #16
 800145a:	6078      	str	r0, [r7, #4]
	    uint8_t adress=0;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, REGISTER.WHO_AM_I, 1, &adress, 1, 1000);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	791b      	ldrb	r3, [r3, #4]
 8001464:	b29a      	uxth	r2, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	2301      	movs	r3, #1
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	f107 030f 	add.w	r3, r7, #15
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	21d0      	movs	r1, #208	; 0xd0
 800147a:	4804      	ldr	r0, [pc, #16]	; (800148c <_ZN8ICM209486whoamiEv+0x38>)
 800147c:	f001 fa60 	bl	8002940 <HAL_I2C_Mem_Read>
		return adress;
 8001480:	7bfb      	ldrb	r3, [r7, #15]

	}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000008c 	.word	0x2000008c

08001490 <_ZN8ICM209488pwrmgmt1Eh>:

	uint8_t pwrmgmt1(uint8_t data){
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af04      	add	r7, sp, #16
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	70fb      	strb	r3, [r7, #3]
	     HAL_I2C_Mem_Write(&hi2c1, 0x68<<1,REGISTER.PWR_MGMT_1,1,&data,1,1000);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	795b      	ldrb	r3, [r3, #5]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	2301      	movs	r3, #1
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	1cfb      	adds	r3, r7, #3
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2301      	movs	r3, #1
 80014b2:	21d0      	movs	r1, #208	; 0xd0
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <_ZN8ICM209488pwrmgmt1Eh+0x34>)
 80014b6:	f001 f949 	bl	800274c <HAL_I2C_Mem_Write>
	     return 0;
 80014ba:	2300      	movs	r3, #0
	}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000008c 	.word	0x2000008c

080014c8 <_ZN8ICM209488pwrmgmt2Eh>:
	uint8_t pwrmgmt2(uint8_t data){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af04      	add	r7, sp, #16
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
	     HAL_I2C_Mem_Write(&hi2c1, 0x68<<1,REGISTER.PWR_MGMT_2,1,&data,1,1000);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	799b      	ldrb	r3, [r3, #6]
 80014d8:	b29a      	uxth	r2, r3
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	2301      	movs	r3, #1
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	1cfb      	adds	r3, r7, #3
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2301      	movs	r3, #1
 80014ea:	21d0      	movs	r1, #208	; 0xd0
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <_ZN8ICM209488pwrmgmt2Eh+0x34>)
 80014ee:	f001 f92d 	bl	800274c <HAL_I2C_Mem_Write>
	     return 0;
 80014f2:	2300      	movs	r3, #0
	}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	2000008c 	.word	0x2000008c

08001500 <_ZN8ICM209485resetEv>:
	void reset(){
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af04      	add	r7, sp, #16
 8001506:	6078      	str	r0, [r7, #4]
	    pwrmgmt1(ICM20948_BIT_H_RESET);
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffc0 	bl	8001490 <_ZN8ICM209488pwrmgmt1Eh>
	    HAL_Delay(100);
 8001510:	2064      	movs	r0, #100	; 0x64
 8001512:	f000 fcd1 	bl	8001eb8 <HAL_Delay>
	    pwrmgmt1(ICM20948_BTT_CLK_PLL);
 8001516:	2101      	movs	r1, #1
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffb9 	bl	8001490 <_ZN8ICM209488pwrmgmt1Eh>
	    HAL_Delay(100);
 800151e:	2064      	movs	r0, #100	; 0x64
 8001520:	f000 fcca 	bl	8001eb8 <HAL_Delay>
	    uint8_t buffer=ICM20948_BIT_INT_ACTL | ICM20948_BIT_INT_OPEN;
 8001524:	23c0      	movs	r3, #192	; 0xc0
 8001526:	73fb      	strb	r3, [r7, #15]
	    HAL_I2C_Mem_Write(&hi2c1, 0x68<<1,REGISTER.INT_PIN_CFG,1,&buffer,1,1000);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	79db      	ldrb	r3, [r3, #7]
 800152c:	b29a      	uxth	r2, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	2301      	movs	r3, #1
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	f107 030f 	add.w	r3, r7, #15
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2301      	movs	r3, #1
 8001540:	21d0      	movs	r1, #208	; 0xd0
 8001542:	4803      	ldr	r0, [pc, #12]	; (8001550 <_ZN8ICM209485resetEv+0x50>)
 8001544:	f001 f902 	bl	800274c <HAL_I2C_Mem_Write>
		}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000008c 	.word	0x2000008c

08001554 <_ZN8ICM2094814changeuserbankEh>:
	bool changeuserbank(const uint8_t bank){
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af04      	add	r7, sp, #16
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	70fb      	strb	r3, [r7, #3]
	    if(bank>3 || bank<0){
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d901      	bls.n	800156a <_ZN8ICM2094814changeuserbankEh+0x16>
	        return false;
 8001566:	2300      	movs	r3, #0
 8001568:	e016      	b.n	8001598 <_ZN8ICM2094814changeuserbankEh+0x44>
	    }
	    uint8_t data=bank<<4;
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	b2db      	uxtb	r3, r3
 8001570:	73bb      	strb	r3, [r7, #14]
	    uint8_t res = HAL_I2C_Mem_Write(&hi2c1, 0x68<<1,REGISTER.BANK_SEL,1,&data,1,1000);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7a1b      	ldrb	r3, [r3, #8]
 8001576:	b29a      	uxth	r2, r3
 8001578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	2301      	movs	r3, #1
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	f107 030e 	add.w	r3, r7, #14
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2301      	movs	r3, #1
 800158a:	21d0      	movs	r1, #208	; 0xd0
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <_ZN8ICM2094814changeuserbankEh+0x4c>)
 800158e:	f001 f8dd 	bl	800274c <HAL_I2C_Mem_Write>
 8001592:	4603      	mov	r3, r0
 8001594:	73fb      	strb	r3, [r7, #15]
	    //printf("data=0x%02x\n",data);
	    //printf("res=%d\n",res);
	    return true;
 8001596:	2301      	movs	r3, #1
	}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000008c 	.word	0x2000008c

080015a4 <_ZN8ICM2094811accelconfigENS_16AccelSensitivityEbh>:

	bool accelconfig(const AccelSensitivity fssel,const bool enableDLPF,const uint8_t configDLPF){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af04      	add	r7, sp, #16
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	4608      	mov	r0, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	70fb      	strb	r3, [r7, #3]
 80015b6:	460b      	mov	r3, r1
 80015b8:	70bb      	strb	r3, [r7, #2]
 80015ba:	4613      	mov	r3, r2
 80015bc:	707b      	strb	r3, [r7, #1]

	    _accelsensitivity=fssel;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	78fa      	ldrb	r2, [r7, #3]
 80015c2:	731a      	strb	r2, [r3, #12]
	    if(configDLPF>7 || configDLPF<0){
 80015c4:	787b      	ldrb	r3, [r7, #1]
 80015c6:	2b07      	cmp	r3, #7
 80015c8:	d901      	bls.n	80015ce <_ZN8ICM2094811accelconfigENS_16AccelSensitivityEbh+0x2a>
	        return false;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e033      	b.n	8001636 <_ZN8ICM2094811accelconfigENS_16AccelSensitivityEbh+0x92>
	    }
	    uint8_t data=0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
	    data |=configDLPF<<3;
 80015d2:	787b      	ldrb	r3, [r7, #1]
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	73fb      	strb	r3, [r7, #15]
	    data |=(uint8_t)fssel<<1;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	b25a      	sxtb	r2, r3
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	73fb      	strb	r3, [r7, #15]
	    data |=enableDLPF;
 80015f6:	78ba      	ldrb	r2, [r7, #2]
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	73fb      	strb	r3, [r7, #15]
	    changeuserbank(2);
 8001600:	2102      	movs	r1, #2
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffa6 	bl	8001554 <_ZN8ICM2094814changeuserbankEh>

	    data=HAL_I2C_Mem_Write(&hi2c1, 0x68<<1,REGISTER.ACCEL_CONFIG,1,&data,1,1000);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7a5b      	ldrb	r3, [r3, #9]
 800160c:	b29a      	uxth	r2, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	2301      	movs	r3, #1
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	f107 030f 	add.w	r3, r7, #15
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2301      	movs	r3, #1
 8001620:	21d0      	movs	r1, #208	; 0xd0
 8001622:	4807      	ldr	r0, [pc, #28]	; (8001640 <_ZN8ICM2094811accelconfigENS_16AccelSensitivityEbh+0x9c>)
 8001624:	f001 f892 	bl	800274c <HAL_I2C_Mem_Write>
 8001628:	4603      	mov	r3, r0
 800162a:	73fb      	strb	r3, [r7, #15]
	    //printf("data=%d\n",data);
	    changeuserbank(0);
 800162c:	2100      	movs	r1, #0
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ff90 	bl	8001554 <_ZN8ICM2094814changeuserbankEh>
	    return true;
 8001634:	2301      	movs	r3, #1

	}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000008c 	.word	0x2000008c

08001644 <_ZN8ICM209487getgyroEh>:
	    int16_t accel=(int16_t)accelH<<8 | (int16_t)accelL;

	    return (float)accel/ACCEL_SENSITIVITY[(uint8_t)_accelsensitivity];
	}

	float getgyro(uint8_t axis){
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af04      	add	r7, sp, #16
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	70fb      	strb	r3, [r7, #3]
		const uint8_t REG_GYRO_H[3]={0x33,0x35,0x37};
 8001650:	4a2b      	ldr	r2, [pc, #172]	; (8001700 <_ZN8ICM209487getgyroEh+0xbc>)
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	4611      	mov	r1, r2
 800165a:	8019      	strh	r1, [r3, #0]
 800165c:	3302      	adds	r3, #2
 800165e:	0c12      	lsrs	r2, r2, #16
 8001660:	701a      	strb	r2, [r3, #0]
		const uint8_t REG_GYRO_L[3]={0x34,0x36,0x38};
 8001662:	4a28      	ldr	r2, [pc, #160]	; (8001704 <_ZN8ICM209487getgyroEh+0xc0>)
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	4611      	mov	r1, r2
 800166c:	8019      	strh	r1, [r3, #0]
 800166e:	3302      	adds	r3, #2
 8001670:	0c12      	lsrs	r2, r2, #16
 8001672:	701a      	strb	r2, [r3, #0]

		int8_t gyroH;
		HAL_I2C_Mem_Read(&hi2c1,0x68<<1,REG_GYRO_H[axis],1,(uint8_t*)&gyroH,1,1000);
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	3318      	adds	r3, #24
 8001678:	443b      	add	r3, r7
 800167a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800167e:	b29a      	uxth	r2, r3
 8001680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	2301      	movs	r3, #1
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	f107 030b 	add.w	r3, r7, #11
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	21d0      	movs	r1, #208	; 0xd0
 8001694:	481c      	ldr	r0, [pc, #112]	; (8001708 <_ZN8ICM209487getgyroEh+0xc4>)
 8001696:	f001 f953 	bl	8002940 <HAL_I2C_Mem_Read>
		int8_t gyroL;
		HAL_I2C_Mem_Read(&hi2c1,0x68<<1,REG_GYRO_L[axis],1,(uint8_t*)&gyroL,1,1000);
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	3318      	adds	r3, #24
 800169e:	443b      	add	r3, r7
 80016a0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	2301      	movs	r3, #1
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	f107 030a 	add.w	r3, r7, #10
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2301      	movs	r3, #1
 80016b8:	21d0      	movs	r1, #208	; 0xd0
 80016ba:	4813      	ldr	r0, [pc, #76]	; (8001708 <_ZN8ICM209487getgyroEh+0xc4>)
 80016bc:	f001 f940 	bl	8002940 <HAL_I2C_Mem_Read>
		int16_t gyro=(int16_t)gyroH<<8 | (int16_t)gyroL;
 80016c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	b21a      	sxth	r2, r3
 80016c8:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	82fb      	strh	r3, [r7, #22]

		return (float)gyro/GYRO_SENSITIVITY[(uint8_t)_gyrosensitivity];
 80016d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016d6:	ee07 3a90 	vmov	s15, r3
 80016da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7b5b      	ldrb	r3, [r3, #13]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	3308      	adds	r3, #8
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016f2:	eef0 7a66 	vmov.f32	s15, s13
	}
 80016f6:	eeb0 0a67 	vmov.f32	s0, s15
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	08005478 	.word	0x08005478
 8001704:	0800547c 	.word	0x0800547c
 8001708:	2000008c 	.word	0x2000008c

0800170c <_ZN8ICM209489pinconfigEh>:

	void pinconfig(uint8_t value){
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af04      	add	r7, sp, #16
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1,0x68<<1,REGISTER.INT_PIN_CFG,1,&value,1,1000);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	79db      	ldrb	r3, [r3, #7]
 800171c:	b29a      	uxth	r2, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	2301      	movs	r3, #1
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	1cfb      	adds	r3, r7, #3
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2301      	movs	r3, #1
 800172e:	21d0      	movs	r1, #208	; 0xd0
 8001730:	4803      	ldr	r0, [pc, #12]	; (8001740 <_ZN8ICM209489pinconfigEh+0x34>)
 8001732:	f001 f80b 	bl	800274c <HAL_I2C_Mem_Write>

	}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000008c 	.word	0x2000008c

08001744 <_ZN8ICM209489intenableEh>:

	void intenable(uint8_t value=1){
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af04      	add	r7, sp, #16
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1,0x68<<1,REGISTER.INT_ENABLE,1,&value,1,1000);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7adb      	ldrb	r3, [r3, #11]
 8001754:	b29a      	uxth	r2, r3
 8001756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175a:	9302      	str	r3, [sp, #8]
 800175c:	2301      	movs	r3, #1
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	1cfb      	adds	r3, r7, #3
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2301      	movs	r3, #1
 8001766:	21d0      	movs	r1, #208	; 0xd0
 8001768:	4803      	ldr	r0, [pc, #12]	; (8001778 <_ZN8ICM209489intenableEh+0x34>)
 800176a:	f000 ffef 	bl	800274c <HAL_I2C_Mem_Write>
	}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000008c 	.word	0x2000008c

0800177c <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	0fdb      	lsrs	r3, r3, #31
 800178a:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <_ZNSt7__cxx119to_stringEi+0x1c>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	425b      	negs	r3, r3
 8001796:	e000      	b.n	800179a <_ZNSt7__cxx119to_stringEi+0x1e>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 800179c:	210a      	movs	r1, #10
 800179e:	6938      	ldr	r0, [r7, #16]
 80017a0:	f000 f9ec 	bl	8001b7c <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 80017a4:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 80017a6:	7dfa      	ldrb	r2, [r7, #23]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	18d4      	adds	r4, r2, r3
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 f99d 	bl	8004af0 <_ZNSaIcEC1Ev>
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	222d      	movs	r2, #45	; 0x2d
 80017bc:	4621      	mov	r1, r4
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f003 fa72 	bl	8004ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 80017c4:	f107 0308 	add.w	r3, r7, #8
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 f992 	bl	8004af2 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
 80017d0:	4619      	mov	r1, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f003 fabb 	bl	8004d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80017d8:	4603      	mov	r3, r0
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fa0c 	bl	8001bfc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 80017e4:	bf00      	nop
  }
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
	...

080017f0 <init>:
uint16_t counter=0;
uint16_t stepTime = 0;

/* Variable End */

void init(void){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim1);
 80017f6:	481d      	ldr	r0, [pc, #116]	; (800186c <init+0x7c>)
 80017f8:	f002 fb0c 	bl	8003e14 <HAL_TIM_Base_Start>
	if(icm20948.whoami() == 0xea){
 80017fc:	481c      	ldr	r0, [pc, #112]	; (8001870 <init+0x80>)
 80017fe:	f7ff fe29 	bl	8001454 <_ZN8ICM209486whoamiEv>
 8001802:	4603      	mov	r3, r0
 8001804:	2bea      	cmp	r3, #234	; 0xea
//		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
	}
	int result = icm20948.whoami();
 8001806:	481a      	ldr	r0, [pc, #104]	; (8001870 <init+0x80>)
 8001808:	f7ff fe24 	bl	8001454 <_ZN8ICM209486whoamiEv>
 800180c:	4603      	mov	r3, r0
 800180e:	607b      	str	r3, [r7, #4]
//		    result=whoami();
		    if(result==0xea){
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2bea      	cmp	r3, #234	; 0xea
 8001814:	d125      	bne.n	8001862 <init+0x72>
//		        printf("ICM20948 confirm\n");
		    	icm20948.reset();
 8001816:	4816      	ldr	r0, [pc, #88]	; (8001870 <init+0x80>)
 8001818:	f7ff fe72 	bl	8001500 <_ZN8ICM209485resetEv>
		    	icm20948.pwrmgmt2(ICM20948_DISABLE_SENSORS);
 800181c:	213f      	movs	r1, #63	; 0x3f
 800181e:	4814      	ldr	r0, [pc, #80]	; (8001870 <init+0x80>)
 8001820:	f7ff fe52 	bl	80014c8 <_ZN8ICM209488pwrmgmt2Eh>
		    	icm20948.accelconfig(ICM20948::AccelSensitivity::SENS_2G,false,0);
 8001824:	2300      	movs	r3, #0
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	4811      	ldr	r0, [pc, #68]	; (8001870 <init+0x80>)
 800182c:	f7ff feba 	bl	80015a4 <_ZN8ICM2094811accelconfigENS_16AccelSensitivityEbh>
		    	icm20948.pwrmgmt2(ICM20948_ENABLE_SENSORS);
 8001830:	2100      	movs	r1, #0
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <init+0x80>)
 8001834:	f7ff fe48 	bl	80014c8 <_ZN8ICM209488pwrmgmt2Eh>
		    	icm20948.pinconfig(0b01110000);
 8001838:	2170      	movs	r1, #112	; 0x70
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <init+0x80>)
 800183c:	f7ff ff66 	bl	800170c <_ZN8ICM209489pinconfigEh>
		    	icm20948.intenable();
 8001840:	2101      	movs	r1, #1
 8001842:	480b      	ldr	r0, [pc, #44]	; (8001870 <init+0x80>)
 8001844:	f7ff ff7e 	bl	8001744 <_ZN8ICM209489intenableEh>

		        HAL_Delay(100);
 8001848:	2064      	movs	r0, #100	; 0x64
 800184a:	f000 fb35 	bl	8001eb8 <HAL_Delay>
//		        printf("initialized\n");

		        icm20948.changeuserbank(2);
 800184e:	2102      	movs	r1, #2
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <init+0x80>)
 8001852:	f7ff fe7f 	bl	8001554 <_ZN8ICM2094814changeuserbankEh>
		        uint8_t buffer2=0;
 8001856:	2300      	movs	r3, #0
 8001858:	70fb      	strb	r3, [r7, #3]
		        //HAL_I2C_Mem_Read(&hi2c1, 0x68<<1,ICM20948::REGISTER.ACCEL_CONFIG,1,&buffer2,1,1000);
		        icm20948.changeuserbank(0);
 800185a:	2100      	movs	r1, #0
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <init+0x80>)
 800185e:	f7ff fe79 	bl	8001554 <_ZN8ICM2094814changeuserbankEh>
		    }


}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200000e4 	.word	0x200000e4
 8001870:	20000170 	.word	0x20000170

08001874 <loop>:

void loop(void){
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
//	           delay(500);

//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11));
//	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);

}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	0000      	movs	r0, r0
 8001884:	0000      	movs	r0, r0
	...

08001888 <HAL_GPIO_EXTI_Callback>:

float gyroz;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800188c:	b0ac      	sub	sp, #176	; 0xb0
 800188e:	af04      	add	r7, sp, #16
 8001890:	4603      	mov	r3, r0
 8001892:	80fb      	strh	r3, [r7, #6]
//	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
	if (GPIO_Pin == GPIO_PIN_11){
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800189a:	f040 8147 	bne.w	8001b2c <HAL_GPIO_EXTI_Callback+0x2a4>
		stepTime = 0;
 800189e:	4ba8      	ldr	r3, [pc, #672]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	801a      	strh	r2, [r3, #0]
		{uint8_t flag=__HAL_TIM_GET_FLAG(&htim1,TIM_FLAG_UPDATE);
 80018a4:	4ba7      	ldr	r3, [pc, #668]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	bf0c      	ite	eq
 80018b2:	2301      	moveq	r3, #1
 80018b4:	2300      	movne	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		  counter=__HAL_TIM_GET_COUNTER(&htim1);
 80018bc:	4ba1      	ldr	r3, [pc, #644]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	4ba0      	ldr	r3, [pc, #640]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80018c6:	801a      	strh	r2, [r3, #0]
		  if(flag==0){
 80018c8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d108      	bne.n	80018e2 <HAL_GPIO_EXTI_Callback+0x5a>
			  stepTime=counter-preCounter;
 80018d0:	4b9d      	ldr	r3, [pc, #628]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80018d2:	881a      	ldrh	r2, [r3, #0]
 80018d4:	4b9d      	ldr	r3, [pc, #628]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x2c4>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b29a      	uxth	r2, r3
 80018dc:	4b98      	ldr	r3, [pc, #608]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80018de:	801a      	strh	r2, [r3, #0]
 80018e0:	e012      	b.n	8001908 <HAL_GPIO_EXTI_Callback+0x80>
		  }else{
			  stepTime=counter+__HAL_TIM_GET_AUTORELOAD(&htim1)-preCounter;
 80018e2:	4b98      	ldr	r3, [pc, #608]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b97      	ldr	r3, [pc, #604]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b96      	ldr	r3, [pc, #600]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x2c4>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	4b91      	ldr	r3, [pc, #580]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80018fc:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_CLEAR_FLAG(&htim1,TIM_FLAG_UPDATE);
 80018fe:	4b91      	ldr	r3, [pc, #580]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f06f 0201 	mvn.w	r2, #1
 8001906:	611a      	str	r2, [r3, #16]
		  }
		  preCounter=counter;
 8001908:	4b8f      	ldr	r3, [pc, #572]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800190a:	881a      	ldrh	r2, [r3, #0]
 800190c:	4b8f      	ldr	r3, [pc, #572]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x2c4>)
 800190e:	801a      	strh	r2, [r3, #0]
		  timer+=stepTime;
 8001910:	4b8b      	ldr	r3, [pc, #556]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	b29b      	uxth	r3, r3
 8001916:	2200      	movs	r2, #0
 8001918:	461c      	mov	r4, r3
 800191a:	4615      	mov	r5, r2
 800191c:	4b8c      	ldr	r3, [pc, #560]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	eb14 0802 	adds.w	r8, r4, r2
 8001926:	eb45 0903 	adc.w	r9, r5, r3
 800192a:	4b89      	ldr	r3, [pc, #548]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800192c:	e9c3 8900 	strd	r8, r9, [r3]
//			str += "."+std::to_string(num)+"\r\n";
//			HAL_UART_Transmit(&huart2, (uint8_t *)str.c_str(), str.size(), 100);
		}

//		float gyroz = icm20948.getgyro(0);
		gyroz = icm20948.getgyro(0);
 8001930:	2100      	movs	r1, #0
 8001932:	4888      	ldr	r0, [pc, #544]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001934:	f7ff fe86 	bl	8001644 <_ZN8ICM209487getgyroEh>
 8001938:	eef0 7a40 	vmov.f32	s15, s0
 800193c:	4b86      	ldr	r3, [pc, #536]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800193e:	edc3 7a00 	vstr	s15, [r3]

		anglez+=gyroz*stepTime/1000000.0;
 8001942:	4b86      	ldr	r3, [pc, #536]	; (8001b5c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fdb2 	bl	80004b0 <__aeabi_f2d>
 800194c:	4604      	mov	r4, r0
 800194e:	460d      	mov	r5, r1
 8001950:	4b7b      	ldr	r3, [pc, #492]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800195c:	4b7e      	ldr	r3, [pc, #504]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800195e:	edd3 7a00 	vldr	s15, [r3]
 8001962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001966:	ee17 0a90 	vmov	r0, s15
 800196a:	f7fe fda1 	bl	80004b0 <__aeabi_f2d>
 800196e:	a372      	add	r3, pc, #456	; (adr r3, 8001b38 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe ff1e 	bl	80007b4 <__aeabi_ddiv>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7fe fc38 	bl	80001f4 <__adddf3>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f7fe fffa 	bl	8000984 <__aeabi_d2f>
 8001990:	4603      	mov	r3, r0
 8001992:	4a72      	ldr	r2, [pc, #456]	; (8001b5c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001994:	6013      	str	r3, [r2, #0]

//		int16_t num = ((int16_t)(anglez*10))/10;
		int16_t num = stepTime;
 8001996:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
		std::string str;
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 f979 	bl	8004c9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		str = std::to_string(num);
 80019a8:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 80019ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fee2 	bl	800177c <_ZNSt7__cxx119to_stringEi>
 80019b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 f999 	bl	8004cfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 f98e 	bl	8004cee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		num = (uint16_t)(anglez*1000)%1000;
 80019d2:	4b62      	ldr	r3, [pc, #392]	; (8001b5c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001b60 <HAL_GPIO_EXTI_Callback+0x2d8>
 80019dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e4:	ee17 3a90 	vmov	r3, s15
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	4a5e      	ldr	r2, [pc, #376]	; (8001b64 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80019ec:	fba2 1203 	umull	r1, r2, r2, r3
 80019f0:	0992      	lsrs	r2, r2, #6
 80019f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019f6:	fb01 f202 	mul.w	r2, r1, r2
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
		str += "."+std::to_string(num)+"\r\n";
 8001a02:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 8001a06:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff feb5 	bl	800177c <_ZNSt7__cxx119to_stringEi>
 8001a12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a16:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001a1a:	4953      	ldr	r1, [pc, #332]	; (8001b68 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f943 	bl	8001ca8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001a22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a26:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001a2a:	4a50      	ldr	r2, [pc, #320]	; (8001b6c <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 f953 	bl	8001cd8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001a32:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 fa57 	bl	8004ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8001a42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 f951 	bl	8004cee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 f94c 	bl	8004cee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 f947 	bl	8004cee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		HAL_UART_Transmit(&huart2, (uint8_t *)str.c_str(), str.size(), 100);
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	4618      	mov	r0, r3
 8001a66:	f003 fa61 	bl	8004f2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 f96a 	bl	8004d4a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	2364      	movs	r3, #100	; 0x64
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	483c      	ldr	r0, [pc, #240]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001a80:	f002 fcbf 	bl	8004402 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001a84:	2120      	movs	r1, #32
 8001a86:	483b      	ldr	r0, [pc, #236]	; (8001b74 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001a88:	f000 fce9 	bl	800245e <HAL_GPIO_TogglePin>
		uint8_t n=0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	72fb      	strb	r3, [r7, #11]
		n=0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	72fb      	strb	r3, [r7, #11]
//		HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, 0x1A, 1, &n, 1, 100);
		HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, 0x1a, 1, &n, 1, 100);
 8001a94:	2364      	movs	r3, #100	; 0x64
 8001a96:	9302      	str	r3, [sp, #8]
 8001a98:	2301      	movs	r3, #1
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	f107 030b 	add.w	r3, r7, #11
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	221a      	movs	r2, #26
 8001aa6:	21d0      	movs	r1, #208	; 0xd0
 8001aa8:	4833      	ldr	r0, [pc, #204]	; (8001b78 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001aaa:	f000 ff49 	bl	8002940 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, 0x11, 1, &n, 1, 100);
 8001aae:	2364      	movs	r3, #100	; 0x64
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	f107 030b 	add.w	r3, r7, #11
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	2301      	movs	r3, #1
 8001abe:	2211      	movs	r2, #17
 8001ac0:	21d0      	movs	r1, #208	; 0xd0
 8001ac2:	482d      	ldr	r0, [pc, #180]	; (8001b78 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001ac4:	f000 ff3c 	bl	8002940 <HAL_I2C_Mem_Read>
				str = std::to_string(n);
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	461a      	mov	r2, r3
 8001acc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fe52 	bl	800177c <_ZNSt7__cxx119to_stringEi>
 8001ad8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 f909 	bl	8004cfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001ae8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001aec:	4618      	mov	r0, r3
 8001aee:	f003 f8fe 	bl	8004cee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				str += "\r\n";
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	491d      	ldr	r1, [pc, #116]	; (8001b6c <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 fa13 	bl	8004f24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
				HAL_UART_Transmit(&huart2, (uint8_t *)str.c_str(), str.size(), 100);
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 fa12 	bl	8004f2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001b08:	4604      	mov	r4, r0
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 f91b 	bl	8004d4a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	2364      	movs	r3, #100	; 0x64
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	4814      	ldr	r0, [pc, #80]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001b1e:	f002 fc70 	bl	8004402 <HAL_UART_Transmit>
		std::string str;
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 f8e1 	bl	8004cee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8001b2c:	bf00      	nop
 8001b2e:	37a0      	adds	r7, #160	; 0xa0
 8001b30:	46bd      	mov	sp, r7
 8001b32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b36:	bf00      	nop
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	412e8480 	.word	0x412e8480
 8001b40:	200001b4 	.word	0x200001b4
 8001b44:	200000e4 	.word	0x200000e4
 8001b48:	200001b2 	.word	0x200001b2
 8001b4c:	200001b0 	.word	0x200001b0
 8001b50:	200001a8 	.word	0x200001a8
 8001b54:	20000170 	.word	0x20000170
 8001b58:	200001b8 	.word	0x200001b8
 8001b5c:	200001a0 	.word	0x200001a0
 8001b60:	447a0000 	.word	0x447a0000
 8001b64:	10624dd3 	.word	0x10624dd3
 8001b68:	08005480 	.word	0x08005480
 8001b6c:	08005484 	.word	0x08005484
 8001b70:	2000012c 	.word	0x2000012c
 8001b74:	40020000 	.word	0x40020000
 8001b78:	2000008c 	.word	0x2000008c

08001b7c <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	fb03 f303 	mul.w	r3, r3, r3
 8001b90:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
 8001ba4:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d201      	bcs.n	8001bb2 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	e01d      	b.n	8001bee <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d202      	bcs.n	8001bc0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	e016      	b.n	8001bee <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d202      	bcs.n	8001bce <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	3302      	adds	r3, #2
 8001bcc:	e00f      	b.n	8001bee <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d202      	bcs.n	8001bdc <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3303      	adds	r3, #3
 8001bda:	e008      	b.n	8001bee <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be4:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3304      	adds	r3, #4
 8001bea:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8001bec:	e7db      	b.n	8001ba6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8001bee:	4618      	mov	r0, r3
 8001bf0:	371c      	adds	r7, #28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b63      	cmp	r3, #99	; 0x63
 8001c12:	d925      	bls.n	8001c60 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8001c18:	fba3 1302 	umull	r1, r3, r3, r2
 8001c1c:	095b      	lsrs	r3, r3, #5
 8001c1e:	2164      	movs	r1, #100	; 0x64
 8001c20:	fb01 f303 	mul.w	r3, r1, r3
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	68f9      	ldr	r1, [r7, #12]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	440b      	add	r3, r1
 8001c40:	4918      	ldr	r1, [pc, #96]	; (8001ca4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001c42:	5c8a      	ldrb	r2, [r1, r2]
 8001c44:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4915      	ldr	r1, [pc, #84]	; (8001ca4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	440a      	add	r2, r1
 8001c54:	7812      	ldrb	r2, [r2, #0]
 8001c56:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	3b02      	subs	r3, #2
 8001c5c:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8001c5e:	e7d6      	b.n	8001c0e <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b09      	cmp	r3, #9
 8001c64:	d910      	bls.n	8001c88 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3301      	adds	r3, #1
 8001c74:	490b      	ldr	r1, [pc, #44]	; (8001ca4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001c76:	5c8a      	ldrb	r2, [r1, r2]
 8001c78:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	4413      	add	r3, r2
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8001c86:	e005      	b.n	8001c94 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	3330      	adds	r3, #48	; 0x30
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	701a      	strb	r2, [r3, #0]
    }
 8001c94:	bf00      	nop
 8001c96:	3724      	adds	r7, #36	; 0x24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	51eb851f 	.word	0x51eb851f
 8001ca4:	080054a0 	.word	0x080054a0

08001ca8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f003 f8e1 	bl	8004e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f820 	bl	8001d06 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f002 fff5 	bl	8004cba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	68b8      	ldr	r0, [r7, #8]
 8001ce8:	f003 f906 	bl	8004ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f809 	bl	8001d06 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f002 ffde 	bl	8004cba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_Z41__static_initialization_and_destruction_0ii>:
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d107      	bne.n	8001d3c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d102      	bne.n	8001d3c <_Z41__static_initialization_and_destruction_0ii+0x20>
ICM20948 icm20948;
 8001d36:	4809      	ldr	r0, [pc, #36]	; (8001d5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001d38:	f7ff fb44 	bl	80013c4 <_ZN8ICM20948C1Ev>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d107      	bne.n	8001d52 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d102      	bne.n	8001d52 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001d4c:	4803      	ldr	r0, [pc, #12]	; (8001d5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001d4e:	f7ff fb61 	bl	8001414 <_ZN8ICM20948D1Ev>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000170 	.word	0x20000170

08001d60 <_GLOBAL__sub_I_icm20948>:
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d68:	2001      	movs	r0, #1
 8001d6a:	f7ff ffd7 	bl	8001d1c <_Z41__static_initialization_and_destruction_0ii>
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_GLOBAL__sub_D_icm20948>:
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff ffcf 	bl	8001d1c <_Z41__static_initialization_and_destruction_0ii>
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d84:	480d      	ldr	r0, [pc, #52]	; (8001dbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d86:	490e      	ldr	r1, [pc, #56]	; (8001dc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d88:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d8c:	e002      	b.n	8001d94 <LoopCopyDataInit>

08001d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d92:	3304      	adds	r3, #4

08001d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d98:	d3f9      	bcc.n	8001d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d9c:	4c0b      	ldr	r4, [pc, #44]	; (8001dcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da0:	e001      	b.n	8001da6 <LoopFillZerobss>

08001da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da4:	3204      	adds	r2, #4

08001da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da8:	d3fb      	bcc.n	8001da2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001daa:	f7ff f9f1 	bl	8001190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dae:	f003 f9a1 	bl	80050f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001db2:	f7ff f8b3 	bl	8000f1c <main>
  bx  lr    
 8001db6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001db8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001dc4:	0800569c 	.word	0x0800569c
  ldr r2, =_sbss
 8001dc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001dcc:	200001d4 	.word	0x200001d4

08001dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd0:	e7fe      	b.n	8001dd0 <ADC_IRQHandler>
	...

08001dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_Init+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <HAL_Init+0x40>)
 8001dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_Init+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_Init+0x40>)
 8001dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <HAL_Init+0x40>)
 8001df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	f000 f94f 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f000 f808 	bl	8001e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e08:	f7ff f90c 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023c00 	.word	0x40023c00

08001e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_InitTick+0x54>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_InitTick+0x58>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 f967 	bl	800210a <HAL_SYSTICK_Config>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00e      	b.n	8001e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b0f      	cmp	r3, #15
 8001e4a:	d80a      	bhi.n	8001e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f000 f92f 	bl	80020b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e58:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <HAL_InitTick+0x5c>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e000      	b.n	8001e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000008 	.word	0x20000008
 8001e74:	20000004 	.word	0x20000004

08001e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_IncTick+0x20>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_IncTick+0x24>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_IncTick+0x24>)
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	200001bc 	.word	0x200001bc

08001ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_GetTick+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	200001bc 	.word	0x200001bc

08001eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec0:	f7ff ffee 	bl	8001ea0 <HAL_GetTick>
 8001ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d005      	beq.n	8001ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_Delay+0x44>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ede:	bf00      	nop
 8001ee0:	f7ff ffde 	bl	8001ea0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d8f7      	bhi.n	8001ee0 <HAL_Delay+0x28>
  {
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000008 	.word	0x20000008

08001f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <__NVIC_GetPriorityGrouping+0x18>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	f003 0307 	and.w	r3, r3, #7
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db0b      	blt.n	8001f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4907      	ldr	r1, [pc, #28]	; (8001f9c <__NVIC_EnableIRQ+0x38>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2001      	movs	r0, #1
 8001f86:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0a      	blt.n	8001fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	490c      	ldr	r1, [pc, #48]	; (8001fec <__NVIC_SetPriority+0x4c>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc8:	e00a      	b.n	8001fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <__NVIC_SetPriority+0x50>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	761a      	strb	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	; 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f1c3 0307 	rsb	r3, r3, #7
 800200e:	2b04      	cmp	r3, #4
 8002010:	bf28      	it	cs
 8002012:	2304      	movcs	r3, #4
 8002014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3304      	adds	r3, #4
 800201a:	2b06      	cmp	r3, #6
 800201c:	d902      	bls.n	8002024 <NVIC_EncodePriority+0x30>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3b03      	subs	r3, #3
 8002022:	e000      	b.n	8002026 <NVIC_EncodePriority+0x32>
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	f04f 32ff 	mov.w	r2, #4294967295
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	401a      	ands	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800203c:	f04f 31ff 	mov.w	r1, #4294967295
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43d9      	mvns	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	4313      	orrs	r3, r2
         );
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800206c:	d301      	bcc.n	8002072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206e:	2301      	movs	r3, #1
 8002070:	e00f      	b.n	8002092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <SysTick_Config+0x40>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207a:	210f      	movs	r1, #15
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	f7ff ff8e 	bl	8001fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <SysTick_Config+0x40>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <SysTick_Config+0x40>)
 800208c:	2207      	movs	r2, #7
 800208e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	e000e010 	.word	0xe000e010

080020a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff29 	bl	8001f00 <__NVIC_SetPriorityGrouping>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff3e 	bl	8001f48 <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff8e 	bl	8001ff4 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5d 	bl	8001fa0 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff31 	bl	8001f64 <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa2 	bl	800205c <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002124:	b480      	push	{r7}
 8002126:	b089      	sub	sp, #36	; 0x24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	e159      	b.n	80023f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002140:	2201      	movs	r2, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	429a      	cmp	r2, r3
 800215a:	f040 8148 	bne.w	80023ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d005      	beq.n	8002176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002172:	2b02      	cmp	r3, #2
 8002174:	d130      	bne.n	80021d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ac:	2201      	movs	r2, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 0201 	and.w	r2, r3, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d017      	beq.n	8002214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	2203      	movs	r2, #3
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d123      	bne.n	8002268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	08da      	lsrs	r2, r3, #3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3208      	adds	r2, #8
 8002228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	220f      	movs	r2, #15
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	08da      	lsrs	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3208      	adds	r2, #8
 8002262:	69b9      	ldr	r1, [r7, #24]
 8002264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2203      	movs	r2, #3
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0203 	and.w	r2, r3, #3
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80a2 	beq.w	80023ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b57      	ldr	r3, [pc, #348]	; (800240c <HAL_GPIO_Init+0x2e8>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	4a56      	ldr	r2, [pc, #344]	; (800240c <HAL_GPIO_Init+0x2e8>)
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ba:	4b54      	ldr	r3, [pc, #336]	; (800240c <HAL_GPIO_Init+0x2e8>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022c6:	4a52      	ldr	r2, [pc, #328]	; (8002410 <HAL_GPIO_Init+0x2ec>)
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	089b      	lsrs	r3, r3, #2
 80022cc:	3302      	adds	r3, #2
 80022ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	220f      	movs	r2, #15
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a49      	ldr	r2, [pc, #292]	; (8002414 <HAL_GPIO_Init+0x2f0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d019      	beq.n	8002326 <HAL_GPIO_Init+0x202>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a48      	ldr	r2, [pc, #288]	; (8002418 <HAL_GPIO_Init+0x2f4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_Init+0x1fe>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a47      	ldr	r2, [pc, #284]	; (800241c <HAL_GPIO_Init+0x2f8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00d      	beq.n	800231e <HAL_GPIO_Init+0x1fa>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a46      	ldr	r2, [pc, #280]	; (8002420 <HAL_GPIO_Init+0x2fc>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <HAL_GPIO_Init+0x1f6>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a45      	ldr	r2, [pc, #276]	; (8002424 <HAL_GPIO_Init+0x300>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_GPIO_Init+0x1f2>
 8002312:	2304      	movs	r3, #4
 8002314:	e008      	b.n	8002328 <HAL_GPIO_Init+0x204>
 8002316:	2307      	movs	r3, #7
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x204>
 800231a:	2303      	movs	r3, #3
 800231c:	e004      	b.n	8002328 <HAL_GPIO_Init+0x204>
 800231e:	2302      	movs	r3, #2
 8002320:	e002      	b.n	8002328 <HAL_GPIO_Init+0x204>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_GPIO_Init+0x204>
 8002326:	2300      	movs	r3, #0
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	f002 0203 	and.w	r2, r2, #3
 800232e:	0092      	lsls	r2, r2, #2
 8002330:	4093      	lsls	r3, r2
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002338:	4935      	ldr	r1, [pc, #212]	; (8002410 <HAL_GPIO_Init+0x2ec>)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	089b      	lsrs	r3, r3, #2
 800233e:	3302      	adds	r3, #2
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002346:	4b38      	ldr	r3, [pc, #224]	; (8002428 <HAL_GPIO_Init+0x304>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800236a:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <HAL_GPIO_Init+0x304>)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_GPIO_Init+0x304>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002394:	4a24      	ldr	r2, [pc, #144]	; (8002428 <HAL_GPIO_Init+0x304>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_GPIO_Init+0x304>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023be:	4a1a      	ldr	r2, [pc, #104]	; (8002428 <HAL_GPIO_Init+0x304>)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <HAL_GPIO_Init+0x304>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023e8:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <HAL_GPIO_Init+0x304>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3301      	adds	r3, #1
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	2b0f      	cmp	r3, #15
 80023f8:	f67f aea2 	bls.w	8002140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3724      	adds	r7, #36	; 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	40013800 	.word	0x40013800
 8002414:	40020000 	.word	0x40020000
 8002418:	40020400 	.word	0x40020400
 800241c:	40020800 	.word	0x40020800
 8002420:	40020c00 	.word	0x40020c00
 8002424:	40021000 	.word	0x40021000
 8002428:	40013c00 	.word	0x40013c00

0800242c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800243c:	787b      	ldrb	r3, [r7, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002448:	e003      	b.n	8002452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	041a      	lsls	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	619a      	str	r2, [r3, #24]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002470:	887a      	ldrh	r2, [r7, #2]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4013      	ands	r3, r2
 8002476:	041a      	lsls	r2, r3, #16
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	43d9      	mvns	r1, r3
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	400b      	ands	r3, r1
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	619a      	str	r2, [r3, #24]
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d006      	beq.n	80024b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff f9e8 	bl	8001888 <HAL_GPIO_EXTI_Callback>
  }
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40013c00 	.word	0x40013c00

080024c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e12b      	b.n	800272e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe fcce 	bl	8000e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	; 0x24
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002516:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002526:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002528:	f001 fbfc 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 800252c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4a81      	ldr	r2, [pc, #516]	; (8002738 <HAL_I2C_Init+0x274>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d807      	bhi.n	8002548 <HAL_I2C_Init+0x84>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4a80      	ldr	r2, [pc, #512]	; (800273c <HAL_I2C_Init+0x278>)
 800253c:	4293      	cmp	r3, r2
 800253e:	bf94      	ite	ls
 8002540:	2301      	movls	r3, #1
 8002542:	2300      	movhi	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	e006      	b.n	8002556 <HAL_I2C_Init+0x92>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4a7d      	ldr	r2, [pc, #500]	; (8002740 <HAL_I2C_Init+0x27c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	bf94      	ite	ls
 8002550:	2301      	movls	r3, #1
 8002552:	2300      	movhi	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0e7      	b.n	800272e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4a78      	ldr	r2, [pc, #480]	; (8002744 <HAL_I2C_Init+0x280>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0c9b      	lsrs	r3, r3, #18
 8002568:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a6a      	ldr	r2, [pc, #424]	; (8002738 <HAL_I2C_Init+0x274>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d802      	bhi.n	8002598 <HAL_I2C_Init+0xd4>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	3301      	adds	r3, #1
 8002596:	e009      	b.n	80025ac <HAL_I2C_Init+0xe8>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800259e:	fb02 f303 	mul.w	r3, r2, r3
 80025a2:	4a69      	ldr	r2, [pc, #420]	; (8002748 <HAL_I2C_Init+0x284>)
 80025a4:	fba2 2303 	umull	r2, r3, r2, r3
 80025a8:	099b      	lsrs	r3, r3, #6
 80025aa:	3301      	adds	r3, #1
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	495c      	ldr	r1, [pc, #368]	; (8002738 <HAL_I2C_Init+0x274>)
 80025c8:	428b      	cmp	r3, r1
 80025ca:	d819      	bhi.n	8002600 <HAL_I2C_Init+0x13c>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1e59      	subs	r1, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025da:	1c59      	adds	r1, r3, #1
 80025dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025e0:	400b      	ands	r3, r1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_I2C_Init+0x138>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1e59      	subs	r1, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fa:	e051      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 80025fc:	2304      	movs	r3, #4
 80025fe:	e04f      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d111      	bne.n	800262c <HAL_I2C_Init+0x168>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	440b      	add	r3, r1
 8002616:	fbb0 f3f3 	udiv	r3, r0, r3
 800261a:	3301      	adds	r3, #1
 800261c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e012      	b.n	8002652 <HAL_I2C_Init+0x18e>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e58      	subs	r0, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	0099      	lsls	r1, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Init+0x196>
 8002656:	2301      	movs	r3, #1
 8002658:	e022      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10e      	bne.n	8002680 <HAL_I2C_Init+0x1bc>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1e58      	subs	r0, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	440b      	add	r3, r1
 8002670:	fbb0 f3f3 	udiv	r3, r0, r3
 8002674:	3301      	adds	r3, #1
 8002676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800267e:	e00f      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	0099      	lsls	r1, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	fbb0 f3f3 	udiv	r3, r0, r3
 8002696:	3301      	adds	r3, #1
 8002698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	6809      	ldr	r1, [r1, #0]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6911      	ldr	r1, [r2, #16]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68d2      	ldr	r2, [r2, #12]
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	000186a0 	.word	0x000186a0
 800273c:	001e847f 	.word	0x001e847f
 8002740:	003d08ff 	.word	0x003d08ff
 8002744:	431bde83 	.word	0x431bde83
 8002748:	10624dd3 	.word	0x10624dd3

0800274c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	4608      	mov	r0, r1
 8002756:	4611      	mov	r1, r2
 8002758:	461a      	mov	r2, r3
 800275a:	4603      	mov	r3, r0
 800275c:	817b      	strh	r3, [r7, #10]
 800275e:	460b      	mov	r3, r1
 8002760:	813b      	strh	r3, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002766:	f7ff fb9b 	bl	8001ea0 <HAL_GetTick>
 800276a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b20      	cmp	r3, #32
 8002776:	f040 80d9 	bne.w	800292c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2319      	movs	r3, #25
 8002780:	2201      	movs	r2, #1
 8002782:	496d      	ldr	r1, [pc, #436]	; (8002938 <HAL_I2C_Mem_Write+0x1ec>)
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fc7f 	bl	8003088 <I2C_WaitOnFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002790:	2302      	movs	r3, #2
 8002792:	e0cc      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_I2C_Mem_Write+0x56>
 800279e:	2302      	movs	r3, #2
 80027a0:	e0c5      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d007      	beq.n	80027c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2221      	movs	r2, #33	; 0x21
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2240      	movs	r2, #64	; 0x40
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a3a      	ldr	r2, [r7, #32]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4a4d      	ldr	r2, [pc, #308]	; (800293c <HAL_I2C_Mem_Write+0x1f0>)
 8002808:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800280a:	88f8      	ldrh	r0, [r7, #6]
 800280c:	893a      	ldrh	r2, [r7, #8]
 800280e:	8979      	ldrh	r1, [r7, #10]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	4603      	mov	r3, r0
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fab6 	bl	8002d8c <I2C_RequestMemoryWrite>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d052      	beq.n	80028cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e081      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fd00 	bl	8003234 <I2C_WaitOnTXEFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00d      	beq.n	8002856 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	2b04      	cmp	r3, #4
 8002840:	d107      	bne.n	8002852 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002850:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e06b      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b04      	cmp	r3, #4
 8002892:	d11b      	bne.n	80028cc <HAL_I2C_Mem_Write+0x180>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	2b00      	cmp	r3, #0
 800289a:	d017      	beq.n	80028cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1aa      	bne.n	800282a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fcec 	bl	80032b6 <I2C_WaitOnBTFFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00d      	beq.n	8002900 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d107      	bne.n	80028fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e016      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	e000      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800292c:	2302      	movs	r3, #2
  }
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	00100002 	.word	0x00100002
 800293c:	ffff0000 	.word	0xffff0000

08002940 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08c      	sub	sp, #48	; 0x30
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	4608      	mov	r0, r1
 800294a:	4611      	mov	r1, r2
 800294c:	461a      	mov	r2, r3
 800294e:	4603      	mov	r3, r0
 8002950:	817b      	strh	r3, [r7, #10]
 8002952:	460b      	mov	r3, r1
 8002954:	813b      	strh	r3, [r7, #8]
 8002956:	4613      	mov	r3, r2
 8002958:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800295a:	f7ff faa1 	bl	8001ea0 <HAL_GetTick>
 800295e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b20      	cmp	r3, #32
 800296a:	f040 8208 	bne.w	8002d7e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2319      	movs	r3, #25
 8002974:	2201      	movs	r2, #1
 8002976:	497b      	ldr	r1, [pc, #492]	; (8002b64 <HAL_I2C_Mem_Read+0x224>)
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fb85 	bl	8003088 <I2C_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
 8002986:	e1fb      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_I2C_Mem_Read+0x56>
 8002992:	2302      	movs	r3, #2
 8002994:	e1f4      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d007      	beq.n	80029bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2222      	movs	r2, #34	; 0x22
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2240      	movs	r2, #64	; 0x40
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a5b      	ldr	r2, [pc, #364]	; (8002b68 <HAL_I2C_Mem_Read+0x228>)
 80029fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029fe:	88f8      	ldrh	r0, [r7, #6]
 8002a00:	893a      	ldrh	r2, [r7, #8]
 8002a02:	8979      	ldrh	r1, [r7, #10]
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fa52 	bl	8002eb8 <I2C_RequestMemoryRead>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e1b0      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d113      	bne.n	8002a4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	623b      	str	r3, [r7, #32]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	623b      	str	r3, [r7, #32]
 8002a3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e184      	b.n	8002d58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d11b      	bne.n	8002a8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	e164      	b.n	8002d58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d11b      	bne.n	8002ace <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ab4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	e144      	b.n	8002d58 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ae4:	e138      	b.n	8002d58 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	f200 80f1 	bhi.w	8002cd2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d123      	bne.n	8002b40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fc1b 	bl	8003338 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e139      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b3e:	e10b      	b.n	8002d58 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d14e      	bne.n	8002be6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	2200      	movs	r2, #0
 8002b50:	4906      	ldr	r1, [pc, #24]	; (8002b6c <HAL_I2C_Mem_Read+0x22c>)
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fa98 	bl	8003088 <I2C_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e10e      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
 8002b62:	bf00      	nop
 8002b64:	00100002 	.word	0x00100002
 8002b68:	ffff0000 	.word	0xffff0000
 8002b6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002be4:	e0b8      	b.n	8002d58 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	2200      	movs	r2, #0
 8002bee:	4966      	ldr	r1, [pc, #408]	; (8002d88 <HAL_I2C_Mem_Read+0x448>)
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fa49 	bl	8003088 <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0bf      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c48:	2200      	movs	r2, #0
 8002c4a:	494f      	ldr	r1, [pc, #316]	; (8002d88 <HAL_I2C_Mem_Read+0x448>)
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fa1b 	bl	8003088 <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e091      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cd0:	e042      	b.n	8002d58 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fb2e 	bl	8003338 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e04c      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d118      	bne.n	8002d58 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f47f aec2 	bne.w	8002ae6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e000      	b.n	8002d80 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d7e:	2302      	movs	r3, #2
  }
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3728      	adds	r7, #40	; 0x28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	00010004 	.word	0x00010004

08002d8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	817b      	strh	r3, [r7, #10]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	813b      	strh	r3, [r7, #8]
 8002da2:	4613      	mov	r3, r2
 8002da4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f960 	bl	8003088 <I2C_WaitOnFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00d      	beq.n	8002dea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ddc:	d103      	bne.n	8002de6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e05f      	b.n	8002eaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dea:	897b      	ldrh	r3, [r7, #10]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002df8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	6a3a      	ldr	r2, [r7, #32]
 8002dfe:	492d      	ldr	r1, [pc, #180]	; (8002eb4 <I2C_RequestMemoryWrite+0x128>)
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f998 	bl	8003136 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e04c      	b.n	8002eaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e28:	6a39      	ldr	r1, [r7, #32]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fa02 	bl	8003234 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00d      	beq.n	8002e52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d107      	bne.n	8002e4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e02b      	b.n	8002eaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d105      	bne.n	8002e64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e58:	893b      	ldrh	r3, [r7, #8]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	611a      	str	r2, [r3, #16]
 8002e62:	e021      	b.n	8002ea8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e64:	893b      	ldrh	r3, [r7, #8]
 8002e66:	0a1b      	lsrs	r3, r3, #8
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	6a39      	ldr	r1, [r7, #32]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f9dc 	bl	8003234 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00d      	beq.n	8002e9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d107      	bne.n	8002e9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e005      	b.n	8002eaa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e9e:	893b      	ldrh	r3, [r7, #8]
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	00010002 	.word	0x00010002

08002eb8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	817b      	strh	r3, [r7, #10]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	813b      	strh	r3, [r7, #8]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ee0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f8c2 	bl	8003088 <I2C_WaitOnFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00d      	beq.n	8002f26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f18:	d103      	bne.n	8002f22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0aa      	b.n	800307c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f26:	897b      	ldrh	r3, [r7, #10]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	6a3a      	ldr	r2, [r7, #32]
 8002f3a:	4952      	ldr	r1, [pc, #328]	; (8003084 <I2C_RequestMemoryRead+0x1cc>)
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f8fa 	bl	8003136 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e097      	b.n	800307c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f64:	6a39      	ldr	r1, [r7, #32]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f964 	bl	8003234 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d107      	bne.n	8002f8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e076      	b.n	800307c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d105      	bne.n	8002fa0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f94:	893b      	ldrh	r3, [r7, #8]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	611a      	str	r2, [r3, #16]
 8002f9e:	e021      	b.n	8002fe4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fa0:	893b      	ldrh	r3, [r7, #8]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb0:	6a39      	ldr	r1, [r7, #32]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f93e 	bl	8003234 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00d      	beq.n	8002fda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d107      	bne.n	8002fd6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e050      	b.n	800307c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fda:	893b      	ldrh	r3, [r7, #8]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe6:	6a39      	ldr	r1, [r7, #32]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f923 	bl	8003234 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00d      	beq.n	8003010 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d107      	bne.n	800300c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800300a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e035      	b.n	800307c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800301e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	2200      	movs	r2, #0
 8003028:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f82b 	bl	8003088 <I2C_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00d      	beq.n	8003054 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003046:	d103      	bne.n	8003050 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e013      	b.n	800307c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003054:	897b      	ldrh	r3, [r7, #10]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	b2da      	uxtb	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	6a3a      	ldr	r2, [r7, #32]
 8003068:	4906      	ldr	r1, [pc, #24]	; (8003084 <I2C_RequestMemoryRead+0x1cc>)
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f863 	bl	8003136 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	00010002 	.word	0x00010002

08003088 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003098:	e025      	b.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d021      	beq.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a2:	f7fe fefd 	bl	8001ea0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d302      	bcc.n	80030b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d116      	bne.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f043 0220 	orr.w	r2, r3, #32
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e023      	b.n	800312e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	0c1b      	lsrs	r3, r3, #16
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d10d      	bne.n	800310c <I2C_WaitOnFlagUntilTimeout+0x84>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	43da      	mvns	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4013      	ands	r3, r2
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	e00c      	b.n	8003126 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	43da      	mvns	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4013      	ands	r3, r2
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	bf0c      	ite	eq
 800311e:	2301      	moveq	r3, #1
 8003120:	2300      	movne	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	429a      	cmp	r2, r3
 800312a:	d0b6      	beq.n	800309a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003144:	e051      	b.n	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003154:	d123      	bne.n	800319e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003164:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800316e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f043 0204 	orr.w	r2, r3, #4
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e046      	b.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d021      	beq.n	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a6:	f7fe fe7b 	bl	8001ea0 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d302      	bcc.n	80031bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d116      	bne.n	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f043 0220 	orr.w	r2, r3, #32
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e020      	b.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	0c1b      	lsrs	r3, r3, #16
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d10c      	bne.n	800320e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	43da      	mvns	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4013      	ands	r3, r2
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf14      	ite	ne
 8003206:	2301      	movne	r3, #1
 8003208:	2300      	moveq	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	e00b      	b.n	8003226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	43da      	mvns	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4013      	ands	r3, r2
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf14      	ite	ne
 8003220:	2301      	movne	r3, #1
 8003222:	2300      	moveq	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d18d      	bne.n	8003146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003240:	e02d      	b.n	800329e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f8ce 	bl	80033e4 <I2C_IsAcknowledgeFailed>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e02d      	b.n	80032ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d021      	beq.n	800329e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325a:	f7fe fe21 	bl	8001ea0 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	429a      	cmp	r2, r3
 8003268:	d302      	bcc.n	8003270 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d116      	bne.n	800329e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f043 0220 	orr.w	r2, r3, #32
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e007      	b.n	80032ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a8:	2b80      	cmp	r3, #128	; 0x80
 80032aa:	d1ca      	bne.n	8003242 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032c2:	e02d      	b.n	8003320 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f88d 	bl	80033e4 <I2C_IsAcknowledgeFailed>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e02d      	b.n	8003330 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d021      	beq.n	8003320 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032dc:	f7fe fde0 	bl	8001ea0 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d302      	bcc.n	80032f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d116      	bne.n	8003320 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e007      	b.n	8003330 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b04      	cmp	r3, #4
 800332c:	d1ca      	bne.n	80032c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003344:	e042      	b.n	80033cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b10      	cmp	r3, #16
 8003352:	d119      	bne.n	8003388 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0210 	mvn.w	r2, #16
 800335c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e029      	b.n	80033dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003388:	f7fe fd8a 	bl	8001ea0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	429a      	cmp	r2, r3
 8003396:	d302      	bcc.n	800339e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d116      	bne.n	80033cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	f043 0220 	orr.w	r2, r3, #32
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e007      	b.n	80033dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	d1b5      	bne.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fa:	d11b      	bne.n	8003434 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003404:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f043 0204 	orr.w	r2, r3, #4
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e267      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d075      	beq.n	800354e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003462:	4b88      	ldr	r3, [pc, #544]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b04      	cmp	r3, #4
 800346c:	d00c      	beq.n	8003488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346e:	4b85      	ldr	r3, [pc, #532]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003476:	2b08      	cmp	r3, #8
 8003478:	d112      	bne.n	80034a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347a:	4b82      	ldr	r3, [pc, #520]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003486:	d10b      	bne.n	80034a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	4b7e      	ldr	r3, [pc, #504]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d05b      	beq.n	800354c <HAL_RCC_OscConfig+0x108>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d157      	bne.n	800354c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e242      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a8:	d106      	bne.n	80034b8 <HAL_RCC_OscConfig+0x74>
 80034aa:	4b76      	ldr	r3, [pc, #472]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a75      	ldr	r2, [pc, #468]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	e01d      	b.n	80034f4 <HAL_RCC_OscConfig+0xb0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c0:	d10c      	bne.n	80034dc <HAL_RCC_OscConfig+0x98>
 80034c2:	4b70      	ldr	r3, [pc, #448]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a6f      	ldr	r2, [pc, #444]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	4b6d      	ldr	r3, [pc, #436]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a6c      	ldr	r2, [pc, #432]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e00b      	b.n	80034f4 <HAL_RCC_OscConfig+0xb0>
 80034dc:	4b69      	ldr	r3, [pc, #420]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a68      	ldr	r2, [pc, #416]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b66      	ldr	r3, [pc, #408]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a65      	ldr	r2, [pc, #404]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80034ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d013      	beq.n	8003524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7fe fcd0 	bl	8001ea0 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003504:	f7fe fccc 	bl	8001ea0 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	; 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e207      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003516:	4b5b      	ldr	r3, [pc, #364]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0xc0>
 8003522:	e014      	b.n	800354e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fe fcbc 	bl	8001ea0 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800352c:	f7fe fcb8 	bl	8001ea0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e1f3      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353e:	4b51      	ldr	r3, [pc, #324]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0xe8>
 800354a:	e000      	b.n	800354e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800354c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d063      	beq.n	8003622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800355a:	4b4a      	ldr	r3, [pc, #296]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00b      	beq.n	800357e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003566:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800356e:	2b08      	cmp	r3, #8
 8003570:	d11c      	bne.n	80035ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003572:	4b44      	ldr	r3, [pc, #272]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d116      	bne.n	80035ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357e:	4b41      	ldr	r3, [pc, #260]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_RCC_OscConfig+0x152>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d001      	beq.n	8003596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e1c7      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003596:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4937      	ldr	r1, [pc, #220]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035aa:	e03a      	b.n	8003622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d020      	beq.n	80035f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b4:	4b34      	ldr	r3, [pc, #208]	; (8003688 <HAL_RCC_OscConfig+0x244>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fe fc71 	bl	8001ea0 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c2:	f7fe fc6d 	bl	8001ea0 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e1a8      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d4:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e0:	4b28      	ldr	r3, [pc, #160]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4925      	ldr	r1, [pc, #148]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	600b      	str	r3, [r1, #0]
 80035f4:	e015      	b.n	8003622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCC_OscConfig+0x244>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7fe fc50 	bl	8001ea0 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003604:	f7fe fc4c 	bl	8001ea0 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e187      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003616:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d036      	beq.n	800369c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d016      	beq.n	8003664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <HAL_RCC_OscConfig+0x248>)
 8003638:	2201      	movs	r2, #1
 800363a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fe fc30 	bl	8001ea0 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003644:	f7fe fc2c 	bl	8001ea0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e167      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_OscConfig+0x240>)
 8003658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x200>
 8003662:	e01b      	b.n	800369c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <HAL_RCC_OscConfig+0x248>)
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366a:	f7fe fc19 	bl	8001ea0 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003670:	e00e      	b.n	8003690 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003672:	f7fe fc15 	bl	8001ea0 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d907      	bls.n	8003690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e150      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
 8003684:	40023800 	.word	0x40023800
 8003688:	42470000 	.word	0x42470000
 800368c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003690:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ea      	bne.n	8003672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8097 	beq.w	80037d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036aa:	2300      	movs	r3, #0
 80036ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ae:	4b81      	ldr	r3, [pc, #516]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10f      	bne.n	80036da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	4b7d      	ldr	r3, [pc, #500]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	4a7c      	ldr	r2, [pc, #496]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ca:	4b7a      	ldr	r3, [pc, #488]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036da:	4b77      	ldr	r3, [pc, #476]	; (80038b8 <HAL_RCC_OscConfig+0x474>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d118      	bne.n	8003718 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036e6:	4b74      	ldr	r3, [pc, #464]	; (80038b8 <HAL_RCC_OscConfig+0x474>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a73      	ldr	r2, [pc, #460]	; (80038b8 <HAL_RCC_OscConfig+0x474>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f2:	f7fe fbd5 	bl	8001ea0 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fa:	f7fe fbd1 	bl	8001ea0 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e10c      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370c:	4b6a      	ldr	r3, [pc, #424]	; (80038b8 <HAL_RCC_OscConfig+0x474>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d106      	bne.n	800372e <HAL_RCC_OscConfig+0x2ea>
 8003720:	4b64      	ldr	r3, [pc, #400]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	4a63      	ldr	r2, [pc, #396]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6713      	str	r3, [r2, #112]	; 0x70
 800372c:	e01c      	b.n	8003768 <HAL_RCC_OscConfig+0x324>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b05      	cmp	r3, #5
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0x30c>
 8003736:	4b5f      	ldr	r3, [pc, #380]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	4a5e      	ldr	r2, [pc, #376]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 800373c:	f043 0304 	orr.w	r3, r3, #4
 8003740:	6713      	str	r3, [r2, #112]	; 0x70
 8003742:	4b5c      	ldr	r3, [pc, #368]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a5b      	ldr	r2, [pc, #364]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
 800374e:	e00b      	b.n	8003768 <HAL_RCC_OscConfig+0x324>
 8003750:	4b58      	ldr	r3, [pc, #352]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	4a57      	ldr	r2, [pc, #348]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	6713      	str	r3, [r2, #112]	; 0x70
 800375c:	4b55      	ldr	r3, [pc, #340]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	4a54      	ldr	r2, [pc, #336]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003762:	f023 0304 	bic.w	r3, r3, #4
 8003766:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d015      	beq.n	800379c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003770:	f7fe fb96 	bl	8001ea0 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003776:	e00a      	b.n	800378e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003778:	f7fe fb92 	bl	8001ea0 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e0cb      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378e:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0ee      	beq.n	8003778 <HAL_RCC_OscConfig+0x334>
 800379a:	e014      	b.n	80037c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379c:	f7fe fb80 	bl	8001ea0 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a4:	f7fe fb7c 	bl	8001ea0 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e0b5      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ba:	4b3e      	ldr	r3, [pc, #248]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ee      	bne.n	80037a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d105      	bne.n	80037d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037cc:	4b39      	ldr	r3, [pc, #228]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	4a38      	ldr	r2, [pc, #224]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80a1 	beq.w	8003924 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037e2:	4b34      	ldr	r3, [pc, #208]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d05c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d141      	bne.n	800387a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f6:	4b31      	ldr	r3, [pc, #196]	; (80038bc <HAL_RCC_OscConfig+0x478>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fe fb50 	bl	8001ea0 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003804:	f7fe fb4c 	bl	8001ea0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e087      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003816:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	019b      	lsls	r3, r3, #6
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	085b      	lsrs	r3, r3, #1
 800383a:	3b01      	subs	r3, #1
 800383c:	041b      	lsls	r3, r3, #16
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	491b      	ldr	r1, [pc, #108]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800384c:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <HAL_RCC_OscConfig+0x478>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fe fb25 	bl	8001ea0 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385a:	f7fe fb21 	bl	8001ea0 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e05c      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x416>
 8003878:	e054      	b.n	8003924 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <HAL_RCC_OscConfig+0x478>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe fb0e 	bl	8001ea0 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe fb0a 	bl	8001ea0 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e045      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <HAL_RCC_OscConfig+0x470>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x444>
 80038a6:	e03d      	b.n	8003924 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e038      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40007000 	.word	0x40007000
 80038bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <HAL_RCC_OscConfig+0x4ec>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d028      	beq.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d121      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d11a      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038f0:	4013      	ands	r3, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d111      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	3b01      	subs	r3, #1
 800390a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d107      	bne.n	8003920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800

08003934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0cc      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003948:	4b68      	ldr	r3, [pc, #416]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d90c      	bls.n	8003970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b65      	ldr	r3, [pc, #404]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b63      	ldr	r3, [pc, #396]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0b8      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003988:	4b59      	ldr	r3, [pc, #356]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a58      	ldr	r2, [pc, #352]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a0:	4b53      	ldr	r3, [pc, #332]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4a52      	ldr	r2, [pc, #328]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ac:	4b50      	ldr	r3, [pc, #320]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	494d      	ldr	r1, [pc, #308]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d044      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b47      	ldr	r3, [pc, #284]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d119      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e07f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d003      	beq.n	80039f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d107      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f2:	4b3f      	ldr	r3, [pc, #252]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e06f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a02:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e067      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a12:	4b37      	ldr	r3, [pc, #220]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f023 0203 	bic.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4934      	ldr	r1, [pc, #208]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a24:	f7fe fa3c 	bl	8001ea0 <HAL_GetTick>
 8003a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a2c:	f7fe fa38 	bl	8001ea0 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e04f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a42:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 020c 	and.w	r2, r3, #12
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d1eb      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a54:	4b25      	ldr	r3, [pc, #148]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d20c      	bcs.n	8003a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a62:	4b22      	ldr	r3, [pc, #136]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <HAL_RCC_ClockConfig+0x1b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e032      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4916      	ldr	r1, [pc, #88]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aa6:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	490e      	ldr	r1, [pc, #56]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aba:	f000 f821 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	490a      	ldr	r1, [pc, #40]	; (8003af4 <HAL_RCC_ClockConfig+0x1c0>)
 8003acc:	5ccb      	ldrb	r3, [r1, r3]
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	4a09      	ldr	r2, [pc, #36]	; (8003af8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <HAL_RCC_ClockConfig+0x1c8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe f99c 	bl	8001e18 <HAL_InitTick>

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40023c00 	.word	0x40023c00
 8003af0:	40023800 	.word	0x40023800
 8003af4:	08005488 	.word	0x08005488
 8003af8:	20000000 	.word	0x20000000
 8003afc:	20000004 	.word	0x20000004

08003b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b04:	b094      	sub	sp, #80	; 0x50
 8003b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b10:	2300      	movs	r3, #0
 8003b12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b18:	4b79      	ldr	r3, [pc, #484]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d00d      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x40>
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	f200 80e1 	bhi.w	8003cec <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x34>
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d003      	beq.n	8003b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b32:	e0db      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b34:	4b73      	ldr	r3, [pc, #460]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b38:	e0db      	b.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b3a:	4b73      	ldr	r3, [pc, #460]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b3e:	e0d8      	b.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b40:	4b6f      	ldr	r3, [pc, #444]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b4a:	4b6d      	ldr	r3, [pc, #436]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d063      	beq.n	8003c1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b56:	4b6a      	ldr	r3, [pc, #424]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	099b      	lsrs	r3, r3, #6
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b68:	633b      	str	r3, [r7, #48]	; 0x30
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b72:	4622      	mov	r2, r4
 8003b74:	462b      	mov	r3, r5
 8003b76:	f04f 0000 	mov.w	r0, #0
 8003b7a:	f04f 0100 	mov.w	r1, #0
 8003b7e:	0159      	lsls	r1, r3, #5
 8003b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b84:	0150      	lsls	r0, r2, #5
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	1a51      	subs	r1, r2, r1
 8003b8e:	6139      	str	r1, [r7, #16]
 8003b90:	4629      	mov	r1, r5
 8003b92:	eb63 0301 	sbc.w	r3, r3, r1
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	018b      	lsls	r3, r1, #6
 8003ba8:	4651      	mov	r1, sl
 8003baa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bae:	4651      	mov	r1, sl
 8003bb0:	018a      	lsls	r2, r1, #6
 8003bb2:	4651      	mov	r1, sl
 8003bb4:	ebb2 0801 	subs.w	r8, r2, r1
 8003bb8:	4659      	mov	r1, fp
 8003bba:	eb63 0901 	sbc.w	r9, r3, r1
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bd2:	4690      	mov	r8, r2
 8003bd4:	4699      	mov	r9, r3
 8003bd6:	4623      	mov	r3, r4
 8003bd8:	eb18 0303 	adds.w	r3, r8, r3
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	462b      	mov	r3, r5
 8003be0:	eb49 0303 	adc.w	r3, r9, r3
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	024b      	lsls	r3, r1, #9
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	024a      	lsls	r2, r1, #9
 8003c00:	4610      	mov	r0, r2
 8003c02:	4619      	mov	r1, r3
 8003c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c06:	2200      	movs	r2, #0
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c10:	f7fc ff08 	bl	8000a24 <__aeabi_uldivmod>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4613      	mov	r3, r2
 8003c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c1c:	e058      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1e:	4b38      	ldr	r3, [pc, #224]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	099b      	lsrs	r3, r3, #6
 8003c24:	2200      	movs	r2, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	4611      	mov	r1, r2
 8003c2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c2e:	623b      	str	r3, [r7, #32]
 8003c30:	2300      	movs	r3, #0
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
 8003c34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c38:	4642      	mov	r2, r8
 8003c3a:	464b      	mov	r3, r9
 8003c3c:	f04f 0000 	mov.w	r0, #0
 8003c40:	f04f 0100 	mov.w	r1, #0
 8003c44:	0159      	lsls	r1, r3, #5
 8003c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c4a:	0150      	lsls	r0, r2, #5
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4641      	mov	r1, r8
 8003c52:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c56:	4649      	mov	r1, r9
 8003c58:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c70:	ebb2 040a 	subs.w	r4, r2, sl
 8003c74:	eb63 050b 	sbc.w	r5, r3, fp
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	00eb      	lsls	r3, r5, #3
 8003c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c86:	00e2      	lsls	r2, r4, #3
 8003c88:	4614      	mov	r4, r2
 8003c8a:	461d      	mov	r5, r3
 8003c8c:	4643      	mov	r3, r8
 8003c8e:	18e3      	adds	r3, r4, r3
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	464b      	mov	r3, r9
 8003c94:	eb45 0303 	adc.w	r3, r5, r3
 8003c98:	607b      	str	r3, [r7, #4]
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	028b      	lsls	r3, r1, #10
 8003caa:	4621      	mov	r1, r4
 8003cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	028a      	lsls	r2, r1, #10
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cba:	2200      	movs	r2, #0
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	61fa      	str	r2, [r7, #28]
 8003cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cc4:	f7fc feae 	bl	8000a24 <__aeabi_uldivmod>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4613      	mov	r3, r2
 8003cce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	0c1b      	lsrs	r3, r3, #16
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cea:	e002      	b.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3750      	adds	r7, #80	; 0x50
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
 8003d04:	00f42400 	.word	0x00f42400
 8003d08:	007a1200 	.word	0x007a1200

08003d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d10:	4b03      	ldr	r3, [pc, #12]	; (8003d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d12:	681b      	ldr	r3, [r3, #0]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000000 	.word	0x20000000

08003d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d28:	f7ff fff0 	bl	8003d0c <HAL_RCC_GetHCLKFreq>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	0a9b      	lsrs	r3, r3, #10
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	4903      	ldr	r1, [pc, #12]	; (8003d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d3a:	5ccb      	ldrb	r3, [r1, r3]
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40023800 	.word	0x40023800
 8003d48:	08005498 	.word	0x08005498

08003d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d50:	f7ff ffdc 	bl	8003d0c <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	0b5b      	lsrs	r3, r3, #13
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4903      	ldr	r1, [pc, #12]	; (8003d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	08005498 	.word	0x08005498

08003d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e041      	b.n	8003e0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fd fa5a 	bl	8001254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f000 f950 	bl	8004058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d001      	beq.n	8003e2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e03c      	b.n	8003ea6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1e      	ldr	r2, [pc, #120]	; (8003eb4 <HAL_TIM_Base_Start+0xa0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d018      	beq.n	8003e70 <HAL_TIM_Base_Start+0x5c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e46:	d013      	beq.n	8003e70 <HAL_TIM_Base_Start+0x5c>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1a      	ldr	r2, [pc, #104]	; (8003eb8 <HAL_TIM_Base_Start+0xa4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00e      	beq.n	8003e70 <HAL_TIM_Base_Start+0x5c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a19      	ldr	r2, [pc, #100]	; (8003ebc <HAL_TIM_Base_Start+0xa8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d009      	beq.n	8003e70 <HAL_TIM_Base_Start+0x5c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a17      	ldr	r2, [pc, #92]	; (8003ec0 <HAL_TIM_Base_Start+0xac>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d004      	beq.n	8003e70 <HAL_TIM_Base_Start+0x5c>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a16      	ldr	r2, [pc, #88]	; (8003ec4 <HAL_TIM_Base_Start+0xb0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d111      	bne.n	8003e94 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b06      	cmp	r3, #6
 8003e80:	d010      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e92:	e007      	b.n	8003ea4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40010000 	.word	0x40010000
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800
 8003ec0:	40000c00 	.word	0x40000c00
 8003ec4:	40014000 	.word	0x40014000

08003ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e0b4      	b.n	800404e <HAL_TIM_ConfigClockSource+0x186>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1c:	d03e      	beq.n	8003f9c <HAL_TIM_ConfigClockSource+0xd4>
 8003f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f22:	f200 8087 	bhi.w	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2a:	f000 8086 	beq.w	800403a <HAL_TIM_ConfigClockSource+0x172>
 8003f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f32:	d87f      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b70      	cmp	r3, #112	; 0x70
 8003f36:	d01a      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0xa6>
 8003f38:	2b70      	cmp	r3, #112	; 0x70
 8003f3a:	d87b      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f3c:	2b60      	cmp	r3, #96	; 0x60
 8003f3e:	d050      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f40:	2b60      	cmp	r3, #96	; 0x60
 8003f42:	d877      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f44:	2b50      	cmp	r3, #80	; 0x50
 8003f46:	d03c      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0xfa>
 8003f48:	2b50      	cmp	r3, #80	; 0x50
 8003f4a:	d873      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d058      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x13a>
 8003f50:	2b40      	cmp	r3, #64	; 0x40
 8003f52:	d86f      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f54:	2b30      	cmp	r3, #48	; 0x30
 8003f56:	d064      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x15a>
 8003f58:	2b30      	cmp	r3, #48	; 0x30
 8003f5a:	d86b      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d060      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x15a>
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d867      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d05c      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x15a>
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d05a      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x15a>
 8003f6c:	e062      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6899      	ldr	r1, [r3, #8]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f000 f965 	bl	800424c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	609a      	str	r2, [r3, #8]
      break;
 8003f9a:	e04f      	b.n	800403c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	6899      	ldr	r1, [r3, #8]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f000 f94e 	bl	800424c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fbe:	609a      	str	r2, [r3, #8]
      break;
 8003fc0:	e03c      	b.n	800403c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f000 f8c2 	bl	8004158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2150      	movs	r1, #80	; 0x50
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f91b 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003fe0:	e02c      	b.n	800403c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6859      	ldr	r1, [r3, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f000 f8e1 	bl	80041b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2160      	movs	r1, #96	; 0x60
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f90b 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8004000:	e01c      	b.n	800403c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	6859      	ldr	r1, [r3, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	461a      	mov	r2, r3
 8004010:	f000 f8a2 	bl	8004158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2140      	movs	r1, #64	; 0x40
 800401a:	4618      	mov	r0, r3
 800401c:	f000 f8fb 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8004020:	e00c      	b.n	800403c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4619      	mov	r1, r3
 800402c:	4610      	mov	r0, r2
 800402e:	f000 f8f2 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8004032:	e003      	b.n	800403c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
      break;
 8004038:	e000      	b.n	800403c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800403a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a34      	ldr	r2, [pc, #208]	; (800413c <TIM_Base_SetConfig+0xe4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00f      	beq.n	8004090 <TIM_Base_SetConfig+0x38>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004076:	d00b      	beq.n	8004090 <TIM_Base_SetConfig+0x38>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a31      	ldr	r2, [pc, #196]	; (8004140 <TIM_Base_SetConfig+0xe8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d007      	beq.n	8004090 <TIM_Base_SetConfig+0x38>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a30      	ldr	r2, [pc, #192]	; (8004144 <TIM_Base_SetConfig+0xec>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_Base_SetConfig+0x38>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a2f      	ldr	r2, [pc, #188]	; (8004148 <TIM_Base_SetConfig+0xf0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d108      	bne.n	80040a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a25      	ldr	r2, [pc, #148]	; (800413c <TIM_Base_SetConfig+0xe4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d01b      	beq.n	80040e2 <TIM_Base_SetConfig+0x8a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b0:	d017      	beq.n	80040e2 <TIM_Base_SetConfig+0x8a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a22      	ldr	r2, [pc, #136]	; (8004140 <TIM_Base_SetConfig+0xe8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <TIM_Base_SetConfig+0x8a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a21      	ldr	r2, [pc, #132]	; (8004144 <TIM_Base_SetConfig+0xec>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00f      	beq.n	80040e2 <TIM_Base_SetConfig+0x8a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a20      	ldr	r2, [pc, #128]	; (8004148 <TIM_Base_SetConfig+0xf0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00b      	beq.n	80040e2 <TIM_Base_SetConfig+0x8a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a1f      	ldr	r2, [pc, #124]	; (800414c <TIM_Base_SetConfig+0xf4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d007      	beq.n	80040e2 <TIM_Base_SetConfig+0x8a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a1e      	ldr	r2, [pc, #120]	; (8004150 <TIM_Base_SetConfig+0xf8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d003      	beq.n	80040e2 <TIM_Base_SetConfig+0x8a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <TIM_Base_SetConfig+0xfc>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d108      	bne.n	80040f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a08      	ldr	r2, [pc, #32]	; (800413c <TIM_Base_SetConfig+0xe4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d103      	bne.n	8004128 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	615a      	str	r2, [r3, #20]
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40010000 	.word	0x40010000
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800
 8004148:	40000c00 	.word	0x40000c00
 800414c:	40014000 	.word	0x40014000
 8004150:	40014400 	.word	0x40014400
 8004154:	40014800 	.word	0x40014800

08004158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f023 0201 	bic.w	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 030a 	bic.w	r3, r3, #10
 8004194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b087      	sub	sp, #28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0210 	bic.w	r2, r3, #16
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	031b      	lsls	r3, r3, #12
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	621a      	str	r2, [r3, #32]
}
 800420a:	bf00      	nop
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	f043 0307 	orr.w	r3, r3, #7
 8004238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	609a      	str	r2, [r3, #8]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	021a      	lsls	r2, r3, #8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	431a      	orrs	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4313      	orrs	r3, r2
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e050      	b.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d018      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f0:	d013      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00e      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a16      	ldr	r2, [pc, #88]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d009      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a15      	ldr	r2, [pc, #84]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a13      	ldr	r2, [pc, #76]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10c      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	4313      	orrs	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40010000 	.word	0x40010000
 8004358:	40000400 	.word	0x40000400
 800435c:	40000800 	.word	0x40000800
 8004360:	40000c00 	.word	0x40000c00
 8004364:	40014000 	.word	0x40014000

08004368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e03f      	b.n	80043fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fc ffac 	bl	80012ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2224      	movs	r2, #36	; 0x24
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f929 	bl	8004604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b08a      	sub	sp, #40	; 0x28
 8004406:	af02      	add	r7, sp, #8
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	603b      	str	r3, [r7, #0]
 800440e:	4613      	mov	r3, r2
 8004410:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b20      	cmp	r3, #32
 8004420:	d17c      	bne.n	800451c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_UART_Transmit+0x2c>
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e075      	b.n	800451e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_UART_Transmit+0x3e>
 800443c:	2302      	movs	r3, #2
 800443e:	e06e      	b.n	800451e <HAL_UART_Transmit+0x11c>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2221      	movs	r2, #33	; 0x21
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004456:	f7fd fd23 	bl	8001ea0 <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	88fa      	ldrh	r2, [r7, #6]
 8004466:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004470:	d108      	bne.n	8004484 <HAL_UART_Transmit+0x82>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d104      	bne.n	8004484 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e003      	b.n	800448c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004494:	e02a      	b.n	80044ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2200      	movs	r2, #0
 800449e:	2180      	movs	r1, #128	; 0x80
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f840 	bl	8004526 <UART_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e036      	b.n	800451e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	3302      	adds	r3, #2
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	e007      	b.n	80044de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	781a      	ldrb	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	3301      	adds	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1cf      	bne.n	8004496 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2200      	movs	r2, #0
 80044fe:	2140      	movs	r1, #64	; 0x40
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f810 	bl	8004526 <UART_WaitOnFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e006      	b.n	800451e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e000      	b.n	800451e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
  }
}
 800451e:	4618      	mov	r0, r3
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b090      	sub	sp, #64	; 0x40
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	603b      	str	r3, [r7, #0]
 8004532:	4613      	mov	r3, r2
 8004534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004536:	e050      	b.n	80045da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d04c      	beq.n	80045da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <UART_WaitOnFlagUntilTimeout+0x30>
 8004546:	f7fd fcab 	bl	8001ea0 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004552:	429a      	cmp	r2, r3
 8004554:	d241      	bcs.n	80045da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800456c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004576:	637a      	str	r2, [r7, #52]	; 0x34
 8004578:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800457c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e5      	bne.n	8004556 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3314      	adds	r3, #20
 8004590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	613b      	str	r3, [r7, #16]
   return(result);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3314      	adds	r3, #20
 80045a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045aa:	623a      	str	r2, [r7, #32]
 80045ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	69f9      	ldr	r1, [r7, #28]
 80045b0:	6a3a      	ldr	r2, [r7, #32]
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e5      	bne.n	800458a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e00f      	b.n	80045fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4013      	ands	r3, r2
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	bf0c      	ite	eq
 80045ea:	2301      	moveq	r3, #1
 80045ec:	2300      	movne	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d09f      	beq.n	8004538 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3740      	adds	r7, #64	; 0x40
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004608:	b0c0      	sub	sp, #256	; 0x100
 800460a:	af00      	add	r7, sp, #0
 800460c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004620:	68d9      	ldr	r1, [r3, #12]
 8004622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	ea40 0301 	orr.w	r3, r0, r1
 800462c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	431a      	orrs	r2, r3
 800463c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	431a      	orrs	r2, r3
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800465c:	f021 010c 	bic.w	r1, r1, #12
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800466a:	430b      	orrs	r3, r1
 800466c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800466e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467e:	6999      	ldr	r1, [r3, #24]
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	ea40 0301 	orr.w	r3, r0, r1
 800468a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b8f      	ldr	r3, [pc, #572]	; (80048d0 <UART_SetConfig+0x2cc>)
 8004694:	429a      	cmp	r2, r3
 8004696:	d005      	beq.n	80046a4 <UART_SetConfig+0xa0>
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	4b8d      	ldr	r3, [pc, #564]	; (80048d4 <UART_SetConfig+0x2d0>)
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d104      	bne.n	80046ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046a4:	f7ff fb52 	bl	8003d4c <HAL_RCC_GetPCLK2Freq>
 80046a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046ac:	e003      	b.n	80046b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046ae:	f7ff fb39 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 80046b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c0:	f040 810c 	bne.w	80048dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c8:	2200      	movs	r2, #0
 80046ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046d6:	4622      	mov	r2, r4
 80046d8:	462b      	mov	r3, r5
 80046da:	1891      	adds	r1, r2, r2
 80046dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80046de:	415b      	adcs	r3, r3
 80046e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046e6:	4621      	mov	r1, r4
 80046e8:	eb12 0801 	adds.w	r8, r2, r1
 80046ec:	4629      	mov	r1, r5
 80046ee:	eb43 0901 	adc.w	r9, r3, r1
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004706:	4690      	mov	r8, r2
 8004708:	4699      	mov	r9, r3
 800470a:	4623      	mov	r3, r4
 800470c:	eb18 0303 	adds.w	r3, r8, r3
 8004710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004714:	462b      	mov	r3, r5
 8004716:	eb49 0303 	adc.w	r3, r9, r3
 800471a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800471e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800472a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800472e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004732:	460b      	mov	r3, r1
 8004734:	18db      	adds	r3, r3, r3
 8004736:	653b      	str	r3, [r7, #80]	; 0x50
 8004738:	4613      	mov	r3, r2
 800473a:	eb42 0303 	adc.w	r3, r2, r3
 800473e:	657b      	str	r3, [r7, #84]	; 0x54
 8004740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004748:	f7fc f96c 	bl	8000a24 <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4b61      	ldr	r3, [pc, #388]	; (80048d8 <UART_SetConfig+0x2d4>)
 8004752:	fba3 2302 	umull	r2, r3, r3, r2
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	011c      	lsls	r4, r3, #4
 800475a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475e:	2200      	movs	r2, #0
 8004760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004764:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004768:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800476c:	4642      	mov	r2, r8
 800476e:	464b      	mov	r3, r9
 8004770:	1891      	adds	r1, r2, r2
 8004772:	64b9      	str	r1, [r7, #72]	; 0x48
 8004774:	415b      	adcs	r3, r3
 8004776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004778:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800477c:	4641      	mov	r1, r8
 800477e:	eb12 0a01 	adds.w	sl, r2, r1
 8004782:	4649      	mov	r1, r9
 8004784:	eb43 0b01 	adc.w	fp, r3, r1
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004794:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800479c:	4692      	mov	sl, r2
 800479e:	469b      	mov	fp, r3
 80047a0:	4643      	mov	r3, r8
 80047a2:	eb1a 0303 	adds.w	r3, sl, r3
 80047a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047aa:	464b      	mov	r3, r9
 80047ac:	eb4b 0303 	adc.w	r3, fp, r3
 80047b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047c8:	460b      	mov	r3, r1
 80047ca:	18db      	adds	r3, r3, r3
 80047cc:	643b      	str	r3, [r7, #64]	; 0x40
 80047ce:	4613      	mov	r3, r2
 80047d0:	eb42 0303 	adc.w	r3, r2, r3
 80047d4:	647b      	str	r3, [r7, #68]	; 0x44
 80047d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047de:	f7fc f921 	bl	8000a24 <__aeabi_uldivmod>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4611      	mov	r1, r2
 80047e8:	4b3b      	ldr	r3, [pc, #236]	; (80048d8 <UART_SetConfig+0x2d4>)
 80047ea:	fba3 2301 	umull	r2, r3, r3, r1
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	2264      	movs	r2, #100	; 0x64
 80047f2:	fb02 f303 	mul.w	r3, r2, r3
 80047f6:	1acb      	subs	r3, r1, r3
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047fe:	4b36      	ldr	r3, [pc, #216]	; (80048d8 <UART_SetConfig+0x2d4>)
 8004800:	fba3 2302 	umull	r2, r3, r3, r2
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800480c:	441c      	add	r4, r3
 800480e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004812:	2200      	movs	r2, #0
 8004814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004818:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800481c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004820:	4642      	mov	r2, r8
 8004822:	464b      	mov	r3, r9
 8004824:	1891      	adds	r1, r2, r2
 8004826:	63b9      	str	r1, [r7, #56]	; 0x38
 8004828:	415b      	adcs	r3, r3
 800482a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800482c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004830:	4641      	mov	r1, r8
 8004832:	1851      	adds	r1, r2, r1
 8004834:	6339      	str	r1, [r7, #48]	; 0x30
 8004836:	4649      	mov	r1, r9
 8004838:	414b      	adcs	r3, r1
 800483a:	637b      	str	r3, [r7, #52]	; 0x34
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004848:	4659      	mov	r1, fp
 800484a:	00cb      	lsls	r3, r1, #3
 800484c:	4651      	mov	r1, sl
 800484e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004852:	4651      	mov	r1, sl
 8004854:	00ca      	lsls	r2, r1, #3
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	4603      	mov	r3, r0
 800485c:	4642      	mov	r2, r8
 800485e:	189b      	adds	r3, r3, r2
 8004860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004864:	464b      	mov	r3, r9
 8004866:	460a      	mov	r2, r1
 8004868:	eb42 0303 	adc.w	r3, r2, r3
 800486c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800487c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004884:	460b      	mov	r3, r1
 8004886:	18db      	adds	r3, r3, r3
 8004888:	62bb      	str	r3, [r7, #40]	; 0x28
 800488a:	4613      	mov	r3, r2
 800488c:	eb42 0303 	adc.w	r3, r2, r3
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800489a:	f7fc f8c3 	bl	8000a24 <__aeabi_uldivmod>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <UART_SetConfig+0x2d4>)
 80048a4:	fba3 1302 	umull	r1, r3, r3, r2
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	2164      	movs	r1, #100	; 0x64
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	3332      	adds	r3, #50	; 0x32
 80048b6:	4a08      	ldr	r2, [pc, #32]	; (80048d8 <UART_SetConfig+0x2d4>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	f003 0207 	and.w	r2, r3, #7
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4422      	add	r2, r4
 80048ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048cc:	e105      	b.n	8004ada <UART_SetConfig+0x4d6>
 80048ce:	bf00      	nop
 80048d0:	40011000 	.word	0x40011000
 80048d4:	40011400 	.word	0x40011400
 80048d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048ee:	4642      	mov	r2, r8
 80048f0:	464b      	mov	r3, r9
 80048f2:	1891      	adds	r1, r2, r2
 80048f4:	6239      	str	r1, [r7, #32]
 80048f6:	415b      	adcs	r3, r3
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
 80048fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048fe:	4641      	mov	r1, r8
 8004900:	1854      	adds	r4, r2, r1
 8004902:	4649      	mov	r1, r9
 8004904:	eb43 0501 	adc.w	r5, r3, r1
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	00eb      	lsls	r3, r5, #3
 8004912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004916:	00e2      	lsls	r2, r4, #3
 8004918:	4614      	mov	r4, r2
 800491a:	461d      	mov	r5, r3
 800491c:	4643      	mov	r3, r8
 800491e:	18e3      	adds	r3, r4, r3
 8004920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004924:	464b      	mov	r3, r9
 8004926:	eb45 0303 	adc.w	r3, r5, r3
 800492a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800493a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800494a:	4629      	mov	r1, r5
 800494c:	008b      	lsls	r3, r1, #2
 800494e:	4621      	mov	r1, r4
 8004950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004954:	4621      	mov	r1, r4
 8004956:	008a      	lsls	r2, r1, #2
 8004958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800495c:	f7fc f862 	bl	8000a24 <__aeabi_uldivmod>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4b60      	ldr	r3, [pc, #384]	; (8004ae8 <UART_SetConfig+0x4e4>)
 8004966:	fba3 2302 	umull	r2, r3, r3, r2
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	011c      	lsls	r4, r3, #4
 800496e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004972:	2200      	movs	r2, #0
 8004974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800497c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004980:	4642      	mov	r2, r8
 8004982:	464b      	mov	r3, r9
 8004984:	1891      	adds	r1, r2, r2
 8004986:	61b9      	str	r1, [r7, #24]
 8004988:	415b      	adcs	r3, r3
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004990:	4641      	mov	r1, r8
 8004992:	1851      	adds	r1, r2, r1
 8004994:	6139      	str	r1, [r7, #16]
 8004996:	4649      	mov	r1, r9
 8004998:	414b      	adcs	r3, r1
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049a8:	4659      	mov	r1, fp
 80049aa:	00cb      	lsls	r3, r1, #3
 80049ac:	4651      	mov	r1, sl
 80049ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b2:	4651      	mov	r1, sl
 80049b4:	00ca      	lsls	r2, r1, #3
 80049b6:	4610      	mov	r0, r2
 80049b8:	4619      	mov	r1, r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	4642      	mov	r2, r8
 80049be:	189b      	adds	r3, r3, r2
 80049c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049c4:	464b      	mov	r3, r9
 80049c6:	460a      	mov	r2, r1
 80049c8:	eb42 0303 	adc.w	r3, r2, r3
 80049cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80049da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049e8:	4649      	mov	r1, r9
 80049ea:	008b      	lsls	r3, r1, #2
 80049ec:	4641      	mov	r1, r8
 80049ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049f2:	4641      	mov	r1, r8
 80049f4:	008a      	lsls	r2, r1, #2
 80049f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049fa:	f7fc f813 	bl	8000a24 <__aeabi_uldivmod>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <UART_SetConfig+0x4e4>)
 8004a04:	fba3 1302 	umull	r1, r3, r3, r2
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	2164      	movs	r1, #100	; 0x64
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	3332      	adds	r3, #50	; 0x32
 8004a16:	4a34      	ldr	r2, [pc, #208]	; (8004ae8 <UART_SetConfig+0x4e4>)
 8004a18:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a22:	441c      	add	r4, r3
 8004a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a28:	2200      	movs	r2, #0
 8004a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a2c:	677a      	str	r2, [r7, #116]	; 0x74
 8004a2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a32:	4642      	mov	r2, r8
 8004a34:	464b      	mov	r3, r9
 8004a36:	1891      	adds	r1, r2, r2
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	415b      	adcs	r3, r3
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a42:	4641      	mov	r1, r8
 8004a44:	1851      	adds	r1, r2, r1
 8004a46:	6039      	str	r1, [r7, #0]
 8004a48:	4649      	mov	r1, r9
 8004a4a:	414b      	adcs	r3, r1
 8004a4c:	607b      	str	r3, [r7, #4]
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a5a:	4659      	mov	r1, fp
 8004a5c:	00cb      	lsls	r3, r1, #3
 8004a5e:	4651      	mov	r1, sl
 8004a60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a64:	4651      	mov	r1, sl
 8004a66:	00ca      	lsls	r2, r1, #3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4642      	mov	r2, r8
 8004a70:	189b      	adds	r3, r3, r2
 8004a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a74:	464b      	mov	r3, r9
 8004a76:	460a      	mov	r2, r1
 8004a78:	eb42 0303 	adc.w	r3, r2, r3
 8004a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	663b      	str	r3, [r7, #96]	; 0x60
 8004a88:	667a      	str	r2, [r7, #100]	; 0x64
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a96:	4649      	mov	r1, r9
 8004a98:	008b      	lsls	r3, r1, #2
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aa0:	4641      	mov	r1, r8
 8004aa2:	008a      	lsls	r2, r1, #2
 8004aa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004aa8:	f7fb ffbc 	bl	8000a24 <__aeabi_uldivmod>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <UART_SetConfig+0x4e4>)
 8004ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	2164      	movs	r1, #100	; 0x64
 8004aba:	fb01 f303 	mul.w	r3, r1, r3
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	3332      	adds	r3, #50	; 0x32
 8004ac4:	4a08      	ldr	r2, [pc, #32]	; (8004ae8 <UART_SetConfig+0x4e4>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	f003 020f 	and.w	r2, r3, #15
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4422      	add	r2, r4
 8004ad8:	609a      	str	r2, [r3, #8]
}
 8004ada:	bf00      	nop
 8004adc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ae6:	bf00      	nop
 8004ae8:	51eb851f 	.word	0x51eb851f

08004aec <_ZdlPvj>:
 8004aec:	f000 ba20 	b.w	8004f30 <_ZdlPv>

08004af0 <_ZNSaIcEC1Ev>:
 8004af0:	4770      	bx	lr

08004af2 <_ZNSaIcED1Ev>:
 8004af2:	4770      	bx	lr

08004af4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8004af4:	b10a      	cbz	r2, 8004afa <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8004af6:	f000 bb31 	b.w	800515c <memcpy>
 8004afa:	4770      	bx	lr

08004afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8004afc:	b508      	push	{r3, lr}
 8004afe:	680b      	ldr	r3, [r1, #0]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d302      	bcc.n	8004b0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8004b06:	480d      	ldr	r0, [pc, #52]	; (8004b3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8004b08:	f000 fa2b 	bl	8004f62 <_ZSt20__throw_length_errorPKc>
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d90b      	bls.n	8004b28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8004b10:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8004b14:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8004b18:	d206      	bcs.n	8004b28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8004b1a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004b1e:	bf2a      	itet	cs
 8004b20:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8004b24:	6008      	strcc	r0, [r1, #0]
 8004b26:	600b      	strcs	r3, [r1, #0]
 8004b28:	6808      	ldr	r0, [r1, #0]
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	d501      	bpl.n	8004b32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8004b2e:	f000 fa12 	bl	8004f56 <_ZSt17__throw_bad_allocv>
 8004b32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004b36:	f000 b9fd 	b.w	8004f34 <_Znwj>
 8004b3a:	bf00      	nop
 8004b3c:	0800557c 	.word	0x0800557c

08004b40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8004b40:	f850 3b08 	ldr.w	r3, [r0], #8
 8004b44:	4283      	cmp	r3, r0
 8004b46:	d002      	beq.n	8004b4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 b9f1 	b.w	8004f30 <_ZdlPv>
 8004b4e:	4770      	bx	lr

08004b50 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8004b50:	b508      	push	{r3, lr}
 8004b52:	4603      	mov	r3, r0
 8004b54:	4608      	mov	r0, r1
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4298      	cmp	r0, r3
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	d903      	bls.n	8004b66 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	4801      	ldr	r0, [pc, #4]	; (8004b68 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8004b62:	f000 fa01 	bl	8004f68 <_ZSt24__throw_out_of_range_fmtPKcz>
 8004b66:	bd08      	pop	{r3, pc}
 8004b68:	08005594 	.word	0x08005594

08004b6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8004b6c:	6840      	ldr	r0, [r0, #4]
 8004b6e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004b72:	3901      	subs	r1, #1
 8004b74:	1a09      	subs	r1, r1, r0
 8004b76:	4291      	cmp	r1, r2
 8004b78:	b508      	push	{r3, lr}
 8004b7a:	d202      	bcs.n	8004b82 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 f9f0 	bl	8004f62 <_ZSt20__throw_length_errorPKc>
 8004b82:	bd08      	pop	{r3, pc}

08004b84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8004b84:	6803      	ldr	r3, [r0, #0]
 8004b86:	428b      	cmp	r3, r1
 8004b88:	d806      	bhi.n	8004b98 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8004b8a:	6840      	ldr	r0, [r0, #4]
 8004b8c:	4418      	add	r0, r3
 8004b8e:	4281      	cmp	r1, r0
 8004b90:	bf94      	ite	ls
 8004b92:	2000      	movls	r0, #0
 8004b94:	2001      	movhi	r0, #1
 8004b96:	4770      	bx	lr
 8004b98:	2001      	movs	r0, #1
 8004b9a:	4770      	bx	lr

08004b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8004b9c:	2a01      	cmp	r2, #1
 8004b9e:	b410      	push	{r4}
 8004ba0:	d104      	bne.n	8004bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8004ba2:	780a      	ldrb	r2, [r1, #0]
 8004ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ba8:	7002      	strb	r2, [r0, #0]
 8004baa:	4770      	bx	lr
 8004bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bb0:	f7ff bfa0 	b.w	8004af4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08004bb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8004bb4:	2a01      	cmp	r2, #1
 8004bb6:	b430      	push	{r4, r5}
 8004bb8:	d103      	bne.n	8004bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8004bba:	780b      	ldrb	r3, [r1, #0]
 8004bbc:	7003      	strb	r3, [r0, #0]
 8004bbe:	bc30      	pop	{r4, r5}
 8004bc0:	4770      	bx	lr
 8004bc2:	2a00      	cmp	r2, #0
 8004bc4:	d0fb      	beq.n	8004bbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8004bc6:	bc30      	pop	{r4, r5}
 8004bc8:	f000 bad6 	b.w	8005178 <memmove>

08004bcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8004bcc:	460b      	mov	r3, r1
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	b410      	push	{r4}
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	d103      	bne.n	8004be0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8004bd8:	7022      	strb	r2, [r4, #0]
 8004bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0fa      	beq.n	8004bda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8004be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004be8:	461a      	mov	r2, r3
 8004bea:	f000 badf 	b.w	80051ac <memset>

08004bee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8004bee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bf0:	290f      	cmp	r1, #15
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	9101      	str	r1, [sp, #4]
 8004bf6:	4615      	mov	r5, r2
 8004bf8:	d906      	bls.n	8004c08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	a901      	add	r1, sp, #4
 8004bfe:	f7ff ff7d 	bl	8004afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004c02:	9b01      	ldr	r3, [sp, #4]
 8004c04:	6020      	str	r0, [r4, #0]
 8004c06:	60a3      	str	r3, [r4, #8]
 8004c08:	9901      	ldr	r1, [sp, #4]
 8004c0a:	b119      	cbz	r1, 8004c14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8004c0c:	6820      	ldr	r0, [r4, #0]
 8004c0e:	462a      	mov	r2, r5
 8004c10:	f7ff ffdc 	bl	8004bcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8004c14:	9b01      	ldr	r3, [sp, #4]
 8004c16:	6822      	ldr	r2, [r4, #0]
 8004c18:	6063      	str	r3, [r4, #4]
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	54d1      	strb	r1, [r2, r3]
 8004c1e:	b003      	add	sp, #12
 8004c20:	bd30      	pop	{r4, r5, pc}

08004c22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8004c22:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c26:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004c28:	461f      	mov	r7, r3
 8004c2a:	6843      	ldr	r3, [r0, #4]
 8004c2c:	eb01 0802 	add.w	r8, r1, r2
 8004c30:	1ab2      	subs	r2, r6, r2
 8004c32:	441a      	add	r2, r3
 8004c34:	eba3 0908 	sub.w	r9, r3, r8
 8004c38:	4603      	mov	r3, r0
 8004c3a:	9201      	str	r2, [sp, #4]
 8004c3c:	f853 2b08 	ldr.w	r2, [r3], #8
 8004c40:	429a      	cmp	r2, r3
 8004c42:	bf18      	it	ne
 8004c44:	6882      	ldrne	r2, [r0, #8]
 8004c46:	460d      	mov	r5, r1
 8004c48:	bf08      	it	eq
 8004c4a:	220f      	moveq	r2, #15
 8004c4c:	a901      	add	r1, sp, #4
 8004c4e:	4604      	mov	r4, r0
 8004c50:	f7ff ff54 	bl	8004afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004c54:	4682      	mov	sl, r0
 8004c56:	b11d      	cbz	r5, 8004c60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8004c58:	6821      	ldr	r1, [r4, #0]
 8004c5a:	462a      	mov	r2, r5
 8004c5c:	f7ff ff9e 	bl	8004b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004c60:	b137      	cbz	r7, 8004c70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8004c62:	b12e      	cbz	r6, 8004c70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8004c64:	4632      	mov	r2, r6
 8004c66:	4639      	mov	r1, r7
 8004c68:	eb0a 0005 	add.w	r0, sl, r5
 8004c6c:	f7ff ff96 	bl	8004b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004c70:	f1b9 0f00 	cmp.w	r9, #0
 8004c74:	d007      	beq.n	8004c86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8004c76:	6821      	ldr	r1, [r4, #0]
 8004c78:	4435      	add	r5, r6
 8004c7a:	464a      	mov	r2, r9
 8004c7c:	4441      	add	r1, r8
 8004c7e:	eb0a 0005 	add.w	r0, sl, r5
 8004c82:	f7ff ff8b 	bl	8004b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004c86:	4620      	mov	r0, r4
 8004c88:	f7ff ff5a 	bl	8004b40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004c8c:	9b01      	ldr	r3, [sp, #4]
 8004c8e:	f8c4 a000 	str.w	sl, [r4]
 8004c92:	60a3      	str	r3, [r4, #8]
 8004c94:	b002      	add	sp, #8
 8004c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004c9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8004c9a:	f100 0208 	add.w	r2, r0, #8
 8004c9e:	6002      	str	r2, [r0, #0]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	6042      	str	r2, [r0, #4]
 8004ca4:	7202      	strb	r2, [r0, #8]
 8004ca6:	4770      	bx	lr

08004ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	f100 0308 	add.w	r3, r0, #8
 8004cae:	4604      	mov	r4, r0
 8004cb0:	6003      	str	r3, [r0, #0]
 8004cb2:	f7ff ff9c 	bl	8004bee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	bd10      	pop	{r4, pc}

08004cba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8004cba:	b570      	push	{r4, r5, r6, lr}
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	460e      	mov	r6, r1
 8004cc0:	3008      	adds	r0, #8
 8004cc2:	6020      	str	r0, [r4, #0]
 8004cc4:	f856 3b08 	ldr.w	r3, [r6], #8
 8004cc8:	429e      	cmp	r6, r3
 8004cca:	460d      	mov	r5, r1
 8004ccc:	d10b      	bne.n	8004ce6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8004cce:	2210      	movs	r2, #16
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	f7ff ff0f 	bl	8004af4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8004cd6:	686b      	ldr	r3, [r5, #4]
 8004cd8:	6063      	str	r3, [r4, #4]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	602e      	str	r6, [r5, #0]
 8004cde:	606b      	str	r3, [r5, #4]
 8004ce0:	722b      	strb	r3, [r5, #8]
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	bd70      	pop	{r4, r5, r6, pc}
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	688b      	ldr	r3, [r1, #8]
 8004cea:	60a3      	str	r3, [r4, #8]
 8004cec:	e7f3      	b.n	8004cd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08004cee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8004cee:	b510      	push	{r4, lr}
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	f7ff ff25 	bl	8004b40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	bd10      	pop	{r4, pc}

08004cfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8004cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfc:	460d      	mov	r5, r1
 8004cfe:	f851 3b08 	ldr.w	r3, [r1], #8
 8004d02:	686a      	ldr	r2, [r5, #4]
 8004d04:	4299      	cmp	r1, r3
 8004d06:	4604      	mov	r4, r0
 8004d08:	6800      	ldr	r0, [r0, #0]
 8004d0a:	d10d      	bne.n	8004d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8004d0c:	b10a      	cbz	r2, 8004d12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 8004d0e:	f7ff ff45 	bl	8004b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004d12:	686b      	ldr	r3, [r5, #4]
 8004d14:	6822      	ldr	r2, [r4, #0]
 8004d16:	6063      	str	r3, [r4, #4]
 8004d18:	2100      	movs	r1, #0
 8004d1a:	54d1      	strb	r1, [r2, r3]
 8004d1c:	682a      	ldr	r2, [r5, #0]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	606b      	str	r3, [r5, #4]
 8004d22:	7013      	strb	r3, [r2, #0]
 8004d24:	4620      	mov	r0, r4
 8004d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d28:	e9c4 3200 	strd	r3, r2, [r4]
 8004d2c:	f104 0708 	add.w	r7, r4, #8
 8004d30:	42b8      	cmp	r0, r7
 8004d32:	68ab      	ldr	r3, [r5, #8]
 8004d34:	bf18      	it	ne
 8004d36:	68a6      	ldrne	r6, [r4, #8]
 8004d38:	60a3      	str	r3, [r4, #8]
 8004d3a:	bf08      	it	eq
 8004d3c:	2000      	moveq	r0, #0
 8004d3e:	b110      	cbz	r0, 8004d46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 8004d40:	6028      	str	r0, [r5, #0]
 8004d42:	60ae      	str	r6, [r5, #8]
 8004d44:	e7ea      	b.n	8004d1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 8004d46:	6029      	str	r1, [r5, #0]
 8004d48:	e7e8      	b.n	8004d1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

08004d4a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8004d4a:	6840      	ldr	r0, [r0, #4]
 8004d4c:	4770      	bx	lr

08004d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8004d4e:	6800      	ldr	r0, [r0, #0]
 8004d50:	4408      	add	r0, r1
 8004d52:	4770      	bx	lr

08004d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8004d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d5a:	4614      	mov	r4, r2
 8004d5c:	4680      	mov	r8, r0
 8004d5e:	462a      	mov	r2, r5
 8004d60:	4689      	mov	r9, r1
 8004d62:	461f      	mov	r7, r3
 8004d64:	4621      	mov	r1, r4
 8004d66:	4b39      	ldr	r3, [pc, #228]	; (8004e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 8004d68:	f7ff ff00 	bl	8004b6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004d72:	f852 6b08 	ldr.w	r6, [r2], #8
 8004d76:	4296      	cmp	r6, r2
 8004d78:	bf18      	it	ne
 8004d7a:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8004d7e:	eba5 0b04 	sub.w	fp, r5, r4
 8004d82:	eb03 0a0b 	add.w	sl, r3, fp
 8004d86:	bf08      	it	eq
 8004d88:	220f      	moveq	r2, #15
 8004d8a:	4552      	cmp	r2, sl
 8004d8c:	d351      	bcc.n	8004e32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8004d8e:	444e      	add	r6, r9
 8004d90:	4639      	mov	r1, r7
 8004d92:	44a1      	add	r9, r4
 8004d94:	4640      	mov	r0, r8
 8004d96:	eba3 0909 	sub.w	r9, r3, r9
 8004d9a:	f7ff fef3 	bl	8004b84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8004d9e:	b180      	cbz	r0, 8004dc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8004da0:	f1b9 0f00 	cmp.w	r9, #0
 8004da4:	d006      	beq.n	8004db4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8004da6:	42ac      	cmp	r4, r5
 8004da8:	d004      	beq.n	8004db4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8004daa:	464a      	mov	r2, r9
 8004dac:	1931      	adds	r1, r6, r4
 8004dae:	1970      	adds	r0, r6, r5
 8004db0:	f7ff ff00 	bl	8004bb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004db4:	b315      	cbz	r5, 8004dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004db6:	462a      	mov	r2, r5
 8004db8:	4639      	mov	r1, r7
 8004dba:	4630      	mov	r0, r6
 8004dbc:	f7ff feee 	bl	8004b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004dc0:	e01c      	b.n	8004dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004dc2:	b135      	cbz	r5, 8004dd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8004dc4:	42ac      	cmp	r4, r5
 8004dc6:	d33c      	bcc.n	8004e42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8004dc8:	462a      	mov	r2, r5
 8004dca:	4639      	mov	r1, r7
 8004dcc:	4630      	mov	r0, r6
 8004dce:	f7ff fef1 	bl	8004bb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004dd2:	f1b9 0f00 	cmp.w	r9, #0
 8004dd6:	d011      	beq.n	8004dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004dd8:	42ac      	cmp	r4, r5
 8004dda:	d00f      	beq.n	8004dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004ddc:	464a      	mov	r2, r9
 8004dde:	1931      	adds	r1, r6, r4
 8004de0:	1970      	adds	r0, r6, r5
 8004de2:	f7ff fee7 	bl	8004bb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004de6:	42ac      	cmp	r4, r5
 8004de8:	d208      	bcs.n	8004dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004dea:	4434      	add	r4, r6
 8004dec:	197b      	adds	r3, r7, r5
 8004dee:	429c      	cmp	r4, r3
 8004df0:	d30f      	bcc.n	8004e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 8004df2:	462a      	mov	r2, r5
 8004df4:	4639      	mov	r1, r7
 8004df6:	4630      	mov	r0, r6
 8004df8:	f7ff fedc 	bl	8004bb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8004e00:	f8c8 a004 	str.w	sl, [r8, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	4640      	mov	r0, r8
 8004e08:	f803 200a 	strb.w	r2, [r3, sl]
 8004e0c:	b003      	add	sp, #12
 8004e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e12:	42bc      	cmp	r4, r7
 8004e14:	d803      	bhi.n	8004e1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8004e16:	462a      	mov	r2, r5
 8004e18:	eb07 010b 	add.w	r1, r7, fp
 8004e1c:	e7cd      	b.n	8004dba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8004e1e:	1be4      	subs	r4, r4, r7
 8004e20:	4622      	mov	r2, r4
 8004e22:	4639      	mov	r1, r7
 8004e24:	4630      	mov	r0, r6
 8004e26:	f7ff fec5 	bl	8004bb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004e2a:	1b2a      	subs	r2, r5, r4
 8004e2c:	1971      	adds	r1, r6, r5
 8004e2e:	1930      	adds	r0, r6, r4
 8004e30:	e7c4      	b.n	8004dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8004e32:	9500      	str	r5, [sp, #0]
 8004e34:	463b      	mov	r3, r7
 8004e36:	4622      	mov	r2, r4
 8004e38:	4649      	mov	r1, r9
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	f7ff fef1 	bl	8004c22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8004e40:	e7dc      	b.n	8004dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004e42:	f1b9 0f00 	cmp.w	r9, #0
 8004e46:	d0d0      	beq.n	8004dea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8004e48:	e7c8      	b.n	8004ddc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8004e4a:	bf00      	nop
 8004e4c:	080055e1 	.word	0x080055e1

08004e50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8004e50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004e52:	4604      	mov	r4, r0
 8004e54:	4615      	mov	r5, r2
 8004e56:	4a09      	ldr	r2, [pc, #36]	; (8004e7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8004e58:	9303      	str	r3, [sp, #12]
 8004e5a:	460e      	mov	r6, r1
 8004e5c:	f7ff fe78 	bl	8004b50 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8004e60:	6862      	ldr	r2, [r4, #4]
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	1b92      	subs	r2, r2, r6
 8004e66:	4601      	mov	r1, r0
 8004e68:	42aa      	cmp	r2, r5
 8004e6a:	9808      	ldr	r0, [sp, #32]
 8004e6c:	9000      	str	r0, [sp, #0]
 8004e6e:	bf28      	it	cs
 8004e70:	462a      	movcs	r2, r5
 8004e72:	4620      	mov	r0, r4
 8004e74:	f7ff ff6e 	bl	8004d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8004e78:	b004      	add	sp, #16
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	080055cb 	.word	0x080055cb

08004e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8004e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e82:	4604      	mov	r4, r0
 8004e84:	4610      	mov	r0, r2
 8004e86:	9103      	str	r1, [sp, #12]
 8004e88:	9202      	str	r2, [sp, #8]
 8004e8a:	f7fb f9a5 	bl	80001d8 <strlen>
 8004e8e:	9b02      	ldr	r3, [sp, #8]
 8004e90:	9000      	str	r0, [sp, #0]
 8004e92:	9903      	ldr	r1, [sp, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	4620      	mov	r0, r4
 8004e98:	f7ff ffda 	bl	8004e50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8004e9c:	b004      	add	sp, #16
 8004e9e:	bd10      	pop	{r4, pc}

08004ea0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8004ea0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	4623      	mov	r3, r4
 8004ea6:	6840      	ldr	r0, [r0, #4]
 8004ea8:	f853 6b08 	ldr.w	r6, [r3], #8
 8004eac:	429e      	cmp	r6, r3
 8004eae:	bf18      	it	ne
 8004eb0:	68a3      	ldrne	r3, [r4, #8]
 8004eb2:	eb00 0502 	add.w	r5, r0, r2
 8004eb6:	bf08      	it	eq
 8004eb8:	230f      	moveq	r3, #15
 8004eba:	429d      	cmp	r5, r3
 8004ebc:	d80a      	bhi.n	8004ed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8004ebe:	b112      	cbz	r2, 8004ec6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8004ec0:	4430      	add	r0, r6
 8004ec2:	f7ff fe6b 	bl	8004b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	6065      	str	r5, [r4, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	4620      	mov	r0, r4
 8004ece:	555a      	strb	r2, [r3, r5]
 8004ed0:	b002      	add	sp, #8
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
 8004ed4:	9200      	str	r2, [sp, #0]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	2200      	movs	r2, #0
 8004eda:	4601      	mov	r1, r0
 8004edc:	4620      	mov	r0, r4
 8004ede:	f7ff fea0 	bl	8004c22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8004ee2:	e7f0      	b.n	8004ec6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08004ee4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8004ee4:	b508      	push	{r3, lr}
 8004ee6:	e9d1 1200 	ldrd	r1, r2, [r1]
 8004eea:	f7ff ffd9 	bl	8004ea0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8004eee:	bd08      	pop	{r3, pc}

08004ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 8004ef0:	b508      	push	{r3, lr}
 8004ef2:	f7ff fff7 	bl	8004ee4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8004ef6:	bd08      	pop	{r3, pc}

08004ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8004ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004efa:	4604      	mov	r4, r0
 8004efc:	4608      	mov	r0, r1
 8004efe:	460d      	mov	r5, r1
 8004f00:	f7fb f96a 	bl	80001d8 <strlen>
 8004f04:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8004f06:	9001      	str	r0, [sp, #4]
 8004f08:	4602      	mov	r2, r0
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f7ff fe2d 	bl	8004b6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8004f12:	9a01      	ldr	r2, [sp, #4]
 8004f14:	4629      	mov	r1, r5
 8004f16:	4620      	mov	r0, r4
 8004f18:	f7ff ffc2 	bl	8004ea0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8004f1c:	b003      	add	sp, #12
 8004f1e:	bd30      	pop	{r4, r5, pc}
 8004f20:	080055fa 	.word	0x080055fa

08004f24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 8004f24:	b508      	push	{r3, lr}
 8004f26:	f7ff ffe7 	bl	8004ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8004f2a:	bd08      	pop	{r3, pc}

08004f2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8004f2c:	6800      	ldr	r0, [r0, #0]
 8004f2e:	4770      	bx	lr

08004f30 <_ZdlPv>:
 8004f30:	f000 b90c 	b.w	800514c <free>

08004f34 <_Znwj>:
 8004f34:	2801      	cmp	r0, #1
 8004f36:	bf38      	it	cc
 8004f38:	2001      	movcc	r0, #1
 8004f3a:	b510      	push	{r4, lr}
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f000 f8fc 	bl	800513c <malloc>
 8004f44:	b930      	cbnz	r0, 8004f54 <_Znwj+0x20>
 8004f46:	f000 f8bf 	bl	80050c8 <_ZSt15get_new_handlerv>
 8004f4a:	b908      	cbnz	r0, 8004f50 <_Znwj+0x1c>
 8004f4c:	f000 f8c4 	bl	80050d8 <abort>
 8004f50:	4780      	blx	r0
 8004f52:	e7f4      	b.n	8004f3e <_Znwj+0xa>
 8004f54:	bd10      	pop	{r4, pc}

08004f56 <_ZSt17__throw_bad_allocv>:
 8004f56:	b508      	push	{r3, lr}
 8004f58:	f000 f8be 	bl	80050d8 <abort>

08004f5c <_ZSt19__throw_logic_errorPKc>:
 8004f5c:	b508      	push	{r3, lr}
 8004f5e:	f000 f8bb 	bl	80050d8 <abort>

08004f62 <_ZSt20__throw_length_errorPKc>:
 8004f62:	b508      	push	{r3, lr}
 8004f64:	f000 f8b8 	bl	80050d8 <abort>

08004f68 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8004f68:	b40f      	push	{r0, r1, r2, r3}
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	f107 0418 	add.w	r4, r7, #24
 8004f74:	f854 2b04 	ldr.w	r2, [r4], #4
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f7fb f92c 	bl	80001d8 <strlen>
 8004f80:	f200 2307 	addw	r3, r0, #519	; 0x207
 8004f84:	f023 0307 	bic.w	r3, r3, #7
 8004f88:	ebad 0d03 	sub.w	sp, sp, r3
 8004f8c:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	60fc      	str	r4, [r7, #12]
 8004f94:	4623      	mov	r3, r4
 8004f96:	4668      	mov	r0, sp
 8004f98:	f000 f854 	bl	8005044 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8004f9c:	f000 f89c 	bl	80050d8 <abort>

08004fa0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b09c      	sub	sp, #112	; 0x70
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	460c      	mov	r4, r1
 8004faa:	1ba4      	subs	r4, r4, r6
 8004fac:	490e      	ldr	r1, [pc, #56]	; (8004fe8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8004fae:	2269      	movs	r2, #105	; 0x69
 8004fb0:	1d38      	adds	r0, r7, #4
 8004fb2:	f000 f8d3 	bl	800515c <memcpy>
 8004fb6:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8004fba:	f023 0307 	bic.w	r3, r3, #7
 8004fbe:	ebad 0d03 	sub.w	sp, sp, r3
 8004fc2:	466d      	mov	r5, sp
 8004fc4:	2268      	movs	r2, #104	; 0x68
 8004fc6:	1d39      	adds	r1, r7, #4
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f000 f8c7 	bl	800515c <memcpy>
 8004fce:	4622      	mov	r2, r4
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8004fd6:	442c      	add	r4, r5
 8004fd8:	f000 f8c0 	bl	800515c <memcpy>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f7ff ffba 	bl	8004f5c <_ZSt19__throw_logic_errorPKc>
 8004fe8:	0800560f 	.word	0x0800560f

08004fec <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8004fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	466d      	mov	r5, sp
 8004ff6:	f105 040c 	add.w	r4, r5, #12
 8004ffa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8005040 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8004ffe:	4623      	mov	r3, r4
 8005000:	f04f 0c0a 	mov.w	ip, #10
 8005004:	fbb2 f6fc 	udiv	r6, r2, ip
 8005008:	fb0c 2e16 	mls	lr, ip, r6, r2
 800500c:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8005010:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8005014:	4696      	mov	lr, r2
 8005016:	f1be 0f09 	cmp.w	lr, #9
 800501a:	4632      	mov	r2, r6
 800501c:	d8f2      	bhi.n	8005004 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800501e:	1ae4      	subs	r4, r4, r3
 8005020:	428c      	cmp	r4, r1
 8005022:	d809      	bhi.n	8005038 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8005024:	f1c4 030c 	rsb	r3, r4, #12
 8005028:	4622      	mov	r2, r4
 800502a:	18e9      	adds	r1, r5, r3
 800502c:	f000 f896 	bl	800515c <memcpy>
 8005030:	4620      	mov	r0, r4
 8005032:	46bd      	mov	sp, r7
 8005034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005038:	f04f 34ff 	mov.w	r4, #4294967295
 800503c:	e7f8      	b.n	8005030 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800503e:	bf00      	nop
 8005040:	08005678 	.word	0x08005678

08005044 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8005044:	3901      	subs	r1, #1
 8005046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800504a:	4607      	mov	r7, r0
 800504c:	4615      	mov	r5, r2
 800504e:	eb00 0801 	add.w	r8, r0, r1
 8005052:	4604      	mov	r4, r0
 8005054:	782a      	ldrb	r2, [r5, #0]
 8005056:	b392      	cbz	r2, 80050be <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8005058:	4544      	cmp	r4, r8
 800505a:	d22a      	bcs.n	80050b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800505c:	2a25      	cmp	r2, #37	; 0x25
 800505e:	d107      	bne.n	8005070 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8005060:	786a      	ldrb	r2, [r5, #1]
 8005062:	2a73      	cmp	r2, #115	; 0x73
 8005064:	d009      	beq.n	800507a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8005066:	2a7a      	cmp	r2, #122	; 0x7a
 8005068:	d012      	beq.n	8005090 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800506a:	2a25      	cmp	r2, #37	; 0x25
 800506c:	d100      	bne.n	8005070 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800506e:	3501      	adds	r5, #1
 8005070:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005074:	f804 2b01 	strb.w	r2, [r4], #1
 8005078:	e7ec      	b.n	8005054 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800507a:	f853 2b04 	ldr.w	r2, [r3], #4
 800507e:	3a01      	subs	r2, #1
 8005080:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005084:	b1c9      	cbz	r1, 80050ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8005086:	4544      	cmp	r4, r8
 8005088:	d013      	beq.n	80050b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800508a:	f804 1b01 	strb.w	r1, [r4], #1
 800508e:	e7f7      	b.n	8005080 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8005090:	78aa      	ldrb	r2, [r5, #2]
 8005092:	2a75      	cmp	r2, #117	; 0x75
 8005094:	d1ec      	bne.n	8005070 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8005096:	461e      	mov	r6, r3
 8005098:	eba8 0104 	sub.w	r1, r8, r4
 800509c:	f856 2b04 	ldr.w	r2, [r6], #4
 80050a0:	4620      	mov	r0, r4
 80050a2:	f7ff ffa3 	bl	8004fec <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	dd03      	ble.n	80050b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80050aa:	4404      	add	r4, r0
 80050ac:	3503      	adds	r5, #3
 80050ae:	4633      	mov	r3, r6
 80050b0:	e7d0      	b.n	8005054 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80050b2:	4621      	mov	r1, r4
 80050b4:	4638      	mov	r0, r7
 80050b6:	f7ff ff73 	bl	8004fa0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80050ba:	3502      	adds	r5, #2
 80050bc:	e7ca      	b.n	8005054 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80050be:	7022      	strb	r2, [r4, #0]
 80050c0:	1be0      	subs	r0, r4, r7
 80050c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080050c8 <_ZSt15get_new_handlerv>:
 80050c8:	4b02      	ldr	r3, [pc, #8]	; (80050d4 <_ZSt15get_new_handlerv+0xc>)
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	f3bf 8f5b 	dmb	ish
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	200001c0 	.word	0x200001c0

080050d8 <abort>:
 80050d8:	b508      	push	{r3, lr}
 80050da:	2006      	movs	r0, #6
 80050dc:	f000 f986 	bl	80053ec <raise>
 80050e0:	2001      	movs	r0, #1
 80050e2:	f7fc f815 	bl	8001110 <_exit>
	...

080050e8 <__errno>:
 80050e8:	4b01      	ldr	r3, [pc, #4]	; (80050f0 <__errno+0x8>)
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	2000000c 	.word	0x2000000c

080050f4 <__libc_init_array>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	4d0d      	ldr	r5, [pc, #52]	; (800512c <__libc_init_array+0x38>)
 80050f8:	4c0d      	ldr	r4, [pc, #52]	; (8005130 <__libc_init_array+0x3c>)
 80050fa:	1b64      	subs	r4, r4, r5
 80050fc:	10a4      	asrs	r4, r4, #2
 80050fe:	2600      	movs	r6, #0
 8005100:	42a6      	cmp	r6, r4
 8005102:	d109      	bne.n	8005118 <__libc_init_array+0x24>
 8005104:	4d0b      	ldr	r5, [pc, #44]	; (8005134 <__libc_init_array+0x40>)
 8005106:	4c0c      	ldr	r4, [pc, #48]	; (8005138 <__libc_init_array+0x44>)
 8005108:	f000 f99a 	bl	8005440 <_init>
 800510c:	1b64      	subs	r4, r4, r5
 800510e:	10a4      	asrs	r4, r4, #2
 8005110:	2600      	movs	r6, #0
 8005112:	42a6      	cmp	r6, r4
 8005114:	d105      	bne.n	8005122 <__libc_init_array+0x2e>
 8005116:	bd70      	pop	{r4, r5, r6, pc}
 8005118:	f855 3b04 	ldr.w	r3, [r5], #4
 800511c:	4798      	blx	r3
 800511e:	3601      	adds	r6, #1
 8005120:	e7ee      	b.n	8005100 <__libc_init_array+0xc>
 8005122:	f855 3b04 	ldr.w	r3, [r5], #4
 8005126:	4798      	blx	r3
 8005128:	3601      	adds	r6, #1
 800512a:	e7f2      	b.n	8005112 <__libc_init_array+0x1e>
 800512c:	0800568c 	.word	0x0800568c
 8005130:	0800568c 	.word	0x0800568c
 8005134:	0800568c 	.word	0x0800568c
 8005138:	08005694 	.word	0x08005694

0800513c <malloc>:
 800513c:	4b02      	ldr	r3, [pc, #8]	; (8005148 <malloc+0xc>)
 800513e:	4601      	mov	r1, r0
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	f000 b8a7 	b.w	8005294 <_malloc_r>
 8005146:	bf00      	nop
 8005148:	2000000c 	.word	0x2000000c

0800514c <free>:
 800514c:	4b02      	ldr	r3, [pc, #8]	; (8005158 <free+0xc>)
 800514e:	4601      	mov	r1, r0
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	f000 b833 	b.w	80051bc <_free_r>
 8005156:	bf00      	nop
 8005158:	2000000c 	.word	0x2000000c

0800515c <memcpy>:
 800515c:	440a      	add	r2, r1
 800515e:	4291      	cmp	r1, r2
 8005160:	f100 33ff 	add.w	r3, r0, #4294967295
 8005164:	d100      	bne.n	8005168 <memcpy+0xc>
 8005166:	4770      	bx	lr
 8005168:	b510      	push	{r4, lr}
 800516a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800516e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005172:	4291      	cmp	r1, r2
 8005174:	d1f9      	bne.n	800516a <memcpy+0xe>
 8005176:	bd10      	pop	{r4, pc}

08005178 <memmove>:
 8005178:	4288      	cmp	r0, r1
 800517a:	b510      	push	{r4, lr}
 800517c:	eb01 0402 	add.w	r4, r1, r2
 8005180:	d902      	bls.n	8005188 <memmove+0x10>
 8005182:	4284      	cmp	r4, r0
 8005184:	4623      	mov	r3, r4
 8005186:	d807      	bhi.n	8005198 <memmove+0x20>
 8005188:	1e43      	subs	r3, r0, #1
 800518a:	42a1      	cmp	r1, r4
 800518c:	d008      	beq.n	80051a0 <memmove+0x28>
 800518e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005192:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005196:	e7f8      	b.n	800518a <memmove+0x12>
 8005198:	4402      	add	r2, r0
 800519a:	4601      	mov	r1, r0
 800519c:	428a      	cmp	r2, r1
 800519e:	d100      	bne.n	80051a2 <memmove+0x2a>
 80051a0:	bd10      	pop	{r4, pc}
 80051a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051aa:	e7f7      	b.n	800519c <memmove+0x24>

080051ac <memset>:
 80051ac:	4402      	add	r2, r0
 80051ae:	4603      	mov	r3, r0
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d100      	bne.n	80051b6 <memset+0xa>
 80051b4:	4770      	bx	lr
 80051b6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ba:	e7f9      	b.n	80051b0 <memset+0x4>

080051bc <_free_r>:
 80051bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051be:	2900      	cmp	r1, #0
 80051c0:	d044      	beq.n	800524c <_free_r+0x90>
 80051c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c6:	9001      	str	r0, [sp, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f1a1 0404 	sub.w	r4, r1, #4
 80051ce:	bfb8      	it	lt
 80051d0:	18e4      	addlt	r4, r4, r3
 80051d2:	f000 f927 	bl	8005424 <__malloc_lock>
 80051d6:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <_free_r+0x94>)
 80051d8:	9801      	ldr	r0, [sp, #4]
 80051da:	6813      	ldr	r3, [r2, #0]
 80051dc:	b933      	cbnz	r3, 80051ec <_free_r+0x30>
 80051de:	6063      	str	r3, [r4, #4]
 80051e0:	6014      	str	r4, [r2, #0]
 80051e2:	b003      	add	sp, #12
 80051e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051e8:	f000 b922 	b.w	8005430 <__malloc_unlock>
 80051ec:	42a3      	cmp	r3, r4
 80051ee:	d908      	bls.n	8005202 <_free_r+0x46>
 80051f0:	6825      	ldr	r5, [r4, #0]
 80051f2:	1961      	adds	r1, r4, r5
 80051f4:	428b      	cmp	r3, r1
 80051f6:	bf01      	itttt	eq
 80051f8:	6819      	ldreq	r1, [r3, #0]
 80051fa:	685b      	ldreq	r3, [r3, #4]
 80051fc:	1949      	addeq	r1, r1, r5
 80051fe:	6021      	streq	r1, [r4, #0]
 8005200:	e7ed      	b.n	80051de <_free_r+0x22>
 8005202:	461a      	mov	r2, r3
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	b10b      	cbz	r3, 800520c <_free_r+0x50>
 8005208:	42a3      	cmp	r3, r4
 800520a:	d9fa      	bls.n	8005202 <_free_r+0x46>
 800520c:	6811      	ldr	r1, [r2, #0]
 800520e:	1855      	adds	r5, r2, r1
 8005210:	42a5      	cmp	r5, r4
 8005212:	d10b      	bne.n	800522c <_free_r+0x70>
 8005214:	6824      	ldr	r4, [r4, #0]
 8005216:	4421      	add	r1, r4
 8005218:	1854      	adds	r4, r2, r1
 800521a:	42a3      	cmp	r3, r4
 800521c:	6011      	str	r1, [r2, #0]
 800521e:	d1e0      	bne.n	80051e2 <_free_r+0x26>
 8005220:	681c      	ldr	r4, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	6053      	str	r3, [r2, #4]
 8005226:	4421      	add	r1, r4
 8005228:	6011      	str	r1, [r2, #0]
 800522a:	e7da      	b.n	80051e2 <_free_r+0x26>
 800522c:	d902      	bls.n	8005234 <_free_r+0x78>
 800522e:	230c      	movs	r3, #12
 8005230:	6003      	str	r3, [r0, #0]
 8005232:	e7d6      	b.n	80051e2 <_free_r+0x26>
 8005234:	6825      	ldr	r5, [r4, #0]
 8005236:	1961      	adds	r1, r4, r5
 8005238:	428b      	cmp	r3, r1
 800523a:	bf04      	itt	eq
 800523c:	6819      	ldreq	r1, [r3, #0]
 800523e:	685b      	ldreq	r3, [r3, #4]
 8005240:	6063      	str	r3, [r4, #4]
 8005242:	bf04      	itt	eq
 8005244:	1949      	addeq	r1, r1, r5
 8005246:	6021      	streq	r1, [r4, #0]
 8005248:	6054      	str	r4, [r2, #4]
 800524a:	e7ca      	b.n	80051e2 <_free_r+0x26>
 800524c:	b003      	add	sp, #12
 800524e:	bd30      	pop	{r4, r5, pc}
 8005250:	200001c4 	.word	0x200001c4

08005254 <sbrk_aligned>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	4e0e      	ldr	r6, [pc, #56]	; (8005290 <sbrk_aligned+0x3c>)
 8005258:	460c      	mov	r4, r1
 800525a:	6831      	ldr	r1, [r6, #0]
 800525c:	4605      	mov	r5, r0
 800525e:	b911      	cbnz	r1, 8005266 <sbrk_aligned+0x12>
 8005260:	f000 f88c 	bl	800537c <_sbrk_r>
 8005264:	6030      	str	r0, [r6, #0]
 8005266:	4621      	mov	r1, r4
 8005268:	4628      	mov	r0, r5
 800526a:	f000 f887 	bl	800537c <_sbrk_r>
 800526e:	1c43      	adds	r3, r0, #1
 8005270:	d00a      	beq.n	8005288 <sbrk_aligned+0x34>
 8005272:	1cc4      	adds	r4, r0, #3
 8005274:	f024 0403 	bic.w	r4, r4, #3
 8005278:	42a0      	cmp	r0, r4
 800527a:	d007      	beq.n	800528c <sbrk_aligned+0x38>
 800527c:	1a21      	subs	r1, r4, r0
 800527e:	4628      	mov	r0, r5
 8005280:	f000 f87c 	bl	800537c <_sbrk_r>
 8005284:	3001      	adds	r0, #1
 8005286:	d101      	bne.n	800528c <sbrk_aligned+0x38>
 8005288:	f04f 34ff 	mov.w	r4, #4294967295
 800528c:	4620      	mov	r0, r4
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	200001c8 	.word	0x200001c8

08005294 <_malloc_r>:
 8005294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005298:	1ccd      	adds	r5, r1, #3
 800529a:	f025 0503 	bic.w	r5, r5, #3
 800529e:	3508      	adds	r5, #8
 80052a0:	2d0c      	cmp	r5, #12
 80052a2:	bf38      	it	cc
 80052a4:	250c      	movcc	r5, #12
 80052a6:	2d00      	cmp	r5, #0
 80052a8:	4607      	mov	r7, r0
 80052aa:	db01      	blt.n	80052b0 <_malloc_r+0x1c>
 80052ac:	42a9      	cmp	r1, r5
 80052ae:	d905      	bls.n	80052bc <_malloc_r+0x28>
 80052b0:	230c      	movs	r3, #12
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	2600      	movs	r6, #0
 80052b6:	4630      	mov	r0, r6
 80052b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052bc:	4e2e      	ldr	r6, [pc, #184]	; (8005378 <_malloc_r+0xe4>)
 80052be:	f000 f8b1 	bl	8005424 <__malloc_lock>
 80052c2:	6833      	ldr	r3, [r6, #0]
 80052c4:	461c      	mov	r4, r3
 80052c6:	bb34      	cbnz	r4, 8005316 <_malloc_r+0x82>
 80052c8:	4629      	mov	r1, r5
 80052ca:	4638      	mov	r0, r7
 80052cc:	f7ff ffc2 	bl	8005254 <sbrk_aligned>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	4604      	mov	r4, r0
 80052d4:	d14d      	bne.n	8005372 <_malloc_r+0xde>
 80052d6:	6834      	ldr	r4, [r6, #0]
 80052d8:	4626      	mov	r6, r4
 80052da:	2e00      	cmp	r6, #0
 80052dc:	d140      	bne.n	8005360 <_malloc_r+0xcc>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	4631      	mov	r1, r6
 80052e2:	4638      	mov	r0, r7
 80052e4:	eb04 0803 	add.w	r8, r4, r3
 80052e8:	f000 f848 	bl	800537c <_sbrk_r>
 80052ec:	4580      	cmp	r8, r0
 80052ee:	d13a      	bne.n	8005366 <_malloc_r+0xd2>
 80052f0:	6821      	ldr	r1, [r4, #0]
 80052f2:	3503      	adds	r5, #3
 80052f4:	1a6d      	subs	r5, r5, r1
 80052f6:	f025 0503 	bic.w	r5, r5, #3
 80052fa:	3508      	adds	r5, #8
 80052fc:	2d0c      	cmp	r5, #12
 80052fe:	bf38      	it	cc
 8005300:	250c      	movcc	r5, #12
 8005302:	4629      	mov	r1, r5
 8005304:	4638      	mov	r0, r7
 8005306:	f7ff ffa5 	bl	8005254 <sbrk_aligned>
 800530a:	3001      	adds	r0, #1
 800530c:	d02b      	beq.n	8005366 <_malloc_r+0xd2>
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	442b      	add	r3, r5
 8005312:	6023      	str	r3, [r4, #0]
 8005314:	e00e      	b.n	8005334 <_malloc_r+0xa0>
 8005316:	6822      	ldr	r2, [r4, #0]
 8005318:	1b52      	subs	r2, r2, r5
 800531a:	d41e      	bmi.n	800535a <_malloc_r+0xc6>
 800531c:	2a0b      	cmp	r2, #11
 800531e:	d916      	bls.n	800534e <_malloc_r+0xba>
 8005320:	1961      	adds	r1, r4, r5
 8005322:	42a3      	cmp	r3, r4
 8005324:	6025      	str	r5, [r4, #0]
 8005326:	bf18      	it	ne
 8005328:	6059      	strne	r1, [r3, #4]
 800532a:	6863      	ldr	r3, [r4, #4]
 800532c:	bf08      	it	eq
 800532e:	6031      	streq	r1, [r6, #0]
 8005330:	5162      	str	r2, [r4, r5]
 8005332:	604b      	str	r3, [r1, #4]
 8005334:	4638      	mov	r0, r7
 8005336:	f104 060b 	add.w	r6, r4, #11
 800533a:	f000 f879 	bl	8005430 <__malloc_unlock>
 800533e:	f026 0607 	bic.w	r6, r6, #7
 8005342:	1d23      	adds	r3, r4, #4
 8005344:	1af2      	subs	r2, r6, r3
 8005346:	d0b6      	beq.n	80052b6 <_malloc_r+0x22>
 8005348:	1b9b      	subs	r3, r3, r6
 800534a:	50a3      	str	r3, [r4, r2]
 800534c:	e7b3      	b.n	80052b6 <_malloc_r+0x22>
 800534e:	6862      	ldr	r2, [r4, #4]
 8005350:	42a3      	cmp	r3, r4
 8005352:	bf0c      	ite	eq
 8005354:	6032      	streq	r2, [r6, #0]
 8005356:	605a      	strne	r2, [r3, #4]
 8005358:	e7ec      	b.n	8005334 <_malloc_r+0xa0>
 800535a:	4623      	mov	r3, r4
 800535c:	6864      	ldr	r4, [r4, #4]
 800535e:	e7b2      	b.n	80052c6 <_malloc_r+0x32>
 8005360:	4634      	mov	r4, r6
 8005362:	6876      	ldr	r6, [r6, #4]
 8005364:	e7b9      	b.n	80052da <_malloc_r+0x46>
 8005366:	230c      	movs	r3, #12
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	4638      	mov	r0, r7
 800536c:	f000 f860 	bl	8005430 <__malloc_unlock>
 8005370:	e7a1      	b.n	80052b6 <_malloc_r+0x22>
 8005372:	6025      	str	r5, [r4, #0]
 8005374:	e7de      	b.n	8005334 <_malloc_r+0xa0>
 8005376:	bf00      	nop
 8005378:	200001c4 	.word	0x200001c4

0800537c <_sbrk_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4d06      	ldr	r5, [pc, #24]	; (8005398 <_sbrk_r+0x1c>)
 8005380:	2300      	movs	r3, #0
 8005382:	4604      	mov	r4, r0
 8005384:	4608      	mov	r0, r1
 8005386:	602b      	str	r3, [r5, #0]
 8005388:	f7fb fecc 	bl	8001124 <_sbrk>
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	d102      	bne.n	8005396 <_sbrk_r+0x1a>
 8005390:	682b      	ldr	r3, [r5, #0]
 8005392:	b103      	cbz	r3, 8005396 <_sbrk_r+0x1a>
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	bd38      	pop	{r3, r4, r5, pc}
 8005398:	200001cc 	.word	0x200001cc

0800539c <_raise_r>:
 800539c:	291f      	cmp	r1, #31
 800539e:	b538      	push	{r3, r4, r5, lr}
 80053a0:	4604      	mov	r4, r0
 80053a2:	460d      	mov	r5, r1
 80053a4:	d904      	bls.n	80053b0 <_raise_r+0x14>
 80053a6:	2316      	movs	r3, #22
 80053a8:	6003      	str	r3, [r0, #0]
 80053aa:	f04f 30ff 	mov.w	r0, #4294967295
 80053ae:	bd38      	pop	{r3, r4, r5, pc}
 80053b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80053b2:	b112      	cbz	r2, 80053ba <_raise_r+0x1e>
 80053b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80053b8:	b94b      	cbnz	r3, 80053ce <_raise_r+0x32>
 80053ba:	4620      	mov	r0, r4
 80053bc:	f000 f830 	bl	8005420 <_getpid_r>
 80053c0:	462a      	mov	r2, r5
 80053c2:	4601      	mov	r1, r0
 80053c4:	4620      	mov	r0, r4
 80053c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053ca:	f000 b817 	b.w	80053fc <_kill_r>
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d00a      	beq.n	80053e8 <_raise_r+0x4c>
 80053d2:	1c59      	adds	r1, r3, #1
 80053d4:	d103      	bne.n	80053de <_raise_r+0x42>
 80053d6:	2316      	movs	r3, #22
 80053d8:	6003      	str	r3, [r0, #0]
 80053da:	2001      	movs	r0, #1
 80053dc:	e7e7      	b.n	80053ae <_raise_r+0x12>
 80053de:	2400      	movs	r4, #0
 80053e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80053e4:	4628      	mov	r0, r5
 80053e6:	4798      	blx	r3
 80053e8:	2000      	movs	r0, #0
 80053ea:	e7e0      	b.n	80053ae <_raise_r+0x12>

080053ec <raise>:
 80053ec:	4b02      	ldr	r3, [pc, #8]	; (80053f8 <raise+0xc>)
 80053ee:	4601      	mov	r1, r0
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	f7ff bfd3 	b.w	800539c <_raise_r>
 80053f6:	bf00      	nop
 80053f8:	2000000c 	.word	0x2000000c

080053fc <_kill_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4d07      	ldr	r5, [pc, #28]	; (800541c <_kill_r+0x20>)
 8005400:	2300      	movs	r3, #0
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	4611      	mov	r1, r2
 8005408:	602b      	str	r3, [r5, #0]
 800540a:	f7fb fe71 	bl	80010f0 <_kill>
 800540e:	1c43      	adds	r3, r0, #1
 8005410:	d102      	bne.n	8005418 <_kill_r+0x1c>
 8005412:	682b      	ldr	r3, [r5, #0]
 8005414:	b103      	cbz	r3, 8005418 <_kill_r+0x1c>
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	bd38      	pop	{r3, r4, r5, pc}
 800541a:	bf00      	nop
 800541c:	200001cc 	.word	0x200001cc

08005420 <_getpid_r>:
 8005420:	f7fb be5e 	b.w	80010e0 <_getpid>

08005424 <__malloc_lock>:
 8005424:	4801      	ldr	r0, [pc, #4]	; (800542c <__malloc_lock+0x8>)
 8005426:	f000 b809 	b.w	800543c <__retarget_lock_acquire_recursive>
 800542a:	bf00      	nop
 800542c:	200001d0 	.word	0x200001d0

08005430 <__malloc_unlock>:
 8005430:	4801      	ldr	r0, [pc, #4]	; (8005438 <__malloc_unlock+0x8>)
 8005432:	f000 b804 	b.w	800543e <__retarget_lock_release_recursive>
 8005436:	bf00      	nop
 8005438:	200001d0 	.word	0x200001d0

0800543c <__retarget_lock_acquire_recursive>:
 800543c:	4770      	bx	lr

0800543e <__retarget_lock_release_recursive>:
 800543e:	4770      	bx	lr

08005440 <_init>:
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005442:	bf00      	nop
 8005444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005446:	bc08      	pop	{r3}
 8005448:	469e      	mov	lr, r3
 800544a:	4770      	bx	lr

0800544c <_fini>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	bf00      	nop
 8005450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005452:	bc08      	pop	{r3}
 8005454:	469e      	mov	lr, r3
 8005456:	4770      	bx	lr
