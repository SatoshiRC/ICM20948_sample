
icm20948_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000681c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080069b8  080069b8  000169b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a98  08006a98  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006a98  08006a98  00016a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aa0  08006aa0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006aa0  08006aa0  00016aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006aa8  08006aa8  00016aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000090  08006b3c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08006b3c  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e3a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e84  00000000  00000000  00037efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0003ad80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  0003bd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a64b  00000000  00000000  0003cca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015049  00000000  00000000  000572eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b754  00000000  00000000  0006c334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107a88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a48  00000000  00000000  00107ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800699c 	.word	0x0800699c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800699c 	.word	0x0800699c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <_ZN8ICM209486whoamiEv>:
//
//ICM20948::~ICM20948() {
//	// TODO Auto-generated destructor stub
//}

uint8_t ICM20948::whoami(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af04      	add	r7, sp, #16
 8000e5a:	6078      	str	r0, [r7, #4]
	    uint8_t adress=0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Read(hi2c, (uint16_t)address<<1, REGISTER.WHO_AM_I, 1, &adress, 1, 1000);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6898      	ldr	r0, [r3, #8]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	7b1b      	ldrb	r3, [r3, #12]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	b299      	uxth	r1, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	f107 030f 	add.w	r3, r7, #15
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2301      	movs	r3, #1
 8000e86:	f002 fa37 	bl	80032f8 <HAL_I2C_Mem_Read>
		return adress;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]

	}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_ZN8ICM209488pwrmgmt1Eh>:

	uint8_t ICM20948::pwrmgmt1(uint8_t data){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af04      	add	r7, sp, #16
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	70fb      	strb	r3, [r7, #3]
	     HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.PWR_MGMT_1,1,&data,1,1000);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6898      	ldr	r0, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7b1b      	ldrb	r3, [r3, #12]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	b299      	uxth	r1, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	1cfb      	adds	r3, r7, #3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f002 f91e 	bl	8003104 <HAL_I2C_Mem_Write>
	     return 0;
 8000ec8:	2300      	movs	r3, #0
	}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <_ZN8ICM209488pwrmgmt2Eh>:
	uint8_t ICM20948::pwrmgmt2(uint8_t data){
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af04      	add	r7, sp, #16
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	70fb      	strb	r3, [r7, #3]
	     HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.PWR_MGMT_2,1,&data,1,1000);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6898      	ldr	r0, [r3, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7b1b      	ldrb	r3, [r3, #12]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b299      	uxth	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	789b      	ldrb	r3, [r3, #2]
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	1cfb      	adds	r3, r7, #3
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2301      	movs	r3, #1
 8000f02:	f002 f8ff 	bl	8003104 <HAL_I2C_Mem_Write>
	     return 0;
 8000f06:	2300      	movs	r3, #0
	}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_ZN8ICM209485resetEv>:
	void ICM20948::reset(){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af04      	add	r7, sp, #16
 8000f16:	6078      	str	r0, [r7, #4]
	    pwrmgmt1(ICM20948_BIT_H_RESET);
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffba 	bl	8000e94 <_ZN8ICM209488pwrmgmt1Eh>
	    HAL_Delay(100);
 8000f20:	2064      	movs	r0, #100	; 0x64
 8000f22:	f001 fca5 	bl	8002870 <HAL_Delay>
	    pwrmgmt1(ICM20948_BTT_CLK_PLL);
 8000f26:	2101      	movs	r1, #1
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ffb3 	bl	8000e94 <_ZN8ICM209488pwrmgmt1Eh>
	    HAL_Delay(100);
 8000f2e:	2064      	movs	r0, #100	; 0x64
 8000f30:	f001 fc9e 	bl	8002870 <HAL_Delay>
	    uint8_t buffer=ICM20948_BIT_INT_ACTL | ICM20948_BIT_INT_OPEN;
 8000f34:	23c0      	movs	r3, #192	; 0xc0
 8000f36:	73fb      	strb	r3, [r7, #15]
	    HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.INT_PIN_CFG,1,&buffer,1,1000);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6898      	ldr	r0, [r3, #8]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7b1b      	ldrb	r3, [r3, #12]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	b299      	uxth	r1, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	78db      	ldrb	r3, [r3, #3]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2301      	movs	r3, #1
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	f107 030f 	add.w	r3, r7, #15
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f002 f8d1 	bl	8003104 <HAL_I2C_Mem_Write>
		}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_ZN8ICM2094814changeUserBankEh>:
	bool ICM20948::changeUserBank(const uint8_t bank){
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b088      	sub	sp, #32
 8000f6e:	af04      	add	r7, sp, #16
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	70fb      	strb	r3, [r7, #3]
	    if(bank>3 || bank<0){
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d901      	bls.n	8000f80 <_ZN8ICM2094814changeUserBankEh+0x16>
	        return false;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e01b      	b.n	8000fb8 <_ZN8ICM2094814changeUserBankEh+0x4e>
	    }
	    uint8_t data=bank<<4;
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	73bb      	strb	r3, [r7, #14]
	    uint8_t res = HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.BANK_SEL,1,&data,1,1000);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6898      	ldr	r0, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7b1b      	ldrb	r3, [r3, #12]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	b299      	uxth	r1, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	791b      	ldrb	r3, [r3, #4]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	f107 030e 	add.w	r3, r7, #14
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	f002 f8a9 	bl	8003104 <HAL_I2C_Mem_Write>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
	    //printf("data=0x%02x\n",data);
	    //printf("res=%d\n",res);
	    return true;
 8000fb6:	2301      	movs	r3, #1
	}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh>:

	bool ICM20948::accelConfig(const AccelSensitivity fssel,const bool enableDLPF,const uint8_t configDLPF){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	4608      	mov	r0, r1
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	70fb      	strb	r3, [r7, #3]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	70bb      	strb	r3, [r7, #2]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	707b      	strb	r3, [r7, #1]

	    _accelsensitivity=fssel;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	78fa      	ldrb	r2, [r7, #3]
 8000fde:	735a      	strb	r2, [r3, #13]
	    if(configDLPF>7 || configDLPF<0){
 8000fe0:	787b      	ldrb	r3, [r7, #1]
 8000fe2:	2b07      	cmp	r3, #7
 8000fe4:	d901      	bls.n	8000fea <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh+0x2a>
	        return false;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e038      	b.n	800105c <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh+0x9c>
	    }
	    uint8_t data=0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
	    data |=configDLPF<<3;
 8000fee:	787b      	ldrb	r3, [r7, #1]
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	b25a      	sxtb	r2, r3
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
	    data |=(uint8_t)fssel<<1;
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	b25a      	sxtb	r2, r3
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b25b      	sxtb	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	73fb      	strb	r3, [r7, #15]
	    data |=enableDLPF;
 8001012:	78ba      	ldrb	r2, [r7, #2]
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	4313      	orrs	r3, r2
 8001018:	b2db      	uxtb	r3, r3
 800101a:	73fb      	strb	r3, [r7, #15]
	    changeUserBank(2);
 800101c:	2102      	movs	r1, #2
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffa3 	bl	8000f6a <_ZN8ICM2094814changeUserBankEh>

	    data=HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.ACCEL_CONFIG,1,&data,1,1000);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6898      	ldr	r0, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7b1b      	ldrb	r3, [r3, #12]
 800102c:	b29b      	uxth	r3, r3
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	b299      	uxth	r1, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	795b      	ldrb	r3, [r3, #5]
 8001036:	b29a      	uxth	r2, r3
 8001038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	f107 030f 	add.w	r3, r7, #15
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	f002 f85b 	bl	8003104 <HAL_I2C_Mem_Write>
 800104e:	4603      	mov	r3, r0
 8001050:	73fb      	strb	r3, [r7, #15]
	    //printf("data=%d\n",data);
	    changeUserBank(0);
 8001052:	2100      	movs	r1, #0
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff88 	bl	8000f6a <_ZN8ICM2094814changeUserBankEh>
	    return true;
 800105a:	2301      	movs	r3, #1

	}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <_ZN8ICM2094810gyroConfigENS_15GyroSensitivityEbh>:
	bool ICM20948::gyroConfig(const GyroSensitivity fssel,const bool enableDLPF,const uint8_t configDLPF){
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af04      	add	r7, sp, #16
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	4608      	mov	r0, r1
 800106e:	4611      	mov	r1, r2
 8001070:	461a      	mov	r2, r3
 8001072:	4603      	mov	r3, r0
 8001074:	70fb      	strb	r3, [r7, #3]
 8001076:	460b      	mov	r3, r1
 8001078:	70bb      	strb	r3, [r7, #2]
 800107a:	4613      	mov	r3, r2
 800107c:	707b      	strb	r3, [r7, #1]

		_gyrosensitivity=fssel;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	78fa      	ldrb	r2, [r7, #3]
 8001082:	739a      	strb	r2, [r3, #14]
		if(configDLPF>7||configDLPF<0){
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b07      	cmp	r3, #7
 8001088:	d901      	bls.n	800108e <_ZN8ICM2094810gyroConfigENS_15GyroSensitivityEbh+0x2a>
			return false;
 800108a:	2300      	movs	r3, #0
 800108c:	e036      	b.n	80010fc <_ZN8ICM2094810gyroConfigENS_15GyroSensitivityEbh+0x98>
		}
		uint8_t data=0;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
		data |=configDLPF<<3;
 8001092:	787b      	ldrb	r3, [r7, #1]
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	b25a      	sxtb	r2, r3
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	b25b      	sxtb	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	73fb      	strb	r3, [r7, #15]
		data |=(uint8_t)fssel<<1;
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	73fb      	strb	r3, [r7, #15]
		data |=enableDLPF;
 80010b6:	78ba      	ldrb	r2, [r7, #2]
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	73fb      	strb	r3, [r7, #15]
		changeUserBank(2);
 80010c0:	2102      	movs	r1, #2
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff51 	bl	8000f6a <_ZN8ICM2094814changeUserBankEh>

		HAL_I2C_Mem_Write(hi2c,(uint16_t)address<<1,REGISTER.GYRO_CONFIG,1,&data,1,1000);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6898      	ldr	r0, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7b1b      	ldrb	r3, [r3, #12]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	b299      	uxth	r1, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	799b      	ldrb	r3, [r3, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	2301      	movs	r3, #1
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	f107 030f 	add.w	r3, r7, #15
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2301      	movs	r3, #1
 80010ee:	f002 f809 	bl	8003104 <HAL_I2C_Mem_Write>
		changeUserBank(0);
 80010f2:	2100      	movs	r1, #0
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff38 	bl	8000f6a <_ZN8ICM2094814changeUserBankEh>
		return true;
 80010fa:	2301      	movs	r3, #1

	}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_ZN8ICM2094814get6ValueBurstERSt5arrayIfLj3EES2_>:
			value[n] = (float)((int16_t)buffer[2*n]<<8 | (int16_t)buffer[2*n+1])/GYRO_SENSITIVITY[(uint8_t)_gyrosensitivity];
		}
	}
float debug;
int16_t ddd;
	void ICM20948::get6ValueBurst(std::array<float,3> &accel, std::array<float,3> &gyro){
 8001104:	b580      	push	{r7, lr}
 8001106:	ed2d 8b02 	vpush	{d8}
 800110a:	b08e      	sub	sp, #56	; 0x38
 800110c:	af04      	add	r7, sp, #16
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
		const uint8_t headRegAddr = 0x2d;
 8001114:	232d      	movs	r3, #45	; 0x2d
 8001116:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t buffer[12]={};
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]

		HAL_I2C_Mem_Read(hi2c, (uint16_t)address<<1,headRegAddr,1,buffer,12,1000);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6898      	ldr	r0, [r3, #8]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	7b1b      	ldrb	r3, [r3, #12]
 8001130:	b29b      	uxth	r3, r3
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	b299      	uxth	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	230c      	movs	r3, #12
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	222d      	movs	r2, #45	; 0x2d
 800114a:	f002 f8d5 	bl	80032f8 <HAL_I2C_Mem_Read>

		for(uint8_t n=0;n<3;n++){
 800114e:	2300      	movs	r3, #0
 8001150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001158:	2b02      	cmp	r3, #2
 800115a:	d832      	bhi.n	80011c2 <_ZN8ICM2094814get6ValueBurstERSt5arrayIfLj3EES2_+0xbe>
			int16_t tmp = (int16_t)buffer[2*n]<<8 | (int16_t)buffer[2*n+1];
 800115c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	3328      	adds	r3, #40	; 0x28
 8001164:	443b      	add	r3, r7
 8001166:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b21a      	sxth	r2, r3
 800116e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	3301      	adds	r3, #1
 8001176:	3328      	adds	r3, #40	; 0x28
 8001178:	443b      	add	r3, r7
 800117a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	847b      	strh	r3, [r7, #34]	; 0x22
			accel[n] = (float)(tmp)/ACCEL_SENSITIVITY[(uint8_t)_accelsensitivity];
 8001184:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	7b5b      	ldrb	r3, [r3, #13]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	3304      	adds	r3, #4
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	ed93 8a00 	vldr	s16, [r3]
 80011a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011a4:	4619      	mov	r1, r3
 80011a6:	68b8      	ldr	r0, [r7, #8]
 80011a8:	f000 f888 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 80011ac:	4603      	mov	r3, r0
 80011ae:	eec8 7a88 	vdiv.f32	s15, s17, s16
 80011b2:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t n=0;n<3;n++){
 80011b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ba:	3301      	adds	r3, #1
 80011bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011c0:	e7c8      	b.n	8001154 <_ZN8ICM2094814get6ValueBurstERSt5arrayIfLj3EES2_+0x50>
		}
		for(uint8_t n=0;n<3;n++){
 80011c2:	2300      	movs	r3, #0
 80011c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d833      	bhi.n	8001238 <_ZN8ICM2094814get6ValueBurstERSt5arrayIfLj3EES2_+0x134>
			int16_t tmp = (int16_t)buffer[2*n+6]<<8 | (int16_t)buffer[2*n+1+6];
 80011d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011d4:	3303      	adds	r3, #3
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	3328      	adds	r3, #40	; 0x28
 80011da:	443b      	add	r3, r7
 80011dc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	3307      	adds	r3, #7
 80011ec:	3328      	adds	r3, #40	; 0x28
 80011ee:	443b      	add	r3, r7
 80011f0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	843b      	strh	r3, [r7, #32]
			gyro[n] = (float)(tmp)/GYRO_SENSITIVITY[(uint8_t)_gyrosensitivity];
 80011fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	7b9b      	ldrb	r3, [r3, #14]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	3308      	adds	r3, #8
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	ed93 8a00 	vldr	s16, [r3]
 8001216:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800121a:	4619      	mov	r1, r3
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f84d 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001222:	4603      	mov	r3, r0
 8001224:	eec8 7a88 	vdiv.f32	s15, s17, s16
 8001228:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t n=0;n<3;n++){
 800122c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001230:	3301      	adds	r3, #1
 8001232:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001236:	e7c7      	b.n	80011c8 <_ZN8ICM2094814get6ValueBurstERSt5arrayIfLj3EES2_+0xc4>
		}
	}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	ecbd 8b02 	vpop	{d8}
 8001242:	bd80      	pop	{r7, pc}

08001244 <_ZN8ICM2094812intPinConfigEh>:

	void ICM20948::intPinConfig(uint8_t value){
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af04      	add	r7, sp, #16
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(hi2c,(uint16_t)address<<1,REGISTER.INT_PIN_CFG,1,&value,1,1000);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6898      	ldr	r0, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7b1b      	ldrb	r3, [r3, #12]
 8001258:	b29b      	uxth	r3, r3
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	b299      	uxth	r1, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	78db      	ldrb	r3, [r3, #3]
 8001262:	b29a      	uxth	r2, r3
 8001264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001268:	9302      	str	r3, [sp, #8]
 800126a:	2301      	movs	r3, #1
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	1cfb      	adds	r3, r7, #3
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2301      	movs	r3, #1
 8001274:	f001 ff46 	bl	8003104 <HAL_I2C_Mem_Write>

	}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZN8ICM209489intenableEh>:

	void ICM20948::intenable(uint8_t value){
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af04      	add	r7, sp, #16
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(hi2c,(uint16_t)address<<1,REGISTER.INT_ENABLE,1,&value,1,1000);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6898      	ldr	r0, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7b1b      	ldrb	r3, [r3, #12]
 8001294:	b29b      	uxth	r3, r3
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	b299      	uxth	r1, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	79db      	ldrb	r3, [r3, #7]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	2301      	movs	r3, #1
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	1cfb      	adds	r3, r7, #3
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	f001 ff28 	bl	8003104 <HAL_I2C_Mem_Write>
	}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_ZNSt5arrayIfLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6839      	ldr	r1, [r7, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f805 	bl	80012da <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a37      	ldr	r2, [pc, #220]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <MX_GPIO_Init+0xfc>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <MX_GPIO_Init+0xfc>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a29      	ldr	r2, [pc, #164]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a22      	ldr	r2, [pc, #136]	; (80013f4 <MX_GPIO_Init+0xfc>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	2120      	movs	r1, #32
 8001382:	481d      	ldr	r0, [pc, #116]	; (80013f8 <MX_GPIO_Init+0x100>)
 8001384:	f001 fd2e 	bl	8002de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800138e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4817      	ldr	r0, [pc, #92]	; (80013fc <MX_GPIO_Init+0x104>)
 80013a0:	f001 fb9c 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013a4:	2320      	movs	r3, #32
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	480f      	ldr	r0, [pc, #60]	; (80013f8 <MX_GPIO_Init+0x100>)
 80013bc:	f001 fb8e 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4809      	ldr	r0, [pc, #36]	; (80013fc <MX_GPIO_Init+0x104>)
 80013d8:	f001 fb80 	bl	8002adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2028      	movs	r0, #40	; 0x28
 80013e2:	f001 fb44 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013e6:	2028      	movs	r0, #40	; 0x28
 80013e8:	f001 fb5d 	bl	8002aa6 <HAL_NVIC_EnableIRQ>

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40020800 	.word	0x40020800

08001400 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_I2C1_Init+0x50>)
 8001406:	4a13      	ldr	r2, [pc, #76]	; (8001454 <MX_I2C1_Init+0x54>)
 8001408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_I2C1_Init+0x50>)
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <MX_I2C1_Init+0x58>)
 800140e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_I2C1_Init+0x50>)
 800141e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001422:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <MX_I2C1_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_I2C1_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_I2C1_Init+0x50>)
 800143e:	f001 fd1d 	bl	8002e7c <HAL_I2C_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001448:	f000 f8ce 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200000ac 	.word	0x200000ac
 8001454:	40005400 	.word	0x40005400
 8001458:	000186a0 	.word	0x000186a0

0800145c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_I2C_MspInit+0x84>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d12c      	bne.n	80014d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_I2C_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <HAL_I2C_MspInit+0x88>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_I2C_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800149a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a0:	2312      	movs	r3, #18
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ac:	2304      	movs	r3, #4
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	480c      	ldr	r0, [pc, #48]	; (80014e8 <HAL_I2C_MspInit+0x8c>)
 80014b8:	f001 fb10 	bl	8002adc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_I2C_MspInit+0x88>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_I2C_MspInit+0x88>)
 80014c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_I2C_MspInit+0x88>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40005400 	.word	0x40005400
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020400 	.word	0x40020400

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f0:	f001 f94c 	bl	800278c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f4:	f000 f80e 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f8:	f7ff fefe 	bl	80012f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014fc:	f000 f95c 	bl	80017b8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001500:	f7ff ff7e 	bl	8001400 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001504:	f000 f8e6 	bl	80016d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  init();
 8001508:	f000 fa42 	bl	8001990 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 800150c:	f000 fa94 	bl	8001a38 <loop>
 8001510:	e7fc      	b.n	800150c <main+0x20>
	...

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b094      	sub	sp, #80	; 0x50
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2230      	movs	r2, #48	; 0x30
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fa32 	bl	800698c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <SystemClock_Config+0xcc>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <SystemClock_Config+0xcc>)
 8001542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <SystemClock_Config+0xcc>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <SystemClock_Config+0xd0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <SystemClock_Config+0xd0>)
 800155e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <SystemClock_Config+0xd0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001570:	2302      	movs	r3, #2
 8001572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001574:	2301      	movs	r3, #1
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001578:	2310      	movs	r3, #16
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157c:	2302      	movs	r3, #2
 800157e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001580:	2300      	movs	r3, #0
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001584:	2310      	movs	r3, #16
 8001586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001588:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800158c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800158e:	2304      	movs	r3, #4
 8001590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001592:	2304      	movs	r3, #4
 8001594:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001596:	f107 0320 	add.w	r3, r7, #32
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fc2e 	bl	8003dfc <HAL_RCC_OscConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015a6:	f000 f81f 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015aa:	230f      	movs	r3, #15
 80015ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ae:	2302      	movs	r3, #2
 80015b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2102      	movs	r1, #2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fe90 	bl	80042ec <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015d2:	f000 f809 	bl	80015e8 <Error_Handler>
  }
}
 80015d6:	bf00      	nop
 80015d8:	3750      	adds	r7, #80	; 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>
	...

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <HAL_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <HAL_MspInit+0x4c>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_MspInit+0x4c>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_MspInit+0x4c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_MspInit+0x4c>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_MspInit+0x4c>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001632:	2007      	movs	r0, #7
 8001634:	f001 fa10 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <NMI_Handler+0x4>

0800164a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <MemManage_Handler+0x4>

08001656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <UsageFault_Handler+0x4>

08001662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001690:	f001 f8ce 	bl	8002830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800169c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016a0:	f001 fbd4 	bl	8002e4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016a8:	f001 fbd0 	bl	8002e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <SystemInit+0x20>)
 80016b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <SystemInit+0x20>)
 80016bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e8:	463b      	mov	r3, r7
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <MX_TIM1_Init+0x98>)
 80016f2:	4a1f      	ldr	r2, [pc, #124]	; (8001770 <MX_TIM1_Init+0x9c>)
 80016f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <MX_TIM1_Init+0x98>)
 80016f8:	2253      	movs	r2, #83	; 0x53
 80016fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <MX_TIM1_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <MX_TIM1_Init+0x98>)
 8001704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001708:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <MX_TIM1_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_TIM1_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_TIM1_Init+0x98>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800171c:	4813      	ldr	r0, [pc, #76]	; (800176c <MX_TIM1_Init+0x98>)
 800171e:	f003 f805 	bl	800472c <HAL_TIM_Base_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001728:	f7ff ff5e 	bl	80015e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <MX_TIM1_Init+0x98>)
 800173a:	f003 f8a1 	bl	8004880 <HAL_TIM_ConfigClockSource>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001744:	f7ff ff50 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_TIM1_Init+0x98>)
 8001756:	f003 fa75 	bl	8004c44 <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001760:	f7ff ff42 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000100 	.word	0x20000100
 8001770:	40010000 	.word	0x40010000

08001774 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_TIM_Base_MspInit+0x3c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10d      	bne.n	80017a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_TIM_Base_MspInit+0x40>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_TIM_Base_MspInit+0x40>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <HAL_TIM_Base_MspInit+0x40>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40010000 	.word	0x40010000
 80017b4:	40023800 	.word	0x40023800

080017b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <MX_USART2_UART_Init+0x50>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017f0:	f003 fa96 	bl	8004d20 <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017fa:	f7ff fef5 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000148 	.word	0x20000148
 8001808:	40004400 	.word	0x40004400

0800180c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a19      	ldr	r2, [pc, #100]	; (8001890 <HAL_UART_MspInit+0x84>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d12b      	bne.n	8001886 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_UART_MspInit+0x88>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a17      	ldr	r2, [pc, #92]	; (8001894 <HAL_UART_MspInit+0x88>)
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_UART_MspInit+0x88>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_UART_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_UART_MspInit+0x88>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_UART_MspInit+0x88>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001866:	230c      	movs	r3, #12
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001876:	2307      	movs	r3, #7
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_UART_MspInit+0x8c>)
 8001882:	f001 f92b 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	; 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40004400 	.word	0x40004400
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000

0800189c <_ZN8ICM20948Ut_C1Ev>:
		SENS_500,
		SENS_1000,
		SENS_2000,
	};

	const struct{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2206      	movs	r2, #6
 80018ae:	705a      	strb	r2, [r3, #1]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2207      	movs	r2, #7
 80018b4:	709a      	strb	r2, [r3, #2]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	220f      	movs	r2, #15
 80018ba:	70da      	strb	r2, [r3, #3]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	227f      	movs	r2, #127	; 0x7f
 80018c0:	711a      	strb	r2, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2214      	movs	r2, #20
 80018c6:	715a      	strb	r2, [r3, #5]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	719a      	strb	r2, [r3, #6]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2211      	movs	r2, #17
 80018d2:	71da      	strb	r2, [r3, #7]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE>:

	enum class Address:uint8_t{
		LOW=0x68,
		HIGH=0x69,
	};
	ICM20948(I2C_HandleTypeDef *hi2c,Address address)
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	71fb      	strb	r3, [r7, #7]
			:hi2c(hi2c),address(address){};
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ffd1 	bl	800189c <_ZN8ICM20948Ut_C1Ev>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	79fa      	ldrb	r2, [r7, #7]
 8001904:	731a      	strb	r2, [r3, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4a09      	ldr	r2, [pc, #36]	; (8001930 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE+0x4c>)
 800190a:	f103 0410 	add.w	r4, r3, #16
 800190e:	4613      	mov	r3, r2
 8001910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE+0x50>)
 800191a:	f103 0420 	add.w	r4, r3, #32
 800191e:	4613      	mov	r3, r2
 8001920:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001922:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	080069b8 	.word	0x080069b8
 8001934:	080069c8 	.word	0x080069c8

08001938 <_ZN13TIM_StopWatchC1EP17TIM_HandleTypeDefm>:

#include "main.h"

class TIM_StopWatch {
public:
	TIM_StopWatch(TIM_HandleTypeDef *htim=nullptr, uint32_t frequence = 1000000)
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
	:htim(htim),
	 frequence(frequence)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	741a      	strb	r2, [r3, #16]
	{
	}
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	ed87 0a01 	vstr	s0, [r7, #4]
 800197a:	ed97 0a01 	vldr	s0, [r7, #4]
 800197e:	f003 fd9f 	bl	80054c0 <asinf>
 8001982:	eef0 7a40 	vmov.f32	s15, s0
 8001986:	eeb0 0a67 	vmov.f32	s0, s15
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <init>:
float gyroY;
float gyroZ;

/* Variable End */

void init(void){
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
   stopwatch.start();
 8001996:	4825      	ldr	r0, [pc, #148]	; (8001a2c <init+0x9c>)
 8001998:	f003 fc84 	bl	80052a4 <_ZN13TIM_StopWatch5startEv>
	if(icm20948.whoami() == 0xea){
 800199c:	4824      	ldr	r0, [pc, #144]	; (8001a30 <init+0xa0>)
 800199e:	f7ff fa59 	bl	8000e54 <_ZN8ICM209486whoamiEv>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2bea      	cmp	r3, #234	; 0xea
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <init+0x2c>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	2120      	movs	r1, #32
 80019b6:	481f      	ldr	r0, [pc, #124]	; (8001a34 <init+0xa4>)
 80019b8:	f001 fa14 	bl	8002de4 <HAL_GPIO_WritePin>
	}
	int result = icm20948.whoami();
 80019bc:	481c      	ldr	r0, [pc, #112]	; (8001a30 <init+0xa0>)
 80019be:	f7ff fa49 	bl	8000e54 <_ZN8ICM209486whoamiEv>
 80019c2:	4603      	mov	r3, r0
 80019c4:	607b      	str	r3, [r7, #4]
//		    result=whoami();
		    if(result==0xea){
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2bea      	cmp	r3, #234	; 0xea
 80019ca:	d12b      	bne.n	8001a24 <init+0x94>
//		        printf("ICM20948 confirm\n");
		    	icm20948.reset();
 80019cc:	4818      	ldr	r0, [pc, #96]	; (8001a30 <init+0xa0>)
 80019ce:	f7ff fa9f 	bl	8000f10 <_ZN8ICM209485resetEv>
		    	icm20948.pwrmgmt2(ICM20948_DISABLE_SENSORS);
 80019d2:	213f      	movs	r1, #63	; 0x3f
 80019d4:	4816      	ldr	r0, [pc, #88]	; (8001a30 <init+0xa0>)
 80019d6:	f7ff fa7c 	bl	8000ed2 <_ZN8ICM209488pwrmgmt2Eh>
		    	icm20948.accelConfig(ICM20948::AccelSensitivity::SENS_2G,false,0);
 80019da:	2300      	movs	r3, #0
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	4813      	ldr	r0, [pc, #76]	; (8001a30 <init+0xa0>)
 80019e2:	f7ff faed 	bl	8000fc0 <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh>
		    	icm20948.gyroConfig(ICM20948::GyroSensitivity::SENS_500, false, 0);
 80019e6:	2300      	movs	r3, #0
 80019e8:	2200      	movs	r2, #0
 80019ea:	2101      	movs	r1, #1
 80019ec:	4810      	ldr	r0, [pc, #64]	; (8001a30 <init+0xa0>)
 80019ee:	f7ff fb39 	bl	8001064 <_ZN8ICM2094810gyroConfigENS_15GyroSensitivityEbh>
		    	icm20948.pwrmgmt2(ICM20948_ENABLE_SENSORS);
 80019f2:	2100      	movs	r1, #0
 80019f4:	480e      	ldr	r0, [pc, #56]	; (8001a30 <init+0xa0>)
 80019f6:	f7ff fa6c 	bl	8000ed2 <_ZN8ICM209488pwrmgmt2Eh>
		    	icm20948.intPinConfig(0b01110000);
 80019fa:	2170      	movs	r1, #112	; 0x70
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <init+0xa0>)
 80019fe:	f7ff fc21 	bl	8001244 <_ZN8ICM2094812intPinConfigEh>
		    	icm20948.intenable();
 8001a02:	2101      	movs	r1, #1
 8001a04:	480a      	ldr	r0, [pc, #40]	; (8001a30 <init+0xa0>)
 8001a06:	f7ff fc3b 	bl	8001280 <_ZN8ICM209489intenableEh>

		        HAL_Delay(100);
 8001a0a:	2064      	movs	r0, #100	; 0x64
 8001a0c:	f000 ff30 	bl	8002870 <HAL_Delay>
//		        printf("initialized\n");

		        icm20948.changeUserBank(2);
 8001a10:	2102      	movs	r1, #2
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <init+0xa0>)
 8001a14:	f7ff faa9 	bl	8000f6a <_ZN8ICM2094814changeUserBankEh>
		        uint8_t buffer2=0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	70fb      	strb	r3, [r7, #3]
		        //HAL_I2C_Mem_Read(&hi2c1, 0x68<<1,ICM20948::REGISTER.ACCEL_CONFIG,1,&buffer2,1,1000);
		        icm20948.changeUserBank(0);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4804      	ldr	r0, [pc, #16]	; (8001a30 <init+0xa0>)
 8001a20:	f7ff faa3 	bl	8000f6a <_ZN8ICM2094814changeUserBankEh>
		    }


}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200001c8 	.word	0x200001c8
 8001a30:	2000018c 	.word	0x2000018c
 8001a34:	40020000 	.word	0x40020000

08001a38 <loop>:

void loop(void){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
stopwatch.update();
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <loop+0x10>)
 8001a3e:	f003 fc44 	bl	80052ca <_ZN13TIM_StopWatch6updateEv>
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200001c8 	.word	0x200001c8
 8001a4c:	00000000 	.word	0x00000000

08001a50 <HAL_GPIO_EXTI_Callback>:

float gyro;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a54:	ed2d 8b02 	vpush	{d8}
 8001a58:	b08e      	sub	sp, #56	; 0x38
 8001a5a:	af04      	add	r7, sp, #16
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	80fb      	strh	r3, [r7, #6]
//	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
	if (GPIO_Pin == GPIO_PIN_11){
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a66:	f040 8596 	bne.w	8002596 <HAL_GPIO_EXTI_Callback+0xb46>
//		float fSize=0;
//		quaternion qDot;
//		const float beta=std::sqrt(3/4.0)*M_PI*(5.0/180.0);


		preTime=time;
 8001a6a:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a61      	ldr	r2, [pc, #388]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001a70:	6013      	str	r3, [r2, #0]
		stopwatch.update();
 8001a72:	4861      	ldr	r0, [pc, #388]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001a74:	f003 fc29 	bl	80052ca <_ZN13TIM_StopWatch6updateEv>
		time=stopwatch.getTimeMS();
 8001a78:	485f      	ldr	r0, [pc, #380]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001a7a:	f003 fc63 	bl	8005344 <_ZN13TIM_StopWatch9getTimeMSEv>
 8001a7e:	eef0 7a40 	vmov.f32	s15, s0
 8001a82:	4b5b      	ldr	r3, [pc, #364]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001a84:	edc3 7a00 	vstr	s15, [r3]
		stepTime=time-preTime;
 8001a88:	4b59      	ldr	r3, [pc, #356]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001a8a:	ed93 7a00 	vldr	s14, [r3]
 8001a8e:	4b59      	ldr	r3, [pc, #356]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a98:	4b58      	ldr	r3, [pc, #352]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001a9a:	edc3 7a00 	vstr	s15, [r3]

		icm20948.get6ValueBurst(accelValue, gyroValue);
 8001a9e:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001aa0:	4958      	ldr	r1, [pc, #352]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001aa2:	4859      	ldr	r0, [pc, #356]	; (8001c08 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001aa4:	f7ff fb2e 	bl	8001104 <_ZN8ICM2094814get6ValueBurstERSt5arrayIfLj3EES2_>
		float accelSize=std::sqrt(std::pow(accelValue[0],2)+std::pow(accelValue[1],2)+std::pow(accelValue[2],2));
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4856      	ldr	r0, [pc, #344]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001aac:	f7ff fc06 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8001abc:	f000 fd7e 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ac0:	ec55 4b10 	vmov	r4, r5, d0
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	484f      	ldr	r0, [pc, #316]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001ac8:	f7ff fbf8 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001acc:	4603      	mov	r3, r0
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	2002      	movs	r0, #2
 8001ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad8:	f000 fd70 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001adc:	ec53 2b10 	vmov	r2, r3, d0
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	f7fe fb7e 	bl	80001e4 <__adddf3>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4614      	mov	r4, r2
 8001aee:	461d      	mov	r5, r3
 8001af0:	2102      	movs	r1, #2
 8001af2:	4844      	ldr	r0, [pc, #272]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001af4:	f7ff fbe2 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001af8:	4603      	mov	r3, r0
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	2002      	movs	r0, #2
 8001b00:	eeb0 0a67 	vmov.f32	s0, s15
 8001b04:	f000 fd5a 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b08:	ec53 2b10 	vmov	r2, r3, d0
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	4629      	mov	r1, r5
 8001b10:	f7fe fb68 	bl	80001e4 <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	ec43 2b17 	vmov	d7, r2, r3
 8001b1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b20:	eef0 0a67 	vmov.f32	s1, s15
 8001b24:	f003 fca0 	bl	8005468 <sqrt>
 8001b28:	ec53 2b10 	vmov	r2, r3, d0
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7fe ffbe 	bl	8000ab0 <__aeabi_d2f>
 8001b34:	4603      	mov	r3, r0
 8001b36:	61fb      	str	r3, [r7, #28]
		if(accelSize!=0){
 8001b38:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b44:	d026      	beq.n	8001b94 <HAL_GPIO_EXTI_Callback+0x144>
		accelValue[0]/=accelSize;
 8001b46:	2100      	movs	r1, #0
 8001b48:	482e      	ldr	r0, [pc, #184]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001b4a:	f7ff fbb7 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	edd3 6a00 	vldr	s13, [r3]
 8001b54:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b5c:	edc3 7a00 	vstr	s15, [r3]
		accelValue[1]/=accelSize;
 8001b60:	2101      	movs	r1, #1
 8001b62:	4828      	ldr	r0, [pc, #160]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001b64:	f7ff fbaa 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	edd3 6a00 	vldr	s13, [r3]
 8001b6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b76:	edc3 7a00 	vstr	s15, [r3]
		accelValue[2]/=accelSize;
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	4821      	ldr	r0, [pc, #132]	; (8001c04 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001b7e:	f7ff fb9d 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001b82:	4603      	mov	r3, r0
 8001b84:	edd3 6a00 	vldr	s13, [r3]
 8001b88:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b90:	edc3 7a00 	vstr	s15, [r3]
		}

		for(auto& it:gyroValue){
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001b96:	61bb      	str	r3, [r7, #24]
 8001b98:	69b8      	ldr	r0, [r7, #24]
 8001b9a:	f000 fd30 	bl	80025fe <_ZNSt5arrayIfLj3EE5beginEv>
 8001b9e:	6278      	str	r0, [r7, #36]	; 0x24
 8001ba0:	69b8      	ldr	r0, [r7, #24]
 8001ba2:	f000 fd38 	bl	8002616 <_ZNSt5arrayIfLj3EE3endEv>
 8001ba6:	6178      	str	r0, [r7, #20]
 8001ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d02d      	beq.n	8001c0c <HAL_GPIO_EXTI_Callback+0x1bc>
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	613b      	str	r3, [r7, #16]
			it *= M_PI/180.0;
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fc71 	bl	80004a0 <__aeabi_f2d>
 8001bbe:	a30a      	add	r3, pc, #40	; (adr r3, 8001be8 <HAL_GPIO_EXTI_Callback+0x198>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fcc4 	bl	8000550 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7fe ff6e 	bl	8000ab0 <__aeabi_d2f>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	601a      	str	r2, [r3, #0]
		for(auto& it:gyroValue){
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	3304      	adds	r3, #4
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
 8001be0:	e7e2      	b.n	8001ba8 <HAL_GPIO_EXTI_Callback+0x158>
 8001be2:	bf00      	nop
 8001be4:	f3af 8000 	nop.w
 8001be8:	a2529d39 	.word	0xa2529d39
 8001bec:	3f91df46 	.word	0x3f91df46
 8001bf0:	200001c0 	.word	0x200001c0
 8001bf4:	200001bc 	.word	0x200001bc
 8001bf8:	200001c8 	.word	0x200001c8
 8001bfc:	200001c4 	.word	0x200001c4
 8001c00:	200001e8 	.word	0x200001e8
 8001c04:	200001dc 	.word	0x200001dc
 8001c08:	2000018c 	.word	0x2000018c
		}
		gyroX=gyroValue[0];
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	48d7      	ldr	r0, [pc, #860]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001c10:	f7ff fb54 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001c14:	4603      	mov	r3, r0
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4ad5      	ldr	r2, [pc, #852]	; (8001f70 <HAL_GPIO_EXTI_Callback+0x520>)
 8001c1a:	6013      	str	r3, [r2, #0]
		gyroY=gyroValue[1];
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	48d3      	ldr	r0, [pc, #844]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001c20:	f7ff fb4c 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001c24:	4603      	mov	r3, r0
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4ad2      	ldr	r2, [pc, #840]	; (8001f74 <HAL_GPIO_EXTI_Callback+0x524>)
 8001c2a:	6013      	str	r3, [r2, #0]
		gyroZ=gyroValue[2];
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	48cf      	ldr	r0, [pc, #828]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001c30:	f7ff fb44 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001c34:	4603      	mov	r3, r0
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4acf      	ldr	r2, [pc, #828]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x528>)
 8001c3a:	6013      	str	r3, [r2, #0]

		qDotOmega[0]=1/2.0*(-preAttitude[1]*gyroValue[0]-preAttitude[2]*gyroValue[1]-preAttitude[3]*gyroValue[2]);
 8001c3c:	4bcf      	ldr	r3, [pc, #828]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001c3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c42:	eeb1 8a67 	vneg.f32	s16, s15
 8001c46:	2100      	movs	r1, #0
 8001c48:	48c8      	ldr	r0, [pc, #800]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001c4a:	f7ff fb37 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001c58:	4bc8      	ldr	r3, [pc, #800]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001c5a:	edd3 8a02 	vldr	s17, [r3, #8]
 8001c5e:	2101      	movs	r1, #1
 8001c60:	48c2      	ldr	r0, [pc, #776]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001c62:	f7ff fb2b 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001c66:	4603      	mov	r3, r0
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001c70:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001c74:	4bc1      	ldr	r3, [pc, #772]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001c76:	edd3 8a03 	vldr	s17, [r3, #12]
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	48bb      	ldr	r0, [pc, #748]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001c7e:	f7ff fb1d 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001c82:	4603      	mov	r3, r0
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001c8c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001c90:	ee17 0a90 	vmov	r0, s15
 8001c94:	f7fe fc04 	bl	80004a0 <__aeabi_f2d>
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	4bb8      	ldr	r3, [pc, #736]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x530>)
 8001c9e:	f7fe fc57 	bl	8000550 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7fe ff01 	bl	8000ab0 <__aeabi_d2f>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4ab4      	ldr	r2, [pc, #720]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x534>)
 8001cb2:	6013      	str	r3, [r2, #0]
		qDotOmega[1]=1/2.0*(preAttitude[0]*gyroValue[0]+preAttitude[2]*gyroValue[2]-preAttitude[3]*gyroValue[1]);
 8001cb4:	4bb1      	ldr	r3, [pc, #708]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001cb6:	ed93 8a00 	vldr	s16, [r3]
 8001cba:	2100      	movs	r1, #0
 8001cbc:	48ab      	ldr	r0, [pc, #684]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001cbe:	f7ff fafd 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001ccc:	4bab      	ldr	r3, [pc, #684]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001cce:	edd3 8a02 	vldr	s17, [r3, #8]
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	48a5      	ldr	r0, [pc, #660]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001cd6:	f7ff faf1 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001ce4:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001ce8:	4ba4      	ldr	r3, [pc, #656]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001cea:	edd3 8a03 	vldr	s17, [r3, #12]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	489e      	ldr	r0, [pc, #632]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001cf2:	f7ff fae3 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001d00:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001d04:	ee17 0a90 	vmov	r0, s15
 8001d08:	f7fe fbca 	bl	80004a0 <__aeabi_f2d>
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	4b9b      	ldr	r3, [pc, #620]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x530>)
 8001d12:	f7fe fc1d 	bl	8000550 <__aeabi_dmul>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7fe fec7 	bl	8000ab0 <__aeabi_d2f>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4a97      	ldr	r2, [pc, #604]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x534>)
 8001d26:	6053      	str	r3, [r2, #4]
		qDotOmega[2]=1/2.0*(preAttitude[0]*gyroValue[1]-preAttitude[1]*gyroValue[2]+preAttitude[3]*gyroValue[0]);
 8001d28:	4b94      	ldr	r3, [pc, #592]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001d2a:	ed93 8a00 	vldr	s16, [r3]
 8001d2e:	2101      	movs	r1, #1
 8001d30:	488e      	ldr	r0, [pc, #568]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001d32:	f7ff fac3 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001d36:	4603      	mov	r3, r0
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001d40:	4b8e      	ldr	r3, [pc, #568]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001d42:	edd3 8a01 	vldr	s17, [r3, #4]
 8001d46:	2102      	movs	r1, #2
 8001d48:	4888      	ldr	r0, [pc, #544]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001d4a:	f7ff fab7 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	edd3 7a00 	vldr	s15, [r3]
 8001d54:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001d58:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001d5c:	4b87      	ldr	r3, [pc, #540]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001d5e:	edd3 8a03 	vldr	s17, [r3, #12]
 8001d62:	2100      	movs	r1, #0
 8001d64:	4881      	ldr	r0, [pc, #516]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001d66:	f7ff faa9 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001d74:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001d78:	ee17 0a90 	vmov	r0, s15
 8001d7c:	f7fe fb90 	bl	80004a0 <__aeabi_f2d>
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	4b7e      	ldr	r3, [pc, #504]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x530>)
 8001d86:	f7fe fbe3 	bl	8000550 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7fe fe8d 	bl	8000ab0 <__aeabi_d2f>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4a7a      	ldr	r2, [pc, #488]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x534>)
 8001d9a:	6093      	str	r3, [r2, #8]
		qDotOmega[3]=1/2.0*(preAttitude[0]*gyroValue[2]+preAttitude[1]*gyroValue[1]-preAttitude[2]*gyroValue[0]);
 8001d9c:	4b77      	ldr	r3, [pc, #476]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001d9e:	ed93 8a00 	vldr	s16, [r3]
 8001da2:	2102      	movs	r1, #2
 8001da4:	4871      	ldr	r0, [pc, #452]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001da6:	f7ff fa89 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001daa:	4603      	mov	r3, r0
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001db4:	4b71      	ldr	r3, [pc, #452]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001db6:	edd3 8a01 	vldr	s17, [r3, #4]
 8001dba:	2101      	movs	r1, #1
 8001dbc:	486b      	ldr	r0, [pc, #428]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001dbe:	f7ff fa7d 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001dcc:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001dd0:	4b6a      	ldr	r3, [pc, #424]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001dd2:	edd3 8a02 	vldr	s17, [r3, #8]
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4864      	ldr	r0, [pc, #400]	; (8001f6c <HAL_GPIO_EXTI_Callback+0x51c>)
 8001dda:	f7ff fa6f 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001dde:	4603      	mov	r3, r0
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001de8:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001dec:	ee17 0a90 	vmov	r0, s15
 8001df0:	f7fe fb56 	bl	80004a0 <__aeabi_f2d>
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x530>)
 8001dfa:	f7fe fba9 	bl	8000550 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7fe fe53 	bl	8000ab0 <__aeabi_d2f>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a5d      	ldr	r2, [pc, #372]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x534>)
 8001e0e:	60d3      	str	r3, [r2, #12]

		f[0]=2*(preAttitude[1]*preAttitude[3]-preAttitude[0]*preAttitude[2])-accelValue[0];
 8001e10:	4b5a      	ldr	r3, [pc, #360]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001e12:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e16:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001e18:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e20:	4b56      	ldr	r3, [pc, #344]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001e22:	edd3 6a00 	vldr	s13, [r3]
 8001e26:	4b55      	ldr	r3, [pc, #340]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001e28:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e34:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4853      	ldr	r0, [pc, #332]	; (8001f88 <HAL_GPIO_EXTI_Callback+0x538>)
 8001e3c:	f7ff fa3e 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001e40:	4603      	mov	r3, r0
 8001e42:	ed93 8a00 	vldr	s16, [r3]
 8001e46:	2100      	movs	r1, #0
 8001e48:	4850      	ldr	r0, [pc, #320]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x53c>)
 8001e4a:	f7ff fa37 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8001e54:	edc3 7a00 	vstr	s15, [r3]
		f[1]=2*(preAttitude[0]*preAttitude[1]+preAttitude[2]*preAttitude[3]-accelValue[1]);
 8001e58:	4b48      	ldr	r3, [pc, #288]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001e5a:	ed93 7a00 	vldr	s14, [r3]
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e68:	4b44      	ldr	r3, [pc, #272]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001e6a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e6e:	4b43      	ldr	r3, [pc, #268]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001e70:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e78:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4842      	ldr	r0, [pc, #264]	; (8001f88 <HAL_GPIO_EXTI_Callback+0x538>)
 8001e80:	f7ff fa1c 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001e84:	4603      	mov	r3, r0
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001e8e:	2101      	movs	r1, #1
 8001e90:	483e      	ldr	r0, [pc, #248]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x53c>)
 8001e92:	f7ff fa13 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001e96:	4603      	mov	r3, r0
 8001e98:	ee78 7a08 	vadd.f32	s15, s16, s16
 8001e9c:	edc3 7a00 	vstr	s15, [r3]
		f[2]=2*(1/2.0-std::pow(preAttitude[1],2)-std::pow(preAttitude[2],2))-accelValue[2];
 8001ea0:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001ea2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ea6:	2002      	movs	r0, #2
 8001ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8001eac:	f000 fb86 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001eb0:	ec53 2b10 	vmov	r2, r3, d0
 8001eb4:	f04f 0000 	mov.w	r0, #0
 8001eb8:	4931      	ldr	r1, [pc, #196]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x530>)
 8001eba:	f7fe f991 	bl	80001e0 <__aeabi_dsub>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4614      	mov	r4, r2
 8001ec4:	461d      	mov	r5, r3
 8001ec6:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001ec8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ecc:	2002      	movs	r0, #2
 8001ece:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed2:	f000 fb73 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ed6:	ec53 2b10 	vmov	r2, r3, d0
 8001eda:	4620      	mov	r0, r4
 8001edc:	4629      	mov	r1, r5
 8001ede:	f7fe f97f 	bl	80001e0 <__aeabi_dsub>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	f7fe f979 	bl	80001e4 <__adddf3>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4614      	mov	r4, r2
 8001ef8:	461d      	mov	r5, r3
 8001efa:	2102      	movs	r1, #2
 8001efc:	4822      	ldr	r0, [pc, #136]	; (8001f88 <HAL_GPIO_EXTI_Callback+0x538>)
 8001efe:	f7ff f9dd 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001f02:	4603      	mov	r3, r0
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe faca 	bl	80004a0 <__aeabi_f2d>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4620      	mov	r0, r4
 8001f12:	4629      	mov	r1, r5
 8001f14:	f7fe f964 	bl	80001e0 <__aeabi_dsub>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4690      	mov	r8, r2
 8001f1e:	4699      	mov	r9, r3
 8001f20:	2102      	movs	r1, #2
 8001f22:	481a      	ldr	r0, [pc, #104]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x53c>)
 8001f24:	f7ff f9ca 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001f28:	4604      	mov	r4, r0
 8001f2a:	4640      	mov	r0, r8
 8001f2c:	4649      	mov	r1, r9
 8001f2e:	f7fe fdbf 	bl	8000ab0 <__aeabi_d2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	6023      	str	r3, [r4, #0]

		j[0]=  {-2*preAttitude[2], 2*preAttitude[1],0};
 8001f36:	2100      	movs	r1, #0
 8001f38:	4815      	ldr	r0, [pc, #84]	; (8001f90 <HAL_GPIO_EXTI_Callback+0x540>)
 8001f3a:	f000 fb79 	bl	8002630 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001f42:	edd2 7a02 	vldr	s15, [r2, #8]
 8001f46:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001f4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f4e:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x52c>)
 8001f50:	edd2 7a01 	vldr	s15, [r2, #4]
 8001f54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f58:	ed83 7a00 	vstr	s14, [r3]
 8001f5c:	edc3 7a01 	vstr	s15, [r3, #4]
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
		j[1]=  {2*preAttitude[3],2*preAttitude[0],-4*preAttitude[1]};
 8001f66:	2101      	movs	r1, #1
 8001f68:	e014      	b.n	8001f94 <HAL_GPIO_EXTI_Callback+0x544>
 8001f6a:	bf00      	nop
 8001f6c:	200001e8 	.word	0x200001e8
 8001f70:	20000270 	.word	0x20000270
 8001f74:	20000274 	.word	0x20000274
 8001f78:	20000278 	.word	0x20000278
 8001f7c:	20000004 	.word	0x20000004
 8001f80:	3fe00000 	.word	0x3fe00000
 8001f84:	20000200 	.word	0x20000200
 8001f88:	200001dc 	.word	0x200001dc
 8001f8c:	20000210 	.word	0x20000210
 8001f90:	2000021c 	.word	0x2000021c
 8001f94:	48b6      	ldr	r0, [pc, #728]	; (8002270 <HAL_GPIO_EXTI_Callback+0x820>)
 8001f96:	f000 fb4b 	bl	8002630 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4ab5      	ldr	r2, [pc, #724]	; (8002274 <HAL_GPIO_EXTI_Callback+0x824>)
 8001f9e:	edd2 7a03 	vldr	s15, [r2, #12]
 8001fa2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001fa6:	4ab3      	ldr	r2, [pc, #716]	; (8002274 <HAL_GPIO_EXTI_Callback+0x824>)
 8001fa8:	edd2 7a00 	vldr	s15, [r2]
 8001fac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fb0:	4ab0      	ldr	r2, [pc, #704]	; (8002274 <HAL_GPIO_EXTI_Callback+0x824>)
 8001fb2:	edd2 7a01 	vldr	s15, [r2, #4]
 8001fb6:	eeb9 6a00 	vmov.f32	s12, #144	; 0xc0800000 -4.0
 8001fba:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001fbe:	edc3 6a00 	vstr	s13, [r3]
 8001fc2:	ed83 7a01 	vstr	s14, [r3, #4]
 8001fc6:	edc3 7a02 	vstr	s15, [r3, #8]
		j[2]=  {-2*preAttitude[0],2*preAttitude[3],-4*preAttitude[2]};
 8001fca:	2102      	movs	r1, #2
 8001fcc:	48a8      	ldr	r0, [pc, #672]	; (8002270 <HAL_GPIO_EXTI_Callback+0x820>)
 8001fce:	f000 fb2f 	bl	8002630 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4aa7      	ldr	r2, [pc, #668]	; (8002274 <HAL_GPIO_EXTI_Callback+0x824>)
 8001fd6:	edd2 7a00 	vldr	s15, [r2]
 8001fda:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001fde:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001fe2:	4aa4      	ldr	r2, [pc, #656]	; (8002274 <HAL_GPIO_EXTI_Callback+0x824>)
 8001fe4:	edd2 7a03 	vldr	s15, [r2, #12]
 8001fe8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fec:	4aa1      	ldr	r2, [pc, #644]	; (8002274 <HAL_GPIO_EXTI_Callback+0x824>)
 8001fee:	edd2 7a02 	vldr	s15, [r2, #8]
 8001ff2:	eeb9 6a00 	vmov.f32	s12, #144	; 0xc0800000 -4.0
 8001ff6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001ffa:	edc3 6a00 	vstr	s13, [r3]
 8001ffe:	ed83 7a01 	vstr	s14, [r3, #4]
 8002002:	edc3 7a02 	vstr	s15, [r3, #8]
		j[3]=  {2*preAttitude[1],2*preAttitude[2],0};
 8002006:	2103      	movs	r1, #3
 8002008:	4899      	ldr	r0, [pc, #612]	; (8002270 <HAL_GPIO_EXTI_Callback+0x820>)
 800200a:	f000 fb11 	bl	8002630 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 800200e:	4603      	mov	r3, r0
 8002010:	4a98      	ldr	r2, [pc, #608]	; (8002274 <HAL_GPIO_EXTI_Callback+0x824>)
 8002012:	edd2 7a01 	vldr	s15, [r2, #4]
 8002016:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800201a:	4a96      	ldr	r2, [pc, #600]	; (8002274 <HAL_GPIO_EXTI_Callback+0x824>)
 800201c:	edd2 7a02 	vldr	s15, [r2, #8]
 8002020:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002024:	ed83 7a00 	vstr	s14, [r3]
 8002028:	edc3 7a01 	vstr	s15, [r3, #4]
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	609a      	str	r2, [r3, #8]

		 for(uint8_t n=0;n<4;n++){
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800203c:	2b03      	cmp	r3, #3
 800203e:	d845      	bhi.n	80020cc <HAL_GPIO_EXTI_Callback+0x67c>
			 qDotEpsilon[n]=0;
 8002040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002044:	4a8c      	ldr	r2, [pc, #560]	; (8002278 <HAL_GPIO_EXTI_Callback+0x828>)
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
			 for(uint8_t m=0;m<3;m++){
 8002050:	2300      	movs	r3, #0
 8002052:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002056:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800205a:	2b02      	cmp	r3, #2
 800205c:	d830      	bhi.n	80020c0 <HAL_GPIO_EXTI_Callback+0x670>
				 qDotEpsilon[n]+= j[n][m]*f[m];
 800205e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002062:	4619      	mov	r1, r3
 8002064:	4882      	ldr	r0, [pc, #520]	; (8002270 <HAL_GPIO_EXTI_Callback+0x820>)
 8002066:	f000 fae3 	bl	8002630 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 800206a:	4602      	mov	r2, r0
 800206c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f7ff f922 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8002078:	4603      	mov	r3, r0
 800207a:	ed93 8a00 	vldr	s16, [r3]
 800207e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002082:	4619      	mov	r1, r3
 8002084:	487d      	ldr	r0, [pc, #500]	; (800227c <HAL_GPIO_EXTI_Callback+0x82c>)
 8002086:	f7ff f919 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 800208a:	4603      	mov	r3, r0
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002094:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002098:	4a77      	ldr	r2, [pc, #476]	; (8002278 <HAL_GPIO_EXTI_Callback+0x828>)
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020aa:	4a73      	ldr	r2, [pc, #460]	; (8002278 <HAL_GPIO_EXTI_Callback+0x828>)
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	edc3 7a00 	vstr	s15, [r3]
			 for(uint8_t m=0;m<3;m++){
 80020b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80020b8:	3301      	adds	r3, #1
 80020ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80020be:	e7ca      	b.n	8002056 <HAL_GPIO_EXTI_Callback+0x606>
		 for(uint8_t n=0;n<4;n++){
 80020c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020c4:	3301      	adds	r3, #1
 80020c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80020ca:	e7b5      	b.n	8002038 <HAL_GPIO_EXTI_Callback+0x5e8>
			 }
		 }

		 fSize=std::sqrt(std::pow(qDotEpsilon[0],2)+std::pow(qDotEpsilon[1],2)+std::pow(qDotEpsilon[2],2)+std::pow(qDotEpsilon[3],2));
 80020cc:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <HAL_GPIO_EXTI_Callback+0x828>)
 80020ce:	edd3 7a00 	vldr	s15, [r3]
 80020d2:	2002      	movs	r0, #2
 80020d4:	eeb0 0a67 	vmov.f32	s0, s15
 80020d8:	f000 fa70 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80020dc:	ec55 4b10 	vmov	r4, r5, d0
 80020e0:	4b65      	ldr	r3, [pc, #404]	; (8002278 <HAL_GPIO_EXTI_Callback+0x828>)
 80020e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80020e6:	2002      	movs	r0, #2
 80020e8:	eeb0 0a67 	vmov.f32	s0, s15
 80020ec:	f000 fa66 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80020f0:	ec53 2b10 	vmov	r2, r3, d0
 80020f4:	4620      	mov	r0, r4
 80020f6:	4629      	mov	r1, r5
 80020f8:	f7fe f874 	bl	80001e4 <__adddf3>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4614      	mov	r4, r2
 8002102:	461d      	mov	r5, r3
 8002104:	4b5c      	ldr	r3, [pc, #368]	; (8002278 <HAL_GPIO_EXTI_Callback+0x828>)
 8002106:	edd3 7a02 	vldr	s15, [r3, #8]
 800210a:	2002      	movs	r0, #2
 800210c:	eeb0 0a67 	vmov.f32	s0, s15
 8002110:	f000 fa54 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002114:	ec53 2b10 	vmov	r2, r3, d0
 8002118:	4620      	mov	r0, r4
 800211a:	4629      	mov	r1, r5
 800211c:	f7fe f862 	bl	80001e4 <__adddf3>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4614      	mov	r4, r2
 8002126:	461d      	mov	r5, r3
 8002128:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_GPIO_EXTI_Callback+0x828>)
 800212a:	edd3 7a03 	vldr	s15, [r3, #12]
 800212e:	2002      	movs	r0, #2
 8002130:	eeb0 0a67 	vmov.f32	s0, s15
 8002134:	f000 fa42 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002138:	ec53 2b10 	vmov	r2, r3, d0
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f850 	bl	80001e4 <__adddf3>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	ec43 2b17 	vmov	d7, r2, r3
 800214c:	eeb0 0a47 	vmov.f32	s0, s14
 8002150:	eef0 0a67 	vmov.f32	s1, s15
 8002154:	f003 f988 	bl	8005468 <sqrt>
 8002158:	ec53 2b10 	vmov	r2, r3, d0
 800215c:	4610      	mov	r0, r2
 800215e:	4619      	mov	r1, r3
 8002160:	f7fe fca6 	bl	8000ab0 <__aeabi_d2f>
 8002164:	4603      	mov	r3, r0
 8002166:	4a46      	ldr	r2, [pc, #280]	; (8002280 <HAL_GPIO_EXTI_Callback+0x830>)
 8002168:	6013      	str	r3, [r2, #0]

		 for(uint8_t n=0;n<4;n++){
 800216a:	2300      	movs	r3, #0
 800216c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002170:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002174:	2b03      	cmp	r3, #3
 8002176:	f200 8091 	bhi.w	800229c <HAL_GPIO_EXTI_Callback+0x84c>
			 if(fSize==0){
 800217a:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_GPIO_EXTI_Callback+0x830>)
 800217c:	edd3 7a00 	vldr	s15, [r3]
 8002180:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002188:	d10c      	bne.n	80021a4 <HAL_GPIO_EXTI_Callback+0x754>
				 qDot[n]=qDotOmega[n];
 800218a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800218e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002192:	493c      	ldr	r1, [pc, #240]	; (8002284 <HAL_GPIO_EXTI_Callback+0x834>)
 8002194:	0092      	lsls	r2, r2, #2
 8002196:	440a      	add	r2, r1
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	493b      	ldr	r1, [pc, #236]	; (8002288 <HAL_GPIO_EXTI_Callback+0x838>)
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e01f      	b.n	80021e4 <HAL_GPIO_EXTI_Callback+0x794>
			 }else{
				 qDot[n]=qDotOmega[n]-beta*qDotEpsilon[n]/fSize;
 80021a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80021a8:	4a36      	ldr	r2, [pc, #216]	; (8002284 <HAL_GPIO_EXTI_Callback+0x834>)
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	ed93 7a00 	vldr	s14, [r3]
 80021b2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80021b6:	4a30      	ldr	r2, [pc, #192]	; (8002278 <HAL_GPIO_EXTI_Callback+0x828>)
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	eddf 6a32 	vldr	s13, [pc, #200]	; 800228c <HAL_GPIO_EXTI_Callback+0x83c>
 80021c4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80021c8:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_GPIO_EXTI_Callback+0x830>)
 80021ca:	edd3 6a00 	vldr	s13, [r3]
 80021ce:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80021d2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80021d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021da:	4a2b      	ldr	r2, [pc, #172]	; (8002288 <HAL_GPIO_EXTI_Callback+0x838>)
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	edc3 7a00 	vstr	s15, [r3]
			 }

			 attitude[n]=preAttitude[n]+qDot[n]*stepTime/1000.0;
 80021e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80021e8:	4a22      	ldr	r2, [pc, #136]	; (8002274 <HAL_GPIO_EXTI_Callback+0x824>)
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f955 	bl	80004a0 <__aeabi_f2d>
 80021f6:	4604      	mov	r4, r0
 80021f8:	460d      	mov	r5, r1
 80021fa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80021fe:	4a22      	ldr	r2, [pc, #136]	; (8002288 <HAL_GPIO_EXTI_Callback+0x838>)
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	ed93 7a00 	vldr	s14, [r3]
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_GPIO_EXTI_Callback+0x840>)
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002212:	ee17 0a90 	vmov	r0, s15
 8002216:	f7fe f943 	bl	80004a0 <__aeabi_f2d>
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_GPIO_EXTI_Callback+0x844>)
 8002220:	f7fe fac0 	bl	80007a4 <__aeabi_ddiv>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4620      	mov	r0, r4
 800222a:	4629      	mov	r1, r5
 800222c:	f7fd ffda 	bl	80001e4 <__adddf3>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	f897 4021 	ldrb.w	r4, [r7, #33]	; 0x21
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	f7fe fc38 	bl	8000ab0 <__aeabi_d2f>
 8002240:	4602      	mov	r2, r0
 8002242:	4915      	ldr	r1, [pc, #84]	; (8002298 <HAL_GPIO_EXTI_Callback+0x848>)
 8002244:	00a3      	lsls	r3, r4, #2
 8002246:	440b      	add	r3, r1
 8002248:	601a      	str	r2, [r3, #0]
			 preAttitude[n]=attitude[n];
 800224a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800224e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002252:	4911      	ldr	r1, [pc, #68]	; (8002298 <HAL_GPIO_EXTI_Callback+0x848>)
 8002254:	0092      	lsls	r2, r2, #2
 8002256:	440a      	add	r2, r1
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	4906      	ldr	r1, [pc, #24]	; (8002274 <HAL_GPIO_EXTI_Callback+0x824>)
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	601a      	str	r2, [r3, #0]
		 for(uint8_t n=0;n<4;n++){
 8002262:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002266:	3301      	adds	r3, #1
 8002268:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800226c:	e780      	b.n	8002170 <HAL_GPIO_EXTI_Callback+0x720>
 800226e:	bf00      	nop
 8002270:	2000021c 	.word	0x2000021c
 8002274:	20000004 	.word	0x20000004
 8002278:	2000024c 	.word	0x2000024c
 800227c:	20000210 	.word	0x20000210
 8002280:	2000025c 	.word	0x2000025c
 8002284:	20000200 	.word	0x20000200
 8002288:	20000260 	.word	0x20000260
 800228c:	3d9ac70d 	.word	0x3d9ac70d
 8002290:	200001c4 	.word	0x200001c4
 8002294:	408f4000 	.word	0x408f4000
 8002298:	20000014 	.word	0x20000014
		 }


		 float attitudeSize=std::sqrt(std::pow(attitude[0],2)+std::pow(attitude[1],2)+std::pow(attitude[2],2)+std::pow(attitude[3],2));
 800229c:	4bc1      	ldr	r3, [pc, #772]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	2002      	movs	r0, #2
 80022a4:	eeb0 0a67 	vmov.f32	s0, s15
 80022a8:	f000 f988 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80022ac:	ec55 4b10 	vmov	r4, r5, d0
 80022b0:	4bbc      	ldr	r3, [pc, #752]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 80022b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80022b6:	2002      	movs	r0, #2
 80022b8:	eeb0 0a67 	vmov.f32	s0, s15
 80022bc:	f000 f97e 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80022c0:	ec53 2b10 	vmov	r2, r3, d0
 80022c4:	4620      	mov	r0, r4
 80022c6:	4629      	mov	r1, r5
 80022c8:	f7fd ff8c 	bl	80001e4 <__adddf3>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4614      	mov	r4, r2
 80022d2:	461d      	mov	r5, r3
 80022d4:	4bb3      	ldr	r3, [pc, #716]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 80022d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80022da:	2002      	movs	r0, #2
 80022dc:	eeb0 0a67 	vmov.f32	s0, s15
 80022e0:	f000 f96c 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80022e4:	ec53 2b10 	vmov	r2, r3, d0
 80022e8:	4620      	mov	r0, r4
 80022ea:	4629      	mov	r1, r5
 80022ec:	f7fd ff7a 	bl	80001e4 <__adddf3>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4614      	mov	r4, r2
 80022f6:	461d      	mov	r5, r3
 80022f8:	4baa      	ldr	r3, [pc, #680]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 80022fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80022fe:	2002      	movs	r0, #2
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	f000 f95a 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002308:	ec53 2b10 	vmov	r2, r3, d0
 800230c:	4620      	mov	r0, r4
 800230e:	4629      	mov	r1, r5
 8002310:	f7fd ff68 	bl	80001e4 <__adddf3>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	ec43 2b17 	vmov	d7, r2, r3
 800231c:	eeb0 0a47 	vmov.f32	s0, s14
 8002320:	eef0 0a67 	vmov.f32	s1, s15
 8002324:	f003 f8a0 	bl	8005468 <sqrt>
 8002328:	ec53 2b10 	vmov	r2, r3, d0
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	f7fe fbbe 	bl	8000ab0 <__aeabi_d2f>
 8002334:	4603      	mov	r3, r0
 8002336:	60fb      	str	r3, [r7, #12]
		 attitude[0]/=attitudeSize;
 8002338:	4b9a      	ldr	r3, [pc, #616]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 800233a:	edd3 6a00 	vldr	s13, [r3]
 800233e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002346:	4b97      	ldr	r3, [pc, #604]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002348:	edc3 7a00 	vstr	s15, [r3]
		 attitude[1]/=attitudeSize;
 800234c:	4b95      	ldr	r3, [pc, #596]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 800234e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002352:	ed97 7a03 	vldr	s14, [r7, #12]
 8002356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800235a:	4b92      	ldr	r3, [pc, #584]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 800235c:	edc3 7a01 	vstr	s15, [r3, #4]
		 attitude[2]/=attitudeSize;
 8002360:	4b90      	ldr	r3, [pc, #576]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002362:	edd3 6a02 	vldr	s13, [r3, #8]
 8002366:	ed97 7a03 	vldr	s14, [r7, #12]
 800236a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800236e:	4b8d      	ldr	r3, [pc, #564]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002370:	edc3 7a02 	vstr	s15, [r3, #8]
		 attitude[3]/=attitudeSize;
 8002374:	4b8b      	ldr	r3, [pc, #556]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002376:	edd3 6a03 	vldr	s13, [r3, #12]
 800237a:	ed97 7a03 	vldr	s14, [r7, #12]
 800237e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002382:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002384:	edc3 7a03 	vstr	s15, [r3, #12]

		 roll=std::atan2(2*(attitude[0]*attitude[1]+attitude[2]*attitude[3])
 8002388:	4b86      	ldr	r3, [pc, #536]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 800238a:	ed93 7a00 	vldr	s14, [r3]
 800238e:	4b85      	ldr	r3, [pc, #532]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002390:	edd3 7a01 	vldr	s15, [r3, #4]
 8002394:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002398:	4b82      	ldr	r3, [pc, #520]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 800239a:	edd3 6a02 	vldr	s13, [r3, #8]
 800239e:	4b81      	ldr	r3, [pc, #516]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 80023a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80023a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ac:	ee37 8aa7 	vadd.f32	s16, s15, s15
			 ,std::pow(attitude[0],2)-std::pow(attitude[1],2)-std::pow(attitude[2],2)+std::pow(attitude[3],2));
 80023b0:	4b7c      	ldr	r3, [pc, #496]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	2002      	movs	r0, #2
 80023b8:	eeb0 0a67 	vmov.f32	s0, s15
 80023bc:	f000 f8fe 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80023c0:	ec55 4b10 	vmov	r4, r5, d0
 80023c4:	4b77      	ldr	r3, [pc, #476]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 80023c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80023ca:	2002      	movs	r0, #2
 80023cc:	eeb0 0a67 	vmov.f32	s0, s15
 80023d0:	f000 f8f4 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80023d4:	ec53 2b10 	vmov	r2, r3, d0
 80023d8:	4620      	mov	r0, r4
 80023da:	4629      	mov	r1, r5
 80023dc:	f7fd ff00 	bl	80001e0 <__aeabi_dsub>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4614      	mov	r4, r2
 80023e6:	461d      	mov	r5, r3
 80023e8:	4b6e      	ldr	r3, [pc, #440]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 80023ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ee:	2002      	movs	r0, #2
 80023f0:	eeb0 0a67 	vmov.f32	s0, s15
 80023f4:	f000 f8e2 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80023f8:	ec53 2b10 	vmov	r2, r3, d0
 80023fc:	4620      	mov	r0, r4
 80023fe:	4629      	mov	r1, r5
 8002400:	f7fd feee 	bl	80001e0 <__aeabi_dsub>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4614      	mov	r4, r2
 800240a:	461d      	mov	r5, r3
 800240c:	4b65      	ldr	r3, [pc, #404]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 800240e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002412:	2002      	movs	r0, #2
 8002414:	eeb0 0a67 	vmov.f32	s0, s15
 8002418:	f000 f8d0 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800241c:	ec53 2b10 	vmov	r2, r3, d0
		 roll=std::atan2(2*(attitude[0]*attitude[1]+attitude[2]*attitude[3])
 8002420:	4620      	mov	r0, r4
 8002422:	4629      	mov	r1, r5
 8002424:	f7fd fede 	bl	80001e4 <__adddf3>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	ec43 2b17 	vmov	d7, r2, r3
 8002430:	eeb0 1a47 	vmov.f32	s2, s14
 8002434:	eef0 1a67 	vmov.f32	s3, s15
 8002438:	eeb0 0a48 	vmov.f32	s0, s16
 800243c:	f000 f907 	bl	800264e <_ZSt5atan2IfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002440:	ec53 2b10 	vmov	r2, r3, d0
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	f7fe fb32 	bl	8000ab0 <__aeabi_d2f>
 800244c:	4603      	mov	r3, r0
 800244e:	4a56      	ldr	r2, [pc, #344]	; (80025a8 <HAL_GPIO_EXTI_Callback+0xb58>)
 8002450:	6013      	str	r3, [r2, #0]

		 pitch=std::asin(2*(attitude[0]*attitude[2]-attitude[1]*attitude[3]));
 8002452:	4b54      	ldr	r3, [pc, #336]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002454:	ed93 7a00 	vldr	s14, [r3]
 8002458:	4b52      	ldr	r3, [pc, #328]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 800245a:	edd3 7a02 	vldr	s15, [r3, #8]
 800245e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002462:	4b50      	ldr	r3, [pc, #320]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002464:	edd3 6a01 	vldr	s13, [r3, #4]
 8002468:	4b4e      	ldr	r3, [pc, #312]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 800246a:	edd3 7a03 	vldr	s15, [r3, #12]
 800246e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002476:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800247a:	eeb0 0a67 	vmov.f32	s0, s15
 800247e:	f7ff fa77 	bl	8001970 <_ZSt4asinf>
 8002482:	eef0 7a40 	vmov.f32	s15, s0
 8002486:	4b49      	ldr	r3, [pc, #292]	; (80025ac <HAL_GPIO_EXTI_Callback+0xb5c>)
 8002488:	edc3 7a00 	vstr	s15, [r3]

		 yaw=std::atan2(2*(attitude[0]*attitude[3]+attitude[1]*attitude[2])
 800248c:	4b45      	ldr	r3, [pc, #276]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 800248e:	ed93 7a00 	vldr	s14, [r3]
 8002492:	4b44      	ldr	r3, [pc, #272]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002494:	edd3 7a03 	vldr	s15, [r3, #12]
 8002498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800249c:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 800249e:	edd3 6a01 	vldr	s13, [r3, #4]
 80024a2:	4b40      	ldr	r3, [pc, #256]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 80024a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80024a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b0:	ee37 8aa7 	vadd.f32	s16, s15, s15
			 ,std::pow(attitude[0],2)+std::pow(attitude[1],2)-std::pow(attitude[2],2)-std::pow(attitude[3],2));
 80024b4:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	2002      	movs	r0, #2
 80024bc:	eeb0 0a67 	vmov.f32	s0, s15
 80024c0:	f000 f87c 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024c4:	ec55 4b10 	vmov	r4, r5, d0
 80024c8:	4b36      	ldr	r3, [pc, #216]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 80024ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80024ce:	2002      	movs	r0, #2
 80024d0:	eeb0 0a67 	vmov.f32	s0, s15
 80024d4:	f000 f872 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024d8:	ec53 2b10 	vmov	r2, r3, d0
 80024dc:	4620      	mov	r0, r4
 80024de:	4629      	mov	r1, r5
 80024e0:	f7fd fe80 	bl	80001e4 <__adddf3>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4614      	mov	r4, r2
 80024ea:	461d      	mov	r5, r3
 80024ec:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 80024ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80024f2:	2002      	movs	r0, #2
 80024f4:	eeb0 0a67 	vmov.f32	s0, s15
 80024f8:	f000 f860 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024fc:	ec53 2b10 	vmov	r2, r3, d0
 8002500:	4620      	mov	r0, r4
 8002502:	4629      	mov	r1, r5
 8002504:	f7fd fe6c 	bl	80001e0 <__aeabi_dsub>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4614      	mov	r4, r2
 800250e:	461d      	mov	r5, r3
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002512:	edd3 7a03 	vldr	s15, [r3, #12]
 8002516:	2002      	movs	r0, #2
 8002518:	eeb0 0a67 	vmov.f32	s0, s15
 800251c:	f000 f84e 	bl	80025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002520:	ec53 2b10 	vmov	r2, r3, d0
		 yaw=std::atan2(2*(attitude[0]*attitude[3]+attitude[1]*attitude[2])
 8002524:	4620      	mov	r0, r4
 8002526:	4629      	mov	r1, r5
 8002528:	f7fd fe5a 	bl	80001e0 <__aeabi_dsub>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	ec43 2b17 	vmov	d7, r2, r3
 8002534:	eeb0 1a47 	vmov.f32	s2, s14
 8002538:	eef0 1a67 	vmov.f32	s3, s15
 800253c:	eeb0 0a48 	vmov.f32	s0, s16
 8002540:	f000 f885 	bl	800264e <_ZSt5atan2IfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002544:	ec53 2b10 	vmov	r2, r3, d0
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	f7fe fab0 	bl	8000ab0 <__aeabi_d2f>
 8002550:	4603      	mov	r3, r0
 8002552:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xb60>)
 8002554:	6013      	str	r3, [r2, #0]

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002556:	2120      	movs	r1, #32
 8002558:	4816      	ldr	r0, [pc, #88]	; (80025b4 <HAL_GPIO_EXTI_Callback+0xb64>)
 800255a:	f000 fc5c 	bl	8002e16 <HAL_GPIO_TogglePin>
		uint8_t n=0;
 800255e:	2300      	movs	r3, #0
 8002560:	72fb      	strb	r3, [r7, #11]
		HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, 0x1a, 1, &n, 1, 100);
 8002562:	2364      	movs	r3, #100	; 0x64
 8002564:	9302      	str	r3, [sp, #8]
 8002566:	2301      	movs	r3, #1
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	f107 030b 	add.w	r3, r7, #11
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2301      	movs	r3, #1
 8002572:	221a      	movs	r2, #26
 8002574:	21d0      	movs	r1, #208	; 0xd0
 8002576:	4810      	ldr	r0, [pc, #64]	; (80025b8 <HAL_GPIO_EXTI_Callback+0xb68>)
 8002578:	f000 febe 	bl	80032f8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, 0x11, 1, &n, 1, 100);
 800257c:	2364      	movs	r3, #100	; 0x64
 800257e:	9302      	str	r3, [sp, #8]
 8002580:	2301      	movs	r3, #1
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	f107 030b 	add.w	r3, r7, #11
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2301      	movs	r3, #1
 800258c:	2211      	movs	r2, #17
 800258e:	21d0      	movs	r1, #208	; 0xd0
 8002590:	4809      	ldr	r0, [pc, #36]	; (80025b8 <HAL_GPIO_EXTI_Callback+0xb68>)
 8002592:	f000 feb1 	bl	80032f8 <HAL_I2C_Mem_Read>
//		str = std::to_string(n);
//		str += "\r\n";
//		HAL_UART_Transmit(&huart2, (uint8_t *)str.c_str(), str.size(), 100);
	}
}
 8002596:	bf00      	nop
 8002598:	3728      	adds	r7, #40	; 0x28
 800259a:	46bd      	mov	sp, r7
 800259c:	ecbd 8b02 	vpop	{d8}
 80025a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025a4:	20000014 	.word	0x20000014
 80025a8:	200001f4 	.word	0x200001f4
 80025ac:	200001f8 	.word	0x200001f8
 80025b0:	200001fc 	.word	0x200001fc
 80025b4:	40020000 	.word	0x40020000
 80025b8:	200000ac 	.word	0x200000ac

080025bc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80025bc:	b5b0      	push	{r4, r5, r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80025c6:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7fd ff69 	bl	80004a0 <__aeabi_f2d>
 80025ce:	4604      	mov	r4, r0
 80025d0:	460d      	mov	r5, r1
 80025d2:	6838      	ldr	r0, [r7, #0]
 80025d4:	f7fd ff52 	bl	800047c <__aeabi_i2d>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	ec43 2b11 	vmov	d1, r2, r3
 80025e0:	ec45 4b10 	vmov	d0, r4, r5
 80025e4:	f002 fed0 	bl	8005388 <pow>
 80025e8:	eeb0 7a40 	vmov.f32	s14, s0
 80025ec:	eef0 7a60 	vmov.f32	s15, s1
    }
 80025f0:	eeb0 0a47 	vmov.f32	s0, s14
 80025f4:	eef0 0a67 	vmov.f32	s1, s15
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bdb0      	pop	{r4, r5, r7, pc}

080025fe <_ZNSt5arrayIfLj3EE5beginEv>:
      begin() noexcept
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f83e 	bl	8002688 <_ZNSt5arrayIfLj3EE4dataEv>
 800260c:	4603      	mov	r3, r0
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <_ZNSt5arrayIfLj3EE3endEv>:
      end() noexcept
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f832 	bl	8002688 <_ZNSt5arrayIfLj3EE4dataEv>
 8002624:	4603      	mov	r3, r0
 8002626:	330c      	adds	r3, #12
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6839      	ldr	r1, [r7, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f82f 	bl	80026a2 <_ZNSt14__array_traitsISt5arrayIfLj3EELj4EE6_S_refERA4_KS1_j>
 8002644:	4603      	mov	r3, r0
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_ZSt5atan2IfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	ed87 0a03 	vstr	s0, [r7, #12]
 8002658:	ed87 1b00 	vstr	d1, [r7]
      return atan2(__type(__y), __type(__x));
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f7fd ff1f 	bl	80004a0 <__aeabi_f2d>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	ed97 1b00 	vldr	d1, [r7]
 800266a:	ec43 2b10 	vmov	d0, r2, r3
 800266e:	f002 fe89 	bl	8005384 <atan2>
 8002672:	eeb0 7a40 	vmov.f32	s14, s0
 8002676:	eef0 7a60 	vmov.f32	s15, s1
    }
 800267a:	eeb0 0a47 	vmov.f32	s0, s14
 800267e:	eef0 0a67 	vmov.f32	s1, s15
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_ZNSt5arrayIfLj3EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f817 	bl	80026c6 <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>
 8002698:	4603      	mov	r3, r0
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_ZNSt14__array_traitsISt5arrayIfLj3EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>:
      _S_ptr(const _Type& __t) noexcept
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <_Z41__static_initialization_and_destruction_0ii>:
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d10e      	bne.n	800270a <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d109      	bne.n	800270a <_Z41__static_initialization_and_destruction_0ii+0x2e>
ICM20948 icm20948(&hi2c1,ICM20948::Address::LOW);
 80026f6:	2268      	movs	r2, #104	; 0x68
 80026f8:	4906      	ldr	r1, [pc, #24]	; (8002714 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80026fa:	4807      	ldr	r0, [pc, #28]	; (8002718 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80026fc:	f7ff f8f2 	bl	80018e4 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE>
TIM_StopWatch stopwatch(&htim1);
 8002700:	4a06      	ldr	r2, [pc, #24]	; (800271c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002702:	4907      	ldr	r1, [pc, #28]	; (8002720 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002704:	4807      	ldr	r0, [pc, #28]	; (8002724 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002706:	f7ff f917 	bl	8001938 <_ZN13TIM_StopWatchC1EP17TIM_HandleTypeDefm>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200000ac 	.word	0x200000ac
 8002718:	2000018c 	.word	0x2000018c
 800271c:	000f4240 	.word	0x000f4240
 8002720:	20000100 	.word	0x20000100
 8002724:	200001c8 	.word	0x200001c8

08002728 <_GLOBAL__sub_I_icm20948>:
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
 800272c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002730:	2001      	movs	r0, #1
 8002732:	f7ff ffd3 	bl	80026dc <_Z41__static_initialization_and_destruction_0ii>
 8002736:	bd80      	pop	{r7, pc}

08002738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002770 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800273c:	480d      	ldr	r0, [pc, #52]	; (8002774 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800273e:	490e      	ldr	r1, [pc, #56]	; (8002778 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002740:	4a0e      	ldr	r2, [pc, #56]	; (800277c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002744:	e002      	b.n	800274c <LoopCopyDataInit>

08002746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274a:	3304      	adds	r3, #4

0800274c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800274c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002750:	d3f9      	bcc.n	8002746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002752:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002754:	4c0b      	ldr	r4, [pc, #44]	; (8002784 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002758:	e001      	b.n	800275e <LoopFillZerobss>

0800275a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800275a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800275c:	3204      	adds	r2, #4

0800275e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002760:	d3fb      	bcc.n	800275a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002762:	f7fe ffa5 	bl	80016b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002766:	f004 f8ed 	bl	8006944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800276a:	f7fe febf 	bl	80014ec <main>
  bx  lr    
 800276e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002770:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002778:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800277c:	08006aac 	.word	0x08006aac
  ldr r2, =_sbss
 8002780:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002784:	20000280 	.word	0x20000280

08002788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002788:	e7fe      	b.n	8002788 <ADC_IRQHandler>
	...

0800278c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_Init+0x40>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <HAL_Init+0x40>)
 8002796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800279a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_Init+0x40>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_Init+0x40>)
 80027a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_Init+0x40>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a07      	ldr	r2, [pc, #28]	; (80027cc <HAL_Init+0x40>)
 80027ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b4:	2003      	movs	r0, #3
 80027b6:	f000 f94f 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f000 f808 	bl	80027d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c0:	f7fe ff18 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023c00 	.word	0x40023c00

080027d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_InitTick+0x54>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_InitTick+0x58>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	4619      	mov	r1, r3
 80027e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f967 	bl	8002ac2 <HAL_SYSTICK_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e00e      	b.n	800281c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b0f      	cmp	r3, #15
 8002802:	d80a      	bhi.n	800281a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002804:	2200      	movs	r2, #0
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	f04f 30ff 	mov.w	r0, #4294967295
 800280c:	f000 f92f 	bl	8002a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002810:	4a06      	ldr	r2, [pc, #24]	; (800282c <HAL_InitTick+0x5c>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	e000      	b.n	800281c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000000 	.word	0x20000000
 8002828:	20000028 	.word	0x20000028
 800282c:	20000024 	.word	0x20000024

08002830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_IncTick+0x20>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_IncTick+0x24>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4413      	add	r3, r2
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_IncTick+0x24>)
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000028 	.word	0x20000028
 8002854:	2000027c 	.word	0x2000027c

08002858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return uwTick;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_GetTick+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	2000027c 	.word	0x2000027c

08002870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002878:	f7ff ffee 	bl	8002858 <HAL_GetTick>
 800287c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d005      	beq.n	8002896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_Delay+0x44>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002896:	bf00      	nop
 8002898:	f7ff ffde 	bl	8002858 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d8f7      	bhi.n	8002898 <HAL_Delay+0x28>
  {
  }
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000028 	.word	0x20000028

080028b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d4:	4013      	ands	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ea:	4a04      	ldr	r2, [pc, #16]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	60d3      	str	r3, [r2, #12]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <__NVIC_GetPriorityGrouping+0x18>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f003 0307 	and.w	r3, r3, #7
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	db0b      	blt.n	8002946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	4907      	ldr	r1, [pc, #28]	; (8002954 <__NVIC_EnableIRQ+0x38>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2001      	movs	r0, #1
 800293e:	fa00 f202 	lsl.w	r2, r0, r2
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000e100 	.word	0xe000e100

08002958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db0a      	blt.n	8002982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	490c      	ldr	r1, [pc, #48]	; (80029a4 <__NVIC_SetPriority+0x4c>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	440b      	add	r3, r1
 800297c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002980:	e00a      	b.n	8002998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <__NVIC_SetPriority+0x50>)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	3b04      	subs	r3, #4
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	440b      	add	r3, r1
 8002996:	761a      	strb	r2, [r3, #24]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f1c3 0307 	rsb	r3, r3, #7
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	bf28      	it	cs
 80029ca:	2304      	movcs	r3, #4
 80029cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d902      	bls.n	80029dc <NVIC_EncodePriority+0x30>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3b03      	subs	r3, #3
 80029da:	e000      	b.n	80029de <NVIC_EncodePriority+0x32>
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	401a      	ands	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	4313      	orrs	r3, r2
         );
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a24:	d301      	bcc.n	8002a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00f      	b.n	8002a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <SysTick_Config+0x40>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a32:	210f      	movs	r1, #15
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	f7ff ff8e 	bl	8002958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <SysTick_Config+0x40>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <SysTick_Config+0x40>)
 8002a44:	2207      	movs	r2, #7
 8002a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	e000e010 	.word	0xe000e010

08002a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff29 	bl	80028b8 <__NVIC_SetPriorityGrouping>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a80:	f7ff ff3e 	bl	8002900 <__NVIC_GetPriorityGrouping>
 8002a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff ff8e 	bl	80029ac <NVIC_EncodePriority>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff5d 	bl	8002958 <__NVIC_SetPriority>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff31 	bl	800291c <__NVIC_EnableIRQ>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffa2 	bl	8002a14 <SysTick_Config>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e159      	b.n	8002dac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f040 8148 	bne.w	8002da6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d005      	beq.n	8002b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d130      	bne.n	8002b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 0201 	and.w	r2, r3, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d017      	beq.n	8002bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d123      	bne.n	8002c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80a2 	beq.w	8002da6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b57      	ldr	r3, [pc, #348]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	4a56      	ldr	r2, [pc, #344]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c70:	6453      	str	r3, [r2, #68]	; 0x44
 8002c72:	4b54      	ldr	r3, [pc, #336]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7e:	4a52      	ldr	r2, [pc, #328]	; (8002dc8 <HAL_GPIO_Init+0x2ec>)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a49      	ldr	r2, [pc, #292]	; (8002dcc <HAL_GPIO_Init+0x2f0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d019      	beq.n	8002cde <HAL_GPIO_Init+0x202>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a48      	ldr	r2, [pc, #288]	; (8002dd0 <HAL_GPIO_Init+0x2f4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_GPIO_Init+0x1fe>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a47      	ldr	r2, [pc, #284]	; (8002dd4 <HAL_GPIO_Init+0x2f8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a46      	ldr	r2, [pc, #280]	; (8002dd8 <HAL_GPIO_Init+0x2fc>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <HAL_GPIO_Init+0x1f6>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a45      	ldr	r2, [pc, #276]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_GPIO_Init+0x1f2>
 8002cca:	2304      	movs	r3, #4
 8002ccc:	e008      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cce:	2307      	movs	r3, #7
 8002cd0:	e006      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e004      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e002      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	f002 0203 	and.w	r2, r2, #3
 8002ce6:	0092      	lsls	r2, r2, #2
 8002ce8:	4093      	lsls	r3, r2
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf0:	4935      	ldr	r1, [pc, #212]	; (8002dc8 <HAL_GPIO_Init+0x2ec>)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cfe:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d22:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d28:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d4c:	4a24      	ldr	r2, [pc, #144]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d52:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d76:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002da0:	4a0f      	ldr	r2, [pc, #60]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3301      	adds	r3, #1
 8002daa:	61fb      	str	r3, [r7, #28]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	2b0f      	cmp	r3, #15
 8002db0:	f67f aea2 	bls.w	8002af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	3724      	adds	r7, #36	; 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40013800 	.word	0x40013800
 8002dcc:	40020000 	.word	0x40020000
 8002dd0:	40020400 	.word	0x40020400
 8002dd4:	40020800 	.word	0x40020800
 8002dd8:	40020c00 	.word	0x40020c00
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40013c00 	.word	0x40013c00

08002de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
 8002df0:	4613      	mov	r3, r2
 8002df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df4:	787b      	ldrb	r3, [r7, #1]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dfa:	887a      	ldrh	r2, [r7, #2]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e00:	e003      	b.n	8002e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e02:	887b      	ldrh	r3, [r7, #2]
 8002e04:	041a      	lsls	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	619a      	str	r2, [r3, #24]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e28:	887a      	ldrh	r2, [r7, #2]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	041a      	lsls	r2, r3, #16
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	43d9      	mvns	r1, r3
 8002e34:	887b      	ldrh	r3, [r7, #2]
 8002e36:	400b      	ands	r3, r1
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	619a      	str	r2, [r3, #24]
}
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e56:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	88fb      	ldrh	r3, [r7, #6]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d006      	beq.n	8002e70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e62:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe fdf0 	bl	8001a50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40013c00 	.word	0x40013c00

08002e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e12b      	b.n	80030e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe fada 	bl	800145c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2224      	movs	r2, #36	; 0x24
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ece:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ede:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ee0:	f001 fbfc 	bl	80046dc <HAL_RCC_GetPCLK1Freq>
 8002ee4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4a81      	ldr	r2, [pc, #516]	; (80030f0 <HAL_I2C_Init+0x274>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d807      	bhi.n	8002f00 <HAL_I2C_Init+0x84>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a80      	ldr	r2, [pc, #512]	; (80030f4 <HAL_I2C_Init+0x278>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	bf94      	ite	ls
 8002ef8:	2301      	movls	r3, #1
 8002efa:	2300      	movhi	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e006      	b.n	8002f0e <HAL_I2C_Init+0x92>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a7d      	ldr	r2, [pc, #500]	; (80030f8 <HAL_I2C_Init+0x27c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	bf94      	ite	ls
 8002f08:	2301      	movls	r3, #1
 8002f0a:	2300      	movhi	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e0e7      	b.n	80030e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a78      	ldr	r2, [pc, #480]	; (80030fc <HAL_I2C_Init+0x280>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	0c9b      	lsrs	r3, r3, #18
 8002f20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a6a      	ldr	r2, [pc, #424]	; (80030f0 <HAL_I2C_Init+0x274>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d802      	bhi.n	8002f50 <HAL_I2C_Init+0xd4>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	e009      	b.n	8002f64 <HAL_I2C_Init+0xe8>
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	4a69      	ldr	r2, [pc, #420]	; (8003100 <HAL_I2C_Init+0x284>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	3301      	adds	r3, #1
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	495c      	ldr	r1, [pc, #368]	; (80030f0 <HAL_I2C_Init+0x274>)
 8002f80:	428b      	cmp	r3, r1
 8002f82:	d819      	bhi.n	8002fb8 <HAL_I2C_Init+0x13c>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1e59      	subs	r1, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f92:	1c59      	adds	r1, r3, #1
 8002f94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f98:	400b      	ands	r3, r1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_I2C_Init+0x138>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1e59      	subs	r1, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb2:	e051      	b.n	8003058 <HAL_I2C_Init+0x1dc>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	e04f      	b.n	8003058 <HAL_I2C_Init+0x1dc>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d111      	bne.n	8002fe4 <HAL_I2C_Init+0x168>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1e58      	subs	r0, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	440b      	add	r3, r1
 8002fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e012      	b.n	800300a <HAL_I2C_Init+0x18e>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1e58      	subs	r0, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	0099      	lsls	r1, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_Init+0x196>
 800300e:	2301      	movs	r3, #1
 8003010:	e022      	b.n	8003058 <HAL_I2C_Init+0x1dc>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10e      	bne.n	8003038 <HAL_I2C_Init+0x1bc>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1e58      	subs	r0, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	440b      	add	r3, r1
 8003028:	fbb0 f3f3 	udiv	r3, r0, r3
 800302c:	3301      	adds	r3, #1
 800302e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003036:	e00f      	b.n	8003058 <HAL_I2C_Init+0x1dc>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1e58      	subs	r0, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	0099      	lsls	r1, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	fbb0 f3f3 	udiv	r3, r0, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	6809      	ldr	r1, [r1, #0]
 800305c:	4313      	orrs	r3, r2
 800305e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003086:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6911      	ldr	r1, [r2, #16]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68d2      	ldr	r2, [r2, #12]
 8003092:	4311      	orrs	r1, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	430b      	orrs	r3, r1
 800309a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	000186a0 	.word	0x000186a0
 80030f4:	001e847f 	.word	0x001e847f
 80030f8:	003d08ff 	.word	0x003d08ff
 80030fc:	431bde83 	.word	0x431bde83
 8003100:	10624dd3 	.word	0x10624dd3

08003104 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	4608      	mov	r0, r1
 800310e:	4611      	mov	r1, r2
 8003110:	461a      	mov	r2, r3
 8003112:	4603      	mov	r3, r0
 8003114:	817b      	strh	r3, [r7, #10]
 8003116:	460b      	mov	r3, r1
 8003118:	813b      	strh	r3, [r7, #8]
 800311a:	4613      	mov	r3, r2
 800311c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800311e:	f7ff fb9b 	bl	8002858 <HAL_GetTick>
 8003122:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b20      	cmp	r3, #32
 800312e:	f040 80d9 	bne.w	80032e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	2319      	movs	r3, #25
 8003138:	2201      	movs	r2, #1
 800313a:	496d      	ldr	r1, [pc, #436]	; (80032f0 <HAL_I2C_Mem_Write+0x1ec>)
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 fc7f 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003148:	2302      	movs	r3, #2
 800314a:	e0cc      	b.n	80032e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_I2C_Mem_Write+0x56>
 8003156:	2302      	movs	r3, #2
 8003158:	e0c5      	b.n	80032e6 <HAL_I2C_Mem_Write+0x1e2>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d007      	beq.n	8003180 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800318e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2221      	movs	r2, #33	; 0x21
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2240      	movs	r2, #64	; 0x40
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a3a      	ldr	r2, [r7, #32]
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a4d      	ldr	r2, [pc, #308]	; (80032f4 <HAL_I2C_Mem_Write+0x1f0>)
 80031c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031c2:	88f8      	ldrh	r0, [r7, #6]
 80031c4:	893a      	ldrh	r2, [r7, #8]
 80031c6:	8979      	ldrh	r1, [r7, #10]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	4603      	mov	r3, r0
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fab6 	bl	8003744 <I2C_RequestMemoryWrite>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d052      	beq.n	8003284 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e081      	b.n	80032e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fd00 	bl	8003bec <I2C_WaitOnTXEFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00d      	beq.n	800320e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d107      	bne.n	800320a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003208:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e06b      	b.n	80032e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b04      	cmp	r3, #4
 800324a:	d11b      	bne.n	8003284 <HAL_I2C_Mem_Write+0x180>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d017      	beq.n	8003284 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1aa      	bne.n	80031e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fcec 	bl	8003c6e <I2C_WaitOnBTFFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00d      	beq.n	80032b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d107      	bne.n	80032b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e016      	b.n	80032e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e000      	b.n	80032e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
  }
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	00100002 	.word	0x00100002
 80032f4:	ffff0000 	.word	0xffff0000

080032f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08c      	sub	sp, #48	; 0x30
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	4608      	mov	r0, r1
 8003302:	4611      	mov	r1, r2
 8003304:	461a      	mov	r2, r3
 8003306:	4603      	mov	r3, r0
 8003308:	817b      	strh	r3, [r7, #10]
 800330a:	460b      	mov	r3, r1
 800330c:	813b      	strh	r3, [r7, #8]
 800330e:	4613      	mov	r3, r2
 8003310:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003312:	f7ff faa1 	bl	8002858 <HAL_GetTick>
 8003316:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b20      	cmp	r3, #32
 8003322:	f040 8208 	bne.w	8003736 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	2319      	movs	r3, #25
 800332c:	2201      	movs	r2, #1
 800332e:	497b      	ldr	r1, [pc, #492]	; (800351c <HAL_I2C_Mem_Read+0x224>)
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fb85 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
 800333e:	e1fb      	b.n	8003738 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_I2C_Mem_Read+0x56>
 800334a:	2302      	movs	r3, #2
 800334c:	e1f4      	b.n	8003738 <HAL_I2C_Mem_Read+0x440>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d007      	beq.n	8003374 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003382:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2222      	movs	r2, #34	; 0x22
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2240      	movs	r2, #64	; 0x40
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80033a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a5b      	ldr	r2, [pc, #364]	; (8003520 <HAL_I2C_Mem_Read+0x228>)
 80033b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033b6:	88f8      	ldrh	r0, [r7, #6]
 80033b8:	893a      	ldrh	r2, [r7, #8]
 80033ba:	8979      	ldrh	r1, [r7, #10]
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	4603      	mov	r3, r0
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fa52 	bl	8003870 <I2C_RequestMemoryRead>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e1b0      	b.n	8003738 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d113      	bne.n	8003406 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	623b      	str	r3, [r7, #32]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	623b      	str	r3, [r7, #32]
 80033f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	e184      	b.n	8003710 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	2b01      	cmp	r3, #1
 800340c:	d11b      	bne.n	8003446 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	e164      	b.n	8003710 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344a:	2b02      	cmp	r3, #2
 800344c:	d11b      	bne.n	8003486 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800346c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	e144      	b.n	8003710 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800349c:	e138      	b.n	8003710 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	f200 80f1 	bhi.w	800368a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d123      	bne.n	80034f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fc1b 	bl	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e139      	b.n	8003738 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034f6:	e10b      	b.n	8003710 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d14e      	bne.n	800359e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003506:	2200      	movs	r2, #0
 8003508:	4906      	ldr	r1, [pc, #24]	; (8003524 <HAL_I2C_Mem_Read+0x22c>)
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 fa98 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e10e      	b.n	8003738 <HAL_I2C_Mem_Read+0x440>
 800351a:	bf00      	nop
 800351c:	00100002 	.word	0x00100002
 8003520:	ffff0000 	.word	0xffff0000
 8003524:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800359c:	e0b8      	b.n	8003710 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a4:	2200      	movs	r2, #0
 80035a6:	4966      	ldr	r1, [pc, #408]	; (8003740 <HAL_I2C_Mem_Read+0x448>)
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fa49 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0bf      	b.n	8003738 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003600:	2200      	movs	r2, #0
 8003602:	494f      	ldr	r1, [pc, #316]	; (8003740 <HAL_I2C_Mem_Read+0x448>)
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fa1b 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e091      	b.n	8003738 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003622:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003688:	e042      	b.n	8003710 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 fb2e 	bl	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e04c      	b.n	8003738 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d118      	bne.n	8003710 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	2b00      	cmp	r3, #0
 8003716:	f47f aec2 	bne.w	800349e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	e000      	b.n	8003738 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003736:	2302      	movs	r3, #2
  }
}
 8003738:	4618      	mov	r0, r3
 800373a:	3728      	adds	r7, #40	; 0x28
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	00010004 	.word	0x00010004

08003744 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	4608      	mov	r0, r1
 800374e:	4611      	mov	r1, r2
 8003750:	461a      	mov	r2, r3
 8003752:	4603      	mov	r3, r0
 8003754:	817b      	strh	r3, [r7, #10]
 8003756:	460b      	mov	r3, r1
 8003758:	813b      	strh	r3, [r7, #8]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800376c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	2200      	movs	r2, #0
 8003776:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f960 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00d      	beq.n	80037a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003794:	d103      	bne.n	800379e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800379c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e05f      	b.n	8003862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037a2:	897b      	ldrh	r3, [r7, #10]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	6a3a      	ldr	r2, [r7, #32]
 80037b6:	492d      	ldr	r1, [pc, #180]	; (800386c <I2C_RequestMemoryWrite+0x128>)
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f998 	bl	8003aee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e04c      	b.n	8003862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e0:	6a39      	ldr	r1, [r7, #32]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fa02 	bl	8003bec <I2C_WaitOnTXEFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00d      	beq.n	800380a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d107      	bne.n	8003806 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003804:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e02b      	b.n	8003862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003810:	893b      	ldrh	r3, [r7, #8]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	611a      	str	r2, [r3, #16]
 800381a:	e021      	b.n	8003860 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800381c:	893b      	ldrh	r3, [r7, #8]
 800381e:	0a1b      	lsrs	r3, r3, #8
 8003820:	b29b      	uxth	r3, r3
 8003822:	b2da      	uxtb	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800382a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382c:	6a39      	ldr	r1, [r7, #32]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f9dc 	bl	8003bec <I2C_WaitOnTXEFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	2b04      	cmp	r3, #4
 8003840:	d107      	bne.n	8003852 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003850:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e005      	b.n	8003862 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003856:	893b      	ldrh	r3, [r7, #8]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	00010002 	.word	0x00010002

08003870 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4603      	mov	r3, r0
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	460b      	mov	r3, r1
 8003884:	813b      	strh	r3, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003898:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f8c2 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00d      	beq.n	80038de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d0:	d103      	bne.n	80038da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e0aa      	b.n	8003a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038de:	897b      	ldrh	r3, [r7, #10]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	6a3a      	ldr	r2, [r7, #32]
 80038f2:	4952      	ldr	r1, [pc, #328]	; (8003a3c <I2C_RequestMemoryRead+0x1cc>)
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f8fa 	bl	8003aee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e097      	b.n	8003a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800391a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391c:	6a39      	ldr	r1, [r7, #32]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f964 	bl	8003bec <I2C_WaitOnTXEFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00d      	beq.n	8003946 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2b04      	cmp	r3, #4
 8003930:	d107      	bne.n	8003942 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003940:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e076      	b.n	8003a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d105      	bne.n	8003958 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800394c:	893b      	ldrh	r3, [r7, #8]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	611a      	str	r2, [r3, #16]
 8003956:	e021      	b.n	800399c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003958:	893b      	ldrh	r3, [r7, #8]
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	b29b      	uxth	r3, r3
 800395e:	b2da      	uxtb	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003968:	6a39      	ldr	r1, [r7, #32]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f93e 	bl	8003bec <I2C_WaitOnTXEFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00d      	beq.n	8003992 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	2b04      	cmp	r3, #4
 800397c:	d107      	bne.n	800398e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e050      	b.n	8003a34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003992:	893b      	ldrh	r3, [r7, #8]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399e:	6a39      	ldr	r1, [r7, #32]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f923 	bl	8003bec <I2C_WaitOnTXEFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00d      	beq.n	80039c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d107      	bne.n	80039c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e035      	b.n	8003a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	2200      	movs	r2, #0
 80039e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f82b 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00d      	beq.n	8003a0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fe:	d103      	bne.n	8003a08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e013      	b.n	8003a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a0c:	897b      	ldrh	r3, [r7, #10]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	6a3a      	ldr	r2, [r7, #32]
 8003a20:	4906      	ldr	r1, [pc, #24]	; (8003a3c <I2C_RequestMemoryRead+0x1cc>)
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f863 	bl	8003aee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	00010002 	.word	0x00010002

08003a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a50:	e025      	b.n	8003a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d021      	beq.n	8003a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5a:	f7fe fefd 	bl	8002858 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d116      	bne.n	8003a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0220 	orr.w	r2, r3, #32
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e023      	b.n	8003ae6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d10d      	bne.n	8003ac4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	e00c      	b.n	8003ade <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	43da      	mvns	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d0b6      	beq.n	8003a52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003afc:	e051      	b.n	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0c:	d123      	bne.n	8003b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f043 0204 	orr.w	r2, r3, #4
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e046      	b.n	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d021      	beq.n	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5e:	f7fe fe7b 	bl	8002858 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d302      	bcc.n	8003b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d116      	bne.n	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f043 0220 	orr.w	r2, r3, #32
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e020      	b.n	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d10c      	bne.n	8003bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	bf14      	ite	ne
 8003bbe:	2301      	movne	r3, #1
 8003bc0:	2300      	moveq	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	e00b      	b.n	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	43da      	mvns	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf14      	ite	ne
 8003bd8:	2301      	movne	r3, #1
 8003bda:	2300      	moveq	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d18d      	bne.n	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bf8:	e02d      	b.n	8003c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f8ce 	bl	8003d9c <I2C_IsAcknowledgeFailed>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e02d      	b.n	8003c66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d021      	beq.n	8003c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c12:	f7fe fe21 	bl	8002858 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d302      	bcc.n	8003c28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d116      	bne.n	8003c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e007      	b.n	8003c66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c60:	2b80      	cmp	r3, #128	; 0x80
 8003c62:	d1ca      	bne.n	8003bfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c7a:	e02d      	b.n	8003cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f88d 	bl	8003d9c <I2C_IsAcknowledgeFailed>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e02d      	b.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c92:	d021      	beq.n	8003cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c94:	f7fe fde0 	bl	8002858 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d302      	bcc.n	8003caa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d116      	bne.n	8003cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e007      	b.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d1ca      	bne.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cfc:	e042      	b.n	8003d84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d119      	bne.n	8003d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0210 	mvn.w	r2, #16
 8003d14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e029      	b.n	8003d94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d40:	f7fe fd8a 	bl	8002858 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d302      	bcc.n	8003d56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d116      	bne.n	8003d84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f043 0220 	orr.w	r2, r3, #32
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e007      	b.n	8003d94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d1b5      	bne.n	8003cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db2:	d11b      	bne.n	8003dec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	f043 0204 	orr.w	r2, r3, #4
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e267      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d075      	beq.n	8003f06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e1a:	4b88      	ldr	r3, [pc, #544]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d00c      	beq.n	8003e40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e26:	4b85      	ldr	r3, [pc, #532]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d112      	bne.n	8003e58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e32:	4b82      	ldr	r3, [pc, #520]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e3e:	d10b      	bne.n	8003e58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e40:	4b7e      	ldr	r3, [pc, #504]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d05b      	beq.n	8003f04 <HAL_RCC_OscConfig+0x108>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d157      	bne.n	8003f04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e242      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e60:	d106      	bne.n	8003e70 <HAL_RCC_OscConfig+0x74>
 8003e62:	4b76      	ldr	r3, [pc, #472]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a75      	ldr	r2, [pc, #468]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e01d      	b.n	8003eac <HAL_RCC_OscConfig+0xb0>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x98>
 8003e7a:	4b70      	ldr	r3, [pc, #448]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a6f      	ldr	r2, [pc, #444]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b6d      	ldr	r3, [pc, #436]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a6c      	ldr	r2, [pc, #432]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e00b      	b.n	8003eac <HAL_RCC_OscConfig+0xb0>
 8003e94:	4b69      	ldr	r3, [pc, #420]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a68      	ldr	r2, [pc, #416]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b66      	ldr	r3, [pc, #408]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a65      	ldr	r2, [pc, #404]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d013      	beq.n	8003edc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fcd0 	bl	8002858 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fe fccc 	bl	8002858 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e207      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ece:	4b5b      	ldr	r3, [pc, #364]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0xc0>
 8003eda:	e014      	b.n	8003f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7fe fcbc 	bl	8002858 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee4:	f7fe fcb8 	bl	8002858 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	; 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e1f3      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef6:	4b51      	ldr	r3, [pc, #324]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0xe8>
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d063      	beq.n	8003fda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f12:	4b4a      	ldr	r3, [pc, #296]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f1e:	4b47      	ldr	r3, [pc, #284]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d11c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f2a:	4b44      	ldr	r3, [pc, #272]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d116      	bne.n	8003f64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	4b41      	ldr	r3, [pc, #260]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_RCC_OscConfig+0x152>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d001      	beq.n	8003f4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e1c7      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4937      	ldr	r1, [pc, #220]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f62:	e03a      	b.n	8003fda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d020      	beq.n	8003fae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f6c:	4b34      	ldr	r3, [pc, #208]	; (8004040 <HAL_RCC_OscConfig+0x244>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f72:	f7fe fc71 	bl	8002858 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f7a:	f7fe fc6d 	bl	8002858 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e1a8      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8c:	4b2b      	ldr	r3, [pc, #172]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f98:	4b28      	ldr	r3, [pc, #160]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4925      	ldr	r1, [pc, #148]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	600b      	str	r3, [r1, #0]
 8003fac:	e015      	b.n	8003fda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fae:	4b24      	ldr	r3, [pc, #144]	; (8004040 <HAL_RCC_OscConfig+0x244>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fe fc50 	bl	8002858 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fbc:	f7fe fc4c 	bl	8002858 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e187      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fce:	4b1b      	ldr	r3, [pc, #108]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d036      	beq.n	8004054 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d016      	beq.n	800401c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fee:	4b15      	ldr	r3, [pc, #84]	; (8004044 <HAL_RCC_OscConfig+0x248>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff4:	f7fe fc30 	bl	8002858 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ffc:	f7fe fc2c 	bl	8002858 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e167      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800400e:	4b0b      	ldr	r3, [pc, #44]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8004010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x200>
 800401a:	e01b      	b.n	8004054 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800401c:	4b09      	ldr	r3, [pc, #36]	; (8004044 <HAL_RCC_OscConfig+0x248>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004022:	f7fe fc19 	bl	8002858 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004028:	e00e      	b.n	8004048 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800402a:	f7fe fc15 	bl	8002858 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d907      	bls.n	8004048 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e150      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
 800403c:	40023800 	.word	0x40023800
 8004040:	42470000 	.word	0x42470000
 8004044:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004048:	4b88      	ldr	r3, [pc, #544]	; (800426c <HAL_RCC_OscConfig+0x470>)
 800404a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1ea      	bne.n	800402a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8097 	beq.w	8004190 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004066:	4b81      	ldr	r3, [pc, #516]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10f      	bne.n	8004092 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	4b7d      	ldr	r3, [pc, #500]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	4a7c      	ldr	r2, [pc, #496]	; (800426c <HAL_RCC_OscConfig+0x470>)
 800407c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004080:	6413      	str	r3, [r2, #64]	; 0x40
 8004082:	4b7a      	ldr	r3, [pc, #488]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800408e:	2301      	movs	r3, #1
 8004090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004092:	4b77      	ldr	r3, [pc, #476]	; (8004270 <HAL_RCC_OscConfig+0x474>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409a:	2b00      	cmp	r3, #0
 800409c:	d118      	bne.n	80040d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800409e:	4b74      	ldr	r3, [pc, #464]	; (8004270 <HAL_RCC_OscConfig+0x474>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a73      	ldr	r2, [pc, #460]	; (8004270 <HAL_RCC_OscConfig+0x474>)
 80040a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040aa:	f7fe fbd5 	bl	8002858 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b2:	f7fe fbd1 	bl	8002858 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e10c      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c4:	4b6a      	ldr	r3, [pc, #424]	; (8004270 <HAL_RCC_OscConfig+0x474>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d106      	bne.n	80040e6 <HAL_RCC_OscConfig+0x2ea>
 80040d8:	4b64      	ldr	r3, [pc, #400]	; (800426c <HAL_RCC_OscConfig+0x470>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	4a63      	ldr	r2, [pc, #396]	; (800426c <HAL_RCC_OscConfig+0x470>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	6713      	str	r3, [r2, #112]	; 0x70
 80040e4:	e01c      	b.n	8004120 <HAL_RCC_OscConfig+0x324>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	d10c      	bne.n	8004108 <HAL_RCC_OscConfig+0x30c>
 80040ee:	4b5f      	ldr	r3, [pc, #380]	; (800426c <HAL_RCC_OscConfig+0x470>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	4a5e      	ldr	r2, [pc, #376]	; (800426c <HAL_RCC_OscConfig+0x470>)
 80040f4:	f043 0304 	orr.w	r3, r3, #4
 80040f8:	6713      	str	r3, [r2, #112]	; 0x70
 80040fa:	4b5c      	ldr	r3, [pc, #368]	; (800426c <HAL_RCC_OscConfig+0x470>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fe:	4a5b      	ldr	r2, [pc, #364]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	6713      	str	r3, [r2, #112]	; 0x70
 8004106:	e00b      	b.n	8004120 <HAL_RCC_OscConfig+0x324>
 8004108:	4b58      	ldr	r3, [pc, #352]	; (800426c <HAL_RCC_OscConfig+0x470>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	4a57      	ldr	r2, [pc, #348]	; (800426c <HAL_RCC_OscConfig+0x470>)
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	6713      	str	r3, [r2, #112]	; 0x70
 8004114:	4b55      	ldr	r3, [pc, #340]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004118:	4a54      	ldr	r2, [pc, #336]	; (800426c <HAL_RCC_OscConfig+0x470>)
 800411a:	f023 0304 	bic.w	r3, r3, #4
 800411e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d015      	beq.n	8004154 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fe fb96 	bl	8002858 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412e:	e00a      	b.n	8004146 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004130:	f7fe fb92 	bl	8002858 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	; 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e0cb      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004146:	4b49      	ldr	r3, [pc, #292]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0ee      	beq.n	8004130 <HAL_RCC_OscConfig+0x334>
 8004152:	e014      	b.n	800417e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004154:	f7fe fb80 	bl	8002858 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415a:	e00a      	b.n	8004172 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800415c:	f7fe fb7c 	bl	8002858 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e0b5      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004172:	4b3e      	ldr	r3, [pc, #248]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1ee      	bne.n	800415c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d105      	bne.n	8004190 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004184:	4b39      	ldr	r3, [pc, #228]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	4a38      	ldr	r2, [pc, #224]	; (800426c <HAL_RCC_OscConfig+0x470>)
 800418a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800418e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80a1 	beq.w	80042dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800419a:	4b34      	ldr	r3, [pc, #208]	; (800426c <HAL_RCC_OscConfig+0x470>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d05c      	beq.n	8004260 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d141      	bne.n	8004232 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ae:	4b31      	ldr	r3, [pc, #196]	; (8004274 <HAL_RCC_OscConfig+0x478>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b4:	f7fe fb50 	bl	8002858 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fe fb4c 	bl	8002858 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e087      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ce:	4b27      	ldr	r3, [pc, #156]	; (800426c <HAL_RCC_OscConfig+0x470>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	019b      	lsls	r3, r3, #6
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	085b      	lsrs	r3, r3, #1
 80041f2:	3b01      	subs	r3, #1
 80041f4:	041b      	lsls	r3, r3, #16
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	061b      	lsls	r3, r3, #24
 80041fe:	491b      	ldr	r1, [pc, #108]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004204:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <HAL_RCC_OscConfig+0x478>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420a:	f7fe fb25 	bl	8002858 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004212:	f7fe fb21 	bl	8002858 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e05c      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004224:	4b11      	ldr	r3, [pc, #68]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x416>
 8004230:	e054      	b.n	80042dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004232:	4b10      	ldr	r3, [pc, #64]	; (8004274 <HAL_RCC_OscConfig+0x478>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004238:	f7fe fb0e 	bl	8002858 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004240:	f7fe fb0a 	bl	8002858 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e045      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x444>
 800425e:	e03d      	b.n	80042dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d107      	bne.n	8004278 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e038      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
 800426c:	40023800 	.word	0x40023800
 8004270:	40007000 	.word	0x40007000
 8004274:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004278:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <HAL_RCC_OscConfig+0x4ec>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d028      	beq.n	80042d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d121      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d11a      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042a8:	4013      	ands	r3, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d111      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	3b01      	subs	r3, #1
 80042c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d107      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800

080042ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0cc      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004300:	4b68      	ldr	r3, [pc, #416]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d90c      	bls.n	8004328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	4b65      	ldr	r3, [pc, #404]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b63      	ldr	r3, [pc, #396]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0b8      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004340:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a58      	ldr	r2, [pc, #352]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800434a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004358:	4b53      	ldr	r3, [pc, #332]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4a52      	ldr	r2, [pc, #328]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004364:	4b50      	ldr	r3, [pc, #320]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	494d      	ldr	r1, [pc, #308]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d044      	beq.n	800440c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d107      	bne.n	800439a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438a:	4b47      	ldr	r3, [pc, #284]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d119      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e07f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d003      	beq.n	80043aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d107      	bne.n	80043ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043aa:	4b3f      	ldr	r3, [pc, #252]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e06f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ba:	4b3b      	ldr	r3, [pc, #236]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e067      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ca:	4b37      	ldr	r3, [pc, #220]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f023 0203 	bic.w	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4934      	ldr	r1, [pc, #208]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043dc:	f7fe fa3c 	bl	8002858 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e4:	f7fe fa38 	bl	8002858 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e04f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 020c 	and.w	r2, r3, #12
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	429a      	cmp	r2, r3
 800440a:	d1eb      	bne.n	80043e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800440c:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d20c      	bcs.n	8004434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e032      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004440:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4916      	ldr	r1, [pc, #88]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	490e      	ldr	r1, [pc, #56]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004472:	f000 f821 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8004476:	4602      	mov	r2, r0
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	490a      	ldr	r1, [pc, #40]	; (80044ac <HAL_RCC_ClockConfig+0x1c0>)
 8004484:	5ccb      	ldrb	r3, [r1, r3]
 8004486:	fa22 f303 	lsr.w	r3, r2, r3
 800448a:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 800448c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800448e:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fe f99c 	bl	80027d0 <HAL_InitTick>

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023c00 	.word	0x40023c00
 80044a8:	40023800 	.word	0x40023800
 80044ac:	080069d8 	.word	0x080069d8
 80044b0:	20000000 	.word	0x20000000
 80044b4:	20000024 	.word	0x20000024

080044b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044bc:	b094      	sub	sp, #80	; 0x50
 80044be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	647b      	str	r3, [r7, #68]	; 0x44
 80044c4:	2300      	movs	r3, #0
 80044c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c8:	2300      	movs	r3, #0
 80044ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d0:	4b79      	ldr	r3, [pc, #484]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d00d      	beq.n	80044f8 <HAL_RCC_GetSysClockFreq+0x40>
 80044dc:	2b08      	cmp	r3, #8
 80044de:	f200 80e1 	bhi.w	80046a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0x34>
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d003      	beq.n	80044f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ea:	e0db      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044ec:	4b73      	ldr	r3, [pc, #460]	; (80046bc <HAL_RCC_GetSysClockFreq+0x204>)
 80044ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044f0:	e0db      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044f2:	4b73      	ldr	r3, [pc, #460]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80044f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044f6:	e0d8      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044f8:	4b6f      	ldr	r3, [pc, #444]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004500:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004502:	4b6d      	ldr	r3, [pc, #436]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d063      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800450e:	4b6a      	ldr	r3, [pc, #424]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	099b      	lsrs	r3, r3, #6
 8004514:	2200      	movs	r2, #0
 8004516:	63bb      	str	r3, [r7, #56]	; 0x38
 8004518:	63fa      	str	r2, [r7, #60]	; 0x3c
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004520:	633b      	str	r3, [r7, #48]	; 0x30
 8004522:	2300      	movs	r3, #0
 8004524:	637b      	str	r3, [r7, #52]	; 0x34
 8004526:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800452a:	4622      	mov	r2, r4
 800452c:	462b      	mov	r3, r5
 800452e:	f04f 0000 	mov.w	r0, #0
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	0159      	lsls	r1, r3, #5
 8004538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800453c:	0150      	lsls	r0, r2, #5
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4621      	mov	r1, r4
 8004544:	1a51      	subs	r1, r2, r1
 8004546:	6139      	str	r1, [r7, #16]
 8004548:	4629      	mov	r1, r5
 800454a:	eb63 0301 	sbc.w	r3, r3, r1
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800455c:	4659      	mov	r1, fp
 800455e:	018b      	lsls	r3, r1, #6
 8004560:	4651      	mov	r1, sl
 8004562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004566:	4651      	mov	r1, sl
 8004568:	018a      	lsls	r2, r1, #6
 800456a:	4651      	mov	r1, sl
 800456c:	ebb2 0801 	subs.w	r8, r2, r1
 8004570:	4659      	mov	r1, fp
 8004572:	eb63 0901 	sbc.w	r9, r3, r1
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458a:	4690      	mov	r8, r2
 800458c:	4699      	mov	r9, r3
 800458e:	4623      	mov	r3, r4
 8004590:	eb18 0303 	adds.w	r3, r8, r3
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	462b      	mov	r3, r5
 8004598:	eb49 0303 	adc.w	r3, r9, r3
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045aa:	4629      	mov	r1, r5
 80045ac:	024b      	lsls	r3, r1, #9
 80045ae:	4621      	mov	r1, r4
 80045b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045b4:	4621      	mov	r1, r4
 80045b6:	024a      	lsls	r2, r1, #9
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045be:	2200      	movs	r2, #0
 80045c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045c8:	f7fc fac2 	bl	8000b50 <__aeabi_uldivmod>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4613      	mov	r3, r2
 80045d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d4:	e058      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d6:	4b38      	ldr	r3, [pc, #224]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	099b      	lsrs	r3, r3, #6
 80045dc:	2200      	movs	r2, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	4611      	mov	r1, r2
 80045e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045e6:	623b      	str	r3, [r7, #32]
 80045e8:	2300      	movs	r3, #0
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
 80045ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	f04f 0000 	mov.w	r0, #0
 80045f8:	f04f 0100 	mov.w	r1, #0
 80045fc:	0159      	lsls	r1, r3, #5
 80045fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004602:	0150      	lsls	r0, r2, #5
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4641      	mov	r1, r8
 800460a:	ebb2 0a01 	subs.w	sl, r2, r1
 800460e:	4649      	mov	r1, r9
 8004610:	eb63 0b01 	sbc.w	fp, r3, r1
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004620:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004624:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004628:	ebb2 040a 	subs.w	r4, r2, sl
 800462c:	eb63 050b 	sbc.w	r5, r3, fp
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	00eb      	lsls	r3, r5, #3
 800463a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800463e:	00e2      	lsls	r2, r4, #3
 8004640:	4614      	mov	r4, r2
 8004642:	461d      	mov	r5, r3
 8004644:	4643      	mov	r3, r8
 8004646:	18e3      	adds	r3, r4, r3
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	464b      	mov	r3, r9
 800464c:	eb45 0303 	adc.w	r3, r5, r3
 8004650:	607b      	str	r3, [r7, #4]
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800465e:	4629      	mov	r1, r5
 8004660:	028b      	lsls	r3, r1, #10
 8004662:	4621      	mov	r1, r4
 8004664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004668:	4621      	mov	r1, r4
 800466a:	028a      	lsls	r2, r1, #10
 800466c:	4610      	mov	r0, r2
 800466e:	4619      	mov	r1, r3
 8004670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004672:	2200      	movs	r2, #0
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	61fa      	str	r2, [r7, #28]
 8004678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800467c:	f7fc fa68 	bl	8000b50 <__aeabi_uldivmod>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4613      	mov	r3, r2
 8004686:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	3301      	adds	r3, #1
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800469a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046a2:	e002      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_GetSysClockFreq+0x204>)
 80046a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3750      	adds	r7, #80	; 0x50
 80046b0:	46bd      	mov	sp, r7
 80046b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800
 80046bc:	00f42400 	.word	0x00f42400
 80046c0:	007a1200 	.word	0x007a1200

080046c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c8:	4b03      	ldr	r3, [pc, #12]	; (80046d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ca:	681b      	ldr	r3, [r3, #0]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000000 	.word	0x20000000

080046dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046e0:	f7ff fff0 	bl	80046c4 <HAL_RCC_GetHCLKFreq>
 80046e4:	4602      	mov	r2, r0
 80046e6:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	0a9b      	lsrs	r3, r3, #10
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	4903      	ldr	r1, [pc, #12]	; (8004700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f2:	5ccb      	ldrb	r3, [r1, r3]
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40023800 	.word	0x40023800
 8004700:	080069e8 	.word	0x080069e8

08004704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004708:	f7ff ffdc 	bl	80046c4 <HAL_RCC_GetHCLKFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	0b5b      	lsrs	r3, r3, #13
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	4903      	ldr	r1, [pc, #12]	; (8004728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40023800 	.word	0x40023800
 8004728:	080069e8 	.word	0x080069e8

0800472c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e041      	b.n	80047c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fd f80e 	bl	8001774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f000 f950 	bl	8004a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d001      	beq.n	80047e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e03c      	b.n	800485e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1e      	ldr	r2, [pc, #120]	; (800486c <HAL_TIM_Base_Start+0xa0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d018      	beq.n	8004828 <HAL_TIM_Base_Start+0x5c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fe:	d013      	beq.n	8004828 <HAL_TIM_Base_Start+0x5c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1a      	ldr	r2, [pc, #104]	; (8004870 <HAL_TIM_Base_Start+0xa4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00e      	beq.n	8004828 <HAL_TIM_Base_Start+0x5c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a19      	ldr	r2, [pc, #100]	; (8004874 <HAL_TIM_Base_Start+0xa8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d009      	beq.n	8004828 <HAL_TIM_Base_Start+0x5c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a17      	ldr	r2, [pc, #92]	; (8004878 <HAL_TIM_Base_Start+0xac>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d004      	beq.n	8004828 <HAL_TIM_Base_Start+0x5c>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a16      	ldr	r2, [pc, #88]	; (800487c <HAL_TIM_Base_Start+0xb0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d111      	bne.n	800484c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b06      	cmp	r3, #6
 8004838:	d010      	beq.n	800485c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484a:	e007      	b.n	800485c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40010000 	.word	0x40010000
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40000c00 	.word	0x40000c00
 800487c:	40014000 	.word	0x40014000

08004880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_TIM_ConfigClockSource+0x1c>
 8004898:	2302      	movs	r3, #2
 800489a:	e0b4      	b.n	8004a06 <HAL_TIM_ConfigClockSource+0x186>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d4:	d03e      	beq.n	8004954 <HAL_TIM_ConfigClockSource+0xd4>
 80048d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048da:	f200 8087 	bhi.w	80049ec <HAL_TIM_ConfigClockSource+0x16c>
 80048de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e2:	f000 8086 	beq.w	80049f2 <HAL_TIM_ConfigClockSource+0x172>
 80048e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ea:	d87f      	bhi.n	80049ec <HAL_TIM_ConfigClockSource+0x16c>
 80048ec:	2b70      	cmp	r3, #112	; 0x70
 80048ee:	d01a      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0xa6>
 80048f0:	2b70      	cmp	r3, #112	; 0x70
 80048f2:	d87b      	bhi.n	80049ec <HAL_TIM_ConfigClockSource+0x16c>
 80048f4:	2b60      	cmp	r3, #96	; 0x60
 80048f6:	d050      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x11a>
 80048f8:	2b60      	cmp	r3, #96	; 0x60
 80048fa:	d877      	bhi.n	80049ec <HAL_TIM_ConfigClockSource+0x16c>
 80048fc:	2b50      	cmp	r3, #80	; 0x50
 80048fe:	d03c      	beq.n	800497a <HAL_TIM_ConfigClockSource+0xfa>
 8004900:	2b50      	cmp	r3, #80	; 0x50
 8004902:	d873      	bhi.n	80049ec <HAL_TIM_ConfigClockSource+0x16c>
 8004904:	2b40      	cmp	r3, #64	; 0x40
 8004906:	d058      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x13a>
 8004908:	2b40      	cmp	r3, #64	; 0x40
 800490a:	d86f      	bhi.n	80049ec <HAL_TIM_ConfigClockSource+0x16c>
 800490c:	2b30      	cmp	r3, #48	; 0x30
 800490e:	d064      	beq.n	80049da <HAL_TIM_ConfigClockSource+0x15a>
 8004910:	2b30      	cmp	r3, #48	; 0x30
 8004912:	d86b      	bhi.n	80049ec <HAL_TIM_ConfigClockSource+0x16c>
 8004914:	2b20      	cmp	r3, #32
 8004916:	d060      	beq.n	80049da <HAL_TIM_ConfigClockSource+0x15a>
 8004918:	2b20      	cmp	r3, #32
 800491a:	d867      	bhi.n	80049ec <HAL_TIM_ConfigClockSource+0x16c>
 800491c:	2b00      	cmp	r3, #0
 800491e:	d05c      	beq.n	80049da <HAL_TIM_ConfigClockSource+0x15a>
 8004920:	2b10      	cmp	r3, #16
 8004922:	d05a      	beq.n	80049da <HAL_TIM_ConfigClockSource+0x15a>
 8004924:	e062      	b.n	80049ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	6899      	ldr	r1, [r3, #8]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f000 f965 	bl	8004c04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004948:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	609a      	str	r2, [r3, #8]
      break;
 8004952:	e04f      	b.n	80049f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	6899      	ldr	r1, [r3, #8]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f000 f94e 	bl	8004c04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004976:	609a      	str	r2, [r3, #8]
      break;
 8004978:	e03c      	b.n	80049f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6859      	ldr	r1, [r3, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	461a      	mov	r2, r3
 8004988:	f000 f8c2 	bl	8004b10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2150      	movs	r1, #80	; 0x50
 8004992:	4618      	mov	r0, r3
 8004994:	f000 f91b 	bl	8004bce <TIM_ITRx_SetConfig>
      break;
 8004998:	e02c      	b.n	80049f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6859      	ldr	r1, [r3, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f000 f8e1 	bl	8004b6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2160      	movs	r1, #96	; 0x60
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 f90b 	bl	8004bce <TIM_ITRx_SetConfig>
      break;
 80049b8:	e01c      	b.n	80049f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	6859      	ldr	r1, [r3, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	461a      	mov	r2, r3
 80049c8:	f000 f8a2 	bl	8004b10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2140      	movs	r1, #64	; 0x40
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f8fb 	bl	8004bce <TIM_ITRx_SetConfig>
      break;
 80049d8:	e00c      	b.n	80049f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4619      	mov	r1, r3
 80049e4:	4610      	mov	r0, r2
 80049e6:	f000 f8f2 	bl	8004bce <TIM_ITRx_SetConfig>
      break;
 80049ea:	e003      	b.n	80049f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	73fb      	strb	r3, [r7, #15]
      break;
 80049f0:	e000      	b.n	80049f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a34      	ldr	r2, [pc, #208]	; (8004af4 <TIM_Base_SetConfig+0xe4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00f      	beq.n	8004a48 <TIM_Base_SetConfig+0x38>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2e:	d00b      	beq.n	8004a48 <TIM_Base_SetConfig+0x38>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a31      	ldr	r2, [pc, #196]	; (8004af8 <TIM_Base_SetConfig+0xe8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d007      	beq.n	8004a48 <TIM_Base_SetConfig+0x38>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a30      	ldr	r2, [pc, #192]	; (8004afc <TIM_Base_SetConfig+0xec>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_Base_SetConfig+0x38>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a2f      	ldr	r2, [pc, #188]	; (8004b00 <TIM_Base_SetConfig+0xf0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d108      	bne.n	8004a5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a25      	ldr	r2, [pc, #148]	; (8004af4 <TIM_Base_SetConfig+0xe4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d01b      	beq.n	8004a9a <TIM_Base_SetConfig+0x8a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a68:	d017      	beq.n	8004a9a <TIM_Base_SetConfig+0x8a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a22      	ldr	r2, [pc, #136]	; (8004af8 <TIM_Base_SetConfig+0xe8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <TIM_Base_SetConfig+0x8a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a21      	ldr	r2, [pc, #132]	; (8004afc <TIM_Base_SetConfig+0xec>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00f      	beq.n	8004a9a <TIM_Base_SetConfig+0x8a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a20      	ldr	r2, [pc, #128]	; (8004b00 <TIM_Base_SetConfig+0xf0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00b      	beq.n	8004a9a <TIM_Base_SetConfig+0x8a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1f      	ldr	r2, [pc, #124]	; (8004b04 <TIM_Base_SetConfig+0xf4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d007      	beq.n	8004a9a <TIM_Base_SetConfig+0x8a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1e      	ldr	r2, [pc, #120]	; (8004b08 <TIM_Base_SetConfig+0xf8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_Base_SetConfig+0x8a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <TIM_Base_SetConfig+0xfc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d108      	bne.n	8004aac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a08      	ldr	r2, [pc, #32]	; (8004af4 <TIM_Base_SetConfig+0xe4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d103      	bne.n	8004ae0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	615a      	str	r2, [r3, #20]
}
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40010000 	.word	0x40010000
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40000c00 	.word	0x40000c00
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800

08004b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f023 0201 	bic.w	r2, r3, #1
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f023 030a 	bic.w	r3, r3, #10
 8004b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	621a      	str	r2, [r3, #32]
}
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b087      	sub	sp, #28
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f023 0210 	bic.w	r2, r3, #16
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	031b      	lsls	r3, r3, #12
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004baa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	621a      	str	r2, [r3, #32]
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b085      	sub	sp, #20
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f043 0307 	orr.w	r3, r3, #7
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	609a      	str	r2, [r3, #8]
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	021a      	lsls	r2, r3, #8
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	609a      	str	r2, [r3, #8]
}
 8004c38:	bf00      	nop
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e050      	b.n	8004cfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d018      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca8:	d013      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00e      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a16      	ldr	r2, [pc, #88]	; (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d009      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a15      	ldr	r2, [pc, #84]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d10c      	bne.n	8004cec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40010000 	.word	0x40010000
 8004d10:	40000400 	.word	0x40000400
 8004d14:	40000800 	.word	0x40000800
 8004d18:	40000c00 	.word	0x40000c00
 8004d1c:	40014000 	.word	0x40014000

08004d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e03f      	b.n	8004db2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fc fd60 	bl	800180c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2224      	movs	r2, #36	; 0x24
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f829 	bl	8004dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695a      	ldr	r2, [r3, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc0:	b0c0      	sub	sp, #256	; 0x100
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd8:	68d9      	ldr	r1, [r3, #12]
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	ea40 0301 	orr.w	r3, r0, r1
 8004de4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e14:	f021 010c 	bic.w	r1, r1, #12
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e22:	430b      	orrs	r3, r1
 8004e24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e36:	6999      	ldr	r1, [r3, #24]
 8004e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	ea40 0301 	orr.w	r3, r0, r1
 8004e42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4b8f      	ldr	r3, [pc, #572]	; (8005088 <UART_SetConfig+0x2cc>)
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d005      	beq.n	8004e5c <UART_SetConfig+0xa0>
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b8d      	ldr	r3, [pc, #564]	; (800508c <UART_SetConfig+0x2d0>)
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d104      	bne.n	8004e66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e5c:	f7ff fc52 	bl	8004704 <HAL_RCC_GetPCLK2Freq>
 8004e60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e64:	e003      	b.n	8004e6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e66:	f7ff fc39 	bl	80046dc <HAL_RCC_GetPCLK1Freq>
 8004e6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e78:	f040 810c 	bne.w	8005094 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e8e:	4622      	mov	r2, r4
 8004e90:	462b      	mov	r3, r5
 8004e92:	1891      	adds	r1, r2, r2
 8004e94:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e96:	415b      	adcs	r3, r3
 8004e98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	eb12 0801 	adds.w	r8, r2, r1
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	eb43 0901 	adc.w	r9, r3, r1
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ebe:	4690      	mov	r8, r2
 8004ec0:	4699      	mov	r9, r3
 8004ec2:	4623      	mov	r3, r4
 8004ec4:	eb18 0303 	adds.w	r3, r8, r3
 8004ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ecc:	462b      	mov	r3, r5
 8004ece:	eb49 0303 	adc.w	r3, r9, r3
 8004ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ee2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ee6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004eea:	460b      	mov	r3, r1
 8004eec:	18db      	adds	r3, r3, r3
 8004eee:	653b      	str	r3, [r7, #80]	; 0x50
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	eb42 0303 	adc.w	r3, r2, r3
 8004ef6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ef8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004efc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f00:	f7fb fe26 	bl	8000b50 <__aeabi_uldivmod>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4b61      	ldr	r3, [pc, #388]	; (8005090 <UART_SetConfig+0x2d4>)
 8004f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	011c      	lsls	r4, r3, #4
 8004f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f24:	4642      	mov	r2, r8
 8004f26:	464b      	mov	r3, r9
 8004f28:	1891      	adds	r1, r2, r2
 8004f2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f2c:	415b      	adcs	r3, r3
 8004f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f34:	4641      	mov	r1, r8
 8004f36:	eb12 0a01 	adds.w	sl, r2, r1
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	eb43 0b01 	adc.w	fp, r3, r1
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f54:	4692      	mov	sl, r2
 8004f56:	469b      	mov	fp, r3
 8004f58:	4643      	mov	r3, r8
 8004f5a:	eb1a 0303 	adds.w	r3, sl, r3
 8004f5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f62:	464b      	mov	r3, r9
 8004f64:	eb4b 0303 	adc.w	r3, fp, r3
 8004f68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f80:	460b      	mov	r3, r1
 8004f82:	18db      	adds	r3, r3, r3
 8004f84:	643b      	str	r3, [r7, #64]	; 0x40
 8004f86:	4613      	mov	r3, r2
 8004f88:	eb42 0303 	adc.w	r3, r2, r3
 8004f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f96:	f7fb fddb 	bl	8000b50 <__aeabi_uldivmod>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4b3b      	ldr	r3, [pc, #236]	; (8005090 <UART_SetConfig+0x2d4>)
 8004fa2:	fba3 2301 	umull	r2, r3, r3, r1
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	2264      	movs	r2, #100	; 0x64
 8004faa:	fb02 f303 	mul.w	r3, r2, r3
 8004fae:	1acb      	subs	r3, r1, r3
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fb6:	4b36      	ldr	r3, [pc, #216]	; (8005090 <UART_SetConfig+0x2d4>)
 8004fb8:	fba3 2302 	umull	r2, r3, r3, r2
 8004fbc:	095b      	lsrs	r3, r3, #5
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fc4:	441c      	add	r4, r3
 8004fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fd8:	4642      	mov	r2, r8
 8004fda:	464b      	mov	r3, r9
 8004fdc:	1891      	adds	r1, r2, r2
 8004fde:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fe0:	415b      	adcs	r3, r3
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fe8:	4641      	mov	r1, r8
 8004fea:	1851      	adds	r1, r2, r1
 8004fec:	6339      	str	r1, [r7, #48]	; 0x30
 8004fee:	4649      	mov	r1, r9
 8004ff0:	414b      	adcs	r3, r1
 8004ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005000:	4659      	mov	r1, fp
 8005002:	00cb      	lsls	r3, r1, #3
 8005004:	4651      	mov	r1, sl
 8005006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800500a:	4651      	mov	r1, sl
 800500c:	00ca      	lsls	r2, r1, #3
 800500e:	4610      	mov	r0, r2
 8005010:	4619      	mov	r1, r3
 8005012:	4603      	mov	r3, r0
 8005014:	4642      	mov	r2, r8
 8005016:	189b      	adds	r3, r3, r2
 8005018:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800501c:	464b      	mov	r3, r9
 800501e:	460a      	mov	r2, r1
 8005020:	eb42 0303 	adc.w	r3, r2, r3
 8005024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005034:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005038:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800503c:	460b      	mov	r3, r1
 800503e:	18db      	adds	r3, r3, r3
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
 8005042:	4613      	mov	r3, r2
 8005044:	eb42 0303 	adc.w	r3, r2, r3
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800504a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800504e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005052:	f7fb fd7d 	bl	8000b50 <__aeabi_uldivmod>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <UART_SetConfig+0x2d4>)
 800505c:	fba3 1302 	umull	r1, r3, r3, r2
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	2164      	movs	r1, #100	; 0x64
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	3332      	adds	r3, #50	; 0x32
 800506e:	4a08      	ldr	r2, [pc, #32]	; (8005090 <UART_SetConfig+0x2d4>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	f003 0207 	and.w	r2, r3, #7
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4422      	add	r2, r4
 8005082:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005084:	e105      	b.n	8005292 <UART_SetConfig+0x4d6>
 8005086:	bf00      	nop
 8005088:	40011000 	.word	0x40011000
 800508c:	40011400 	.word	0x40011400
 8005090:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005094:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005098:	2200      	movs	r2, #0
 800509a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800509e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050a6:	4642      	mov	r2, r8
 80050a8:	464b      	mov	r3, r9
 80050aa:	1891      	adds	r1, r2, r2
 80050ac:	6239      	str	r1, [r7, #32]
 80050ae:	415b      	adcs	r3, r3
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
 80050b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050b6:	4641      	mov	r1, r8
 80050b8:	1854      	adds	r4, r2, r1
 80050ba:	4649      	mov	r1, r9
 80050bc:	eb43 0501 	adc.w	r5, r3, r1
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	00eb      	lsls	r3, r5, #3
 80050ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ce:	00e2      	lsls	r2, r4, #3
 80050d0:	4614      	mov	r4, r2
 80050d2:	461d      	mov	r5, r3
 80050d4:	4643      	mov	r3, r8
 80050d6:	18e3      	adds	r3, r4, r3
 80050d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050dc:	464b      	mov	r3, r9
 80050de:	eb45 0303 	adc.w	r3, r5, r3
 80050e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005102:	4629      	mov	r1, r5
 8005104:	008b      	lsls	r3, r1, #2
 8005106:	4621      	mov	r1, r4
 8005108:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800510c:	4621      	mov	r1, r4
 800510e:	008a      	lsls	r2, r1, #2
 8005110:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005114:	f7fb fd1c 	bl	8000b50 <__aeabi_uldivmod>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4b60      	ldr	r3, [pc, #384]	; (80052a0 <UART_SetConfig+0x4e4>)
 800511e:	fba3 2302 	umull	r2, r3, r3, r2
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	011c      	lsls	r4, r3, #4
 8005126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800512a:	2200      	movs	r2, #0
 800512c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005130:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005134:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	1891      	adds	r1, r2, r2
 800513e:	61b9      	str	r1, [r7, #24]
 8005140:	415b      	adcs	r3, r3
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005148:	4641      	mov	r1, r8
 800514a:	1851      	adds	r1, r2, r1
 800514c:	6139      	str	r1, [r7, #16]
 800514e:	4649      	mov	r1, r9
 8005150:	414b      	adcs	r3, r1
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005160:	4659      	mov	r1, fp
 8005162:	00cb      	lsls	r3, r1, #3
 8005164:	4651      	mov	r1, sl
 8005166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800516a:	4651      	mov	r1, sl
 800516c:	00ca      	lsls	r2, r1, #3
 800516e:	4610      	mov	r0, r2
 8005170:	4619      	mov	r1, r3
 8005172:	4603      	mov	r3, r0
 8005174:	4642      	mov	r2, r8
 8005176:	189b      	adds	r3, r3, r2
 8005178:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800517c:	464b      	mov	r3, r9
 800517e:	460a      	mov	r2, r1
 8005180:	eb42 0303 	adc.w	r3, r2, r3
 8005184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	67bb      	str	r3, [r7, #120]	; 0x78
 8005192:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051a0:	4649      	mov	r1, r9
 80051a2:	008b      	lsls	r3, r1, #2
 80051a4:	4641      	mov	r1, r8
 80051a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051aa:	4641      	mov	r1, r8
 80051ac:	008a      	lsls	r2, r1, #2
 80051ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051b2:	f7fb fccd 	bl	8000b50 <__aeabi_uldivmod>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4b39      	ldr	r3, [pc, #228]	; (80052a0 <UART_SetConfig+0x4e4>)
 80051bc:	fba3 1302 	umull	r1, r3, r3, r2
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	2164      	movs	r1, #100	; 0x64
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	3332      	adds	r3, #50	; 0x32
 80051ce:	4a34      	ldr	r2, [pc, #208]	; (80052a0 <UART_SetConfig+0x4e4>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051da:	441c      	add	r4, r3
 80051dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e0:	2200      	movs	r2, #0
 80051e2:	673b      	str	r3, [r7, #112]	; 0x70
 80051e4:	677a      	str	r2, [r7, #116]	; 0x74
 80051e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051ea:	4642      	mov	r2, r8
 80051ec:	464b      	mov	r3, r9
 80051ee:	1891      	adds	r1, r2, r2
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	415b      	adcs	r3, r3
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051fa:	4641      	mov	r1, r8
 80051fc:	1851      	adds	r1, r2, r1
 80051fe:	6039      	str	r1, [r7, #0]
 8005200:	4649      	mov	r1, r9
 8005202:	414b      	adcs	r3, r1
 8005204:	607b      	str	r3, [r7, #4]
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005212:	4659      	mov	r1, fp
 8005214:	00cb      	lsls	r3, r1, #3
 8005216:	4651      	mov	r1, sl
 8005218:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800521c:	4651      	mov	r1, sl
 800521e:	00ca      	lsls	r2, r1, #3
 8005220:	4610      	mov	r0, r2
 8005222:	4619      	mov	r1, r3
 8005224:	4603      	mov	r3, r0
 8005226:	4642      	mov	r2, r8
 8005228:	189b      	adds	r3, r3, r2
 800522a:	66bb      	str	r3, [r7, #104]	; 0x68
 800522c:	464b      	mov	r3, r9
 800522e:	460a      	mov	r2, r1
 8005230:	eb42 0303 	adc.w	r3, r2, r3
 8005234:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	663b      	str	r3, [r7, #96]	; 0x60
 8005240:	667a      	str	r2, [r7, #100]	; 0x64
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800524e:	4649      	mov	r1, r9
 8005250:	008b      	lsls	r3, r1, #2
 8005252:	4641      	mov	r1, r8
 8005254:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005258:	4641      	mov	r1, r8
 800525a:	008a      	lsls	r2, r1, #2
 800525c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005260:	f7fb fc76 	bl	8000b50 <__aeabi_uldivmod>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <UART_SetConfig+0x4e4>)
 800526a:	fba3 1302 	umull	r1, r3, r3, r2
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2164      	movs	r1, #100	; 0x64
 8005272:	fb01 f303 	mul.w	r3, r1, r3
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	3332      	adds	r3, #50	; 0x32
 800527c:	4a08      	ldr	r2, [pc, #32]	; (80052a0 <UART_SetConfig+0x4e4>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	f003 020f 	and.w	r2, r3, #15
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4422      	add	r2, r4
 8005290:	609a      	str	r2, [r3, #8]
}
 8005292:	bf00      	nop
 8005294:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005298:	46bd      	mov	sp, r7
 800529a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800529e:	bf00      	nop
 80052a0:	51eb851f 	.word	0x51eb851f

080052a4 <_ZN13TIM_StopWatch5startEv>:
 *      Author: conat
 */

#include "TIMStopWatch.h"

void TIM_StopWatch::start(){
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	update();
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f80c 	bl	80052ca <_ZN13TIM_StopWatch6updateEv>
	HAL_TIM_Base_Start(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff fa88 	bl	80047cc <HAL_TIM_Base_Start>
	isStart = true;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	741a      	strb	r2, [r3, #16]
}
 80052c2:	bf00      	nop
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <_ZN13TIM_StopWatch6updateEv>:
	count = 0;
	__HAL_TIM_SET_COUNTER(htim, 0);
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
}

void TIM_StopWatch::update(){
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
	uint32_t cnt = __HAL_TIM_GET_COUNTER(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	60fb      	str	r3, [r7, #12]

	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE)) {//over_flow
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d014      	beq.n	8005320 <_ZN13TIM_StopWatch6updateEv+0x56>
		count += cnt - (befCount - __HAL_TIM_GET_AUTORELOAD(htim));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	1ad2      	subs	r2, r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	441a      	add	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	441a      	add	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	609a      	str	r2, [r3, #8]
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0201 	mvn.w	r2, #1
 800531c:	611a      	str	r2, [r3, #16]
 800531e:	e008      	b.n	8005332 <_ZN13TIM_StopWatch6updateEv+0x68>
	} else {
		count += cnt - befCount;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	68f9      	ldr	r1, [r7, #12]
 800532a:	1acb      	subs	r3, r1, r3
 800532c:	441a      	add	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	609a      	str	r2, [r3, #8]
	}

	befCount = cnt;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	60da      	str	r2, [r3, #12]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <_ZN13TIM_StopWatch9getTimeMSEv>:

float TIM_StopWatch::getTimeMS(){
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	return count / (float)frequence * 1000.0f;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	ee07 3a90 	vmov	s15, r3
 8005354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	ee07 3a90 	vmov	s15, r3
 8005360:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005368:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005380 <_ZN13TIM_StopWatch9getTimeMSEv+0x3c>
 800536c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005370:	eeb0 0a67 	vmov.f32	s0, s15
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	447a0000 	.word	0x447a0000

08005384 <atan2>:
 8005384:	f000 b8c8 	b.w	8005518 <__ieee754_atan2>

08005388 <pow>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	ed2d 8b02 	vpush	{d8}
 800538e:	eeb0 8a40 	vmov.f32	s16, s0
 8005392:	eef0 8a60 	vmov.f32	s17, s1
 8005396:	ec55 4b11 	vmov	r4, r5, d1
 800539a:	f000 f989 	bl	80056b0 <__ieee754_pow>
 800539e:	4622      	mov	r2, r4
 80053a0:	462b      	mov	r3, r5
 80053a2:	4620      	mov	r0, r4
 80053a4:	4629      	mov	r1, r5
 80053a6:	ec57 6b10 	vmov	r6, r7, d0
 80053aa:	f7fb fb6b 	bl	8000a84 <__aeabi_dcmpun>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d13b      	bne.n	800542a <pow+0xa2>
 80053b2:	ec51 0b18 	vmov	r0, r1, d8
 80053b6:	2200      	movs	r2, #0
 80053b8:	2300      	movs	r3, #0
 80053ba:	f7fb fb31 	bl	8000a20 <__aeabi_dcmpeq>
 80053be:	b1b8      	cbz	r0, 80053f0 <pow+0x68>
 80053c0:	2200      	movs	r2, #0
 80053c2:	2300      	movs	r3, #0
 80053c4:	4620      	mov	r0, r4
 80053c6:	4629      	mov	r1, r5
 80053c8:	f7fb fb2a 	bl	8000a20 <__aeabi_dcmpeq>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d146      	bne.n	800545e <pow+0xd6>
 80053d0:	ec45 4b10 	vmov	d0, r4, r5
 80053d4:	f001 fa11 	bl	80067fa <finite>
 80053d8:	b338      	cbz	r0, 800542a <pow+0xa2>
 80053da:	2200      	movs	r2, #0
 80053dc:	2300      	movs	r3, #0
 80053de:	4620      	mov	r0, r4
 80053e0:	4629      	mov	r1, r5
 80053e2:	f7fb fb27 	bl	8000a34 <__aeabi_dcmplt>
 80053e6:	b300      	cbz	r0, 800542a <pow+0xa2>
 80053e8:	f001 faa6 	bl	8006938 <__errno>
 80053ec:	2322      	movs	r3, #34	; 0x22
 80053ee:	e01b      	b.n	8005428 <pow+0xa0>
 80053f0:	ec47 6b10 	vmov	d0, r6, r7
 80053f4:	f001 fa01 	bl	80067fa <finite>
 80053f8:	b9e0      	cbnz	r0, 8005434 <pow+0xac>
 80053fa:	eeb0 0a48 	vmov.f32	s0, s16
 80053fe:	eef0 0a68 	vmov.f32	s1, s17
 8005402:	f001 f9fa 	bl	80067fa <finite>
 8005406:	b1a8      	cbz	r0, 8005434 <pow+0xac>
 8005408:	ec45 4b10 	vmov	d0, r4, r5
 800540c:	f001 f9f5 	bl	80067fa <finite>
 8005410:	b180      	cbz	r0, 8005434 <pow+0xac>
 8005412:	4632      	mov	r2, r6
 8005414:	463b      	mov	r3, r7
 8005416:	4630      	mov	r0, r6
 8005418:	4639      	mov	r1, r7
 800541a:	f7fb fb33 	bl	8000a84 <__aeabi_dcmpun>
 800541e:	2800      	cmp	r0, #0
 8005420:	d0e2      	beq.n	80053e8 <pow+0x60>
 8005422:	f001 fa89 	bl	8006938 <__errno>
 8005426:	2321      	movs	r3, #33	; 0x21
 8005428:	6003      	str	r3, [r0, #0]
 800542a:	ecbd 8b02 	vpop	{d8}
 800542e:	ec47 6b10 	vmov	d0, r6, r7
 8005432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005434:	2200      	movs	r2, #0
 8005436:	2300      	movs	r3, #0
 8005438:	4630      	mov	r0, r6
 800543a:	4639      	mov	r1, r7
 800543c:	f7fb faf0 	bl	8000a20 <__aeabi_dcmpeq>
 8005440:	2800      	cmp	r0, #0
 8005442:	d0f2      	beq.n	800542a <pow+0xa2>
 8005444:	eeb0 0a48 	vmov.f32	s0, s16
 8005448:	eef0 0a68 	vmov.f32	s1, s17
 800544c:	f001 f9d5 	bl	80067fa <finite>
 8005450:	2800      	cmp	r0, #0
 8005452:	d0ea      	beq.n	800542a <pow+0xa2>
 8005454:	ec45 4b10 	vmov	d0, r4, r5
 8005458:	f001 f9cf 	bl	80067fa <finite>
 800545c:	e7c3      	b.n	80053e6 <pow+0x5e>
 800545e:	4f01      	ldr	r7, [pc, #4]	; (8005464 <pow+0xdc>)
 8005460:	2600      	movs	r6, #0
 8005462:	e7e2      	b.n	800542a <pow+0xa2>
 8005464:	3ff00000 	.word	0x3ff00000

08005468 <sqrt>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	ed2d 8b02 	vpush	{d8}
 800546e:	ec55 4b10 	vmov	r4, r5, d0
 8005472:	f000 fe4b 	bl	800610c <__ieee754_sqrt>
 8005476:	4622      	mov	r2, r4
 8005478:	462b      	mov	r3, r5
 800547a:	4620      	mov	r0, r4
 800547c:	4629      	mov	r1, r5
 800547e:	eeb0 8a40 	vmov.f32	s16, s0
 8005482:	eef0 8a60 	vmov.f32	s17, s1
 8005486:	f7fb fafd 	bl	8000a84 <__aeabi_dcmpun>
 800548a:	b990      	cbnz	r0, 80054b2 <sqrt+0x4a>
 800548c:	2200      	movs	r2, #0
 800548e:	2300      	movs	r3, #0
 8005490:	4620      	mov	r0, r4
 8005492:	4629      	mov	r1, r5
 8005494:	f7fb face 	bl	8000a34 <__aeabi_dcmplt>
 8005498:	b158      	cbz	r0, 80054b2 <sqrt+0x4a>
 800549a:	f001 fa4d 	bl	8006938 <__errno>
 800549e:	2321      	movs	r3, #33	; 0x21
 80054a0:	6003      	str	r3, [r0, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	2300      	movs	r3, #0
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	f7fb f97b 	bl	80007a4 <__aeabi_ddiv>
 80054ae:	ec41 0b18 	vmov	d8, r0, r1
 80054b2:	eeb0 0a48 	vmov.f32	s0, s16
 80054b6:	eef0 0a68 	vmov.f32	s1, s17
 80054ba:	ecbd 8b02 	vpop	{d8}
 80054be:	bd38      	pop	{r3, r4, r5, pc}

080054c0 <asinf>:
 80054c0:	b508      	push	{r3, lr}
 80054c2:	ed2d 8b02 	vpush	{d8}
 80054c6:	eeb0 8a40 	vmov.f32	s16, s0
 80054ca:	f000 fed1 	bl	8006270 <__ieee754_asinf>
 80054ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80054d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d6:	eef0 8a40 	vmov.f32	s17, s0
 80054da:	d615      	bvs.n	8005508 <asinf+0x48>
 80054dc:	eeb0 0a48 	vmov.f32	s0, s16
 80054e0:	f001 fa1c 	bl	800691c <fabsf>
 80054e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80054e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80054ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f0:	dd0a      	ble.n	8005508 <asinf+0x48>
 80054f2:	f001 fa21 	bl	8006938 <__errno>
 80054f6:	ecbd 8b02 	vpop	{d8}
 80054fa:	2321      	movs	r3, #33	; 0x21
 80054fc:	6003      	str	r3, [r0, #0]
 80054fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005502:	4804      	ldr	r0, [pc, #16]	; (8005514 <asinf+0x54>)
 8005504:	f001 ba12 	b.w	800692c <nanf>
 8005508:	eeb0 0a68 	vmov.f32	s0, s17
 800550c:	ecbd 8b02 	vpop	{d8}
 8005510:	bd08      	pop	{r3, pc}
 8005512:	bf00      	nop
 8005514:	080069f0 	.word	0x080069f0

08005518 <__ieee754_atan2>:
 8005518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800551c:	ec57 6b11 	vmov	r6, r7, d1
 8005520:	4273      	negs	r3, r6
 8005522:	f8df e184 	ldr.w	lr, [pc, #388]	; 80056a8 <__ieee754_atan2+0x190>
 8005526:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800552a:	4333      	orrs	r3, r6
 800552c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005530:	4573      	cmp	r3, lr
 8005532:	ec51 0b10 	vmov	r0, r1, d0
 8005536:	ee11 8a10 	vmov	r8, s2
 800553a:	d80a      	bhi.n	8005552 <__ieee754_atan2+0x3a>
 800553c:	4244      	negs	r4, r0
 800553e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005542:	4304      	orrs	r4, r0
 8005544:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005548:	4574      	cmp	r4, lr
 800554a:	ee10 9a10 	vmov	r9, s0
 800554e:	468c      	mov	ip, r1
 8005550:	d907      	bls.n	8005562 <__ieee754_atan2+0x4a>
 8005552:	4632      	mov	r2, r6
 8005554:	463b      	mov	r3, r7
 8005556:	f7fa fe45 	bl	80001e4 <__adddf3>
 800555a:	ec41 0b10 	vmov	d0, r0, r1
 800555e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005562:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8005566:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800556a:	4334      	orrs	r4, r6
 800556c:	d103      	bne.n	8005576 <__ieee754_atan2+0x5e>
 800556e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005572:	f000 bf99 	b.w	80064a8 <atan>
 8005576:	17bc      	asrs	r4, r7, #30
 8005578:	f004 0402 	and.w	r4, r4, #2
 800557c:	ea53 0909 	orrs.w	r9, r3, r9
 8005580:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005584:	d107      	bne.n	8005596 <__ieee754_atan2+0x7e>
 8005586:	2c02      	cmp	r4, #2
 8005588:	d060      	beq.n	800564c <__ieee754_atan2+0x134>
 800558a:	2c03      	cmp	r4, #3
 800558c:	d1e5      	bne.n	800555a <__ieee754_atan2+0x42>
 800558e:	a142      	add	r1, pc, #264	; (adr r1, 8005698 <__ieee754_atan2+0x180>)
 8005590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005594:	e7e1      	b.n	800555a <__ieee754_atan2+0x42>
 8005596:	ea52 0808 	orrs.w	r8, r2, r8
 800559a:	d106      	bne.n	80055aa <__ieee754_atan2+0x92>
 800559c:	f1bc 0f00 	cmp.w	ip, #0
 80055a0:	da5f      	bge.n	8005662 <__ieee754_atan2+0x14a>
 80055a2:	a13f      	add	r1, pc, #252	; (adr r1, 80056a0 <__ieee754_atan2+0x188>)
 80055a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055a8:	e7d7      	b.n	800555a <__ieee754_atan2+0x42>
 80055aa:	4572      	cmp	r2, lr
 80055ac:	d10f      	bne.n	80055ce <__ieee754_atan2+0xb6>
 80055ae:	4293      	cmp	r3, r2
 80055b0:	f104 34ff 	add.w	r4, r4, #4294967295
 80055b4:	d107      	bne.n	80055c6 <__ieee754_atan2+0xae>
 80055b6:	2c02      	cmp	r4, #2
 80055b8:	d84c      	bhi.n	8005654 <__ieee754_atan2+0x13c>
 80055ba:	4b35      	ldr	r3, [pc, #212]	; (8005690 <__ieee754_atan2+0x178>)
 80055bc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80055c0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80055c4:	e7c9      	b.n	800555a <__ieee754_atan2+0x42>
 80055c6:	2c02      	cmp	r4, #2
 80055c8:	d848      	bhi.n	800565c <__ieee754_atan2+0x144>
 80055ca:	4b32      	ldr	r3, [pc, #200]	; (8005694 <__ieee754_atan2+0x17c>)
 80055cc:	e7f6      	b.n	80055bc <__ieee754_atan2+0xa4>
 80055ce:	4573      	cmp	r3, lr
 80055d0:	d0e4      	beq.n	800559c <__ieee754_atan2+0x84>
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80055d8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80055dc:	da1e      	bge.n	800561c <__ieee754_atan2+0x104>
 80055de:	2f00      	cmp	r7, #0
 80055e0:	da01      	bge.n	80055e6 <__ieee754_atan2+0xce>
 80055e2:	323c      	adds	r2, #60	; 0x3c
 80055e4:	db1e      	blt.n	8005624 <__ieee754_atan2+0x10c>
 80055e6:	4632      	mov	r2, r6
 80055e8:	463b      	mov	r3, r7
 80055ea:	f7fb f8db 	bl	80007a4 <__aeabi_ddiv>
 80055ee:	ec41 0b10 	vmov	d0, r0, r1
 80055f2:	f001 f8f9 	bl	80067e8 <fabs>
 80055f6:	f000 ff57 	bl	80064a8 <atan>
 80055fa:	ec51 0b10 	vmov	r0, r1, d0
 80055fe:	2c01      	cmp	r4, #1
 8005600:	d013      	beq.n	800562a <__ieee754_atan2+0x112>
 8005602:	2c02      	cmp	r4, #2
 8005604:	d015      	beq.n	8005632 <__ieee754_atan2+0x11a>
 8005606:	2c00      	cmp	r4, #0
 8005608:	d0a7      	beq.n	800555a <__ieee754_atan2+0x42>
 800560a:	a319      	add	r3, pc, #100	; (adr r3, 8005670 <__ieee754_atan2+0x158>)
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	f7fa fde6 	bl	80001e0 <__aeabi_dsub>
 8005614:	a318      	add	r3, pc, #96	; (adr r3, 8005678 <__ieee754_atan2+0x160>)
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	e014      	b.n	8005646 <__ieee754_atan2+0x12e>
 800561c:	a118      	add	r1, pc, #96	; (adr r1, 8005680 <__ieee754_atan2+0x168>)
 800561e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005622:	e7ec      	b.n	80055fe <__ieee754_atan2+0xe6>
 8005624:	2000      	movs	r0, #0
 8005626:	2100      	movs	r1, #0
 8005628:	e7e9      	b.n	80055fe <__ieee754_atan2+0xe6>
 800562a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800562e:	4619      	mov	r1, r3
 8005630:	e793      	b.n	800555a <__ieee754_atan2+0x42>
 8005632:	a30f      	add	r3, pc, #60	; (adr r3, 8005670 <__ieee754_atan2+0x158>)
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	f7fa fdd2 	bl	80001e0 <__aeabi_dsub>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	a10d      	add	r1, pc, #52	; (adr r1, 8005678 <__ieee754_atan2+0x160>)
 8005642:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005646:	f7fa fdcb 	bl	80001e0 <__aeabi_dsub>
 800564a:	e786      	b.n	800555a <__ieee754_atan2+0x42>
 800564c:	a10a      	add	r1, pc, #40	; (adr r1, 8005678 <__ieee754_atan2+0x160>)
 800564e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005652:	e782      	b.n	800555a <__ieee754_atan2+0x42>
 8005654:	a10c      	add	r1, pc, #48	; (adr r1, 8005688 <__ieee754_atan2+0x170>)
 8005656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800565a:	e77e      	b.n	800555a <__ieee754_atan2+0x42>
 800565c:	2000      	movs	r0, #0
 800565e:	2100      	movs	r1, #0
 8005660:	e77b      	b.n	800555a <__ieee754_atan2+0x42>
 8005662:	a107      	add	r1, pc, #28	; (adr r1, 8005680 <__ieee754_atan2+0x168>)
 8005664:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005668:	e777      	b.n	800555a <__ieee754_atan2+0x42>
 800566a:	bf00      	nop
 800566c:	f3af 8000 	nop.w
 8005670:	33145c07 	.word	0x33145c07
 8005674:	3ca1a626 	.word	0x3ca1a626
 8005678:	54442d18 	.word	0x54442d18
 800567c:	400921fb 	.word	0x400921fb
 8005680:	54442d18 	.word	0x54442d18
 8005684:	3ff921fb 	.word	0x3ff921fb
 8005688:	54442d18 	.word	0x54442d18
 800568c:	3fe921fb 	.word	0x3fe921fb
 8005690:	080069f8 	.word	0x080069f8
 8005694:	08006a10 	.word	0x08006a10
 8005698:	54442d18 	.word	0x54442d18
 800569c:	c00921fb 	.word	0xc00921fb
 80056a0:	54442d18 	.word	0x54442d18
 80056a4:	bff921fb 	.word	0xbff921fb
 80056a8:	7ff00000 	.word	0x7ff00000
 80056ac:	00000000 	.word	0x00000000

080056b0 <__ieee754_pow>:
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	ed2d 8b06 	vpush	{d8-d10}
 80056b8:	b089      	sub	sp, #36	; 0x24
 80056ba:	ed8d 1b00 	vstr	d1, [sp]
 80056be:	e9dd 2900 	ldrd	r2, r9, [sp]
 80056c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80056c6:	ea58 0102 	orrs.w	r1, r8, r2
 80056ca:	ec57 6b10 	vmov	r6, r7, d0
 80056ce:	d115      	bne.n	80056fc <__ieee754_pow+0x4c>
 80056d0:	19b3      	adds	r3, r6, r6
 80056d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80056d6:	4152      	adcs	r2, r2
 80056d8:	4299      	cmp	r1, r3
 80056da:	4b89      	ldr	r3, [pc, #548]	; (8005900 <__ieee754_pow+0x250>)
 80056dc:	4193      	sbcs	r3, r2
 80056de:	f080 84d2 	bcs.w	8006086 <__ieee754_pow+0x9d6>
 80056e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056e6:	4630      	mov	r0, r6
 80056e8:	4639      	mov	r1, r7
 80056ea:	f7fa fd7b 	bl	80001e4 <__adddf3>
 80056ee:	ec41 0b10 	vmov	d0, r0, r1
 80056f2:	b009      	add	sp, #36	; 0x24
 80056f4:	ecbd 8b06 	vpop	{d8-d10}
 80056f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056fc:	4b81      	ldr	r3, [pc, #516]	; (8005904 <__ieee754_pow+0x254>)
 80056fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005702:	429c      	cmp	r4, r3
 8005704:	ee10 aa10 	vmov	sl, s0
 8005708:	463d      	mov	r5, r7
 800570a:	dc06      	bgt.n	800571a <__ieee754_pow+0x6a>
 800570c:	d101      	bne.n	8005712 <__ieee754_pow+0x62>
 800570e:	2e00      	cmp	r6, #0
 8005710:	d1e7      	bne.n	80056e2 <__ieee754_pow+0x32>
 8005712:	4598      	cmp	r8, r3
 8005714:	dc01      	bgt.n	800571a <__ieee754_pow+0x6a>
 8005716:	d10f      	bne.n	8005738 <__ieee754_pow+0x88>
 8005718:	b172      	cbz	r2, 8005738 <__ieee754_pow+0x88>
 800571a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800571e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005722:	ea55 050a 	orrs.w	r5, r5, sl
 8005726:	d1dc      	bne.n	80056e2 <__ieee754_pow+0x32>
 8005728:	e9dd 3200 	ldrd	r3, r2, [sp]
 800572c:	18db      	adds	r3, r3, r3
 800572e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005732:	4152      	adcs	r2, r2
 8005734:	429d      	cmp	r5, r3
 8005736:	e7d0      	b.n	80056da <__ieee754_pow+0x2a>
 8005738:	2d00      	cmp	r5, #0
 800573a:	da3b      	bge.n	80057b4 <__ieee754_pow+0x104>
 800573c:	4b72      	ldr	r3, [pc, #456]	; (8005908 <__ieee754_pow+0x258>)
 800573e:	4598      	cmp	r8, r3
 8005740:	dc51      	bgt.n	80057e6 <__ieee754_pow+0x136>
 8005742:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005746:	4598      	cmp	r8, r3
 8005748:	f340 84ac 	ble.w	80060a4 <__ieee754_pow+0x9f4>
 800574c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005750:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005754:	2b14      	cmp	r3, #20
 8005756:	dd0f      	ble.n	8005778 <__ieee754_pow+0xc8>
 8005758:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800575c:	fa22 f103 	lsr.w	r1, r2, r3
 8005760:	fa01 f303 	lsl.w	r3, r1, r3
 8005764:	4293      	cmp	r3, r2
 8005766:	f040 849d 	bne.w	80060a4 <__ieee754_pow+0x9f4>
 800576a:	f001 0101 	and.w	r1, r1, #1
 800576e:	f1c1 0302 	rsb	r3, r1, #2
 8005772:	9304      	str	r3, [sp, #16]
 8005774:	b182      	cbz	r2, 8005798 <__ieee754_pow+0xe8>
 8005776:	e05f      	b.n	8005838 <__ieee754_pow+0x188>
 8005778:	2a00      	cmp	r2, #0
 800577a:	d15b      	bne.n	8005834 <__ieee754_pow+0x184>
 800577c:	f1c3 0314 	rsb	r3, r3, #20
 8005780:	fa48 f103 	asr.w	r1, r8, r3
 8005784:	fa01 f303 	lsl.w	r3, r1, r3
 8005788:	4543      	cmp	r3, r8
 800578a:	f040 8488 	bne.w	800609e <__ieee754_pow+0x9ee>
 800578e:	f001 0101 	and.w	r1, r1, #1
 8005792:	f1c1 0302 	rsb	r3, r1, #2
 8005796:	9304      	str	r3, [sp, #16]
 8005798:	4b5c      	ldr	r3, [pc, #368]	; (800590c <__ieee754_pow+0x25c>)
 800579a:	4598      	cmp	r8, r3
 800579c:	d132      	bne.n	8005804 <__ieee754_pow+0x154>
 800579e:	f1b9 0f00 	cmp.w	r9, #0
 80057a2:	f280 8478 	bge.w	8006096 <__ieee754_pow+0x9e6>
 80057a6:	4959      	ldr	r1, [pc, #356]	; (800590c <__ieee754_pow+0x25c>)
 80057a8:	4632      	mov	r2, r6
 80057aa:	463b      	mov	r3, r7
 80057ac:	2000      	movs	r0, #0
 80057ae:	f7fa fff9 	bl	80007a4 <__aeabi_ddiv>
 80057b2:	e79c      	b.n	80056ee <__ieee754_pow+0x3e>
 80057b4:	2300      	movs	r3, #0
 80057b6:	9304      	str	r3, [sp, #16]
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	d13d      	bne.n	8005838 <__ieee754_pow+0x188>
 80057bc:	4b51      	ldr	r3, [pc, #324]	; (8005904 <__ieee754_pow+0x254>)
 80057be:	4598      	cmp	r8, r3
 80057c0:	d1ea      	bne.n	8005798 <__ieee754_pow+0xe8>
 80057c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80057c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80057ca:	ea53 030a 	orrs.w	r3, r3, sl
 80057ce:	f000 845a 	beq.w	8006086 <__ieee754_pow+0x9d6>
 80057d2:	4b4f      	ldr	r3, [pc, #316]	; (8005910 <__ieee754_pow+0x260>)
 80057d4:	429c      	cmp	r4, r3
 80057d6:	dd08      	ble.n	80057ea <__ieee754_pow+0x13a>
 80057d8:	f1b9 0f00 	cmp.w	r9, #0
 80057dc:	f2c0 8457 	blt.w	800608e <__ieee754_pow+0x9de>
 80057e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057e4:	e783      	b.n	80056ee <__ieee754_pow+0x3e>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e7e5      	b.n	80057b6 <__ieee754_pow+0x106>
 80057ea:	f1b9 0f00 	cmp.w	r9, #0
 80057ee:	f04f 0000 	mov.w	r0, #0
 80057f2:	f04f 0100 	mov.w	r1, #0
 80057f6:	f6bf af7a 	bge.w	80056ee <__ieee754_pow+0x3e>
 80057fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80057fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005802:	e774      	b.n	80056ee <__ieee754_pow+0x3e>
 8005804:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005808:	d106      	bne.n	8005818 <__ieee754_pow+0x168>
 800580a:	4632      	mov	r2, r6
 800580c:	463b      	mov	r3, r7
 800580e:	4630      	mov	r0, r6
 8005810:	4639      	mov	r1, r7
 8005812:	f7fa fe9d 	bl	8000550 <__aeabi_dmul>
 8005816:	e76a      	b.n	80056ee <__ieee754_pow+0x3e>
 8005818:	4b3e      	ldr	r3, [pc, #248]	; (8005914 <__ieee754_pow+0x264>)
 800581a:	4599      	cmp	r9, r3
 800581c:	d10c      	bne.n	8005838 <__ieee754_pow+0x188>
 800581e:	2d00      	cmp	r5, #0
 8005820:	db0a      	blt.n	8005838 <__ieee754_pow+0x188>
 8005822:	ec47 6b10 	vmov	d0, r6, r7
 8005826:	b009      	add	sp, #36	; 0x24
 8005828:	ecbd 8b06 	vpop	{d8-d10}
 800582c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005830:	f000 bc6c 	b.w	800610c <__ieee754_sqrt>
 8005834:	2300      	movs	r3, #0
 8005836:	9304      	str	r3, [sp, #16]
 8005838:	ec47 6b10 	vmov	d0, r6, r7
 800583c:	f000 ffd4 	bl	80067e8 <fabs>
 8005840:	ec51 0b10 	vmov	r0, r1, d0
 8005844:	f1ba 0f00 	cmp.w	sl, #0
 8005848:	d129      	bne.n	800589e <__ieee754_pow+0x1ee>
 800584a:	b124      	cbz	r4, 8005856 <__ieee754_pow+0x1a6>
 800584c:	4b2f      	ldr	r3, [pc, #188]	; (800590c <__ieee754_pow+0x25c>)
 800584e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005852:	429a      	cmp	r2, r3
 8005854:	d123      	bne.n	800589e <__ieee754_pow+0x1ee>
 8005856:	f1b9 0f00 	cmp.w	r9, #0
 800585a:	da05      	bge.n	8005868 <__ieee754_pow+0x1b8>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	2000      	movs	r0, #0
 8005862:	492a      	ldr	r1, [pc, #168]	; (800590c <__ieee754_pow+0x25c>)
 8005864:	f7fa ff9e 	bl	80007a4 <__aeabi_ddiv>
 8005868:	2d00      	cmp	r5, #0
 800586a:	f6bf af40 	bge.w	80056ee <__ieee754_pow+0x3e>
 800586e:	9b04      	ldr	r3, [sp, #16]
 8005870:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005874:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005878:	4323      	orrs	r3, r4
 800587a:	d108      	bne.n	800588e <__ieee754_pow+0x1de>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4610      	mov	r0, r2
 8005882:	4619      	mov	r1, r3
 8005884:	f7fa fcac 	bl	80001e0 <__aeabi_dsub>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	e78f      	b.n	80057ae <__ieee754_pow+0xfe>
 800588e:	9b04      	ldr	r3, [sp, #16]
 8005890:	2b01      	cmp	r3, #1
 8005892:	f47f af2c 	bne.w	80056ee <__ieee754_pow+0x3e>
 8005896:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800589a:	4619      	mov	r1, r3
 800589c:	e727      	b.n	80056ee <__ieee754_pow+0x3e>
 800589e:	0feb      	lsrs	r3, r5, #31
 80058a0:	3b01      	subs	r3, #1
 80058a2:	9306      	str	r3, [sp, #24]
 80058a4:	9a06      	ldr	r2, [sp, #24]
 80058a6:	9b04      	ldr	r3, [sp, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	d102      	bne.n	80058b2 <__ieee754_pow+0x202>
 80058ac:	4632      	mov	r2, r6
 80058ae:	463b      	mov	r3, r7
 80058b0:	e7e6      	b.n	8005880 <__ieee754_pow+0x1d0>
 80058b2:	4b19      	ldr	r3, [pc, #100]	; (8005918 <__ieee754_pow+0x268>)
 80058b4:	4598      	cmp	r8, r3
 80058b6:	f340 80fb 	ble.w	8005ab0 <__ieee754_pow+0x400>
 80058ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80058be:	4598      	cmp	r8, r3
 80058c0:	4b13      	ldr	r3, [pc, #76]	; (8005910 <__ieee754_pow+0x260>)
 80058c2:	dd0c      	ble.n	80058de <__ieee754_pow+0x22e>
 80058c4:	429c      	cmp	r4, r3
 80058c6:	dc0f      	bgt.n	80058e8 <__ieee754_pow+0x238>
 80058c8:	f1b9 0f00 	cmp.w	r9, #0
 80058cc:	da0f      	bge.n	80058ee <__ieee754_pow+0x23e>
 80058ce:	2000      	movs	r0, #0
 80058d0:	b009      	add	sp, #36	; 0x24
 80058d2:	ecbd 8b06 	vpop	{d8-d10}
 80058d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058da:	f000 bdd9 	b.w	8006490 <__math_oflow>
 80058de:	429c      	cmp	r4, r3
 80058e0:	dbf2      	blt.n	80058c8 <__ieee754_pow+0x218>
 80058e2:	4b0a      	ldr	r3, [pc, #40]	; (800590c <__ieee754_pow+0x25c>)
 80058e4:	429c      	cmp	r4, r3
 80058e6:	dd19      	ble.n	800591c <__ieee754_pow+0x26c>
 80058e8:	f1b9 0f00 	cmp.w	r9, #0
 80058ec:	dcef      	bgt.n	80058ce <__ieee754_pow+0x21e>
 80058ee:	2000      	movs	r0, #0
 80058f0:	b009      	add	sp, #36	; 0x24
 80058f2:	ecbd 8b06 	vpop	{d8-d10}
 80058f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fa:	f000 bdc0 	b.w	800647e <__math_uflow>
 80058fe:	bf00      	nop
 8005900:	fff00000 	.word	0xfff00000
 8005904:	7ff00000 	.word	0x7ff00000
 8005908:	433fffff 	.word	0x433fffff
 800590c:	3ff00000 	.word	0x3ff00000
 8005910:	3fefffff 	.word	0x3fefffff
 8005914:	3fe00000 	.word	0x3fe00000
 8005918:	41e00000 	.word	0x41e00000
 800591c:	4b60      	ldr	r3, [pc, #384]	; (8005aa0 <__ieee754_pow+0x3f0>)
 800591e:	2200      	movs	r2, #0
 8005920:	f7fa fc5e 	bl	80001e0 <__aeabi_dsub>
 8005924:	a354      	add	r3, pc, #336	; (adr r3, 8005a78 <__ieee754_pow+0x3c8>)
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	4604      	mov	r4, r0
 800592c:	460d      	mov	r5, r1
 800592e:	f7fa fe0f 	bl	8000550 <__aeabi_dmul>
 8005932:	a353      	add	r3, pc, #332	; (adr r3, 8005a80 <__ieee754_pow+0x3d0>)
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	4606      	mov	r6, r0
 800593a:	460f      	mov	r7, r1
 800593c:	4620      	mov	r0, r4
 800593e:	4629      	mov	r1, r5
 8005940:	f7fa fe06 	bl	8000550 <__aeabi_dmul>
 8005944:	4b57      	ldr	r3, [pc, #348]	; (8005aa4 <__ieee754_pow+0x3f4>)
 8005946:	4682      	mov	sl, r0
 8005948:	468b      	mov	fp, r1
 800594a:	2200      	movs	r2, #0
 800594c:	4620      	mov	r0, r4
 800594e:	4629      	mov	r1, r5
 8005950:	f7fa fdfe 	bl	8000550 <__aeabi_dmul>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	a14b      	add	r1, pc, #300	; (adr r1, 8005a88 <__ieee754_pow+0x3d8>)
 800595a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800595e:	f7fa fc3f 	bl	80001e0 <__aeabi_dsub>
 8005962:	4622      	mov	r2, r4
 8005964:	462b      	mov	r3, r5
 8005966:	f7fa fdf3 	bl	8000550 <__aeabi_dmul>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	2000      	movs	r0, #0
 8005970:	494d      	ldr	r1, [pc, #308]	; (8005aa8 <__ieee754_pow+0x3f8>)
 8005972:	f7fa fc35 	bl	80001e0 <__aeabi_dsub>
 8005976:	4622      	mov	r2, r4
 8005978:	4680      	mov	r8, r0
 800597a:	4689      	mov	r9, r1
 800597c:	462b      	mov	r3, r5
 800597e:	4620      	mov	r0, r4
 8005980:	4629      	mov	r1, r5
 8005982:	f7fa fde5 	bl	8000550 <__aeabi_dmul>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4640      	mov	r0, r8
 800598c:	4649      	mov	r1, r9
 800598e:	f7fa fddf 	bl	8000550 <__aeabi_dmul>
 8005992:	a33f      	add	r3, pc, #252	; (adr r3, 8005a90 <__ieee754_pow+0x3e0>)
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	f7fa fdda 	bl	8000550 <__aeabi_dmul>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4650      	mov	r0, sl
 80059a2:	4659      	mov	r1, fp
 80059a4:	f7fa fc1c 	bl	80001e0 <__aeabi_dsub>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4680      	mov	r8, r0
 80059ae:	4689      	mov	r9, r1
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f7fa fc16 	bl	80001e4 <__adddf3>
 80059b8:	2000      	movs	r0, #0
 80059ba:	4632      	mov	r2, r6
 80059bc:	463b      	mov	r3, r7
 80059be:	4604      	mov	r4, r0
 80059c0:	460d      	mov	r5, r1
 80059c2:	f7fa fc0d 	bl	80001e0 <__aeabi_dsub>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4640      	mov	r0, r8
 80059cc:	4649      	mov	r1, r9
 80059ce:	f7fa fc07 	bl	80001e0 <__aeabi_dsub>
 80059d2:	9b04      	ldr	r3, [sp, #16]
 80059d4:	9a06      	ldr	r2, [sp, #24]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	4313      	orrs	r3, r2
 80059da:	4682      	mov	sl, r0
 80059dc:	468b      	mov	fp, r1
 80059de:	f040 81e7 	bne.w	8005db0 <__ieee754_pow+0x700>
 80059e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005a98 <__ieee754_pow+0x3e8>
 80059e6:	eeb0 8a47 	vmov.f32	s16, s14
 80059ea:	eef0 8a67 	vmov.f32	s17, s15
 80059ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80059f2:	2600      	movs	r6, #0
 80059f4:	4632      	mov	r2, r6
 80059f6:	463b      	mov	r3, r7
 80059f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059fc:	f7fa fbf0 	bl	80001e0 <__aeabi_dsub>
 8005a00:	4622      	mov	r2, r4
 8005a02:	462b      	mov	r3, r5
 8005a04:	f7fa fda4 	bl	8000550 <__aeabi_dmul>
 8005a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a0c:	4680      	mov	r8, r0
 8005a0e:	4689      	mov	r9, r1
 8005a10:	4650      	mov	r0, sl
 8005a12:	4659      	mov	r1, fp
 8005a14:	f7fa fd9c 	bl	8000550 <__aeabi_dmul>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	4649      	mov	r1, r9
 8005a20:	f7fa fbe0 	bl	80001e4 <__adddf3>
 8005a24:	4632      	mov	r2, r6
 8005a26:	463b      	mov	r3, r7
 8005a28:	4680      	mov	r8, r0
 8005a2a:	4689      	mov	r9, r1
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	4629      	mov	r1, r5
 8005a30:	f7fa fd8e 	bl	8000550 <__aeabi_dmul>
 8005a34:	460b      	mov	r3, r1
 8005a36:	4604      	mov	r4, r0
 8005a38:	460d      	mov	r5, r1
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	4640      	mov	r0, r8
 8005a40:	f7fa fbd0 	bl	80001e4 <__adddf3>
 8005a44:	4b19      	ldr	r3, [pc, #100]	; (8005aac <__ieee754_pow+0x3fc>)
 8005a46:	4299      	cmp	r1, r3
 8005a48:	ec45 4b19 	vmov	d9, r4, r5
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	460f      	mov	r7, r1
 8005a50:	468b      	mov	fp, r1
 8005a52:	f340 82f1 	ble.w	8006038 <__ieee754_pow+0x988>
 8005a56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005a5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005a5e:	4303      	orrs	r3, r0
 8005a60:	f000 81e4 	beq.w	8005e2c <__ieee754_pow+0x77c>
 8005a64:	ec51 0b18 	vmov	r0, r1, d8
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f7fa ffe2 	bl	8000a34 <__aeabi_dcmplt>
 8005a70:	3800      	subs	r0, #0
 8005a72:	bf18      	it	ne
 8005a74:	2001      	movne	r0, #1
 8005a76:	e72b      	b.n	80058d0 <__ieee754_pow+0x220>
 8005a78:	60000000 	.word	0x60000000
 8005a7c:	3ff71547 	.word	0x3ff71547
 8005a80:	f85ddf44 	.word	0xf85ddf44
 8005a84:	3e54ae0b 	.word	0x3e54ae0b
 8005a88:	55555555 	.word	0x55555555
 8005a8c:	3fd55555 	.word	0x3fd55555
 8005a90:	652b82fe 	.word	0x652b82fe
 8005a94:	3ff71547 	.word	0x3ff71547
 8005a98:	00000000 	.word	0x00000000
 8005a9c:	bff00000 	.word	0xbff00000
 8005aa0:	3ff00000 	.word	0x3ff00000
 8005aa4:	3fd00000 	.word	0x3fd00000
 8005aa8:	3fe00000 	.word	0x3fe00000
 8005aac:	408fffff 	.word	0x408fffff
 8005ab0:	4bd5      	ldr	r3, [pc, #852]	; (8005e08 <__ieee754_pow+0x758>)
 8005ab2:	402b      	ands	r3, r5
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	b92b      	cbnz	r3, 8005ac4 <__ieee754_pow+0x414>
 8005ab8:	4bd4      	ldr	r3, [pc, #848]	; (8005e0c <__ieee754_pow+0x75c>)
 8005aba:	f7fa fd49 	bl	8000550 <__aeabi_dmul>
 8005abe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	1523      	asrs	r3, r4, #20
 8005ac6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005aca:	4413      	add	r3, r2
 8005acc:	9305      	str	r3, [sp, #20]
 8005ace:	4bd0      	ldr	r3, [pc, #832]	; (8005e10 <__ieee754_pow+0x760>)
 8005ad0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005ad4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005ad8:	429c      	cmp	r4, r3
 8005ada:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005ade:	dd08      	ble.n	8005af2 <__ieee754_pow+0x442>
 8005ae0:	4bcc      	ldr	r3, [pc, #816]	; (8005e14 <__ieee754_pow+0x764>)
 8005ae2:	429c      	cmp	r4, r3
 8005ae4:	f340 8162 	ble.w	8005dac <__ieee754_pow+0x6fc>
 8005ae8:	9b05      	ldr	r3, [sp, #20]
 8005aea:	3301      	adds	r3, #1
 8005aec:	9305      	str	r3, [sp, #20]
 8005aee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005af2:	2400      	movs	r4, #0
 8005af4:	00e3      	lsls	r3, r4, #3
 8005af6:	9307      	str	r3, [sp, #28]
 8005af8:	4bc7      	ldr	r3, [pc, #796]	; (8005e18 <__ieee754_pow+0x768>)
 8005afa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005afe:	ed93 7b00 	vldr	d7, [r3]
 8005b02:	4629      	mov	r1, r5
 8005b04:	ec53 2b17 	vmov	r2, r3, d7
 8005b08:	eeb0 9a47 	vmov.f32	s18, s14
 8005b0c:	eef0 9a67 	vmov.f32	s19, s15
 8005b10:	4682      	mov	sl, r0
 8005b12:	f7fa fb65 	bl	80001e0 <__aeabi_dsub>
 8005b16:	4652      	mov	r2, sl
 8005b18:	4606      	mov	r6, r0
 8005b1a:	460f      	mov	r7, r1
 8005b1c:	462b      	mov	r3, r5
 8005b1e:	ec51 0b19 	vmov	r0, r1, d9
 8005b22:	f7fa fb5f 	bl	80001e4 <__adddf3>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	49bb      	ldr	r1, [pc, #748]	; (8005e1c <__ieee754_pow+0x76c>)
 8005b2e:	f7fa fe39 	bl	80007a4 <__aeabi_ddiv>
 8005b32:	ec41 0b1a 	vmov	d10, r0, r1
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	4639      	mov	r1, r7
 8005b3e:	f7fa fd07 	bl	8000550 <__aeabi_dmul>
 8005b42:	2300      	movs	r3, #0
 8005b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b48:	9302      	str	r3, [sp, #8]
 8005b4a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005b4e:	46ab      	mov	fp, r5
 8005b50:	106d      	asrs	r5, r5, #1
 8005b52:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005b56:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005b5a:	ec41 0b18 	vmov	d8, r0, r1
 8005b5e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005b62:	2200      	movs	r2, #0
 8005b64:	4640      	mov	r0, r8
 8005b66:	4649      	mov	r1, r9
 8005b68:	4614      	mov	r4, r2
 8005b6a:	461d      	mov	r5, r3
 8005b6c:	f7fa fcf0 	bl	8000550 <__aeabi_dmul>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4630      	mov	r0, r6
 8005b76:	4639      	mov	r1, r7
 8005b78:	f7fa fb32 	bl	80001e0 <__aeabi_dsub>
 8005b7c:	ec53 2b19 	vmov	r2, r3, d9
 8005b80:	4606      	mov	r6, r0
 8005b82:	460f      	mov	r7, r1
 8005b84:	4620      	mov	r0, r4
 8005b86:	4629      	mov	r1, r5
 8005b88:	f7fa fb2a 	bl	80001e0 <__aeabi_dsub>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4650      	mov	r0, sl
 8005b92:	4659      	mov	r1, fp
 8005b94:	f7fa fb24 	bl	80001e0 <__aeabi_dsub>
 8005b98:	4642      	mov	r2, r8
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	f7fa fcd8 	bl	8000550 <__aeabi_dmul>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	4639      	mov	r1, r7
 8005ba8:	f7fa fb1a 	bl	80001e0 <__aeabi_dsub>
 8005bac:	ec53 2b1a 	vmov	r2, r3, d10
 8005bb0:	f7fa fcce 	bl	8000550 <__aeabi_dmul>
 8005bb4:	ec53 2b18 	vmov	r2, r3, d8
 8005bb8:	ec41 0b19 	vmov	d9, r0, r1
 8005bbc:	ec51 0b18 	vmov	r0, r1, d8
 8005bc0:	f7fa fcc6 	bl	8000550 <__aeabi_dmul>
 8005bc4:	a37c      	add	r3, pc, #496	; (adr r3, 8005db8 <__ieee754_pow+0x708>)
 8005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bca:	4604      	mov	r4, r0
 8005bcc:	460d      	mov	r5, r1
 8005bce:	f7fa fcbf 	bl	8000550 <__aeabi_dmul>
 8005bd2:	a37b      	add	r3, pc, #492	; (adr r3, 8005dc0 <__ieee754_pow+0x710>)
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f7fa fb04 	bl	80001e4 <__adddf3>
 8005bdc:	4622      	mov	r2, r4
 8005bde:	462b      	mov	r3, r5
 8005be0:	f7fa fcb6 	bl	8000550 <__aeabi_dmul>
 8005be4:	a378      	add	r3, pc, #480	; (adr r3, 8005dc8 <__ieee754_pow+0x718>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f7fa fafb 	bl	80001e4 <__adddf3>
 8005bee:	4622      	mov	r2, r4
 8005bf0:	462b      	mov	r3, r5
 8005bf2:	f7fa fcad 	bl	8000550 <__aeabi_dmul>
 8005bf6:	a376      	add	r3, pc, #472	; (adr r3, 8005dd0 <__ieee754_pow+0x720>)
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	f7fa faf2 	bl	80001e4 <__adddf3>
 8005c00:	4622      	mov	r2, r4
 8005c02:	462b      	mov	r3, r5
 8005c04:	f7fa fca4 	bl	8000550 <__aeabi_dmul>
 8005c08:	a373      	add	r3, pc, #460	; (adr r3, 8005dd8 <__ieee754_pow+0x728>)
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	f7fa fae9 	bl	80001e4 <__adddf3>
 8005c12:	4622      	mov	r2, r4
 8005c14:	462b      	mov	r3, r5
 8005c16:	f7fa fc9b 	bl	8000550 <__aeabi_dmul>
 8005c1a:	a371      	add	r3, pc, #452	; (adr r3, 8005de0 <__ieee754_pow+0x730>)
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f7fa fae0 	bl	80001e4 <__adddf3>
 8005c24:	4622      	mov	r2, r4
 8005c26:	4606      	mov	r6, r0
 8005c28:	460f      	mov	r7, r1
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	4629      	mov	r1, r5
 8005c30:	f7fa fc8e 	bl	8000550 <__aeabi_dmul>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4630      	mov	r0, r6
 8005c3a:	4639      	mov	r1, r7
 8005c3c:	f7fa fc88 	bl	8000550 <__aeabi_dmul>
 8005c40:	4642      	mov	r2, r8
 8005c42:	4604      	mov	r4, r0
 8005c44:	460d      	mov	r5, r1
 8005c46:	464b      	mov	r3, r9
 8005c48:	ec51 0b18 	vmov	r0, r1, d8
 8005c4c:	f7fa faca 	bl	80001e4 <__adddf3>
 8005c50:	ec53 2b19 	vmov	r2, r3, d9
 8005c54:	f7fa fc7c 	bl	8000550 <__aeabi_dmul>
 8005c58:	4622      	mov	r2, r4
 8005c5a:	462b      	mov	r3, r5
 8005c5c:	f7fa fac2 	bl	80001e4 <__adddf3>
 8005c60:	4642      	mov	r2, r8
 8005c62:	4682      	mov	sl, r0
 8005c64:	468b      	mov	fp, r1
 8005c66:	464b      	mov	r3, r9
 8005c68:	4640      	mov	r0, r8
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	f7fa fc70 	bl	8000550 <__aeabi_dmul>
 8005c70:	4b6b      	ldr	r3, [pc, #428]	; (8005e20 <__ieee754_pow+0x770>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	4606      	mov	r6, r0
 8005c76:	460f      	mov	r7, r1
 8005c78:	f7fa fab4 	bl	80001e4 <__adddf3>
 8005c7c:	4652      	mov	r2, sl
 8005c7e:	465b      	mov	r3, fp
 8005c80:	f7fa fab0 	bl	80001e4 <__adddf3>
 8005c84:	2000      	movs	r0, #0
 8005c86:	4604      	mov	r4, r0
 8005c88:	460d      	mov	r5, r1
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4640      	mov	r0, r8
 8005c90:	4649      	mov	r1, r9
 8005c92:	f7fa fc5d 	bl	8000550 <__aeabi_dmul>
 8005c96:	4b62      	ldr	r3, [pc, #392]	; (8005e20 <__ieee754_pow+0x770>)
 8005c98:	4680      	mov	r8, r0
 8005c9a:	4689      	mov	r9, r1
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	f7fa fa9d 	bl	80001e0 <__aeabi_dsub>
 8005ca6:	4632      	mov	r2, r6
 8005ca8:	463b      	mov	r3, r7
 8005caa:	f7fa fa99 	bl	80001e0 <__aeabi_dsub>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4650      	mov	r0, sl
 8005cb4:	4659      	mov	r1, fp
 8005cb6:	f7fa fa93 	bl	80001e0 <__aeabi_dsub>
 8005cba:	ec53 2b18 	vmov	r2, r3, d8
 8005cbe:	f7fa fc47 	bl	8000550 <__aeabi_dmul>
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	4606      	mov	r6, r0
 8005cc6:	460f      	mov	r7, r1
 8005cc8:	462b      	mov	r3, r5
 8005cca:	ec51 0b19 	vmov	r0, r1, d9
 8005cce:	f7fa fc3f 	bl	8000550 <__aeabi_dmul>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	4639      	mov	r1, r7
 8005cda:	f7fa fa83 	bl	80001e4 <__adddf3>
 8005cde:	4606      	mov	r6, r0
 8005ce0:	460f      	mov	r7, r1
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	4649      	mov	r1, r9
 8005cea:	f7fa fa7b 	bl	80001e4 <__adddf3>
 8005cee:	a33e      	add	r3, pc, #248	; (adr r3, 8005de8 <__ieee754_pow+0x738>)
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	460d      	mov	r5, r1
 8005cfa:	f7fa fc29 	bl	8000550 <__aeabi_dmul>
 8005cfe:	4642      	mov	r2, r8
 8005d00:	ec41 0b18 	vmov	d8, r0, r1
 8005d04:	464b      	mov	r3, r9
 8005d06:	4620      	mov	r0, r4
 8005d08:	4629      	mov	r1, r5
 8005d0a:	f7fa fa69 	bl	80001e0 <__aeabi_dsub>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	4630      	mov	r0, r6
 8005d14:	4639      	mov	r1, r7
 8005d16:	f7fa fa63 	bl	80001e0 <__aeabi_dsub>
 8005d1a:	a335      	add	r3, pc, #212	; (adr r3, 8005df0 <__ieee754_pow+0x740>)
 8005d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d20:	f7fa fc16 	bl	8000550 <__aeabi_dmul>
 8005d24:	a334      	add	r3, pc, #208	; (adr r3, 8005df8 <__ieee754_pow+0x748>)
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	460f      	mov	r7, r1
 8005d2e:	4620      	mov	r0, r4
 8005d30:	4629      	mov	r1, r5
 8005d32:	f7fa fc0d 	bl	8000550 <__aeabi_dmul>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	f7fa fa51 	bl	80001e4 <__adddf3>
 8005d42:	9a07      	ldr	r2, [sp, #28]
 8005d44:	4b37      	ldr	r3, [pc, #220]	; (8005e24 <__ieee754_pow+0x774>)
 8005d46:	4413      	add	r3, r2
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	f7fa fa4a 	bl	80001e4 <__adddf3>
 8005d50:	4682      	mov	sl, r0
 8005d52:	9805      	ldr	r0, [sp, #20]
 8005d54:	468b      	mov	fp, r1
 8005d56:	f7fa fb91 	bl	800047c <__aeabi_i2d>
 8005d5a:	9a07      	ldr	r2, [sp, #28]
 8005d5c:	4b32      	ldr	r3, [pc, #200]	; (8005e28 <__ieee754_pow+0x778>)
 8005d5e:	4413      	add	r3, r2
 8005d60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d64:	4606      	mov	r6, r0
 8005d66:	460f      	mov	r7, r1
 8005d68:	4652      	mov	r2, sl
 8005d6a:	465b      	mov	r3, fp
 8005d6c:	ec51 0b18 	vmov	r0, r1, d8
 8005d70:	f7fa fa38 	bl	80001e4 <__adddf3>
 8005d74:	4642      	mov	r2, r8
 8005d76:	464b      	mov	r3, r9
 8005d78:	f7fa fa34 	bl	80001e4 <__adddf3>
 8005d7c:	4632      	mov	r2, r6
 8005d7e:	463b      	mov	r3, r7
 8005d80:	f7fa fa30 	bl	80001e4 <__adddf3>
 8005d84:	2000      	movs	r0, #0
 8005d86:	4632      	mov	r2, r6
 8005d88:	463b      	mov	r3, r7
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	460d      	mov	r5, r1
 8005d8e:	f7fa fa27 	bl	80001e0 <__aeabi_dsub>
 8005d92:	4642      	mov	r2, r8
 8005d94:	464b      	mov	r3, r9
 8005d96:	f7fa fa23 	bl	80001e0 <__aeabi_dsub>
 8005d9a:	ec53 2b18 	vmov	r2, r3, d8
 8005d9e:	f7fa fa1f 	bl	80001e0 <__aeabi_dsub>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4650      	mov	r0, sl
 8005da8:	4659      	mov	r1, fp
 8005daa:	e610      	b.n	80059ce <__ieee754_pow+0x31e>
 8005dac:	2401      	movs	r4, #1
 8005dae:	e6a1      	b.n	8005af4 <__ieee754_pow+0x444>
 8005db0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005e00 <__ieee754_pow+0x750>
 8005db4:	e617      	b.n	80059e6 <__ieee754_pow+0x336>
 8005db6:	bf00      	nop
 8005db8:	4a454eef 	.word	0x4a454eef
 8005dbc:	3fca7e28 	.word	0x3fca7e28
 8005dc0:	93c9db65 	.word	0x93c9db65
 8005dc4:	3fcd864a 	.word	0x3fcd864a
 8005dc8:	a91d4101 	.word	0xa91d4101
 8005dcc:	3fd17460 	.word	0x3fd17460
 8005dd0:	518f264d 	.word	0x518f264d
 8005dd4:	3fd55555 	.word	0x3fd55555
 8005dd8:	db6fabff 	.word	0xdb6fabff
 8005ddc:	3fdb6db6 	.word	0x3fdb6db6
 8005de0:	33333303 	.word	0x33333303
 8005de4:	3fe33333 	.word	0x3fe33333
 8005de8:	e0000000 	.word	0xe0000000
 8005dec:	3feec709 	.word	0x3feec709
 8005df0:	dc3a03fd 	.word	0xdc3a03fd
 8005df4:	3feec709 	.word	0x3feec709
 8005df8:	145b01f5 	.word	0x145b01f5
 8005dfc:	be3e2fe0 	.word	0xbe3e2fe0
 8005e00:	00000000 	.word	0x00000000
 8005e04:	3ff00000 	.word	0x3ff00000
 8005e08:	7ff00000 	.word	0x7ff00000
 8005e0c:	43400000 	.word	0x43400000
 8005e10:	0003988e 	.word	0x0003988e
 8005e14:	000bb679 	.word	0x000bb679
 8005e18:	08006a28 	.word	0x08006a28
 8005e1c:	3ff00000 	.word	0x3ff00000
 8005e20:	40080000 	.word	0x40080000
 8005e24:	08006a48 	.word	0x08006a48
 8005e28:	08006a38 	.word	0x08006a38
 8005e2c:	a3b5      	add	r3, pc, #724	; (adr r3, 8006104 <__ieee754_pow+0xa54>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	4640      	mov	r0, r8
 8005e34:	4649      	mov	r1, r9
 8005e36:	f7fa f9d5 	bl	80001e4 <__adddf3>
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	ec41 0b1a 	vmov	d10, r0, r1
 8005e40:	462b      	mov	r3, r5
 8005e42:	4630      	mov	r0, r6
 8005e44:	4639      	mov	r1, r7
 8005e46:	f7fa f9cb 	bl	80001e0 <__aeabi_dsub>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	ec51 0b1a 	vmov	r0, r1, d10
 8005e52:	f7fa fe0d 	bl	8000a70 <__aeabi_dcmpgt>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	f47f ae04 	bne.w	8005a64 <__ieee754_pow+0x3b4>
 8005e5c:	4aa4      	ldr	r2, [pc, #656]	; (80060f0 <__ieee754_pow+0xa40>)
 8005e5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e62:	4293      	cmp	r3, r2
 8005e64:	f340 8108 	ble.w	8006078 <__ieee754_pow+0x9c8>
 8005e68:	151b      	asrs	r3, r3, #20
 8005e6a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005e6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005e72:	fa4a f303 	asr.w	r3, sl, r3
 8005e76:	445b      	add	r3, fp
 8005e78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005e7c:	4e9d      	ldr	r6, [pc, #628]	; (80060f4 <__ieee754_pow+0xa44>)
 8005e7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005e82:	4116      	asrs	r6, r2
 8005e84:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005e88:	2000      	movs	r0, #0
 8005e8a:	ea23 0106 	bic.w	r1, r3, r6
 8005e8e:	f1c2 0214 	rsb	r2, r2, #20
 8005e92:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005e96:	fa4a fa02 	asr.w	sl, sl, r2
 8005e9a:	f1bb 0f00 	cmp.w	fp, #0
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	bfb8      	it	lt
 8005ea8:	f1ca 0a00 	rsblt	sl, sl, #0
 8005eac:	f7fa f998 	bl	80001e0 <__aeabi_dsub>
 8005eb0:	ec41 0b19 	vmov	d9, r0, r1
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	ec51 0b19 	vmov	r0, r1, d9
 8005ebc:	f7fa f992 	bl	80001e4 <__adddf3>
 8005ec0:	a37b      	add	r3, pc, #492	; (adr r3, 80060b0 <__ieee754_pow+0xa00>)
 8005ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	4604      	mov	r4, r0
 8005eca:	460d      	mov	r5, r1
 8005ecc:	f7fa fb40 	bl	8000550 <__aeabi_dmul>
 8005ed0:	ec53 2b19 	vmov	r2, r3, d9
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	460f      	mov	r7, r1
 8005ed8:	4620      	mov	r0, r4
 8005eda:	4629      	mov	r1, r5
 8005edc:	f7fa f980 	bl	80001e0 <__aeabi_dsub>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	f7fa f97a 	bl	80001e0 <__aeabi_dsub>
 8005eec:	a372      	add	r3, pc, #456	; (adr r3, 80060b8 <__ieee754_pow+0xa08>)
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f7fa fb2d 	bl	8000550 <__aeabi_dmul>
 8005ef6:	a372      	add	r3, pc, #456	; (adr r3, 80060c0 <__ieee754_pow+0xa10>)
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	4680      	mov	r8, r0
 8005efe:	4689      	mov	r9, r1
 8005f00:	4620      	mov	r0, r4
 8005f02:	4629      	mov	r1, r5
 8005f04:	f7fa fb24 	bl	8000550 <__aeabi_dmul>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4640      	mov	r0, r8
 8005f0e:	4649      	mov	r1, r9
 8005f10:	f7fa f968 	bl	80001e4 <__adddf3>
 8005f14:	4604      	mov	r4, r0
 8005f16:	460d      	mov	r5, r1
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	4639      	mov	r1, r7
 8005f20:	f7fa f960 	bl	80001e4 <__adddf3>
 8005f24:	4632      	mov	r2, r6
 8005f26:	463b      	mov	r3, r7
 8005f28:	4680      	mov	r8, r0
 8005f2a:	4689      	mov	r9, r1
 8005f2c:	f7fa f958 	bl	80001e0 <__aeabi_dsub>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4620      	mov	r0, r4
 8005f36:	4629      	mov	r1, r5
 8005f38:	f7fa f952 	bl	80001e0 <__aeabi_dsub>
 8005f3c:	4642      	mov	r2, r8
 8005f3e:	4606      	mov	r6, r0
 8005f40:	460f      	mov	r7, r1
 8005f42:	464b      	mov	r3, r9
 8005f44:	4640      	mov	r0, r8
 8005f46:	4649      	mov	r1, r9
 8005f48:	f7fa fb02 	bl	8000550 <__aeabi_dmul>
 8005f4c:	a35e      	add	r3, pc, #376	; (adr r3, 80060c8 <__ieee754_pow+0xa18>)
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	4604      	mov	r4, r0
 8005f54:	460d      	mov	r5, r1
 8005f56:	f7fa fafb 	bl	8000550 <__aeabi_dmul>
 8005f5a:	a35d      	add	r3, pc, #372	; (adr r3, 80060d0 <__ieee754_pow+0xa20>)
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f7fa f93e 	bl	80001e0 <__aeabi_dsub>
 8005f64:	4622      	mov	r2, r4
 8005f66:	462b      	mov	r3, r5
 8005f68:	f7fa faf2 	bl	8000550 <__aeabi_dmul>
 8005f6c:	a35a      	add	r3, pc, #360	; (adr r3, 80060d8 <__ieee754_pow+0xa28>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f7fa f937 	bl	80001e4 <__adddf3>
 8005f76:	4622      	mov	r2, r4
 8005f78:	462b      	mov	r3, r5
 8005f7a:	f7fa fae9 	bl	8000550 <__aeabi_dmul>
 8005f7e:	a358      	add	r3, pc, #352	; (adr r3, 80060e0 <__ieee754_pow+0xa30>)
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f7fa f92c 	bl	80001e0 <__aeabi_dsub>
 8005f88:	4622      	mov	r2, r4
 8005f8a:	462b      	mov	r3, r5
 8005f8c:	f7fa fae0 	bl	8000550 <__aeabi_dmul>
 8005f90:	a355      	add	r3, pc, #340	; (adr r3, 80060e8 <__ieee754_pow+0xa38>)
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f7fa f925 	bl	80001e4 <__adddf3>
 8005f9a:	4622      	mov	r2, r4
 8005f9c:	462b      	mov	r3, r5
 8005f9e:	f7fa fad7 	bl	8000550 <__aeabi_dmul>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	4649      	mov	r1, r9
 8005faa:	f7fa f919 	bl	80001e0 <__aeabi_dsub>
 8005fae:	4604      	mov	r4, r0
 8005fb0:	460d      	mov	r5, r1
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	4649      	mov	r1, r9
 8005fba:	f7fa fac9 	bl	8000550 <__aeabi_dmul>
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	ec41 0b19 	vmov	d9, r0, r1
 8005fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fc8:	4620      	mov	r0, r4
 8005fca:	4629      	mov	r1, r5
 8005fcc:	f7fa f908 	bl	80001e0 <__aeabi_dsub>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	ec51 0b19 	vmov	r0, r1, d9
 8005fd8:	f7fa fbe4 	bl	80007a4 <__aeabi_ddiv>
 8005fdc:	4632      	mov	r2, r6
 8005fde:	4604      	mov	r4, r0
 8005fe0:	460d      	mov	r5, r1
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	f7fa fab2 	bl	8000550 <__aeabi_dmul>
 8005fec:	4632      	mov	r2, r6
 8005fee:	463b      	mov	r3, r7
 8005ff0:	f7fa f8f8 	bl	80001e4 <__adddf3>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	f7fa f8f0 	bl	80001e0 <__aeabi_dsub>
 8006000:	4642      	mov	r2, r8
 8006002:	464b      	mov	r3, r9
 8006004:	f7fa f8ec 	bl	80001e0 <__aeabi_dsub>
 8006008:	460b      	mov	r3, r1
 800600a:	4602      	mov	r2, r0
 800600c:	493a      	ldr	r1, [pc, #232]	; (80060f8 <__ieee754_pow+0xa48>)
 800600e:	2000      	movs	r0, #0
 8006010:	f7fa f8e6 	bl	80001e0 <__aeabi_dsub>
 8006014:	ec41 0b10 	vmov	d0, r0, r1
 8006018:	ee10 3a90 	vmov	r3, s1
 800601c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006024:	da2b      	bge.n	800607e <__ieee754_pow+0x9ce>
 8006026:	4650      	mov	r0, sl
 8006028:	f000 fbf2 	bl	8006810 <scalbn>
 800602c:	ec51 0b10 	vmov	r0, r1, d0
 8006030:	ec53 2b18 	vmov	r2, r3, d8
 8006034:	f7ff bbed 	b.w	8005812 <__ieee754_pow+0x162>
 8006038:	4b30      	ldr	r3, [pc, #192]	; (80060fc <__ieee754_pow+0xa4c>)
 800603a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800603e:	429e      	cmp	r6, r3
 8006040:	f77f af0c 	ble.w	8005e5c <__ieee754_pow+0x7ac>
 8006044:	4b2e      	ldr	r3, [pc, #184]	; (8006100 <__ieee754_pow+0xa50>)
 8006046:	440b      	add	r3, r1
 8006048:	4303      	orrs	r3, r0
 800604a:	d009      	beq.n	8006060 <__ieee754_pow+0x9b0>
 800604c:	ec51 0b18 	vmov	r0, r1, d8
 8006050:	2200      	movs	r2, #0
 8006052:	2300      	movs	r3, #0
 8006054:	f7fa fcee 	bl	8000a34 <__aeabi_dcmplt>
 8006058:	3800      	subs	r0, #0
 800605a:	bf18      	it	ne
 800605c:	2001      	movne	r0, #1
 800605e:	e447      	b.n	80058f0 <__ieee754_pow+0x240>
 8006060:	4622      	mov	r2, r4
 8006062:	462b      	mov	r3, r5
 8006064:	f7fa f8bc 	bl	80001e0 <__aeabi_dsub>
 8006068:	4642      	mov	r2, r8
 800606a:	464b      	mov	r3, r9
 800606c:	f7fa fcf6 	bl	8000a5c <__aeabi_dcmpge>
 8006070:	2800      	cmp	r0, #0
 8006072:	f43f aef3 	beq.w	8005e5c <__ieee754_pow+0x7ac>
 8006076:	e7e9      	b.n	800604c <__ieee754_pow+0x99c>
 8006078:	f04f 0a00 	mov.w	sl, #0
 800607c:	e71a      	b.n	8005eb4 <__ieee754_pow+0x804>
 800607e:	ec51 0b10 	vmov	r0, r1, d0
 8006082:	4619      	mov	r1, r3
 8006084:	e7d4      	b.n	8006030 <__ieee754_pow+0x980>
 8006086:	491c      	ldr	r1, [pc, #112]	; (80060f8 <__ieee754_pow+0xa48>)
 8006088:	2000      	movs	r0, #0
 800608a:	f7ff bb30 	b.w	80056ee <__ieee754_pow+0x3e>
 800608e:	2000      	movs	r0, #0
 8006090:	2100      	movs	r1, #0
 8006092:	f7ff bb2c 	b.w	80056ee <__ieee754_pow+0x3e>
 8006096:	4630      	mov	r0, r6
 8006098:	4639      	mov	r1, r7
 800609a:	f7ff bb28 	b.w	80056ee <__ieee754_pow+0x3e>
 800609e:	9204      	str	r2, [sp, #16]
 80060a0:	f7ff bb7a 	b.w	8005798 <__ieee754_pow+0xe8>
 80060a4:	2300      	movs	r3, #0
 80060a6:	f7ff bb64 	b.w	8005772 <__ieee754_pow+0xc2>
 80060aa:	bf00      	nop
 80060ac:	f3af 8000 	nop.w
 80060b0:	00000000 	.word	0x00000000
 80060b4:	3fe62e43 	.word	0x3fe62e43
 80060b8:	fefa39ef 	.word	0xfefa39ef
 80060bc:	3fe62e42 	.word	0x3fe62e42
 80060c0:	0ca86c39 	.word	0x0ca86c39
 80060c4:	be205c61 	.word	0xbe205c61
 80060c8:	72bea4d0 	.word	0x72bea4d0
 80060cc:	3e663769 	.word	0x3e663769
 80060d0:	c5d26bf1 	.word	0xc5d26bf1
 80060d4:	3ebbbd41 	.word	0x3ebbbd41
 80060d8:	af25de2c 	.word	0xaf25de2c
 80060dc:	3f11566a 	.word	0x3f11566a
 80060e0:	16bebd93 	.word	0x16bebd93
 80060e4:	3f66c16c 	.word	0x3f66c16c
 80060e8:	5555553e 	.word	0x5555553e
 80060ec:	3fc55555 	.word	0x3fc55555
 80060f0:	3fe00000 	.word	0x3fe00000
 80060f4:	000fffff 	.word	0x000fffff
 80060f8:	3ff00000 	.word	0x3ff00000
 80060fc:	4090cbff 	.word	0x4090cbff
 8006100:	3f6f3400 	.word	0x3f6f3400
 8006104:	652b82fe 	.word	0x652b82fe
 8006108:	3c971547 	.word	0x3c971547

0800610c <__ieee754_sqrt>:
 800610c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006110:	ec55 4b10 	vmov	r4, r5, d0
 8006114:	4e55      	ldr	r6, [pc, #340]	; (800626c <__ieee754_sqrt+0x160>)
 8006116:	43ae      	bics	r6, r5
 8006118:	ee10 0a10 	vmov	r0, s0
 800611c:	ee10 3a10 	vmov	r3, s0
 8006120:	462a      	mov	r2, r5
 8006122:	4629      	mov	r1, r5
 8006124:	d110      	bne.n	8006148 <__ieee754_sqrt+0x3c>
 8006126:	ee10 2a10 	vmov	r2, s0
 800612a:	462b      	mov	r3, r5
 800612c:	f7fa fa10 	bl	8000550 <__aeabi_dmul>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4620      	mov	r0, r4
 8006136:	4629      	mov	r1, r5
 8006138:	f7fa f854 	bl	80001e4 <__adddf3>
 800613c:	4604      	mov	r4, r0
 800613e:	460d      	mov	r5, r1
 8006140:	ec45 4b10 	vmov	d0, r4, r5
 8006144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006148:	2d00      	cmp	r5, #0
 800614a:	dc10      	bgt.n	800616e <__ieee754_sqrt+0x62>
 800614c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006150:	4330      	orrs	r0, r6
 8006152:	d0f5      	beq.n	8006140 <__ieee754_sqrt+0x34>
 8006154:	b15d      	cbz	r5, 800616e <__ieee754_sqrt+0x62>
 8006156:	ee10 2a10 	vmov	r2, s0
 800615a:	462b      	mov	r3, r5
 800615c:	ee10 0a10 	vmov	r0, s0
 8006160:	f7fa f83e 	bl	80001e0 <__aeabi_dsub>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	f7fa fb1c 	bl	80007a4 <__aeabi_ddiv>
 800616c:	e7e6      	b.n	800613c <__ieee754_sqrt+0x30>
 800616e:	1512      	asrs	r2, r2, #20
 8006170:	d074      	beq.n	800625c <__ieee754_sqrt+0x150>
 8006172:	07d4      	lsls	r4, r2, #31
 8006174:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006178:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800617c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006180:	bf5e      	ittt	pl
 8006182:	0fda      	lsrpl	r2, r3, #31
 8006184:	005b      	lslpl	r3, r3, #1
 8006186:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800618a:	2400      	movs	r4, #0
 800618c:	0fda      	lsrs	r2, r3, #31
 800618e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006192:	107f      	asrs	r7, r7, #1
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	2516      	movs	r5, #22
 8006198:	4620      	mov	r0, r4
 800619a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800619e:	1886      	adds	r6, r0, r2
 80061a0:	428e      	cmp	r6, r1
 80061a2:	bfde      	ittt	le
 80061a4:	1b89      	suble	r1, r1, r6
 80061a6:	18b0      	addle	r0, r6, r2
 80061a8:	18a4      	addle	r4, r4, r2
 80061aa:	0049      	lsls	r1, r1, #1
 80061ac:	3d01      	subs	r5, #1
 80061ae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80061b2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80061b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80061ba:	d1f0      	bne.n	800619e <__ieee754_sqrt+0x92>
 80061bc:	462a      	mov	r2, r5
 80061be:	f04f 0e20 	mov.w	lr, #32
 80061c2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80061c6:	4281      	cmp	r1, r0
 80061c8:	eb06 0c05 	add.w	ip, r6, r5
 80061cc:	dc02      	bgt.n	80061d4 <__ieee754_sqrt+0xc8>
 80061ce:	d113      	bne.n	80061f8 <__ieee754_sqrt+0xec>
 80061d0:	459c      	cmp	ip, r3
 80061d2:	d811      	bhi.n	80061f8 <__ieee754_sqrt+0xec>
 80061d4:	f1bc 0f00 	cmp.w	ip, #0
 80061d8:	eb0c 0506 	add.w	r5, ip, r6
 80061dc:	da43      	bge.n	8006266 <__ieee754_sqrt+0x15a>
 80061de:	2d00      	cmp	r5, #0
 80061e0:	db41      	blt.n	8006266 <__ieee754_sqrt+0x15a>
 80061e2:	f100 0801 	add.w	r8, r0, #1
 80061e6:	1a09      	subs	r1, r1, r0
 80061e8:	459c      	cmp	ip, r3
 80061ea:	bf88      	it	hi
 80061ec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80061f0:	eba3 030c 	sub.w	r3, r3, ip
 80061f4:	4432      	add	r2, r6
 80061f6:	4640      	mov	r0, r8
 80061f8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80061fc:	f1be 0e01 	subs.w	lr, lr, #1
 8006200:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006204:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006208:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800620c:	d1db      	bne.n	80061c6 <__ieee754_sqrt+0xba>
 800620e:	430b      	orrs	r3, r1
 8006210:	d006      	beq.n	8006220 <__ieee754_sqrt+0x114>
 8006212:	1c50      	adds	r0, r2, #1
 8006214:	bf13      	iteet	ne
 8006216:	3201      	addne	r2, #1
 8006218:	3401      	addeq	r4, #1
 800621a:	4672      	moveq	r2, lr
 800621c:	f022 0201 	bicne.w	r2, r2, #1
 8006220:	1063      	asrs	r3, r4, #1
 8006222:	0852      	lsrs	r2, r2, #1
 8006224:	07e1      	lsls	r1, r4, #31
 8006226:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800622a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800622e:	bf48      	it	mi
 8006230:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006234:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006238:	4614      	mov	r4, r2
 800623a:	e781      	b.n	8006140 <__ieee754_sqrt+0x34>
 800623c:	0ad9      	lsrs	r1, r3, #11
 800623e:	3815      	subs	r0, #21
 8006240:	055b      	lsls	r3, r3, #21
 8006242:	2900      	cmp	r1, #0
 8006244:	d0fa      	beq.n	800623c <__ieee754_sqrt+0x130>
 8006246:	02cd      	lsls	r5, r1, #11
 8006248:	d50a      	bpl.n	8006260 <__ieee754_sqrt+0x154>
 800624a:	f1c2 0420 	rsb	r4, r2, #32
 800624e:	fa23 f404 	lsr.w	r4, r3, r4
 8006252:	1e55      	subs	r5, r2, #1
 8006254:	4093      	lsls	r3, r2
 8006256:	4321      	orrs	r1, r4
 8006258:	1b42      	subs	r2, r0, r5
 800625a:	e78a      	b.n	8006172 <__ieee754_sqrt+0x66>
 800625c:	4610      	mov	r0, r2
 800625e:	e7f0      	b.n	8006242 <__ieee754_sqrt+0x136>
 8006260:	0049      	lsls	r1, r1, #1
 8006262:	3201      	adds	r2, #1
 8006264:	e7ef      	b.n	8006246 <__ieee754_sqrt+0x13a>
 8006266:	4680      	mov	r8, r0
 8006268:	e7bd      	b.n	80061e6 <__ieee754_sqrt+0xda>
 800626a:	bf00      	nop
 800626c:	7ff00000 	.word	0x7ff00000

08006270 <__ieee754_asinf>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	ee10 5a10 	vmov	r5, s0
 8006276:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800627a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800627e:	ed2d 8b04 	vpush	{d8-d9}
 8006282:	d10c      	bne.n	800629e <__ieee754_asinf+0x2e>
 8006284:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80063fc <__ieee754_asinf+0x18c>
 8006288:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8006400 <__ieee754_asinf+0x190>
 800628c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006290:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006294:	eeb0 0a67 	vmov.f32	s0, s15
 8006298:	ecbd 8b04 	vpop	{d8-d9}
 800629c:	bd38      	pop	{r3, r4, r5, pc}
 800629e:	dd04      	ble.n	80062aa <__ieee754_asinf+0x3a>
 80062a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80062a4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80062a8:	e7f6      	b.n	8006298 <__ieee754_asinf+0x28>
 80062aa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80062ae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80062b2:	da0b      	bge.n	80062cc <__ieee754_asinf+0x5c>
 80062b4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80062b8:	da52      	bge.n	8006360 <__ieee754_asinf+0xf0>
 80062ba:	eddf 7a52 	vldr	s15, [pc, #328]	; 8006404 <__ieee754_asinf+0x194>
 80062be:	ee70 7a27 	vadd.f32	s15, s0, s15
 80062c2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80062c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ca:	dce5      	bgt.n	8006298 <__ieee754_asinf+0x28>
 80062cc:	f000 fb26 	bl	800691c <fabsf>
 80062d0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80062d4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80062d8:	ee20 8a08 	vmul.f32	s16, s0, s16
 80062dc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8006408 <__ieee754_asinf+0x198>
 80062e0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800640c <__ieee754_asinf+0x19c>
 80062e4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8006410 <__ieee754_asinf+0x1a0>
 80062e8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80062ec:	eddf 7a49 	vldr	s15, [pc, #292]	; 8006414 <__ieee754_asinf+0x1a4>
 80062f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80062f4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8006418 <__ieee754_asinf+0x1a8>
 80062f8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80062fc:	eddf 7a47 	vldr	s15, [pc, #284]	; 800641c <__ieee754_asinf+0x1ac>
 8006300:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006304:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8006420 <__ieee754_asinf+0x1b0>
 8006308:	eea7 9a88 	vfma.f32	s18, s15, s16
 800630c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8006424 <__ieee754_asinf+0x1b4>
 8006310:	eee8 7a07 	vfma.f32	s15, s16, s14
 8006314:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006428 <__ieee754_asinf+0x1b8>
 8006318:	eea7 7a88 	vfma.f32	s14, s15, s16
 800631c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800642c <__ieee754_asinf+0x1bc>
 8006320:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006324:	eeb0 0a48 	vmov.f32	s0, s16
 8006328:	eee7 8a88 	vfma.f32	s17, s15, s16
 800632c:	f000 f886 	bl	800643c <__ieee754_sqrtf>
 8006330:	4b3f      	ldr	r3, [pc, #252]	; (8006430 <__ieee754_asinf+0x1c0>)
 8006332:	ee29 9a08 	vmul.f32	s18, s18, s16
 8006336:	429c      	cmp	r4, r3
 8006338:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800633c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006340:	dd3d      	ble.n	80063be <__ieee754_asinf+0x14e>
 8006342:	eea0 0a06 	vfma.f32	s0, s0, s12
 8006346:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8006434 <__ieee754_asinf+0x1c4>
 800634a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800634e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8006400 <__ieee754_asinf+0x190>
 8006352:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006356:	2d00      	cmp	r5, #0
 8006358:	bfd8      	it	le
 800635a:	eeb1 0a40 	vnegle.f32	s0, s0
 800635e:	e79b      	b.n	8006298 <__ieee754_asinf+0x28>
 8006360:	ee60 7a00 	vmul.f32	s15, s0, s0
 8006364:	eddf 6a28 	vldr	s13, [pc, #160]	; 8006408 <__ieee754_asinf+0x198>
 8006368:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800640c <__ieee754_asinf+0x19c>
 800636c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8006420 <__ieee754_asinf+0x1b0>
 8006370:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006374:	eddf 6a27 	vldr	s13, [pc, #156]	; 8006414 <__ieee754_asinf+0x1a4>
 8006378:	eee7 6a27 	vfma.f32	s13, s14, s15
 800637c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006418 <__ieee754_asinf+0x1a8>
 8006380:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006384:	eddf 6a25 	vldr	s13, [pc, #148]	; 800641c <__ieee754_asinf+0x1ac>
 8006388:	eee7 6a27 	vfma.f32	s13, s14, s15
 800638c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8006410 <__ieee754_asinf+0x1a0>
 8006390:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006394:	eddf 6a23 	vldr	s13, [pc, #140]	; 8006424 <__ieee754_asinf+0x1b4>
 8006398:	eee7 6a86 	vfma.f32	s13, s15, s12
 800639c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8006428 <__ieee754_asinf+0x1b8>
 80063a0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80063a4:	eddf 6a21 	vldr	s13, [pc, #132]	; 800642c <__ieee754_asinf+0x1bc>
 80063a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80063ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063b0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80063b4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80063b8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80063bc:	e76c      	b.n	8006298 <__ieee754_asinf+0x28>
 80063be:	ee10 3a10 	vmov	r3, s0
 80063c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80063c6:	f023 030f 	bic.w	r3, r3, #15
 80063ca:	ee07 3a10 	vmov	s14, r3
 80063ce:	eea7 8a47 	vfms.f32	s16, s14, s14
 80063d2:	ee70 7a07 	vadd.f32	s15, s0, s14
 80063d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80063da:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80063de:	eddf 7a07 	vldr	s15, [pc, #28]	; 80063fc <__ieee754_asinf+0x18c>
 80063e2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80063e6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80063ea:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8006438 <__ieee754_asinf+0x1c8>
 80063ee:	eeb0 6a40 	vmov.f32	s12, s0
 80063f2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80063f6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80063fa:	e7aa      	b.n	8006352 <__ieee754_asinf+0xe2>
 80063fc:	b33bbd2e 	.word	0xb33bbd2e
 8006400:	3fc90fdb 	.word	0x3fc90fdb
 8006404:	7149f2ca 	.word	0x7149f2ca
 8006408:	3811ef08 	.word	0x3811ef08
 800640c:	3a4f7f04 	.word	0x3a4f7f04
 8006410:	3e2aaaab 	.word	0x3e2aaaab
 8006414:	bd241146 	.word	0xbd241146
 8006418:	3e4e0aa8 	.word	0x3e4e0aa8
 800641c:	bea6b090 	.word	0xbea6b090
 8006420:	3d9dc62e 	.word	0x3d9dc62e
 8006424:	bf303361 	.word	0xbf303361
 8006428:	4001572d 	.word	0x4001572d
 800642c:	c019d139 	.word	0xc019d139
 8006430:	3f799999 	.word	0x3f799999
 8006434:	333bbd2e 	.word	0x333bbd2e
 8006438:	3f490fdb 	.word	0x3f490fdb

0800643c <__ieee754_sqrtf>:
 800643c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006440:	4770      	bx	lr

08006442 <with_errno>:
 8006442:	b570      	push	{r4, r5, r6, lr}
 8006444:	4604      	mov	r4, r0
 8006446:	460d      	mov	r5, r1
 8006448:	4616      	mov	r6, r2
 800644a:	f000 fa75 	bl	8006938 <__errno>
 800644e:	4629      	mov	r1, r5
 8006450:	6006      	str	r6, [r0, #0]
 8006452:	4620      	mov	r0, r4
 8006454:	bd70      	pop	{r4, r5, r6, pc}

08006456 <xflow>:
 8006456:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006458:	4614      	mov	r4, r2
 800645a:	461d      	mov	r5, r3
 800645c:	b108      	cbz	r0, 8006462 <xflow+0xc>
 800645e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006462:	e9cd 2300 	strd	r2, r3, [sp]
 8006466:	e9dd 2300 	ldrd	r2, r3, [sp]
 800646a:	4620      	mov	r0, r4
 800646c:	4629      	mov	r1, r5
 800646e:	f7fa f86f 	bl	8000550 <__aeabi_dmul>
 8006472:	2222      	movs	r2, #34	; 0x22
 8006474:	b003      	add	sp, #12
 8006476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800647a:	f7ff bfe2 	b.w	8006442 <with_errno>

0800647e <__math_uflow>:
 800647e:	b508      	push	{r3, lr}
 8006480:	2200      	movs	r2, #0
 8006482:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006486:	f7ff ffe6 	bl	8006456 <xflow>
 800648a:	ec41 0b10 	vmov	d0, r0, r1
 800648e:	bd08      	pop	{r3, pc}

08006490 <__math_oflow>:
 8006490:	b508      	push	{r3, lr}
 8006492:	2200      	movs	r2, #0
 8006494:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006498:	f7ff ffdd 	bl	8006456 <xflow>
 800649c:	ec41 0b10 	vmov	d0, r0, r1
 80064a0:	bd08      	pop	{r3, pc}
 80064a2:	0000      	movs	r0, r0
 80064a4:	0000      	movs	r0, r0
	...

080064a8 <atan>:
 80064a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	ec55 4b10 	vmov	r4, r5, d0
 80064b0:	4bc3      	ldr	r3, [pc, #780]	; (80067c0 <atan+0x318>)
 80064b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80064b6:	429e      	cmp	r6, r3
 80064b8:	46ab      	mov	fp, r5
 80064ba:	dd18      	ble.n	80064ee <atan+0x46>
 80064bc:	4bc1      	ldr	r3, [pc, #772]	; (80067c4 <atan+0x31c>)
 80064be:	429e      	cmp	r6, r3
 80064c0:	dc01      	bgt.n	80064c6 <atan+0x1e>
 80064c2:	d109      	bne.n	80064d8 <atan+0x30>
 80064c4:	b144      	cbz	r4, 80064d8 <atan+0x30>
 80064c6:	4622      	mov	r2, r4
 80064c8:	462b      	mov	r3, r5
 80064ca:	4620      	mov	r0, r4
 80064cc:	4629      	mov	r1, r5
 80064ce:	f7f9 fe89 	bl	80001e4 <__adddf3>
 80064d2:	4604      	mov	r4, r0
 80064d4:	460d      	mov	r5, r1
 80064d6:	e006      	b.n	80064e6 <atan+0x3e>
 80064d8:	f1bb 0f00 	cmp.w	fp, #0
 80064dc:	f300 8131 	bgt.w	8006742 <atan+0x29a>
 80064e0:	a59b      	add	r5, pc, #620	; (adr r5, 8006750 <atan+0x2a8>)
 80064e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80064e6:	ec45 4b10 	vmov	d0, r4, r5
 80064ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ee:	4bb6      	ldr	r3, [pc, #728]	; (80067c8 <atan+0x320>)
 80064f0:	429e      	cmp	r6, r3
 80064f2:	dc14      	bgt.n	800651e <atan+0x76>
 80064f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80064f8:	429e      	cmp	r6, r3
 80064fa:	dc0d      	bgt.n	8006518 <atan+0x70>
 80064fc:	a396      	add	r3, pc, #600	; (adr r3, 8006758 <atan+0x2b0>)
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	ee10 0a10 	vmov	r0, s0
 8006506:	4629      	mov	r1, r5
 8006508:	f7f9 fe6c 	bl	80001e4 <__adddf3>
 800650c:	4baf      	ldr	r3, [pc, #700]	; (80067cc <atan+0x324>)
 800650e:	2200      	movs	r2, #0
 8006510:	f7fa faae 	bl	8000a70 <__aeabi_dcmpgt>
 8006514:	2800      	cmp	r0, #0
 8006516:	d1e6      	bne.n	80064e6 <atan+0x3e>
 8006518:	f04f 3aff 	mov.w	sl, #4294967295
 800651c:	e02b      	b.n	8006576 <atan+0xce>
 800651e:	f000 f963 	bl	80067e8 <fabs>
 8006522:	4bab      	ldr	r3, [pc, #684]	; (80067d0 <atan+0x328>)
 8006524:	429e      	cmp	r6, r3
 8006526:	ec55 4b10 	vmov	r4, r5, d0
 800652a:	f300 80bf 	bgt.w	80066ac <atan+0x204>
 800652e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006532:	429e      	cmp	r6, r3
 8006534:	f300 80a0 	bgt.w	8006678 <atan+0x1d0>
 8006538:	ee10 2a10 	vmov	r2, s0
 800653c:	ee10 0a10 	vmov	r0, s0
 8006540:	462b      	mov	r3, r5
 8006542:	4629      	mov	r1, r5
 8006544:	f7f9 fe4e 	bl	80001e4 <__adddf3>
 8006548:	4ba0      	ldr	r3, [pc, #640]	; (80067cc <atan+0x324>)
 800654a:	2200      	movs	r2, #0
 800654c:	f7f9 fe48 	bl	80001e0 <__aeabi_dsub>
 8006550:	2200      	movs	r2, #0
 8006552:	4606      	mov	r6, r0
 8006554:	460f      	mov	r7, r1
 8006556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800655a:	4620      	mov	r0, r4
 800655c:	4629      	mov	r1, r5
 800655e:	f7f9 fe41 	bl	80001e4 <__adddf3>
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4630      	mov	r0, r6
 8006568:	4639      	mov	r1, r7
 800656a:	f7fa f91b 	bl	80007a4 <__aeabi_ddiv>
 800656e:	f04f 0a00 	mov.w	sl, #0
 8006572:	4604      	mov	r4, r0
 8006574:	460d      	mov	r5, r1
 8006576:	4622      	mov	r2, r4
 8006578:	462b      	mov	r3, r5
 800657a:	4620      	mov	r0, r4
 800657c:	4629      	mov	r1, r5
 800657e:	f7f9 ffe7 	bl	8000550 <__aeabi_dmul>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4680      	mov	r8, r0
 8006588:	4689      	mov	r9, r1
 800658a:	f7f9 ffe1 	bl	8000550 <__aeabi_dmul>
 800658e:	a374      	add	r3, pc, #464	; (adr r3, 8006760 <atan+0x2b8>)
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	4606      	mov	r6, r0
 8006596:	460f      	mov	r7, r1
 8006598:	f7f9 ffda 	bl	8000550 <__aeabi_dmul>
 800659c:	a372      	add	r3, pc, #456	; (adr r3, 8006768 <atan+0x2c0>)
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f7f9 fe1f 	bl	80001e4 <__adddf3>
 80065a6:	4632      	mov	r2, r6
 80065a8:	463b      	mov	r3, r7
 80065aa:	f7f9 ffd1 	bl	8000550 <__aeabi_dmul>
 80065ae:	a370      	add	r3, pc, #448	; (adr r3, 8006770 <atan+0x2c8>)
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f7f9 fe16 	bl	80001e4 <__adddf3>
 80065b8:	4632      	mov	r2, r6
 80065ba:	463b      	mov	r3, r7
 80065bc:	f7f9 ffc8 	bl	8000550 <__aeabi_dmul>
 80065c0:	a36d      	add	r3, pc, #436	; (adr r3, 8006778 <atan+0x2d0>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f7f9 fe0d 	bl	80001e4 <__adddf3>
 80065ca:	4632      	mov	r2, r6
 80065cc:	463b      	mov	r3, r7
 80065ce:	f7f9 ffbf 	bl	8000550 <__aeabi_dmul>
 80065d2:	a36b      	add	r3, pc, #428	; (adr r3, 8006780 <atan+0x2d8>)
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f7f9 fe04 	bl	80001e4 <__adddf3>
 80065dc:	4632      	mov	r2, r6
 80065de:	463b      	mov	r3, r7
 80065e0:	f7f9 ffb6 	bl	8000550 <__aeabi_dmul>
 80065e4:	a368      	add	r3, pc, #416	; (adr r3, 8006788 <atan+0x2e0>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f7f9 fdfb 	bl	80001e4 <__adddf3>
 80065ee:	4642      	mov	r2, r8
 80065f0:	464b      	mov	r3, r9
 80065f2:	f7f9 ffad 	bl	8000550 <__aeabi_dmul>
 80065f6:	a366      	add	r3, pc, #408	; (adr r3, 8006790 <atan+0x2e8>)
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	4680      	mov	r8, r0
 80065fe:	4689      	mov	r9, r1
 8006600:	4630      	mov	r0, r6
 8006602:	4639      	mov	r1, r7
 8006604:	f7f9 ffa4 	bl	8000550 <__aeabi_dmul>
 8006608:	a363      	add	r3, pc, #396	; (adr r3, 8006798 <atan+0x2f0>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	f7f9 fde7 	bl	80001e0 <__aeabi_dsub>
 8006612:	4632      	mov	r2, r6
 8006614:	463b      	mov	r3, r7
 8006616:	f7f9 ff9b 	bl	8000550 <__aeabi_dmul>
 800661a:	a361      	add	r3, pc, #388	; (adr r3, 80067a0 <atan+0x2f8>)
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f7f9 fdde 	bl	80001e0 <__aeabi_dsub>
 8006624:	4632      	mov	r2, r6
 8006626:	463b      	mov	r3, r7
 8006628:	f7f9 ff92 	bl	8000550 <__aeabi_dmul>
 800662c:	a35e      	add	r3, pc, #376	; (adr r3, 80067a8 <atan+0x300>)
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	f7f9 fdd5 	bl	80001e0 <__aeabi_dsub>
 8006636:	4632      	mov	r2, r6
 8006638:	463b      	mov	r3, r7
 800663a:	f7f9 ff89 	bl	8000550 <__aeabi_dmul>
 800663e:	a35c      	add	r3, pc, #368	; (adr r3, 80067b0 <atan+0x308>)
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f7f9 fdcc 	bl	80001e0 <__aeabi_dsub>
 8006648:	4632      	mov	r2, r6
 800664a:	463b      	mov	r3, r7
 800664c:	f7f9 ff80 	bl	8000550 <__aeabi_dmul>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4640      	mov	r0, r8
 8006656:	4649      	mov	r1, r9
 8006658:	f7f9 fdc4 	bl	80001e4 <__adddf3>
 800665c:	4622      	mov	r2, r4
 800665e:	462b      	mov	r3, r5
 8006660:	f7f9 ff76 	bl	8000550 <__aeabi_dmul>
 8006664:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	d14b      	bne.n	8006706 <atan+0x25e>
 800666e:	4620      	mov	r0, r4
 8006670:	4629      	mov	r1, r5
 8006672:	f7f9 fdb5 	bl	80001e0 <__aeabi_dsub>
 8006676:	e72c      	b.n	80064d2 <atan+0x2a>
 8006678:	ee10 0a10 	vmov	r0, s0
 800667c:	4b53      	ldr	r3, [pc, #332]	; (80067cc <atan+0x324>)
 800667e:	2200      	movs	r2, #0
 8006680:	4629      	mov	r1, r5
 8006682:	f7f9 fdad 	bl	80001e0 <__aeabi_dsub>
 8006686:	4b51      	ldr	r3, [pc, #324]	; (80067cc <atan+0x324>)
 8006688:	4606      	mov	r6, r0
 800668a:	460f      	mov	r7, r1
 800668c:	2200      	movs	r2, #0
 800668e:	4620      	mov	r0, r4
 8006690:	4629      	mov	r1, r5
 8006692:	f7f9 fda7 	bl	80001e4 <__adddf3>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4630      	mov	r0, r6
 800669c:	4639      	mov	r1, r7
 800669e:	f7fa f881 	bl	80007a4 <__aeabi_ddiv>
 80066a2:	f04f 0a01 	mov.w	sl, #1
 80066a6:	4604      	mov	r4, r0
 80066a8:	460d      	mov	r5, r1
 80066aa:	e764      	b.n	8006576 <atan+0xce>
 80066ac:	4b49      	ldr	r3, [pc, #292]	; (80067d4 <atan+0x32c>)
 80066ae:	429e      	cmp	r6, r3
 80066b0:	da1d      	bge.n	80066ee <atan+0x246>
 80066b2:	ee10 0a10 	vmov	r0, s0
 80066b6:	4b48      	ldr	r3, [pc, #288]	; (80067d8 <atan+0x330>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	4629      	mov	r1, r5
 80066bc:	f7f9 fd90 	bl	80001e0 <__aeabi_dsub>
 80066c0:	4b45      	ldr	r3, [pc, #276]	; (80067d8 <atan+0x330>)
 80066c2:	4606      	mov	r6, r0
 80066c4:	460f      	mov	r7, r1
 80066c6:	2200      	movs	r2, #0
 80066c8:	4620      	mov	r0, r4
 80066ca:	4629      	mov	r1, r5
 80066cc:	f7f9 ff40 	bl	8000550 <__aeabi_dmul>
 80066d0:	4b3e      	ldr	r3, [pc, #248]	; (80067cc <atan+0x324>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	f7f9 fd86 	bl	80001e4 <__adddf3>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4630      	mov	r0, r6
 80066de:	4639      	mov	r1, r7
 80066e0:	f7fa f860 	bl	80007a4 <__aeabi_ddiv>
 80066e4:	f04f 0a02 	mov.w	sl, #2
 80066e8:	4604      	mov	r4, r0
 80066ea:	460d      	mov	r5, r1
 80066ec:	e743      	b.n	8006576 <atan+0xce>
 80066ee:	462b      	mov	r3, r5
 80066f0:	ee10 2a10 	vmov	r2, s0
 80066f4:	4939      	ldr	r1, [pc, #228]	; (80067dc <atan+0x334>)
 80066f6:	2000      	movs	r0, #0
 80066f8:	f7fa f854 	bl	80007a4 <__aeabi_ddiv>
 80066fc:	f04f 0a03 	mov.w	sl, #3
 8006700:	4604      	mov	r4, r0
 8006702:	460d      	mov	r5, r1
 8006704:	e737      	b.n	8006576 <atan+0xce>
 8006706:	4b36      	ldr	r3, [pc, #216]	; (80067e0 <atan+0x338>)
 8006708:	4e36      	ldr	r6, [pc, #216]	; (80067e4 <atan+0x33c>)
 800670a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800670e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006712:	e9da 2300 	ldrd	r2, r3, [sl]
 8006716:	f7f9 fd63 	bl	80001e0 <__aeabi_dsub>
 800671a:	4622      	mov	r2, r4
 800671c:	462b      	mov	r3, r5
 800671e:	f7f9 fd5f 	bl	80001e0 <__aeabi_dsub>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	e9d6 0100 	ldrd	r0, r1, [r6]
 800672a:	f7f9 fd59 	bl	80001e0 <__aeabi_dsub>
 800672e:	f1bb 0f00 	cmp.w	fp, #0
 8006732:	4604      	mov	r4, r0
 8006734:	460d      	mov	r5, r1
 8006736:	f6bf aed6 	bge.w	80064e6 <atan+0x3e>
 800673a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800673e:	461d      	mov	r5, r3
 8006740:	e6d1      	b.n	80064e6 <atan+0x3e>
 8006742:	a51d      	add	r5, pc, #116	; (adr r5, 80067b8 <atan+0x310>)
 8006744:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006748:	e6cd      	b.n	80064e6 <atan+0x3e>
 800674a:	bf00      	nop
 800674c:	f3af 8000 	nop.w
 8006750:	54442d18 	.word	0x54442d18
 8006754:	bff921fb 	.word	0xbff921fb
 8006758:	8800759c 	.word	0x8800759c
 800675c:	7e37e43c 	.word	0x7e37e43c
 8006760:	e322da11 	.word	0xe322da11
 8006764:	3f90ad3a 	.word	0x3f90ad3a
 8006768:	24760deb 	.word	0x24760deb
 800676c:	3fa97b4b 	.word	0x3fa97b4b
 8006770:	a0d03d51 	.word	0xa0d03d51
 8006774:	3fb10d66 	.word	0x3fb10d66
 8006778:	c54c206e 	.word	0xc54c206e
 800677c:	3fb745cd 	.word	0x3fb745cd
 8006780:	920083ff 	.word	0x920083ff
 8006784:	3fc24924 	.word	0x3fc24924
 8006788:	5555550d 	.word	0x5555550d
 800678c:	3fd55555 	.word	0x3fd55555
 8006790:	2c6a6c2f 	.word	0x2c6a6c2f
 8006794:	bfa2b444 	.word	0xbfa2b444
 8006798:	52defd9a 	.word	0x52defd9a
 800679c:	3fadde2d 	.word	0x3fadde2d
 80067a0:	af749a6d 	.word	0xaf749a6d
 80067a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80067a8:	fe231671 	.word	0xfe231671
 80067ac:	3fbc71c6 	.word	0x3fbc71c6
 80067b0:	9998ebc4 	.word	0x9998ebc4
 80067b4:	3fc99999 	.word	0x3fc99999
 80067b8:	54442d18 	.word	0x54442d18
 80067bc:	3ff921fb 	.word	0x3ff921fb
 80067c0:	440fffff 	.word	0x440fffff
 80067c4:	7ff00000 	.word	0x7ff00000
 80067c8:	3fdbffff 	.word	0x3fdbffff
 80067cc:	3ff00000 	.word	0x3ff00000
 80067d0:	3ff2ffff 	.word	0x3ff2ffff
 80067d4:	40038000 	.word	0x40038000
 80067d8:	3ff80000 	.word	0x3ff80000
 80067dc:	bff00000 	.word	0xbff00000
 80067e0:	08006a78 	.word	0x08006a78
 80067e4:	08006a58 	.word	0x08006a58

080067e8 <fabs>:
 80067e8:	ec51 0b10 	vmov	r0, r1, d0
 80067ec:	ee10 2a10 	vmov	r2, s0
 80067f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80067f4:	ec43 2b10 	vmov	d0, r2, r3
 80067f8:	4770      	bx	lr

080067fa <finite>:
 80067fa:	b082      	sub	sp, #8
 80067fc:	ed8d 0b00 	vstr	d0, [sp]
 8006800:	9801      	ldr	r0, [sp, #4]
 8006802:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006806:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800680a:	0fc0      	lsrs	r0, r0, #31
 800680c:	b002      	add	sp, #8
 800680e:	4770      	bx	lr

08006810 <scalbn>:
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	ec55 4b10 	vmov	r4, r5, d0
 8006816:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800681a:	4606      	mov	r6, r0
 800681c:	462b      	mov	r3, r5
 800681e:	b99a      	cbnz	r2, 8006848 <scalbn+0x38>
 8006820:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006824:	4323      	orrs	r3, r4
 8006826:	d036      	beq.n	8006896 <scalbn+0x86>
 8006828:	4b39      	ldr	r3, [pc, #228]	; (8006910 <scalbn+0x100>)
 800682a:	4629      	mov	r1, r5
 800682c:	ee10 0a10 	vmov	r0, s0
 8006830:	2200      	movs	r2, #0
 8006832:	f7f9 fe8d 	bl	8000550 <__aeabi_dmul>
 8006836:	4b37      	ldr	r3, [pc, #220]	; (8006914 <scalbn+0x104>)
 8006838:	429e      	cmp	r6, r3
 800683a:	4604      	mov	r4, r0
 800683c:	460d      	mov	r5, r1
 800683e:	da10      	bge.n	8006862 <scalbn+0x52>
 8006840:	a32b      	add	r3, pc, #172	; (adr r3, 80068f0 <scalbn+0xe0>)
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	e03a      	b.n	80068be <scalbn+0xae>
 8006848:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800684c:	428a      	cmp	r2, r1
 800684e:	d10c      	bne.n	800686a <scalbn+0x5a>
 8006850:	ee10 2a10 	vmov	r2, s0
 8006854:	4620      	mov	r0, r4
 8006856:	4629      	mov	r1, r5
 8006858:	f7f9 fcc4 	bl	80001e4 <__adddf3>
 800685c:	4604      	mov	r4, r0
 800685e:	460d      	mov	r5, r1
 8006860:	e019      	b.n	8006896 <scalbn+0x86>
 8006862:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006866:	460b      	mov	r3, r1
 8006868:	3a36      	subs	r2, #54	; 0x36
 800686a:	4432      	add	r2, r6
 800686c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006870:	428a      	cmp	r2, r1
 8006872:	dd08      	ble.n	8006886 <scalbn+0x76>
 8006874:	2d00      	cmp	r5, #0
 8006876:	a120      	add	r1, pc, #128	; (adr r1, 80068f8 <scalbn+0xe8>)
 8006878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800687c:	da1c      	bge.n	80068b8 <scalbn+0xa8>
 800687e:	a120      	add	r1, pc, #128	; (adr r1, 8006900 <scalbn+0xf0>)
 8006880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006884:	e018      	b.n	80068b8 <scalbn+0xa8>
 8006886:	2a00      	cmp	r2, #0
 8006888:	dd08      	ble.n	800689c <scalbn+0x8c>
 800688a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800688e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006892:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006896:	ec45 4b10 	vmov	d0, r4, r5
 800689a:	bd70      	pop	{r4, r5, r6, pc}
 800689c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80068a0:	da19      	bge.n	80068d6 <scalbn+0xc6>
 80068a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80068a6:	429e      	cmp	r6, r3
 80068a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80068ac:	dd0a      	ble.n	80068c4 <scalbn+0xb4>
 80068ae:	a112      	add	r1, pc, #72	; (adr r1, 80068f8 <scalbn+0xe8>)
 80068b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e2      	bne.n	800687e <scalbn+0x6e>
 80068b8:	a30f      	add	r3, pc, #60	; (adr r3, 80068f8 <scalbn+0xe8>)
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	f7f9 fe47 	bl	8000550 <__aeabi_dmul>
 80068c2:	e7cb      	b.n	800685c <scalbn+0x4c>
 80068c4:	a10a      	add	r1, pc, #40	; (adr r1, 80068f0 <scalbn+0xe0>)
 80068c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0b8      	beq.n	8006840 <scalbn+0x30>
 80068ce:	a10e      	add	r1, pc, #56	; (adr r1, 8006908 <scalbn+0xf8>)
 80068d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068d4:	e7b4      	b.n	8006840 <scalbn+0x30>
 80068d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80068da:	3236      	adds	r2, #54	; 0x36
 80068dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80068e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80068e4:	4620      	mov	r0, r4
 80068e6:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <scalbn+0x108>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	e7e8      	b.n	80068be <scalbn+0xae>
 80068ec:	f3af 8000 	nop.w
 80068f0:	c2f8f359 	.word	0xc2f8f359
 80068f4:	01a56e1f 	.word	0x01a56e1f
 80068f8:	8800759c 	.word	0x8800759c
 80068fc:	7e37e43c 	.word	0x7e37e43c
 8006900:	8800759c 	.word	0x8800759c
 8006904:	fe37e43c 	.word	0xfe37e43c
 8006908:	c2f8f359 	.word	0xc2f8f359
 800690c:	81a56e1f 	.word	0x81a56e1f
 8006910:	43500000 	.word	0x43500000
 8006914:	ffff3cb0 	.word	0xffff3cb0
 8006918:	3c900000 	.word	0x3c900000

0800691c <fabsf>:
 800691c:	ee10 3a10 	vmov	r3, s0
 8006920:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006924:	ee00 3a10 	vmov	s0, r3
 8006928:	4770      	bx	lr
	...

0800692c <nanf>:
 800692c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006934 <nanf+0x8>
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	7fc00000 	.word	0x7fc00000

08006938 <__errno>:
 8006938:	4b01      	ldr	r3, [pc, #4]	; (8006940 <__errno+0x8>)
 800693a:	6818      	ldr	r0, [r3, #0]
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	2000002c 	.word	0x2000002c

08006944 <__libc_init_array>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	4d0d      	ldr	r5, [pc, #52]	; (800697c <__libc_init_array+0x38>)
 8006948:	4c0d      	ldr	r4, [pc, #52]	; (8006980 <__libc_init_array+0x3c>)
 800694a:	1b64      	subs	r4, r4, r5
 800694c:	10a4      	asrs	r4, r4, #2
 800694e:	2600      	movs	r6, #0
 8006950:	42a6      	cmp	r6, r4
 8006952:	d109      	bne.n	8006968 <__libc_init_array+0x24>
 8006954:	4d0b      	ldr	r5, [pc, #44]	; (8006984 <__libc_init_array+0x40>)
 8006956:	4c0c      	ldr	r4, [pc, #48]	; (8006988 <__libc_init_array+0x44>)
 8006958:	f000 f820 	bl	800699c <_init>
 800695c:	1b64      	subs	r4, r4, r5
 800695e:	10a4      	asrs	r4, r4, #2
 8006960:	2600      	movs	r6, #0
 8006962:	42a6      	cmp	r6, r4
 8006964:	d105      	bne.n	8006972 <__libc_init_array+0x2e>
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	f855 3b04 	ldr.w	r3, [r5], #4
 800696c:	4798      	blx	r3
 800696e:	3601      	adds	r6, #1
 8006970:	e7ee      	b.n	8006950 <__libc_init_array+0xc>
 8006972:	f855 3b04 	ldr.w	r3, [r5], #4
 8006976:	4798      	blx	r3
 8006978:	3601      	adds	r6, #1
 800697a:	e7f2      	b.n	8006962 <__libc_init_array+0x1e>
 800697c:	08006aa0 	.word	0x08006aa0
 8006980:	08006aa0 	.word	0x08006aa0
 8006984:	08006aa0 	.word	0x08006aa0
 8006988:	08006aa8 	.word	0x08006aa8

0800698c <memset>:
 800698c:	4402      	add	r2, r0
 800698e:	4603      	mov	r3, r0
 8006990:	4293      	cmp	r3, r2
 8006992:	d100      	bne.n	8006996 <memset+0xa>
 8006994:	4770      	bx	lr
 8006996:	f803 1b01 	strb.w	r1, [r3], #1
 800699a:	e7f9      	b.n	8006990 <memset+0x4>

0800699c <_init>:
 800699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699e:	bf00      	nop
 80069a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a2:	bc08      	pop	{r3}
 80069a4:	469e      	mov	lr, r3
 80069a6:	4770      	bx	lr

080069a8 <_fini>:
 80069a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069aa:	bf00      	nop
 80069ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ae:	bc08      	pop	{r3}
 80069b0:	469e      	mov	lr, r3
 80069b2:	4770      	bx	lr
