
icm20948_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005294  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800564c  0800564c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800564c  0800564c  0001564c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005654  08005654  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  080056d0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  080056d0  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019811  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dac  00000000  00000000  000398b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0003c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  0003d698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b513  00000000  00000000  0003e5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148bd  00000000  00000000  00059ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fa10  00000000  00000000  0006e3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ddb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d20  00000000  00000000  0010de00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005414 	.word	0x08005414

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08005414 	.word	0x08005414

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_uldivmod>:
 8000a24:	b953      	cbnz	r3, 8000a3c <__aeabi_uldivmod+0x18>
 8000a26:	b94a      	cbnz	r2, 8000a3c <__aeabi_uldivmod+0x18>
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	bf08      	it	eq
 8000a2c:	2800      	cmpeq	r0, #0
 8000a2e:	bf1c      	itt	ne
 8000a30:	f04f 31ff 	movne.w	r1, #4294967295
 8000a34:	f04f 30ff 	movne.w	r0, #4294967295
 8000a38:	f000 b974 	b.w	8000d24 <__aeabi_idiv0>
 8000a3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a44:	f000 f806 	bl	8000a54 <__udivmoddi4>
 8000a48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a50:	b004      	add	sp, #16
 8000a52:	4770      	bx	lr

08000a54 <__udivmoddi4>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	9d08      	ldr	r5, [sp, #32]
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	468e      	mov	lr, r1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d14d      	bne.n	8000afe <__udivmoddi4+0xaa>
 8000a62:	428a      	cmp	r2, r1
 8000a64:	4694      	mov	ip, r2
 8000a66:	d969      	bls.n	8000b3c <__udivmoddi4+0xe8>
 8000a68:	fab2 f282 	clz	r2, r2
 8000a6c:	b152      	cbz	r2, 8000a84 <__udivmoddi4+0x30>
 8000a6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a72:	f1c2 0120 	rsb	r1, r2, #32
 8000a76:	fa20 f101 	lsr.w	r1, r0, r1
 8000a7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a82:	4094      	lsls	r4, r2
 8000a84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a88:	0c21      	lsrs	r1, r4, #16
 8000a8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a8e:	fa1f f78c 	uxth.w	r7, ip
 8000a92:	fb08 e316 	mls	r3, r8, r6, lr
 8000a96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a9a:	fb06 f107 	mul.w	r1, r6, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d90a      	bls.n	8000ab8 <__udivmoddi4+0x64>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aaa:	f080 811f 	bcs.w	8000cec <__udivmoddi4+0x298>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 811c 	bls.w	8000cec <__udivmoddi4+0x298>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	4463      	add	r3, ip
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b2a4      	uxth	r4, r4
 8000abc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ac0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ac4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac8:	fb00 f707 	mul.w	r7, r0, r7
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	d90a      	bls.n	8000ae6 <__udivmoddi4+0x92>
 8000ad0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad8:	f080 810a 	bcs.w	8000cf0 <__udivmoddi4+0x29c>
 8000adc:	42a7      	cmp	r7, r4
 8000ade:	f240 8107 	bls.w	8000cf0 <__udivmoddi4+0x29c>
 8000ae2:	4464      	add	r4, ip
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aea:	1be4      	subs	r4, r4, r7
 8000aec:	2600      	movs	r6, #0
 8000aee:	b11d      	cbz	r5, 8000af8 <__udivmoddi4+0xa4>
 8000af0:	40d4      	lsrs	r4, r2
 8000af2:	2300      	movs	r3, #0
 8000af4:	e9c5 4300 	strd	r4, r3, [r5]
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d909      	bls.n	8000b16 <__udivmoddi4+0xc2>
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	f000 80ef 	beq.w	8000ce6 <__udivmoddi4+0x292>
 8000b08:	2600      	movs	r6, #0
 8000b0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0e:	4630      	mov	r0, r6
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	fab3 f683 	clz	r6, r3
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d14a      	bne.n	8000bb4 <__udivmoddi4+0x160>
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d302      	bcc.n	8000b28 <__udivmoddi4+0xd4>
 8000b22:	4282      	cmp	r2, r0
 8000b24:	f200 80f9 	bhi.w	8000d1a <__udivmoddi4+0x2c6>
 8000b28:	1a84      	subs	r4, r0, r2
 8000b2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b2e:	2001      	movs	r0, #1
 8000b30:	469e      	mov	lr, r3
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	d0e0      	beq.n	8000af8 <__udivmoddi4+0xa4>
 8000b36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b3a:	e7dd      	b.n	8000af8 <__udivmoddi4+0xa4>
 8000b3c:	b902      	cbnz	r2, 8000b40 <__udivmoddi4+0xec>
 8000b3e:	deff      	udf	#255	; 0xff
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	f040 8092 	bne.w	8000c6e <__udivmoddi4+0x21a>
 8000b4a:	eba1 010c 	sub.w	r1, r1, ip
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f fe8c 	uxth.w	lr, ip
 8000b56:	2601      	movs	r6, #1
 8000b58:	0c20      	lsrs	r0, r4, #16
 8000b5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b66:	fb0e f003 	mul.w	r0, lr, r3
 8000b6a:	4288      	cmp	r0, r1
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0x12c>
 8000b6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x12a>
 8000b78:	4288      	cmp	r0, r1
 8000b7a:	f200 80cb 	bhi.w	8000d14 <__udivmoddi4+0x2c0>
 8000b7e:	4643      	mov	r3, r8
 8000b80:	1a09      	subs	r1, r1, r0
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b88:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b90:	fb0e fe00 	mul.w	lr, lr, r0
 8000b94:	45a6      	cmp	lr, r4
 8000b96:	d908      	bls.n	8000baa <__udivmoddi4+0x156>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x154>
 8000ba2:	45a6      	cmp	lr, r4
 8000ba4:	f200 80bb 	bhi.w	8000d1e <__udivmoddi4+0x2ca>
 8000ba8:	4608      	mov	r0, r1
 8000baa:	eba4 040e 	sub.w	r4, r4, lr
 8000bae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bb2:	e79c      	b.n	8000aee <__udivmoddi4+0x9a>
 8000bb4:	f1c6 0720 	rsb	r7, r6, #32
 8000bb8:	40b3      	lsls	r3, r6
 8000bba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bc2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bca:	431c      	orrs	r4, r3
 8000bcc:	40f9      	lsrs	r1, r7
 8000bce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bd2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bd6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bda:	0c20      	lsrs	r0, r4, #16
 8000bdc:	fa1f fe8c 	uxth.w	lr, ip
 8000be0:	fb09 1118 	mls	r1, r9, r8, r1
 8000be4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000be8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bec:	4288      	cmp	r0, r1
 8000bee:	fa02 f206 	lsl.w	r2, r2, r6
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b8>
 8000bf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bfc:	f080 8088 	bcs.w	8000d10 <__udivmoddi4+0x2bc>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f240 8085 	bls.w	8000d10 <__udivmoddi4+0x2bc>
 8000c06:	f1a8 0802 	sub.w	r8, r8, #2
 8000c0a:	4461      	add	r1, ip
 8000c0c:	1a09      	subs	r1, r1, r0
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c14:	fb09 1110 	mls	r1, r9, r0, r1
 8000c18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c20:	458e      	cmp	lr, r1
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1e2>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2c:	d26c      	bcs.n	8000d08 <__udivmoddi4+0x2b4>
 8000c2e:	458e      	cmp	lr, r1
 8000c30:	d96a      	bls.n	8000d08 <__udivmoddi4+0x2b4>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4461      	add	r1, ip
 8000c36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c3e:	eba1 010e 	sub.w	r1, r1, lr
 8000c42:	42a1      	cmp	r1, r4
 8000c44:	46c8      	mov	r8, r9
 8000c46:	46a6      	mov	lr, r4
 8000c48:	d356      	bcc.n	8000cf8 <__udivmoddi4+0x2a4>
 8000c4a:	d053      	beq.n	8000cf4 <__udivmoddi4+0x2a0>
 8000c4c:	b15d      	cbz	r5, 8000c66 <__udivmoddi4+0x212>
 8000c4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c52:	eb61 010e 	sbc.w	r1, r1, lr
 8000c56:	fa01 f707 	lsl.w	r7, r1, r7
 8000c5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c5e:	40f1      	lsrs	r1, r6
 8000c60:	431f      	orrs	r7, r3
 8000c62:	e9c5 7100 	strd	r7, r1, [r5]
 8000c66:	2600      	movs	r6, #0
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	f1c2 0320 	rsb	r3, r2, #32
 8000c72:	40d8      	lsrs	r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	4301      	orrs	r1, r0
 8000c80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c90:	0c0b      	lsrs	r3, r1, #16
 8000c92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c96:	fb00 f60e 	mul.w	r6, r0, lr
 8000c9a:	429e      	cmp	r6, r3
 8000c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x260>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000caa:	d22f      	bcs.n	8000d0c <__udivmoddi4+0x2b8>
 8000cac:	429e      	cmp	r6, r3
 8000cae:	d92d      	bls.n	8000d0c <__udivmoddi4+0x2b8>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1b9b      	subs	r3, r3, r6
 8000cb6:	b289      	uxth	r1, r1
 8000cb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x28a>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cd4:	d216      	bcs.n	8000d04 <__udivmoddi4+0x2b0>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d914      	bls.n	8000d04 <__udivmoddi4+0x2b0>
 8000cda:	3e02      	subs	r6, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	1ac9      	subs	r1, r1, r3
 8000ce0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ce4:	e738      	b.n	8000b58 <__udivmoddi4+0x104>
 8000ce6:	462e      	mov	r6, r5
 8000ce8:	4628      	mov	r0, r5
 8000cea:	e705      	b.n	8000af8 <__udivmoddi4+0xa4>
 8000cec:	4606      	mov	r6, r0
 8000cee:	e6e3      	b.n	8000ab8 <__udivmoddi4+0x64>
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	e6f8      	b.n	8000ae6 <__udivmoddi4+0x92>
 8000cf4:	454b      	cmp	r3, r9
 8000cf6:	d2a9      	bcs.n	8000c4c <__udivmoddi4+0x1f8>
 8000cf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cfc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d00:	3801      	subs	r0, #1
 8000d02:	e7a3      	b.n	8000c4c <__udivmoddi4+0x1f8>
 8000d04:	4646      	mov	r6, r8
 8000d06:	e7ea      	b.n	8000cde <__udivmoddi4+0x28a>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	e794      	b.n	8000c36 <__udivmoddi4+0x1e2>
 8000d0c:	4640      	mov	r0, r8
 8000d0e:	e7d1      	b.n	8000cb4 <__udivmoddi4+0x260>
 8000d10:	46d0      	mov	r8, sl
 8000d12:	e77b      	b.n	8000c0c <__udivmoddi4+0x1b8>
 8000d14:	3b02      	subs	r3, #2
 8000d16:	4461      	add	r1, ip
 8000d18:	e732      	b.n	8000b80 <__udivmoddi4+0x12c>
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	e709      	b.n	8000b32 <__udivmoddi4+0xde>
 8000d1e:	4464      	add	r4, ip
 8000d20:	3802      	subs	r0, #2
 8000d22:	e742      	b.n	8000baa <__udivmoddi4+0x156>

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <_ZN8ICM209486whoamiEv>:
//
//ICM20948::~ICM20948() {
//	// TODO Auto-generated destructor stub
//}

uint8_t ICM20948::whoami(){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	6078      	str	r0, [r7, #4]
	    uint8_t adress=0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Read(hi2c, (uint16_t)address, REGISTER.WHO_AM_I, 1, &adress, 1, 1000);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6898      	ldr	r0, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7b1b      	ldrb	r3, [r3, #12]
 8000d3c:	b299      	uxth	r1, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d48:	9302      	str	r3, [sp, #8]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	f107 030f 	add.w	r3, r7, #15
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2301      	movs	r3, #1
 8000d56:	f001 fddf 	bl	8002918 <HAL_I2C_Mem_Read>
		return adress;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]

	}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <_ZN8ICM209488pwrmgmt1Eh>:

	uint8_t ICM20948::pwrmgmt1(uint8_t data){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af04      	add	r7, sp, #16
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
	     HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.PWR_MGMT_1,1,&data,1,1000);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6898      	ldr	r0, [r3, #8]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7b1b      	ldrb	r3, [r3, #12]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	b299      	uxth	r1, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	785b      	ldrb	r3, [r3, #1]
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d88:	9302      	str	r3, [sp, #8]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	1cfb      	adds	r3, r7, #3
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2301      	movs	r3, #1
 8000d94:	f001 fcc6 	bl	8002724 <HAL_I2C_Mem_Write>
	     return 0;
 8000d98:	2300      	movs	r3, #0
	}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <_ZN8ICM209488pwrmgmt2Eh>:
	uint8_t ICM20948::pwrmgmt2(uint8_t data){
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af04      	add	r7, sp, #16
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	460b      	mov	r3, r1
 8000dac:	70fb      	strb	r3, [r7, #3]
	     HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.PWR_MGMT_2,1,&data,1,1000);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6898      	ldr	r0, [r3, #8]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7b1b      	ldrb	r3, [r3, #12]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	b299      	uxth	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	789b      	ldrb	r3, [r3, #2]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	9302      	str	r3, [sp, #8]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	1cfb      	adds	r3, r7, #3
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	f001 fca7 	bl	8002724 <HAL_I2C_Mem_Write>
	     return 0;
 8000dd6:	2300      	movs	r3, #0
	}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_ZN8ICM209485resetEv>:
	void ICM20948::reset(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	6078      	str	r0, [r7, #4]
	    pwrmgmt1(ICM20948_BIT_H_RESET);
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffba 	bl	8000d64 <_ZN8ICM209488pwrmgmt1Eh>
	    HAL_Delay(100);
 8000df0:	2064      	movs	r0, #100	; 0x64
 8000df2:	f001 f84d 	bl	8001e90 <HAL_Delay>
	    pwrmgmt1(ICM20948_BTT_CLK_PLL);
 8000df6:	2101      	movs	r1, #1
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ffb3 	bl	8000d64 <_ZN8ICM209488pwrmgmt1Eh>
	    HAL_Delay(100);
 8000dfe:	2064      	movs	r0, #100	; 0x64
 8000e00:	f001 f846 	bl	8001e90 <HAL_Delay>
	    uint8_t buffer=ICM20948_BIT_INT_ACTL | ICM20948_BIT_INT_OPEN;
 8000e04:	23c0      	movs	r3, #192	; 0xc0
 8000e06:	73fb      	strb	r3, [r7, #15]
	    HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.INT_PIN_CFG,1,&buffer,1,1000);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6898      	ldr	r0, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7b1b      	ldrb	r3, [r3, #12]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	b299      	uxth	r1, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	78db      	ldrb	r3, [r3, #3]
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e20:	9302      	str	r3, [sp, #8]
 8000e22:	2301      	movs	r3, #1
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	f107 030f 	add.w	r3, r7, #15
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f001 fc79 	bl	8002724 <HAL_I2C_Mem_Write>
		}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_ZN8ICM2094814changeUserBankEh>:
	bool ICM20948::changeUserBank(const uint8_t bank){
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b088      	sub	sp, #32
 8000e3e:	af04      	add	r7, sp, #16
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	460b      	mov	r3, r1
 8000e44:	70fb      	strb	r3, [r7, #3]
	    if(bank>3 || bank<0){
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d901      	bls.n	8000e50 <_ZN8ICM2094814changeUserBankEh+0x16>
	        return false;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e01b      	b.n	8000e88 <_ZN8ICM2094814changeUserBankEh+0x4e>
	    }
	    uint8_t data=bank<<4;
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	011b      	lsls	r3, r3, #4
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	73bb      	strb	r3, [r7, #14]
	    uint8_t res = HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.BANK_SEL,1,&data,1,1000);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6898      	ldr	r0, [r3, #8]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7b1b      	ldrb	r3, [r3, #12]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	b299      	uxth	r1, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	791b      	ldrb	r3, [r3, #4]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e70:	9302      	str	r3, [sp, #8]
 8000e72:	2301      	movs	r3, #1
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	f107 030e 	add.w	r3, r7, #14
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	f001 fc51 	bl	8002724 <HAL_I2C_Mem_Write>
 8000e82:	4603      	mov	r3, r0
 8000e84:	73fb      	strb	r3, [r7, #15]
	    //printf("data=0x%02x\n",data);
	    //printf("res=%d\n",res);
	    return true;
 8000e86:	2301      	movs	r3, #1
	}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh>:

	bool ICM20948::accelConfig(const AccelSensitivity fssel,const bool enableDLPF,const uint8_t configDLPF){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af04      	add	r7, sp, #16
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	4608      	mov	r0, r1
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	70fb      	strb	r3, [r7, #3]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	70bb      	strb	r3, [r7, #2]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	707b      	strb	r3, [r7, #1]

	    _accelsensitivity=fssel;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	78fa      	ldrb	r2, [r7, #3]
 8000eae:	735a      	strb	r2, [r3, #13]
	    if(configDLPF>7 || configDLPF<0){
 8000eb0:	787b      	ldrb	r3, [r7, #1]
 8000eb2:	2b07      	cmp	r3, #7
 8000eb4:	d901      	bls.n	8000eba <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh+0x2a>
	        return false;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e038      	b.n	8000f2c <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh+0x9c>
	    }
	    uint8_t data=0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73fb      	strb	r3, [r7, #15]
	    data |=configDLPF<<3;
 8000ebe:	787b      	ldrb	r3, [r7, #1]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	b25a      	sxtb	r2, r3
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	73fb      	strb	r3, [r7, #15]
	    data |=(uint8_t)fssel<<1;
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	b25a      	sxtb	r2, r3
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	73fb      	strb	r3, [r7, #15]
	    data |=enableDLPF;
 8000ee2:	78ba      	ldrb	r2, [r7, #2]
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	73fb      	strb	r3, [r7, #15]
	    changeUserBank(2);
 8000eec:	2102      	movs	r1, #2
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffa3 	bl	8000e3a <_ZN8ICM2094814changeUserBankEh>

	    data=HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.ACCEL_CONFIG,1,&data,1,1000);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6898      	ldr	r0, [r3, #8]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7b1b      	ldrb	r3, [r3, #12]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	b299      	uxth	r1, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	795b      	ldrb	r3, [r3, #5]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0c:	9302      	str	r3, [sp, #8]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	f107 030f 	add.w	r3, r7, #15
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	f001 fc03 	bl	8002724 <HAL_I2C_Mem_Write>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	73fb      	strb	r3, [r7, #15]
	    //printf("data=%d\n",data);
	    changeUserBank(0);
 8000f22:	2100      	movs	r1, #0
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff88 	bl	8000e3a <_ZN8ICM2094814changeUserBankEh>
	    return true;
 8000f2a:	2301      	movs	r3, #1

	}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_ZN8ICM209487getGyroEh>:
	    int16_t accel=(int16_t)accelH<<8 | (int16_t)accelL;

	    return (float)accel/ACCEL_SENSITIVITY[(uint8_t)_accelsensitivity];
	}

	float ICM20948::getGyro(uint8_t axis){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af04      	add	r7, sp, #16
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
		const uint8_t REG_GYRO_H[3]={0x33,0x35,0x37};
 8000f40:	4a30      	ldr	r2, [pc, #192]	; (8001004 <_ZN8ICM209487getGyroEh+0xd0>)
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	6812      	ldr	r2, [r2, #0]
 8000f48:	4611      	mov	r1, r2
 8000f4a:	8019      	strh	r1, [r3, #0]
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	0c12      	lsrs	r2, r2, #16
 8000f50:	701a      	strb	r2, [r3, #0]
		const uint8_t REG_GYRO_L[3]={0x34,0x36,0x38};
 8000f52:	4a2d      	ldr	r2, [pc, #180]	; (8001008 <_ZN8ICM209487getGyroEh+0xd4>)
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	6812      	ldr	r2, [r2, #0]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	8019      	strh	r1, [r3, #0]
 8000f5e:	3302      	adds	r3, #2
 8000f60:	0c12      	lsrs	r2, r2, #16
 8000f62:	701a      	strb	r2, [r3, #0]

		int8_t gyroH;
		HAL_I2C_Mem_Read(hi2c,(uint16_t)address<<1,REG_GYRO_H[axis],1,(uint8_t*)&gyroH,1,1000);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6898      	ldr	r0, [r3, #8]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7b1b      	ldrb	r3, [r3, #12]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	b299      	uxth	r1, r3
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	3318      	adds	r3, #24
 8000f76:	443b      	add	r3, r7
 8000f78:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2301      	movs	r3, #1
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	f107 030b 	add.w	r3, r7, #11
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	f001 fcc2 	bl	8002918 <HAL_I2C_Mem_Read>
		int8_t gyroL;
		HAL_I2C_Mem_Read(hi2c,(uint16_t)address<<1,REG_GYRO_L[axis],1,(uint8_t*)&gyroL,1,1000);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6898      	ldr	r0, [r3, #8]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7b1b      	ldrb	r3, [r3, #12]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	3318      	adds	r3, #24
 8000fa6:	443b      	add	r3, r7
 8000fa8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	f107 030a 	add.w	r3, r7, #10
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f001 fcaa 	bl	8002918 <HAL_I2C_Mem_Read>
		int16_t gyro=(int16_t)gyroH<<8 | (int16_t)gyroL;
 8000fc4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	82fb      	strh	r3, [r7, #22]

		return (float)gyro/GYRO_SENSITIVITY[(uint8_t)_gyrosensitivity];
 8000fd6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7b9b      	ldrb	r3, [r3, #14]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	3308      	adds	r3, #8
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ff6:	eef0 7a66 	vmov.f32	s15, s13
	}
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	08005434 	.word	0x08005434
 8001008:	08005438 	.word	0x08005438

0800100c <_ZN8ICM2094812intPinConfigEh>:

	void ICM20948::intPinConfig(uint8_t value){
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af04      	add	r7, sp, #16
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(hi2c,(uint16_t)address<<1,REGISTER.INT_PIN_CFG,1,&value,1,1000);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6898      	ldr	r0, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7b1b      	ldrb	r3, [r3, #12]
 8001020:	b29b      	uxth	r3, r3
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	b299      	uxth	r1, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	78db      	ldrb	r3, [r3, #3]
 800102a:	b29a      	uxth	r2, r3
 800102c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	2301      	movs	r3, #1
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	1cfb      	adds	r3, r7, #3
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	f001 fb72 	bl	8002724 <HAL_I2C_Mem_Write>

	}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_ZN8ICM209489intenableEh>:

	void ICM20948::intenable(uint8_t value){
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af04      	add	r7, sp, #16
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(hi2c,(uint16_t)address<<1,REGISTER.INT_ENABLE,1,&value,1,1000);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6898      	ldr	r0, [r3, #8]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7b1b      	ldrb	r3, [r3, #12]
 800105c:	b29b      	uxth	r3, r3
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	b299      	uxth	r1, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	79db      	ldrb	r3, [r3, #7]
 8001066:	b29a      	uxth	r2, r3
 8001068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2301      	movs	r3, #1
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	1cfb      	adds	r3, r7, #3
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	f001 fb54 	bl	8002724 <HAL_I2C_Mem_Write>
	}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b38      	ldr	r3, [pc, #224]	; (8001180 <MX_GPIO_Init+0xfc>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a37      	ldr	r2, [pc, #220]	; (8001180 <MX_GPIO_Init+0xfc>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b35      	ldr	r3, [pc, #212]	; (8001180 <MX_GPIO_Init+0xfc>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b31      	ldr	r3, [pc, #196]	; (8001180 <MX_GPIO_Init+0xfc>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a30      	ldr	r2, [pc, #192]	; (8001180 <MX_GPIO_Init+0xfc>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <MX_GPIO_Init+0xfc>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <MX_GPIO_Init+0xfc>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a29      	ldr	r2, [pc, #164]	; (8001180 <MX_GPIO_Init+0xfc>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b27      	ldr	r3, [pc, #156]	; (8001180 <MX_GPIO_Init+0xfc>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <MX_GPIO_Init+0xfc>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a22      	ldr	r2, [pc, #136]	; (8001180 <MX_GPIO_Init+0xfc>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <MX_GPIO_Init+0xfc>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2120      	movs	r1, #32
 800110e:	481d      	ldr	r0, [pc, #116]	; (8001184 <MX_GPIO_Init+0x100>)
 8001110:	f001 f978 	bl	8002404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800111a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	4817      	ldr	r0, [pc, #92]	; (8001188 <MX_GPIO_Init+0x104>)
 800112c:	f000 ffe6 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001130:	2320      	movs	r3, #32
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	480f      	ldr	r0, [pc, #60]	; (8001184 <MX_GPIO_Init+0x100>)
 8001148:	f000 ffd8 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800114c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001152:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001158:	2301      	movs	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	4809      	ldr	r0, [pc, #36]	; (8001188 <MX_GPIO_Init+0x104>)
 8001164:	f000 ffca 	bl	80020fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	2028      	movs	r0, #40	; 0x28
 800116e:	f000 ff8e 	bl	800208e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001172:	2028      	movs	r0, #40	; 0x28
 8001174:	f000 ffa7 	bl	80020c6 <HAL_NVIC_EnableIRQ>

}
 8001178:	bf00      	nop
 800117a:	3728      	adds	r7, #40	; 0x28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40020000 	.word	0x40020000
 8001188:	40020800 	.word	0x40020800

0800118c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_I2C1_Init+0x50>)
 8001192:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <MX_I2C1_Init+0x54>)
 8001194:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_I2C1_Init+0x50>)
 8001198:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_I2C1_Init+0x58>)
 800119a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_I2C1_Init+0x50>)
 80011aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_I2C1_Init+0x50>)
 80011ca:	f001 f967 	bl	800249c <HAL_I2C_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d4:	f000 f8ce 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000008c 	.word	0x2000008c
 80011e0:	40005400 	.word	0x40005400
 80011e4:	000186a0 	.word	0x000186a0

080011e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a19      	ldr	r2, [pc, #100]	; (800126c <HAL_I2C_MspInit+0x84>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d12c      	bne.n	8001264 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_I2C_MspInit+0x88>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <HAL_I2C_MspInit+0x88>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_I2C_MspInit+0x88>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001226:	f44f 7340 	mov.w	r3, #768	; 0x300
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122c:	2312      	movs	r3, #18
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001238:	2304      	movs	r3, #4
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	480c      	ldr	r0, [pc, #48]	; (8001274 <HAL_I2C_MspInit+0x8c>)
 8001244:	f000 ff5a 	bl	80020fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_I2C_MspInit+0x88>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_I2C_MspInit+0x88>)
 8001252:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001256:	6413      	str	r3, [r2, #64]	; 0x40
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_I2C_MspInit+0x88>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	; 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40005400 	.word	0x40005400
 8001270:	40023800 	.word	0x40023800
 8001274:	40020400 	.word	0x40020400

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127c:	f000 fd96 	bl	8001dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001280:	f000 f80e 	bl	80012a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001284:	f7ff fefe 	bl	8001084 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001288:	f000 f9b4 	bl	80015f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800128c:	f7ff ff7e 	bl	800118c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001290:	f000 f93e 	bl	8001510 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  init();
 8001294:	f000 faa8 	bl	80017e8 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001298:	f000 fae8 	bl	800186c <loop>
 800129c:	e7fc      	b.n	8001298 <main+0x20>
	...

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b094      	sub	sp, #80	; 0x50
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	2230      	movs	r2, #48	; 0x30
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 ff66 	bl	8005180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <SystemClock_Config+0xcc>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a27      	ldr	r2, [pc, #156]	; (800136c <SystemClock_Config+0xcc>)
 80012ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <SystemClock_Config+0xcc>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <SystemClock_Config+0xd0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a21      	ldr	r2, [pc, #132]	; (8001370 <SystemClock_Config+0xd0>)
 80012ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <SystemClock_Config+0xd0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001300:	2301      	movs	r3, #1
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001304:	2310      	movs	r3, #16
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001308:	2302      	movs	r3, #2
 800130a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800130c:	2300      	movs	r3, #0
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001310:	2310      	movs	r3, #16
 8001312:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001314:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001318:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800131a:	2304      	movs	r3, #4
 800131c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800131e:	2304      	movs	r3, #4
 8001320:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	4618      	mov	r0, r3
 8001328:	f002 f878 	bl	800341c <HAL_RCC_OscConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001332:	f000 f81f 	bl	8001374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001336:	230f      	movs	r3, #15
 8001338:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133a:	2302      	movs	r3, #2
 800133c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001346:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2102      	movs	r1, #2
 8001352:	4618      	mov	r0, r3
 8001354:	f002 fada 	bl	800390c <HAL_RCC_ClockConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800135e:	f000 f809 	bl	8001374 <Error_Handler>
  }
}
 8001362:	bf00      	nop
 8001364:	3750      	adds	r7, #80	; 0x50
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40007000 	.word	0x40007000

08001374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001378:	b672      	cpsid	i
}
 800137a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800137c:	e7fe      	b.n	800137c <Error_Handler+0x8>
	...

08001380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <HAL_MspInit+0x4c>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_MspInit+0x4c>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013be:	2007      	movs	r0, #7
 80013c0:	f000 fe5a 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <NMI_Handler+0x4>

080013d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <MemManage_Handler+0x4>

080013e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <BusFault_Handler+0x4>

080013e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <UsageFault_Handler+0x4>

080013ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141c:	f000 fd18 	bl	8001e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001428:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800142c:	f001 f81e 	bl	800246c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001430:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001434:	f001 f81a 	bl	800246c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
	return 1;
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_kill>:

int _kill(int pid, int sig)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001456:	f003 fe31 	bl	80050bc <__errno>
 800145a:	4603      	mov	r3, r0
 800145c:	2216      	movs	r2, #22
 800145e:	601a      	str	r2, [r3, #0]
	return -1;
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_exit>:

void _exit (int status)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ffe7 	bl	800144c <_kill>
	while (1) {}		/* Make sure we hang here */
 800147e:	e7fe      	b.n	800147e <_exit+0x12>

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	; (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d207      	bcs.n	80014c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b0:	f003 fe04 	bl	80050bc <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	220c      	movs	r2, #12
 80014b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	e009      	b.n	80014d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <_sbrk+0x64>)
 80014d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20020000 	.word	0x20020000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	200000e0 	.word	0x200000e0
 80014e8:	200001d8 	.word	0x200001d8

080014ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <SystemInit+0x20>)
 80014f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <SystemInit+0x20>)
 80014f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	463b      	mov	r3, r7
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800152c:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <MX_TIM1_Init+0x98>)
 800152e:	4a1f      	ldr	r2, [pc, #124]	; (80015ac <MX_TIM1_Init+0x9c>)
 8001530:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <MX_TIM1_Init+0x98>)
 8001534:	2253      	movs	r2, #83	; 0x53
 8001536:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <MX_TIM1_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_TIM1_Init+0x98>)
 8001540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001544:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <MX_TIM1_Init+0x98>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_TIM1_Init+0x98>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_TIM1_Init+0x98>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001558:	4813      	ldr	r0, [pc, #76]	; (80015a8 <MX_TIM1_Init+0x98>)
 800155a:	f002 fbf7 	bl	8003d4c <HAL_TIM_Base_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001564:	f7ff ff06 	bl	8001374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	4619      	mov	r1, r3
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <MX_TIM1_Init+0x98>)
 8001576:	f002 fc93 	bl	8003ea0 <HAL_TIM_ConfigClockSource>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001580:	f7ff fef8 	bl	8001374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_TIM1_Init+0x98>)
 8001592:	f002 fe67 	bl	8004264 <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800159c:	f7ff feea 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200000e4 	.word	0x200000e4
 80015ac:	40010000 	.word	0x40010000

080015b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10d      	bne.n	80015de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_TIM_Base_MspInit+0x40>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_TIM_Base_MspInit+0x40>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_TIM_Base_MspInit+0x40>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40010000 	.word	0x40010000
 80015f0:	40023800 	.word	0x40023800

080015f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_USART2_UART_Init+0x50>)
 80015fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 800161a:	220c      	movs	r2, #12
 800161c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_USART2_UART_Init+0x4c>)
 800162c:	f002 fe88 	bl	8004340 <HAL_UART_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001636:	f7ff fe9d 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000012c 	.word	0x2000012c
 8001644:	40004400 	.word	0x40004400

08001648 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_UART_MspInit+0x84>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d12b      	bne.n	80016c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_UART_MspInit+0x88>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <HAL_UART_MspInit+0x88>)
 8001674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_UART_MspInit+0x88>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_UART_MspInit+0x88>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <HAL_UART_MspInit+0x88>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_UART_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016a2:	230c      	movs	r3, #12
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b2:	2307      	movs	r3, #7
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <HAL_UART_MspInit+0x8c>)
 80016be:	f000 fd1d 	bl	80020fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	; 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40004400 	.word	0x40004400
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000

080016d8 <_ZN8ICM20948Ut_C1Ev>:
		SENS_4G,
		SENS_8G,
		SENS_16G,
	};

	const struct{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2206      	movs	r2, #6
 80016ea:	705a      	strb	r2, [r3, #1]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2207      	movs	r2, #7
 80016f0:	709a      	strb	r2, [r3, #2]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	220f      	movs	r2, #15
 80016f6:	70da      	strb	r2, [r3, #3]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	227f      	movs	r2, #127	; 0x7f
 80016fc:	711a      	strb	r2, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2214      	movs	r2, #20
 8001702:	715a      	strb	r2, [r3, #5]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	719a      	strb	r2, [r3, #6]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2211      	movs	r2, #17
 800170e:	71da      	strb	r2, [r3, #7]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE>:

	enum class Address:uint8_t{
		LOW=0x68,
		HIGH=0x69,
	};
	ICM20948(I2C_HandleTypeDef *hi2c,Address address)
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	4613      	mov	r3, r2
 800172c:	71fb      	strb	r3, [r7, #7]
			:hi2c(hi2c),address(address){};
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ffd1 	bl	80016d8 <_ZN8ICM20948Ut_C1Ev>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	79fa      	ldrb	r2, [r7, #7]
 8001740:	731a      	strb	r2, [r3, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4a09      	ldr	r2, [pc, #36]	; (800176c <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE+0x4c>)
 8001746:	f103 0410 	add.w	r4, r3, #16
 800174a:	4613      	mov	r3, r2
 800174c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800174e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4a06      	ldr	r2, [pc, #24]	; (8001770 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE+0x50>)
 8001756:	f103 0420 	add.w	r4, r3, #32
 800175a:	4613      	mov	r3, r2
 800175c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800175e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bd90      	pop	{r4, r7, pc}
 800176c:	0800543c 	.word	0x0800543c
 8001770:	0800544c 	.word	0x0800544c

08001774 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	0fdb      	lsrs	r3, r3, #31
 8001782:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <_ZNSt7__cxx119to_stringEi+0x1c>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	425b      	negs	r3, r3
 800178e:	e000      	b.n	8001792 <_ZNSt7__cxx119to_stringEi+0x1e>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 8001794:	210a      	movs	r1, #10
 8001796:	6938      	ldr	r0, [r7, #16]
 8001798:	f000 f9ec 	bl	8001b74 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 800179c:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 800179e:	7dfa      	ldrb	r2, [r7, #23]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	18d4      	adds	r4, r2, r3
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 f98b 	bl	8004ac4 <_ZNSaIcEC1Ev>
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	222d      	movs	r2, #45	; 0x2d
 80017b4:	4621      	mov	r1, r4
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f003 fa60 	bl	8004c7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 f980 	bl	8004ac6 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 80017c6:	7dfb      	ldrb	r3, [r7, #23]
 80017c8:	4619      	mov	r1, r3
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f003 faa9 	bl	8004d22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80017d0:	4603      	mov	r3, r0
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	68f9      	ldr	r1, [r7, #12]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fa0c 	bl	8001bf4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 80017dc:	bf00      	nop
  }
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	371c      	adds	r7, #28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd90      	pop	{r4, r7, pc}
	...

080017e8 <init>:
uint16_t counter=0;
uint16_t stepTime = 0;

/* Variable End */

void init(void){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim1);
 80017ee:	481d      	ldr	r0, [pc, #116]	; (8001864 <init+0x7c>)
 80017f0:	f002 fafc 	bl	8003dec <HAL_TIM_Base_Start>
	if(icm20948.whoami() == 0xea){
 80017f4:	481c      	ldr	r0, [pc, #112]	; (8001868 <init+0x80>)
 80017f6:	f7ff fa97 	bl	8000d28 <_ZN8ICM209486whoamiEv>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2bea      	cmp	r3, #234	; 0xea
//		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
	}
	int result = icm20948.whoami();
 80017fe:	481a      	ldr	r0, [pc, #104]	; (8001868 <init+0x80>)
 8001800:	f7ff fa92 	bl	8000d28 <_ZN8ICM209486whoamiEv>
 8001804:	4603      	mov	r3, r0
 8001806:	607b      	str	r3, [r7, #4]
//		    result=whoami();
		    if(result==0xea){
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2bea      	cmp	r3, #234	; 0xea
 800180c:	d125      	bne.n	800185a <init+0x72>
//		        printf("ICM20948 confirm\n");
		    	icm20948.reset();
 800180e:	4816      	ldr	r0, [pc, #88]	; (8001868 <init+0x80>)
 8001810:	f7ff fae6 	bl	8000de0 <_ZN8ICM209485resetEv>
		    	icm20948.pwrmgmt2(ICM20948_DISABLE_SENSORS);
 8001814:	213f      	movs	r1, #63	; 0x3f
 8001816:	4814      	ldr	r0, [pc, #80]	; (8001868 <init+0x80>)
 8001818:	f7ff fac3 	bl	8000da2 <_ZN8ICM209488pwrmgmt2Eh>
		    	icm20948.accelConfig(ICM20948::AccelSensitivity::SENS_2G,false,0);
 800181c:	2300      	movs	r3, #0
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	4811      	ldr	r0, [pc, #68]	; (8001868 <init+0x80>)
 8001824:	f7ff fb34 	bl	8000e90 <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh>
		    	icm20948.pwrmgmt2(ICM20948_ENABLE_SENSORS);
 8001828:	2100      	movs	r1, #0
 800182a:	480f      	ldr	r0, [pc, #60]	; (8001868 <init+0x80>)
 800182c:	f7ff fab9 	bl	8000da2 <_ZN8ICM209488pwrmgmt2Eh>
		    	icm20948.intPinConfig(0b01110000);
 8001830:	2170      	movs	r1, #112	; 0x70
 8001832:	480d      	ldr	r0, [pc, #52]	; (8001868 <init+0x80>)
 8001834:	f7ff fbea 	bl	800100c <_ZN8ICM2094812intPinConfigEh>
		    	icm20948.intenable();
 8001838:	2101      	movs	r1, #1
 800183a:	480b      	ldr	r0, [pc, #44]	; (8001868 <init+0x80>)
 800183c:	f7ff fc04 	bl	8001048 <_ZN8ICM209489intenableEh>

		        HAL_Delay(100);
 8001840:	2064      	movs	r0, #100	; 0x64
 8001842:	f000 fb25 	bl	8001e90 <HAL_Delay>
//		        printf("initialized\n");

		        icm20948.changeUserBank(2);
 8001846:	2102      	movs	r1, #2
 8001848:	4807      	ldr	r0, [pc, #28]	; (8001868 <init+0x80>)
 800184a:	f7ff faf6 	bl	8000e3a <_ZN8ICM2094814changeUserBankEh>
		        uint8_t buffer2=0;
 800184e:	2300      	movs	r3, #0
 8001850:	70fb      	strb	r3, [r7, #3]
		        //HAL_I2C_Mem_Read(&hi2c1, 0x68<<1,ICM20948::REGISTER.ACCEL_CONFIG,1,&buffer2,1,1000);
		        icm20948.changeUserBank(0);
 8001852:	2100      	movs	r1, #0
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <init+0x80>)
 8001856:	f7ff faf0 	bl	8000e3a <_ZN8ICM2094814changeUserBankEh>
		    }


}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200000e4 	.word	0x200000e4
 8001868:	20000170 	.word	0x20000170

0800186c <loop>:

void loop(void){
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
//	           delay(500);

//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11));
//	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);

}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	0000      	movs	r0, r0
 800187c:	0000      	movs	r0, r0
	...

08001880 <HAL_GPIO_EXTI_Callback>:

float gyroz;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001880:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001884:	b0ac      	sub	sp, #176	; 0xb0
 8001886:	af04      	add	r7, sp, #16
 8001888:	4603      	mov	r3, r0
 800188a:	80fb      	strh	r3, [r7, #6]
//	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
	if (GPIO_Pin == GPIO_PIN_11){
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001892:	f040 8147 	bne.w	8001b24 <HAL_GPIO_EXTI_Callback+0x2a4>
		stepTime = 0;
 8001896:	4ba8      	ldr	r3, [pc, #672]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001898:	2200      	movs	r2, #0
 800189a:	801a      	strh	r2, [r3, #0]
		{uint8_t flag=__HAL_TIM_GET_FLAG(&htim1,TIM_FLAG_UPDATE);
 800189c:	4ba7      	ldr	r3, [pc, #668]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x2bc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	bf0c      	ite	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	2300      	movne	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		  counter=__HAL_TIM_GET_COUNTER(&htim1);
 80018b4:	4ba1      	ldr	r3, [pc, #644]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x2bc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4ba0      	ldr	r3, [pc, #640]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80018be:	801a      	strh	r2, [r3, #0]
		  if(flag==0){
 80018c0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d108      	bne.n	80018da <HAL_GPIO_EXTI_Callback+0x5a>
			  stepTime=counter-preCounter;
 80018c8:	4b9d      	ldr	r3, [pc, #628]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80018ca:	881a      	ldrh	r2, [r3, #0]
 80018cc:	4b9d      	ldr	r3, [pc, #628]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	4b98      	ldr	r3, [pc, #608]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80018d6:	801a      	strh	r2, [r3, #0]
 80018d8:	e012      	b.n	8001900 <HAL_GPIO_EXTI_Callback+0x80>
		  }else{
			  stepTime=counter+__HAL_TIM_GET_AUTORELOAD(&htim1)-preCounter;
 80018da:	4b98      	ldr	r3, [pc, #608]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x2bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b97      	ldr	r3, [pc, #604]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b96      	ldr	r3, [pc, #600]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b91      	ldr	r3, [pc, #580]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80018f4:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_CLEAR_FLAG(&htim1,TIM_FLAG_UPDATE);
 80018f6:	4b91      	ldr	r3, [pc, #580]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x2bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f06f 0201 	mvn.w	r2, #1
 80018fe:	611a      	str	r2, [r3, #16]
		  }
		  preCounter=counter;
 8001900:	4b8f      	ldr	r3, [pc, #572]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001902:	881a      	ldrh	r2, [r3, #0]
 8001904:	4b8f      	ldr	r3, [pc, #572]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8001906:	801a      	strh	r2, [r3, #0]
		  timer+=stepTime;
 8001908:	4b8b      	ldr	r3, [pc, #556]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	2200      	movs	r2, #0
 8001910:	461c      	mov	r4, r3
 8001912:	4615      	mov	r5, r2
 8001914:	4b8c      	ldr	r3, [pc, #560]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	eb14 0802 	adds.w	r8, r4, r2
 800191e:	eb45 0903 	adc.w	r9, r5, r3
 8001922:	4b89      	ldr	r3, [pc, #548]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001924:	e9c3 8900 	strd	r8, r9, [r3]
//			str += "."+std::to_string(num)+"\r\n";
//			HAL_UART_Transmit(&huart2, (uint8_t *)str.c_str(), str.size(), 100);
		}

//		float gyroz = icm20948.getgyro(0);
		gyroz = icm20948.getGyro(0);
 8001928:	2100      	movs	r1, #0
 800192a:	4888      	ldr	r0, [pc, #544]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x2cc>)
 800192c:	f7ff fb02 	bl	8000f34 <_ZN8ICM209487getGyroEh>
 8001930:	eef0 7a40 	vmov.f32	s15, s0
 8001934:	4b86      	ldr	r3, [pc, #536]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001936:	edc3 7a00 	vstr	s15, [r3]

		anglez+=gyroz*stepTime/1000000.0;
 800193a:	4b86      	ldr	r3, [pc, #536]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fdb6 	bl	80004b0 <__aeabi_f2d>
 8001944:	4604      	mov	r4, r0
 8001946:	460d      	mov	r5, r1
 8001948:	4b7b      	ldr	r3, [pc, #492]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001954:	4b7e      	ldr	r3, [pc, #504]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195e:	ee17 0a90 	vmov	r0, s15
 8001962:	f7fe fda5 	bl	80004b0 <__aeabi_f2d>
 8001966:	a372      	add	r3, pc, #456	; (adr r3, 8001b30 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	f7fe ff22 	bl	80007b4 <__aeabi_ddiv>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4620      	mov	r0, r4
 8001976:	4629      	mov	r1, r5
 8001978:	f7fe fc3c 	bl	80001f4 <__adddf3>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	f7fe fffe 	bl	8000984 <__aeabi_d2f>
 8001988:	4603      	mov	r3, r0
 800198a:	4a72      	ldr	r2, [pc, #456]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800198c:	6013      	str	r3, [r2, #0]

//		int16_t num = ((int16_t)(anglez*10))/10;
		int16_t num = stepTime;
 800198e:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
		std::string str;
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4618      	mov	r0, r3
 800199c:	f003 f967 	bl	8004c6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		str = std::to_string(num);
 80019a0:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fee2 	bl	8001774 <_ZNSt7__cxx119to_stringEi>
 80019b0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 f987 	bl	8004cce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 f97c 	bl	8004cc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		num = (uint16_t)(anglez*1000)%1000;
 80019ca:	4b62      	ldr	r3, [pc, #392]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001b58 <HAL_GPIO_EXTI_Callback+0x2d8>
 80019d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019dc:	ee17 3a90 	vmov	r3, s15
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4a5e      	ldr	r2, [pc, #376]	; (8001b5c <HAL_GPIO_EXTI_Callback+0x2dc>)
 80019e4:	fba2 1203 	umull	r1, r2, r2, r3
 80019e8:	0992      	lsrs	r2, r2, #6
 80019ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019ee:	fb01 f202 	mul.w	r2, r1, r2
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
		str += "."+std::to_string(num)+"\r\n";
 80019fa:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 80019fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff feb5 	bl	8001774 <_ZNSt7__cxx119to_stringEi>
 8001a0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a0e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001a12:	4953      	ldr	r1, [pc, #332]	; (8001b60 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f943 	bl	8001ca0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001a1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a1e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001a22:	4a50      	ldr	r2, [pc, #320]	; (8001b64 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f953 	bl	8001cd0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001a2a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 fa45 	bl	8004ec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8001a3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 f93f 	bl	8004cc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 f93a 	bl	8004cc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 f935 	bl	8004cc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		HAL_UART_Transmit(&huart2, (uint8_t *)str.c_str(), str.size(), 100);
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 fa4f 	bl	8004f00 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001a62:	4604      	mov	r4, r0
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 f958 	bl	8004d1e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	2364      	movs	r3, #100	; 0x64
 8001a74:	4621      	mov	r1, r4
 8001a76:	483c      	ldr	r0, [pc, #240]	; (8001b68 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001a78:	f002 fcaf 	bl	80043da <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001a7c:	2120      	movs	r1, #32
 8001a7e:	483b      	ldr	r0, [pc, #236]	; (8001b6c <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001a80:	f000 fcd9 	bl	8002436 <HAL_GPIO_TogglePin>
		uint8_t n=0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	72fb      	strb	r3, [r7, #11]
		n=0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	72fb      	strb	r3, [r7, #11]
//		HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, 0x1A, 1, &n, 1, 100);
		HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, 0x1a, 1, &n, 1, 100);
 8001a8c:	2364      	movs	r3, #100	; 0x64
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	2301      	movs	r3, #1
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	f107 030b 	add.w	r3, r7, #11
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	221a      	movs	r2, #26
 8001a9e:	21d0      	movs	r1, #208	; 0xd0
 8001aa0:	4833      	ldr	r0, [pc, #204]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001aa2:	f000 ff39 	bl	8002918 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, 0x11, 1, &n, 1, 100);
 8001aa6:	2364      	movs	r3, #100	; 0x64
 8001aa8:	9302      	str	r3, [sp, #8]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	f107 030b 	add.w	r3, r7, #11
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2211      	movs	r2, #17
 8001ab8:	21d0      	movs	r1, #208	; 0xd0
 8001aba:	482d      	ldr	r0, [pc, #180]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001abc:	f000 ff2c 	bl	8002918 <HAL_I2C_Mem_Read>
				str = std::to_string(n);
 8001ac0:	7afb      	ldrb	r3, [r7, #11]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fe52 	bl	8001774 <_ZNSt7__cxx119to_stringEi>
 8001ad0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 f8f7 	bl	8004cce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001ae0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 f8ec 	bl	8004cc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				str += "\r\n";
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	491d      	ldr	r1, [pc, #116]	; (8001b64 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 fa01 	bl	8004ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
				HAL_UART_Transmit(&huart2, (uint8_t *)str.c_str(), str.size(), 100);
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fa00 	bl	8004f00 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001b00:	4604      	mov	r4, r0
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 f909 	bl	8004d1e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	2364      	movs	r3, #100	; 0x64
 8001b12:	4621      	mov	r1, r4
 8001b14:	4814      	ldr	r0, [pc, #80]	; (8001b68 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001b16:	f002 fc60 	bl	80043da <HAL_UART_Transmit>
		std::string str;
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 f8cf 	bl	8004cc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8001b24:	bf00      	nop
 8001b26:	37a0      	adds	r7, #160	; 0xa0
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b2e:	bf00      	nop
 8001b30:	00000000 	.word	0x00000000
 8001b34:	412e8480 	.word	0x412e8480
 8001b38:	200001b4 	.word	0x200001b4
 8001b3c:	200000e4 	.word	0x200000e4
 8001b40:	200001b2 	.word	0x200001b2
 8001b44:	200001b0 	.word	0x200001b0
 8001b48:	200001a8 	.word	0x200001a8
 8001b4c:	20000170 	.word	0x20000170
 8001b50:	200001b8 	.word	0x200001b8
 8001b54:	200001a0 	.word	0x200001a0
 8001b58:	447a0000 	.word	0x447a0000
 8001b5c:	10624dd3 	.word	0x10624dd3
 8001b60:	0800545c 	.word	0x0800545c
 8001b64:	08005460 	.word	0x08005460
 8001b68:	2000012c 	.word	0x2000012c
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	2000008c 	.word	0x2000008c

08001b74 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	fb03 f303 	mul.w	r3, r3, r3
 8001b88:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	fb02 f303 	mul.w	r3, r2, r3
 8001b9c:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d201      	bcs.n	8001baa <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	e01d      	b.n	8001be6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d202      	bcs.n	8001bb8 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	e016      	b.n	8001be6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d202      	bcs.n	8001bc6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	e00f      	b.n	8001be6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d202      	bcs.n	8001bd4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3303      	adds	r3, #3
 8001bd2:	e008      	b.n	8001be6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bdc:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3304      	adds	r3, #4
 8001be2:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8001be4:	e7db      	b.n	8001b9e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8001be6:	4618      	mov	r0, r3
 8001be8:	371c      	adds	r7, #28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	; 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b63      	cmp	r3, #99	; 0x63
 8001c0a:	d925      	bls.n	8001c58 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8001c10:	fba3 1302 	umull	r1, r3, r3, r2
 8001c14:	095b      	lsrs	r3, r3, #5
 8001c16:	2164      	movs	r1, #100	; 0x64
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	68f9      	ldr	r1, [r7, #12]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	440b      	add	r3, r1
 8001c38:	4918      	ldr	r1, [pc, #96]	; (8001c9c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001c3a:	5c8a      	ldrb	r2, [r1, r2]
 8001c3c:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4413      	add	r3, r2
 8001c46:	4915      	ldr	r1, [pc, #84]	; (8001c9c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	440a      	add	r2, r1
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	3b02      	subs	r3, #2
 8001c54:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8001c56:	e7d6      	b.n	8001c06 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b09      	cmp	r3, #9
 8001c5c:	d910      	bls.n	8001c80 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	490b      	ldr	r1, [pc, #44]	; (8001c9c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001c6e:	5c8a      	ldrb	r2, [r1, r2]
 8001c70:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	4413      	add	r3, r2
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8001c7e:	e005      	b.n	8001c8c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	3330      	adds	r3, #48	; 0x30
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	701a      	strb	r2, [r3, #0]
    }
 8001c8c:	bf00      	nop
 8001c8e:	3724      	adds	r7, #36	; 0x24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	51eb851f 	.word	0x51eb851f
 8001c9c:	0800547c 	.word	0x0800547c

08001ca0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	2100      	movs	r1, #0
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f003 f8cf 	bl	8004e54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f820 	bl	8001cfe <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f002 ffe3 	bl	8004c8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	68b8      	ldr	r0, [r7, #8]
 8001ce0:	f003 f8f4 	bl	8004ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f809 	bl	8001cfe <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4619      	mov	r1, r3
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f002 ffcc 	bl	8004c8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_Z41__static_initialization_and_destruction_0ii>:
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d109      	bne.n	8001d38 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d104      	bne.n	8001d38 <_Z41__static_initialization_and_destruction_0ii+0x24>
ICM20948 icm20948(&hi2c1,ICM20948::Address::LOW);
 8001d2e:	2268      	movs	r2, #104	; 0x68
 8001d30:	4903      	ldr	r1, [pc, #12]	; (8001d40 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001d32:	4804      	ldr	r0, [pc, #16]	; (8001d44 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001d34:	f7ff fcf4 	bl	8001720 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE>
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000008c 	.word	0x2000008c
 8001d44:	20000170 	.word	0x20000170

08001d48 <_GLOBAL__sub_I_icm20948>:
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d50:	2001      	movs	r0, #1
 8001d52:	f7ff ffdf 	bl	8001d14 <_Z41__static_initialization_and_destruction_0ii>
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d5c:	480d      	ldr	r0, [pc, #52]	; (8001d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d5e:	490e      	ldr	r1, [pc, #56]	; (8001d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d74:	4c0b      	ldr	r4, [pc, #44]	; (8001da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d82:	f7ff fbb3 	bl	80014ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d86:	f003 f99f 	bl	80050c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d8a:	f7ff fa75 	bl	8001278 <main>
  bx  lr    
 8001d8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d9c:	08005660 	.word	0x08005660
  ldr r2, =_sbss
 8001da0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001da4:	200001d4 	.word	0x200001d4

08001da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC_IRQHandler>
	...

08001dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <HAL_Init+0x40>)
 8001db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_Init+0x40>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <HAL_Init+0x40>)
 8001dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_Init+0x40>)
 8001dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 f94f 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f000 f808 	bl	8001df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de0:	f7ff face 	bl	8001380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023c00 	.word	0x40023c00

08001df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x54>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x58>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f967 	bl	80020e2 <HAL_SYSTICK_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00e      	b.n	8001e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d80a      	bhi.n	8001e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e24:	2200      	movs	r2, #0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f000 f92f 	bl	800208e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <HAL_InitTick+0x5c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_IncTick+0x20>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_IncTick+0x24>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_IncTick+0x24>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000008 	.word	0x20000008
 8001e74:	200001bc 	.word	0x200001bc

08001e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_GetTick+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	200001bc 	.word	0x200001bc

08001e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff ffee 	bl	8001e78 <HAL_GetTick>
 8001e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea8:	d005      	beq.n	8001eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_Delay+0x44>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eb6:	bf00      	nop
 8001eb8:	f7ff ffde 	bl	8001e78 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d8f7      	bhi.n	8001eb8 <HAL_Delay+0x28>
  {
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000008 	.word	0x20000008

08001ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0a:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	60d3      	str	r3, [r2, #12]
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <__NVIC_GetPriorityGrouping+0x18>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	f003 0307 	and.w	r3, r3, #7
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db0b      	blt.n	8001f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	f003 021f 	and.w	r2, r3, #31
 8001f54:	4907      	ldr	r1, [pc, #28]	; (8001f74 <__NVIC_EnableIRQ+0x38>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	; 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2304      	movcs	r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d902      	bls.n	8001ffc <NVIC_EncodePriority+0x30>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b03      	subs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <NVIC_EncodePriority+0x32>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	f04f 32ff 	mov.w	r2, #4294967295
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002014:	f04f 31ff 	mov.w	r1, #4294967295
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43d9      	mvns	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	4313      	orrs	r3, r2
         );
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002044:	d301      	bcc.n	800204a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002046:	2301      	movs	r3, #1
 8002048:	e00f      	b.n	800206a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <SysTick_Config+0x40>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002052:	210f      	movs	r1, #15
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f7ff ff8e 	bl	8001f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <SysTick_Config+0x40>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <SysTick_Config+0x40>)
 8002064:	2207      	movs	r2, #7
 8002066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	e000e010 	.word	0xe000e010

08002078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ff29 	bl	8001ed8 <__NVIC_SetPriorityGrouping>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a0:	f7ff ff3e 	bl	8001f20 <__NVIC_GetPriorityGrouping>
 80020a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f7ff ff8e 	bl	8001fcc <NVIC_EncodePriority>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff5d 	bl	8001f78 <__NVIC_SetPriority>
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff31 	bl	8001f3c <__NVIC_EnableIRQ>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ffa2 	bl	8002034 <SysTick_Config>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	e159      	b.n	80023cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	429a      	cmp	r2, r3
 8002132:	f040 8148 	bne.w	80023c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d005      	beq.n	800214e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214a:	2b02      	cmp	r3, #2
 800214c:	d130      	bne.n	80021b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002184:	2201      	movs	r2, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 0201 	and.w	r2, r3, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d017      	beq.n	80021ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d123      	bne.n	8002240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	08da      	lsrs	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3208      	adds	r2, #8
 8002200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	220f      	movs	r2, #15
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3208      	adds	r2, #8
 800223a:	69b9      	ldr	r1, [r7, #24]
 800223c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0203 	and.w	r2, r3, #3
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80a2 	beq.w	80023c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b57      	ldr	r3, [pc, #348]	; (80023e4 <HAL_GPIO_Init+0x2e8>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a56      	ldr	r2, [pc, #344]	; (80023e4 <HAL_GPIO_Init+0x2e8>)
 800228c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b54      	ldr	r3, [pc, #336]	; (80023e4 <HAL_GPIO_Init+0x2e8>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800229e:	4a52      	ldr	r2, [pc, #328]	; (80023e8 <HAL_GPIO_Init+0x2ec>)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	3302      	adds	r3, #2
 80022a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	220f      	movs	r2, #15
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a49      	ldr	r2, [pc, #292]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d019      	beq.n	80022fe <HAL_GPIO_Init+0x202>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a48      	ldr	r2, [pc, #288]	; (80023f0 <HAL_GPIO_Init+0x2f4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_GPIO_Init+0x1fe>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a47      	ldr	r2, [pc, #284]	; (80023f4 <HAL_GPIO_Init+0x2f8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00d      	beq.n	80022f6 <HAL_GPIO_Init+0x1fa>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a46      	ldr	r2, [pc, #280]	; (80023f8 <HAL_GPIO_Init+0x2fc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <HAL_GPIO_Init+0x1f6>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a45      	ldr	r2, [pc, #276]	; (80023fc <HAL_GPIO_Init+0x300>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_GPIO_Init+0x1f2>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e008      	b.n	8002300 <HAL_GPIO_Init+0x204>
 80022ee:	2307      	movs	r3, #7
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x204>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e004      	b.n	8002300 <HAL_GPIO_Init+0x204>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e002      	b.n	8002300 <HAL_GPIO_Init+0x204>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_GPIO_Init+0x204>
 80022fe:	2300      	movs	r3, #0
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	f002 0203 	and.w	r2, r2, #3
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	4093      	lsls	r3, r2
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002310:	4935      	ldr	r1, [pc, #212]	; (80023e8 <HAL_GPIO_Init+0x2ec>)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	3302      	adds	r3, #2
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231e:	4b38      	ldr	r3, [pc, #224]	; (8002400 <HAL_GPIO_Init+0x304>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002342:	4a2f      	ldr	r2, [pc, #188]	; (8002400 <HAL_GPIO_Init+0x304>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002348:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <HAL_GPIO_Init+0x304>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800236c:	4a24      	ldr	r2, [pc, #144]	; (8002400 <HAL_GPIO_Init+0x304>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002372:	4b23      	ldr	r3, [pc, #140]	; (8002400 <HAL_GPIO_Init+0x304>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002396:	4a1a      	ldr	r2, [pc, #104]	; (8002400 <HAL_GPIO_Init+0x304>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800239c:	4b18      	ldr	r3, [pc, #96]	; (8002400 <HAL_GPIO_Init+0x304>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c0:	4a0f      	ldr	r2, [pc, #60]	; (8002400 <HAL_GPIO_Init+0x304>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3301      	adds	r3, #1
 80023ca:	61fb      	str	r3, [r7, #28]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	f67f aea2 	bls.w	8002118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40013800 	.word	0x40013800
 80023ec:	40020000 	.word	0x40020000
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40020800 	.word	0x40020800
 80023f8:	40020c00 	.word	0x40020c00
 80023fc:	40021000 	.word	0x40021000
 8002400:	40013c00 	.word	0x40013c00

08002404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	807b      	strh	r3, [r7, #2]
 8002410:	4613      	mov	r3, r2
 8002412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002414:	787b      	ldrb	r3, [r7, #1]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002420:	e003      	b.n	800242a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	041a      	lsls	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	619a      	str	r2, [r3, #24]
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002448:	887a      	ldrh	r2, [r7, #2]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4013      	ands	r3, r2
 800244e:	041a      	lsls	r2, r3, #16
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43d9      	mvns	r1, r3
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	400b      	ands	r3, r1
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	619a      	str	r2, [r3, #24]
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff f9f8 	bl	8001880 <HAL_GPIO_EXTI_Callback>
  }
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40013c00 	.word	0x40013c00

0800249c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e12b      	b.n	8002706 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe fe90 	bl	80011e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2224      	movs	r2, #36	; 0x24
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002500:	f001 fbfc 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 8002504:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4a81      	ldr	r2, [pc, #516]	; (8002710 <HAL_I2C_Init+0x274>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d807      	bhi.n	8002520 <HAL_I2C_Init+0x84>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4a80      	ldr	r2, [pc, #512]	; (8002714 <HAL_I2C_Init+0x278>)
 8002514:	4293      	cmp	r3, r2
 8002516:	bf94      	ite	ls
 8002518:	2301      	movls	r3, #1
 800251a:	2300      	movhi	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	e006      	b.n	800252e <HAL_I2C_Init+0x92>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4a7d      	ldr	r2, [pc, #500]	; (8002718 <HAL_I2C_Init+0x27c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	bf94      	ite	ls
 8002528:	2301      	movls	r3, #1
 800252a:	2300      	movhi	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0e7      	b.n	8002706 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4a78      	ldr	r2, [pc, #480]	; (800271c <HAL_I2C_Init+0x280>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	0c9b      	lsrs	r3, r3, #18
 8002540:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	430a      	orrs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4a6a      	ldr	r2, [pc, #424]	; (8002710 <HAL_I2C_Init+0x274>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d802      	bhi.n	8002570 <HAL_I2C_Init+0xd4>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	3301      	adds	r3, #1
 800256e:	e009      	b.n	8002584 <HAL_I2C_Init+0xe8>
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002576:	fb02 f303 	mul.w	r3, r2, r3
 800257a:	4a69      	ldr	r2, [pc, #420]	; (8002720 <HAL_I2C_Init+0x284>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	099b      	lsrs	r3, r3, #6
 8002582:	3301      	adds	r3, #1
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	430b      	orrs	r3, r1
 800258a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002596:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	495c      	ldr	r1, [pc, #368]	; (8002710 <HAL_I2C_Init+0x274>)
 80025a0:	428b      	cmp	r3, r1
 80025a2:	d819      	bhi.n	80025d8 <HAL_I2C_Init+0x13c>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e59      	subs	r1, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b2:	1c59      	adds	r1, r3, #1
 80025b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025b8:	400b      	ands	r3, r1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_I2C_Init+0x138>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1e59      	subs	r1, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d2:	e051      	b.n	8002678 <HAL_I2C_Init+0x1dc>
 80025d4:	2304      	movs	r3, #4
 80025d6:	e04f      	b.n	8002678 <HAL_I2C_Init+0x1dc>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d111      	bne.n	8002604 <HAL_I2C_Init+0x168>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1e58      	subs	r0, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	440b      	add	r3, r1
 80025ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f2:	3301      	adds	r3, #1
 80025f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bf0c      	ite	eq
 80025fc:	2301      	moveq	r3, #1
 80025fe:	2300      	movne	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	e012      	b.n	800262a <HAL_I2C_Init+0x18e>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1e58      	subs	r0, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	0099      	lsls	r1, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	fbb0 f3f3 	udiv	r3, r0, r3
 800261a:	3301      	adds	r3, #1
 800261c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Init+0x196>
 800262e:	2301      	movs	r3, #1
 8002630:	e022      	b.n	8002678 <HAL_I2C_Init+0x1dc>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10e      	bne.n	8002658 <HAL_I2C_Init+0x1bc>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1e58      	subs	r0, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6859      	ldr	r1, [r3, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	440b      	add	r3, r1
 8002648:	fbb0 f3f3 	udiv	r3, r0, r3
 800264c:	3301      	adds	r3, #1
 800264e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002656:	e00f      	b.n	8002678 <HAL_I2C_Init+0x1dc>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1e58      	subs	r0, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	0099      	lsls	r1, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	fbb0 f3f3 	udiv	r3, r0, r3
 800266e:	3301      	adds	r3, #1
 8002670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	6809      	ldr	r1, [r1, #0]
 800267c:	4313      	orrs	r3, r2
 800267e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6911      	ldr	r1, [r2, #16]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68d2      	ldr	r2, [r2, #12]
 80026b2:	4311      	orrs	r1, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	430b      	orrs	r3, r1
 80026ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	000186a0 	.word	0x000186a0
 8002714:	001e847f 	.word	0x001e847f
 8002718:	003d08ff 	.word	0x003d08ff
 800271c:	431bde83 	.word	0x431bde83
 8002720:	10624dd3 	.word	0x10624dd3

08002724 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	4608      	mov	r0, r1
 800272e:	4611      	mov	r1, r2
 8002730:	461a      	mov	r2, r3
 8002732:	4603      	mov	r3, r0
 8002734:	817b      	strh	r3, [r7, #10]
 8002736:	460b      	mov	r3, r1
 8002738:	813b      	strh	r3, [r7, #8]
 800273a:	4613      	mov	r3, r2
 800273c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800273e:	f7ff fb9b 	bl	8001e78 <HAL_GetTick>
 8002742:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b20      	cmp	r3, #32
 800274e:	f040 80d9 	bne.w	8002904 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	2319      	movs	r3, #25
 8002758:	2201      	movs	r2, #1
 800275a:	496d      	ldr	r1, [pc, #436]	; (8002910 <HAL_I2C_Mem_Write+0x1ec>)
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fc7f 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
 800276a:	e0cc      	b.n	8002906 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_I2C_Mem_Write+0x56>
 8002776:	2302      	movs	r3, #2
 8002778:	e0c5      	b.n	8002906 <HAL_I2C_Mem_Write+0x1e2>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d007      	beq.n	80027a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2221      	movs	r2, #33	; 0x21
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2240      	movs	r2, #64	; 0x40
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a3a      	ldr	r2, [r7, #32]
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4a4d      	ldr	r2, [pc, #308]	; (8002914 <HAL_I2C_Mem_Write+0x1f0>)
 80027e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027e2:	88f8      	ldrh	r0, [r7, #6]
 80027e4:	893a      	ldrh	r2, [r7, #8]
 80027e6:	8979      	ldrh	r1, [r7, #10]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	4603      	mov	r3, r0
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fab6 	bl	8002d64 <I2C_RequestMemoryWrite>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d052      	beq.n	80028a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e081      	b.n	8002906 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 fd00 	bl	800320c <I2C_WaitOnTXEFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00d      	beq.n	800282e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	2b04      	cmp	r3, #4
 8002818:	d107      	bne.n	800282a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002828:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e06b      	b.n	8002906 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	781a      	ldrb	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b04      	cmp	r3, #4
 800286a:	d11b      	bne.n	80028a4 <HAL_I2C_Mem_Write+0x180>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	2b00      	cmp	r3, #0
 8002872:	d017      	beq.n	80028a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1aa      	bne.n	8002802 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fcec 	bl	800328e <I2C_WaitOnBTFFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00d      	beq.n	80028d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d107      	bne.n	80028d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e016      	b.n	8002906 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	e000      	b.n	8002906 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002904:	2302      	movs	r3, #2
  }
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	00100002 	.word	0x00100002
 8002914:	ffff0000 	.word	0xffff0000

08002918 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08c      	sub	sp, #48	; 0x30
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	461a      	mov	r2, r3
 8002926:	4603      	mov	r3, r0
 8002928:	817b      	strh	r3, [r7, #10]
 800292a:	460b      	mov	r3, r1
 800292c:	813b      	strh	r3, [r7, #8]
 800292e:	4613      	mov	r3, r2
 8002930:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002932:	f7ff faa1 	bl	8001e78 <HAL_GetTick>
 8002936:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b20      	cmp	r3, #32
 8002942:	f040 8208 	bne.w	8002d56 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2319      	movs	r3, #25
 800294c:	2201      	movs	r2, #1
 800294e:	497b      	ldr	r1, [pc, #492]	; (8002b3c <HAL_I2C_Mem_Read+0x224>)
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fb85 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800295c:	2302      	movs	r3, #2
 800295e:	e1fb      	b.n	8002d58 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_I2C_Mem_Read+0x56>
 800296a:	2302      	movs	r3, #2
 800296c:	e1f4      	b.n	8002d58 <HAL_I2C_Mem_Read+0x440>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d007      	beq.n	8002994 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2222      	movs	r2, #34	; 0x22
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2240      	movs	r2, #64	; 0x40
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a5b      	ldr	r2, [pc, #364]	; (8002b40 <HAL_I2C_Mem_Read+0x228>)
 80029d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029d6:	88f8      	ldrh	r0, [r7, #6]
 80029d8:	893a      	ldrh	r2, [r7, #8]
 80029da:	8979      	ldrh	r1, [r7, #10]
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	4603      	mov	r3, r0
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fa52 	bl	8002e90 <I2C_RequestMemoryRead>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e1b0      	b.n	8002d58 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d113      	bne.n	8002a26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	623b      	str	r3, [r7, #32]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	623b      	str	r3, [r7, #32]
 8002a12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e184      	b.n	8002d30 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d11b      	bne.n	8002a66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e164      	b.n	8002d30 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d11b      	bne.n	8002aa6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	e144      	b.n	8002d30 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002abc:	e138      	b.n	8002d30 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	f200 80f1 	bhi.w	8002caa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d123      	bne.n	8002b18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fc1b 	bl	8003310 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e139      	b.n	8002d58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b16:	e10b      	b.n	8002d30 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d14e      	bne.n	8002bbe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	2200      	movs	r2, #0
 8002b28:	4906      	ldr	r1, [pc, #24]	; (8002b44 <HAL_I2C_Mem_Read+0x22c>)
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fa98 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e10e      	b.n	8002d58 <HAL_I2C_Mem_Read+0x440>
 8002b3a:	bf00      	nop
 8002b3c:	00100002 	.word	0x00100002
 8002b40:	ffff0000 	.word	0xffff0000
 8002b44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bbc:	e0b8      	b.n	8002d30 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	4966      	ldr	r1, [pc, #408]	; (8002d60 <HAL_I2C_Mem_Read+0x448>)
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fa49 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0bf      	b.n	8002d58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c20:	2200      	movs	r2, #0
 8002c22:	494f      	ldr	r1, [pc, #316]	; (8002d60 <HAL_I2C_Mem_Read+0x448>)
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fa1b 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e091      	b.n	8002d58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ca8:	e042      	b.n	8002d30 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fb2e 	bl	8003310 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e04c      	b.n	8002d58 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d118      	bne.n	8002d30 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f47f aec2 	bne.w	8002abe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
  }
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3728      	adds	r7, #40	; 0x28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	00010004 	.word	0x00010004

08002d64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	817b      	strh	r3, [r7, #10]
 8002d76:	460b      	mov	r3, r1
 8002d78:	813b      	strh	r3, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f960 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00d      	beq.n	8002dc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db4:	d103      	bne.n	8002dbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e05f      	b.n	8002e82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dc2:	897b      	ldrh	r3, [r7, #10]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	6a3a      	ldr	r2, [r7, #32]
 8002dd6:	492d      	ldr	r1, [pc, #180]	; (8002e8c <I2C_RequestMemoryWrite+0x128>)
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f998 	bl	800310e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e04c      	b.n	8002e82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e00:	6a39      	ldr	r1, [r7, #32]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fa02 	bl	800320c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d107      	bne.n	8002e26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e02b      	b.n	8002e82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d105      	bne.n	8002e3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e30:	893b      	ldrh	r3, [r7, #8]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	611a      	str	r2, [r3, #16]
 8002e3a:	e021      	b.n	8002e80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e3c:	893b      	ldrh	r3, [r7, #8]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4c:	6a39      	ldr	r1, [r7, #32]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f9dc 	bl	800320c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d107      	bne.n	8002e72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e005      	b.n	8002e82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e76:	893b      	ldrh	r3, [r7, #8]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	00010002 	.word	0x00010002

08002e90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	4608      	mov	r0, r1
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	817b      	strh	r3, [r7, #10]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	813b      	strh	r3, [r7, #8]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eb8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f8c2 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef0:	d103      	bne.n	8002efa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0aa      	b.n	8003054 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002efe:	897b      	ldrh	r3, [r7, #10]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	6a3a      	ldr	r2, [r7, #32]
 8002f12:	4952      	ldr	r1, [pc, #328]	; (800305c <I2C_RequestMemoryRead+0x1cc>)
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f8fa 	bl	800310e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e097      	b.n	8003054 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3c:	6a39      	ldr	r1, [r7, #32]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f964 	bl	800320c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d107      	bne.n	8002f62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e076      	b.n	8003054 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f6c:	893b      	ldrh	r3, [r7, #8]
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	611a      	str	r2, [r3, #16]
 8002f76:	e021      	b.n	8002fbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f78:	893b      	ldrh	r3, [r7, #8]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	6a39      	ldr	r1, [r7, #32]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f93e 	bl	800320c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00d      	beq.n	8002fb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d107      	bne.n	8002fae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e050      	b.n	8003054 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fb2:	893b      	ldrh	r3, [r7, #8]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbe:	6a39      	ldr	r1, [r7, #32]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f923 	bl	800320c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00d      	beq.n	8002fe8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d107      	bne.n	8002fe4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e035      	b.n	8003054 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f82b 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301e:	d103      	bne.n	8003028 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e013      	b.n	8003054 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800302c:	897b      	ldrh	r3, [r7, #10]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	b2da      	uxtb	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	6a3a      	ldr	r2, [r7, #32]
 8003040:	4906      	ldr	r1, [pc, #24]	; (800305c <I2C_RequestMemoryRead+0x1cc>)
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f863 	bl	800310e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	00010002 	.word	0x00010002

08003060 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003070:	e025      	b.n	80030be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d021      	beq.n	80030be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7fe fefd 	bl	8001e78 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <I2C_WaitOnFlagUntilTimeout+0x30>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d116      	bne.n	80030be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f043 0220 	orr.w	r2, r3, #32
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e023      	b.n	8003106 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d10d      	bne.n	80030e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4013      	ands	r3, r2
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf0c      	ite	eq
 80030da:	2301      	moveq	r3, #1
 80030dc:	2300      	movne	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	e00c      	b.n	80030fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	43da      	mvns	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4013      	ands	r3, r2
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	429a      	cmp	r2, r3
 8003102:	d0b6      	beq.n	8003072 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800311c:	e051      	b.n	80031c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312c:	d123      	bne.n	8003176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003146:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f043 0204 	orr.w	r2, r3, #4
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e046      	b.n	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d021      	beq.n	80031c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7fe fe7b 	bl	8001e78 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d116      	bne.n	80031c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f043 0220 	orr.w	r2, r3, #32
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e020      	b.n	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	0c1b      	lsrs	r3, r3, #16
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d10c      	bne.n	80031e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4013      	ands	r3, r2
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bf14      	ite	ne
 80031de:	2301      	movne	r3, #1
 80031e0:	2300      	moveq	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	e00b      	b.n	80031fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	43da      	mvns	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	4013      	ands	r3, r2
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d18d      	bne.n	800311e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003218:	e02d      	b.n	8003276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f8ce 	bl	80033bc <I2C_IsAcknowledgeFailed>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e02d      	b.n	8003286 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d021      	beq.n	8003276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003232:	f7fe fe21 	bl	8001e78 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d116      	bne.n	8003276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f043 0220 	orr.w	r2, r3, #32
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e007      	b.n	8003286 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	2b80      	cmp	r3, #128	; 0x80
 8003282:	d1ca      	bne.n	800321a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800329a:	e02d      	b.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f88d 	bl	80033bc <I2C_IsAcknowledgeFailed>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e02d      	b.n	8003308 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d021      	beq.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b4:	f7fe fde0 	bl	8001e78 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d302      	bcc.n	80032ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d116      	bne.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e007      	b.n	8003308 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b04      	cmp	r3, #4
 8003304:	d1ca      	bne.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800331c:	e042      	b.n	80033a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b10      	cmp	r3, #16
 800332a:	d119      	bne.n	8003360 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0210 	mvn.w	r2, #16
 8003334:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e029      	b.n	80033b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003360:	f7fe fd8a 	bl	8001e78 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	429a      	cmp	r2, r3
 800336e:	d302      	bcc.n	8003376 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d116      	bne.n	80033a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f043 0220 	orr.w	r2, r3, #32
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e007      	b.n	80033b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	d1b5      	bne.n	800331e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d2:	d11b      	bne.n	800340c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f043 0204 	orr.w	r2, r3, #4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e267      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d075      	beq.n	8003526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800343a:	4b88      	ldr	r3, [pc, #544]	; (800365c <HAL_RCC_OscConfig+0x240>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b04      	cmp	r3, #4
 8003444:	d00c      	beq.n	8003460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003446:	4b85      	ldr	r3, [pc, #532]	; (800365c <HAL_RCC_OscConfig+0x240>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800344e:	2b08      	cmp	r3, #8
 8003450:	d112      	bne.n	8003478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003452:	4b82      	ldr	r3, [pc, #520]	; (800365c <HAL_RCC_OscConfig+0x240>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800345e:	d10b      	bne.n	8003478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003460:	4b7e      	ldr	r3, [pc, #504]	; (800365c <HAL_RCC_OscConfig+0x240>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d05b      	beq.n	8003524 <HAL_RCC_OscConfig+0x108>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d157      	bne.n	8003524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e242      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003480:	d106      	bne.n	8003490 <HAL_RCC_OscConfig+0x74>
 8003482:	4b76      	ldr	r3, [pc, #472]	; (800365c <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a75      	ldr	r2, [pc, #468]	; (800365c <HAL_RCC_OscConfig+0x240>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e01d      	b.n	80034cc <HAL_RCC_OscConfig+0xb0>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003498:	d10c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x98>
 800349a:	4b70      	ldr	r3, [pc, #448]	; (800365c <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a6f      	ldr	r2, [pc, #444]	; (800365c <HAL_RCC_OscConfig+0x240>)
 80034a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4b6d      	ldr	r3, [pc, #436]	; (800365c <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a6c      	ldr	r2, [pc, #432]	; (800365c <HAL_RCC_OscConfig+0x240>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e00b      	b.n	80034cc <HAL_RCC_OscConfig+0xb0>
 80034b4:	4b69      	ldr	r3, [pc, #420]	; (800365c <HAL_RCC_OscConfig+0x240>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a68      	ldr	r2, [pc, #416]	; (800365c <HAL_RCC_OscConfig+0x240>)
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b66      	ldr	r3, [pc, #408]	; (800365c <HAL_RCC_OscConfig+0x240>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a65      	ldr	r2, [pc, #404]	; (800365c <HAL_RCC_OscConfig+0x240>)
 80034c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d013      	beq.n	80034fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe fcd0 	bl	8001e78 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fe fccc 	bl	8001e78 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	; 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e207      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	4b5b      	ldr	r3, [pc, #364]	; (800365c <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0xc0>
 80034fa:	e014      	b.n	8003526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7fe fcbc 	bl	8001e78 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003504:	f7fe fcb8 	bl	8001e78 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	; 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e1f3      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	4b51      	ldr	r3, [pc, #324]	; (800365c <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0xe8>
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d063      	beq.n	80035fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003532:	4b4a      	ldr	r3, [pc, #296]	; (800365c <HAL_RCC_OscConfig+0x240>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353e:	4b47      	ldr	r3, [pc, #284]	; (800365c <HAL_RCC_OscConfig+0x240>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003546:	2b08      	cmp	r3, #8
 8003548:	d11c      	bne.n	8003584 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354a:	4b44      	ldr	r3, [pc, #272]	; (800365c <HAL_RCC_OscConfig+0x240>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d116      	bne.n	8003584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003556:	4b41      	ldr	r3, [pc, #260]	; (800365c <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_RCC_OscConfig+0x152>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d001      	beq.n	800356e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e1c7      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356e:	4b3b      	ldr	r3, [pc, #236]	; (800365c <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4937      	ldr	r1, [pc, #220]	; (800365c <HAL_RCC_OscConfig+0x240>)
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	e03a      	b.n	80035fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d020      	beq.n	80035ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800358c:	4b34      	ldr	r3, [pc, #208]	; (8003660 <HAL_RCC_OscConfig+0x244>)
 800358e:	2201      	movs	r2, #1
 8003590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003592:	f7fe fc71 	bl	8001e78 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800359a:	f7fe fc6d 	bl	8001e78 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e1a8      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	4b2b      	ldr	r3, [pc, #172]	; (800365c <HAL_RCC_OscConfig+0x240>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b8:	4b28      	ldr	r3, [pc, #160]	; (800365c <HAL_RCC_OscConfig+0x240>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4925      	ldr	r1, [pc, #148]	; (800365c <HAL_RCC_OscConfig+0x240>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	600b      	str	r3, [r1, #0]
 80035cc:	e015      	b.n	80035fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ce:	4b24      	ldr	r3, [pc, #144]	; (8003660 <HAL_RCC_OscConfig+0x244>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fe fc50 	bl	8001e78 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035dc:	f7fe fc4c 	bl	8001e78 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e187      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	4b1b      	ldr	r3, [pc, #108]	; (800365c <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d036      	beq.n	8003674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d016      	beq.n	800363c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <HAL_RCC_OscConfig+0x248>)
 8003610:	2201      	movs	r2, #1
 8003612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003614:	f7fe fc30 	bl	8001e78 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800361c:	f7fe fc2c 	bl	8001e78 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e167      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362e:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_RCC_OscConfig+0x240>)
 8003630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x200>
 800363a:	e01b      	b.n	8003674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_RCC_OscConfig+0x248>)
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003642:	f7fe fc19 	bl	8001e78 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003648:	e00e      	b.n	8003668 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800364a:	f7fe fc15 	bl	8001e78 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d907      	bls.n	8003668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e150      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
 800365c:	40023800 	.word	0x40023800
 8003660:	42470000 	.word	0x42470000
 8003664:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003668:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x470>)
 800366a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1ea      	bne.n	800364a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8097 	beq.w	80037b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003686:	4b81      	ldr	r3, [pc, #516]	; (800388c <HAL_RCC_OscConfig+0x470>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10f      	bne.n	80036b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	4b7d      	ldr	r3, [pc, #500]	; (800388c <HAL_RCC_OscConfig+0x470>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a7c      	ldr	r2, [pc, #496]	; (800388c <HAL_RCC_OscConfig+0x470>)
 800369c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
 80036a2:	4b7a      	ldr	r3, [pc, #488]	; (800388c <HAL_RCC_OscConfig+0x470>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b2:	4b77      	ldr	r3, [pc, #476]	; (8003890 <HAL_RCC_OscConfig+0x474>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d118      	bne.n	80036f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036be:	4b74      	ldr	r3, [pc, #464]	; (8003890 <HAL_RCC_OscConfig+0x474>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a73      	ldr	r2, [pc, #460]	; (8003890 <HAL_RCC_OscConfig+0x474>)
 80036c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ca:	f7fe fbd5 	bl	8001e78 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d2:	f7fe fbd1 	bl	8001e78 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e10c      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e4:	4b6a      	ldr	r3, [pc, #424]	; (8003890 <HAL_RCC_OscConfig+0x474>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_OscConfig+0x2ea>
 80036f8:	4b64      	ldr	r3, [pc, #400]	; (800388c <HAL_RCC_OscConfig+0x470>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	4a63      	ldr	r2, [pc, #396]	; (800388c <HAL_RCC_OscConfig+0x470>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	6713      	str	r3, [r2, #112]	; 0x70
 8003704:	e01c      	b.n	8003740 <HAL_RCC_OscConfig+0x324>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b05      	cmp	r3, #5
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0x30c>
 800370e:	4b5f      	ldr	r3, [pc, #380]	; (800388c <HAL_RCC_OscConfig+0x470>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	4a5e      	ldr	r2, [pc, #376]	; (800388c <HAL_RCC_OscConfig+0x470>)
 8003714:	f043 0304 	orr.w	r3, r3, #4
 8003718:	6713      	str	r3, [r2, #112]	; 0x70
 800371a:	4b5c      	ldr	r3, [pc, #368]	; (800388c <HAL_RCC_OscConfig+0x470>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	4a5b      	ldr	r2, [pc, #364]	; (800388c <HAL_RCC_OscConfig+0x470>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	6713      	str	r3, [r2, #112]	; 0x70
 8003726:	e00b      	b.n	8003740 <HAL_RCC_OscConfig+0x324>
 8003728:	4b58      	ldr	r3, [pc, #352]	; (800388c <HAL_RCC_OscConfig+0x470>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	4a57      	ldr	r2, [pc, #348]	; (800388c <HAL_RCC_OscConfig+0x470>)
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	6713      	str	r3, [r2, #112]	; 0x70
 8003734:	4b55      	ldr	r3, [pc, #340]	; (800388c <HAL_RCC_OscConfig+0x470>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	4a54      	ldr	r2, [pc, #336]	; (800388c <HAL_RCC_OscConfig+0x470>)
 800373a:	f023 0304 	bic.w	r3, r3, #4
 800373e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d015      	beq.n	8003774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fe fb96 	bl	8001e78 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374e:	e00a      	b.n	8003766 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003750:	f7fe fb92 	bl	8001e78 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e0cb      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003766:	4b49      	ldr	r3, [pc, #292]	; (800388c <HAL_RCC_OscConfig+0x470>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0ee      	beq.n	8003750 <HAL_RCC_OscConfig+0x334>
 8003772:	e014      	b.n	800379e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003774:	f7fe fb80 	bl	8001e78 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377a:	e00a      	b.n	8003792 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377c:	f7fe fb7c 	bl	8001e78 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e0b5      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003792:	4b3e      	ldr	r3, [pc, #248]	; (800388c <HAL_RCC_OscConfig+0x470>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1ee      	bne.n	800377c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d105      	bne.n	80037b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a4:	4b39      	ldr	r3, [pc, #228]	; (800388c <HAL_RCC_OscConfig+0x470>)
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	4a38      	ldr	r2, [pc, #224]	; (800388c <HAL_RCC_OscConfig+0x470>)
 80037aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a1 	beq.w	80038fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ba:	4b34      	ldr	r3, [pc, #208]	; (800388c <HAL_RCC_OscConfig+0x470>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d05c      	beq.n	8003880 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d141      	bne.n	8003852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ce:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_RCC_OscConfig+0x478>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fe fb50 	bl	8001e78 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fe fb4c 	bl	8001e78 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e087      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	4b27      	ldr	r3, [pc, #156]	; (800388c <HAL_RCC_OscConfig+0x470>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69da      	ldr	r2, [r3, #28]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	3b01      	subs	r3, #1
 8003814:	041b      	lsls	r3, r3, #16
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	491b      	ldr	r1, [pc, #108]	; (800388c <HAL_RCC_OscConfig+0x470>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003824:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_RCC_OscConfig+0x478>)
 8003826:	2201      	movs	r2, #1
 8003828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fe fb25 	bl	8001e78 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003832:	f7fe fb21 	bl	8001e78 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e05c      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <HAL_RCC_OscConfig+0x470>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x416>
 8003850:	e054      	b.n	80038fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_RCC_OscConfig+0x478>)
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fe fb0e 	bl	8001e78 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003860:	f7fe fb0a 	bl	8001e78 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e045      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003872:	4b06      	ldr	r3, [pc, #24]	; (800388c <HAL_RCC_OscConfig+0x470>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x444>
 800387e:	e03d      	b.n	80038fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d107      	bne.n	8003898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e038      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
 800388c:	40023800 	.word	0x40023800
 8003890:	40007000 	.word	0x40007000
 8003894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003898:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <HAL_RCC_OscConfig+0x4ec>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d028      	beq.n	80038f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d121      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d11a      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038c8:	4013      	ands	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d111      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	085b      	lsrs	r3, r3, #1
 80038e0:	3b01      	subs	r3, #1
 80038e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d107      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800

0800390c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0cc      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003920:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d90c      	bls.n	8003948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b65      	ldr	r3, [pc, #404]	; (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0b8      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d020      	beq.n	8003996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003960:	4b59      	ldr	r3, [pc, #356]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4a58      	ldr	r2, [pc, #352]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800396a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003978:	4b53      	ldr	r3, [pc, #332]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4a52      	ldr	r2, [pc, #328]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003984:	4b50      	ldr	r3, [pc, #320]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	494d      	ldr	r1, [pc, #308]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d044      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	4b47      	ldr	r3, [pc, #284]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d119      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e07f      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d003      	beq.n	80039ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d107      	bne.n	80039da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ca:	4b3f      	ldr	r3, [pc, #252]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e06f      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039da:	4b3b      	ldr	r3, [pc, #236]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e067      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ea:	4b37      	ldr	r3, [pc, #220]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4934      	ldr	r1, [pc, #208]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039fc:	f7fe fa3c 	bl	8001e78 <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a04:	f7fe fa38 	bl	8001e78 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e04f      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	4b2b      	ldr	r3, [pc, #172]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 020c 	and.w	r2, r3, #12
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d1eb      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d20c      	bcs.n	8003a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e032      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a60:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4916      	ldr	r1, [pc, #88]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a7e:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	490e      	ldr	r1, [pc, #56]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a92:	f000 f821 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8003a96:	4602      	mov	r2, r0
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	490a      	ldr	r1, [pc, #40]	; (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003aa4:	5ccb      	ldrb	r3, [r1, r3]
 8003aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aaa:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe f99c 	bl	8001df0 <HAL_InitTick>

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023c00 	.word	0x40023c00
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	08005464 	.word	0x08005464
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	20000004 	.word	0x20000004

08003ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003adc:	b094      	sub	sp, #80	; 0x50
 8003ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae8:	2300      	movs	r3, #0
 8003aea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af0:	4b79      	ldr	r3, [pc, #484]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d00d      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x40>
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	f200 80e1 	bhi.w	8003cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x34>
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d003      	beq.n	8003b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b0a:	e0db      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b0c:	4b73      	ldr	r3, [pc, #460]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8003b0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b10:	e0db      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b12:	4b73      	ldr	r3, [pc, #460]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b16:	e0d8      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b18:	4b6f      	ldr	r3, [pc, #444]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b22:	4b6d      	ldr	r3, [pc, #436]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d063      	beq.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2e:	4b6a      	ldr	r3, [pc, #424]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	099b      	lsrs	r3, r3, #6
 8003b34:	2200      	movs	r2, #0
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b40:	633b      	str	r3, [r7, #48]	; 0x30
 8003b42:	2300      	movs	r3, #0
 8003b44:	637b      	str	r3, [r7, #52]	; 0x34
 8003b46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b4a:	4622      	mov	r2, r4
 8003b4c:	462b      	mov	r3, r5
 8003b4e:	f04f 0000 	mov.w	r0, #0
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	0159      	lsls	r1, r3, #5
 8003b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b5c:	0150      	lsls	r0, r2, #5
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4621      	mov	r1, r4
 8003b64:	1a51      	subs	r1, r2, r1
 8003b66:	6139      	str	r1, [r7, #16]
 8003b68:	4629      	mov	r1, r5
 8003b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b7c:	4659      	mov	r1, fp
 8003b7e:	018b      	lsls	r3, r1, #6
 8003b80:	4651      	mov	r1, sl
 8003b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b86:	4651      	mov	r1, sl
 8003b88:	018a      	lsls	r2, r1, #6
 8003b8a:	4651      	mov	r1, sl
 8003b8c:	ebb2 0801 	subs.w	r8, r2, r1
 8003b90:	4659      	mov	r1, fp
 8003b92:	eb63 0901 	sbc.w	r9, r3, r1
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003baa:	4690      	mov	r8, r2
 8003bac:	4699      	mov	r9, r3
 8003bae:	4623      	mov	r3, r4
 8003bb0:	eb18 0303 	adds.w	r3, r8, r3
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	462b      	mov	r3, r5
 8003bb8:	eb49 0303 	adc.w	r3, r9, r3
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bca:	4629      	mov	r1, r5
 8003bcc:	024b      	lsls	r3, r1, #9
 8003bce:	4621      	mov	r1, r4
 8003bd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	024a      	lsls	r2, r1, #9
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bde:	2200      	movs	r2, #0
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003be8:	f7fc ff1c 	bl	8000a24 <__aeabi_uldivmod>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bf4:	e058      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf6:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	099b      	lsrs	r3, r3, #6
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	4611      	mov	r1, r2
 8003c02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c10:	4642      	mov	r2, r8
 8003c12:	464b      	mov	r3, r9
 8003c14:	f04f 0000 	mov.w	r0, #0
 8003c18:	f04f 0100 	mov.w	r1, #0
 8003c1c:	0159      	lsls	r1, r3, #5
 8003c1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c22:	0150      	lsls	r0, r2, #5
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4641      	mov	r1, r8
 8003c2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c2e:	4649      	mov	r1, r9
 8003c30:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c48:	ebb2 040a 	subs.w	r4, r2, sl
 8003c4c:	eb63 050b 	sbc.w	r5, r3, fp
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	00eb      	lsls	r3, r5, #3
 8003c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c5e:	00e2      	lsls	r2, r4, #3
 8003c60:	4614      	mov	r4, r2
 8003c62:	461d      	mov	r5, r3
 8003c64:	4643      	mov	r3, r8
 8003c66:	18e3      	adds	r3, r4, r3
 8003c68:	603b      	str	r3, [r7, #0]
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	eb45 0303 	adc.w	r3, r5, r3
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c7e:	4629      	mov	r1, r5
 8003c80:	028b      	lsls	r3, r1, #10
 8003c82:	4621      	mov	r1, r4
 8003c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c88:	4621      	mov	r1, r4
 8003c8a:	028a      	lsls	r2, r1, #10
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c92:	2200      	movs	r2, #0
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	61fa      	str	r2, [r7, #28]
 8003c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c9c:	f7fc fec2 	bl	8000a24 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cc2:	e002      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8003cc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3750      	adds	r7, #80	; 0x50
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	00f42400 	.word	0x00f42400
 8003ce0:	007a1200 	.word	0x007a1200

08003ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000000 	.word	0x20000000

08003cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d00:	f7ff fff0 	bl	8003ce4 <HAL_RCC_GetHCLKFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	0a9b      	lsrs	r3, r3, #10
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4903      	ldr	r1, [pc, #12]	; (8003d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d12:	5ccb      	ldrb	r3, [r1, r3]
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	08005474 	.word	0x08005474

08003d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d28:	f7ff ffdc 	bl	8003ce4 <HAL_RCC_GetHCLKFreq>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	0b5b      	lsrs	r3, r3, #13
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	4903      	ldr	r1, [pc, #12]	; (8003d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3a:	5ccb      	ldrb	r3, [r1, r3]
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40023800 	.word	0x40023800
 8003d48:	08005474 	.word	0x08005474

08003d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e041      	b.n	8003de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd fc1c 	bl	80015b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	f000 f950 	bl	8004030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d001      	beq.n	8003e04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e03c      	b.n	8003e7e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <HAL_TIM_Base_Start+0xa0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d018      	beq.n	8003e48 <HAL_TIM_Base_Start+0x5c>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1e:	d013      	beq.n	8003e48 <HAL_TIM_Base_Start+0x5c>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1a      	ldr	r2, [pc, #104]	; (8003e90 <HAL_TIM_Base_Start+0xa4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00e      	beq.n	8003e48 <HAL_TIM_Base_Start+0x5c>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a19      	ldr	r2, [pc, #100]	; (8003e94 <HAL_TIM_Base_Start+0xa8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d009      	beq.n	8003e48 <HAL_TIM_Base_Start+0x5c>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <HAL_TIM_Base_Start+0xac>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d004      	beq.n	8003e48 <HAL_TIM_Base_Start+0x5c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a16      	ldr	r2, [pc, #88]	; (8003e9c <HAL_TIM_Base_Start+0xb0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d111      	bne.n	8003e6c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d010      	beq.n	8003e7c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0201 	orr.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6a:	e007      	b.n	8003e7c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	40000c00 	.word	0x40000c00
 8003e9c:	40014000 	.word	0x40014000

08003ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIM_ConfigClockSource+0x1c>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e0b4      	b.n	8004026 <HAL_TIM_ConfigClockSource+0x186>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef4:	d03e      	beq.n	8003f74 <HAL_TIM_ConfigClockSource+0xd4>
 8003ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efa:	f200 8087 	bhi.w	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f02:	f000 8086 	beq.w	8004012 <HAL_TIM_ConfigClockSource+0x172>
 8003f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0a:	d87f      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b70      	cmp	r3, #112	; 0x70
 8003f0e:	d01a      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0xa6>
 8003f10:	2b70      	cmp	r3, #112	; 0x70
 8003f12:	d87b      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b60      	cmp	r3, #96	; 0x60
 8003f16:	d050      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0x11a>
 8003f18:	2b60      	cmp	r3, #96	; 0x60
 8003f1a:	d877      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b50      	cmp	r3, #80	; 0x50
 8003f1e:	d03c      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0xfa>
 8003f20:	2b50      	cmp	r3, #80	; 0x50
 8003f22:	d873      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d058      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x13a>
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d86f      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b30      	cmp	r3, #48	; 0x30
 8003f2e:	d064      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f30:	2b30      	cmp	r3, #48	; 0x30
 8003f32:	d86b      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d060      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d867      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d05c      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d05a      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f44:	e062      	b.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6899      	ldr	r1, [r3, #8]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f000 f965 	bl	8004224 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	609a      	str	r2, [r3, #8]
      break;
 8003f72:	e04f      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	6899      	ldr	r1, [r3, #8]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f000 f94e 	bl	8004224 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f96:	609a      	str	r2, [r3, #8]
      break;
 8003f98:	e03c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6859      	ldr	r1, [r3, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f000 f8c2 	bl	8004130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2150      	movs	r1, #80	; 0x50
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f91b 	bl	80041ee <TIM_ITRx_SetConfig>
      break;
 8003fb8:	e02c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6859      	ldr	r1, [r3, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f000 f8e1 	bl	800418e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2160      	movs	r1, #96	; 0x60
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f90b 	bl	80041ee <TIM_ITRx_SetConfig>
      break;
 8003fd8:	e01c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6859      	ldr	r1, [r3, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f000 f8a2 	bl	8004130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2140      	movs	r1, #64	; 0x40
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f8fb 	bl	80041ee <TIM_ITRx_SetConfig>
      break;
 8003ff8:	e00c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4619      	mov	r1, r3
 8004004:	4610      	mov	r0, r2
 8004006:	f000 f8f2 	bl	80041ee <TIM_ITRx_SetConfig>
      break;
 800400a:	e003      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
      break;
 8004010:	e000      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004024:	7bfb      	ldrb	r3, [r7, #15]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a34      	ldr	r2, [pc, #208]	; (8004114 <TIM_Base_SetConfig+0xe4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00f      	beq.n	8004068 <TIM_Base_SetConfig+0x38>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404e:	d00b      	beq.n	8004068 <TIM_Base_SetConfig+0x38>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a31      	ldr	r2, [pc, #196]	; (8004118 <TIM_Base_SetConfig+0xe8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d007      	beq.n	8004068 <TIM_Base_SetConfig+0x38>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a30      	ldr	r2, [pc, #192]	; (800411c <TIM_Base_SetConfig+0xec>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d003      	beq.n	8004068 <TIM_Base_SetConfig+0x38>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a2f      	ldr	r2, [pc, #188]	; (8004120 <TIM_Base_SetConfig+0xf0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d108      	bne.n	800407a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a25      	ldr	r2, [pc, #148]	; (8004114 <TIM_Base_SetConfig+0xe4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01b      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004088:	d017      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a22      	ldr	r2, [pc, #136]	; (8004118 <TIM_Base_SetConfig+0xe8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a21      	ldr	r2, [pc, #132]	; (800411c <TIM_Base_SetConfig+0xec>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00f      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a20      	ldr	r2, [pc, #128]	; (8004120 <TIM_Base_SetConfig+0xf0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00b      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a1f      	ldr	r2, [pc, #124]	; (8004124 <TIM_Base_SetConfig+0xf4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d007      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a1e      	ldr	r2, [pc, #120]	; (8004128 <TIM_Base_SetConfig+0xf8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d003      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a1d      	ldr	r2, [pc, #116]	; (800412c <TIM_Base_SetConfig+0xfc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d108      	bne.n	80040cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a08      	ldr	r2, [pc, #32]	; (8004114 <TIM_Base_SetConfig+0xe4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d103      	bne.n	8004100 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	615a      	str	r2, [r3, #20]
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40010000 	.word	0x40010000
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800
 8004120:	40000c00 	.word	0x40000c00
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800

08004130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0201 	bic.w	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800415a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f023 030a 	bic.w	r3, r3, #10
 800416c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	621a      	str	r2, [r3, #32]
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800418e:	b480      	push	{r7}
 8004190:	b087      	sub	sp, #28
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f023 0210 	bic.w	r2, r3, #16
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	031b      	lsls	r3, r3, #12
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004204:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	f043 0307 	orr.w	r3, r3, #7
 8004210:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	609a      	str	r2, [r3, #8]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800423e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	021a      	lsls	r2, r3, #8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	431a      	orrs	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4313      	orrs	r3, r2
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	609a      	str	r2, [r3, #8]
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004278:	2302      	movs	r3, #2
 800427a:	e050      	b.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1c      	ldr	r2, [pc, #112]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d018      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c8:	d013      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a18      	ldr	r2, [pc, #96]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a16      	ldr	r2, [pc, #88]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a15      	ldr	r2, [pc, #84]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a13      	ldr	r2, [pc, #76]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d10c      	bne.n	800430c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	4313      	orrs	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000
 8004330:	40000400 	.word	0x40000400
 8004334:	40000800 	.word	0x40000800
 8004338:	40000c00 	.word	0x40000c00
 800433c:	40014000 	.word	0x40014000

08004340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e03f      	b.n	80043d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fd f96e 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2224      	movs	r2, #36	; 0x24
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f929 	bl	80045dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695a      	ldr	r2, [r3, #20]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b08a      	sub	sp, #40	; 0x28
 80043de:	af02      	add	r7, sp, #8
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	603b      	str	r3, [r7, #0]
 80043e6:	4613      	mov	r3, r2
 80043e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b20      	cmp	r3, #32
 80043f8:	d17c      	bne.n	80044f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <HAL_UART_Transmit+0x2c>
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e075      	b.n	80044f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_UART_Transmit+0x3e>
 8004414:	2302      	movs	r3, #2
 8004416:	e06e      	b.n	80044f6 <HAL_UART_Transmit+0x11c>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2221      	movs	r2, #33	; 0x21
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800442e:	f7fd fd23 	bl	8001e78 <HAL_GetTick>
 8004432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	88fa      	ldrh	r2, [r7, #6]
 8004438:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	88fa      	ldrh	r2, [r7, #6]
 800443e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004448:	d108      	bne.n	800445c <HAL_UART_Transmit+0x82>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004452:	2300      	movs	r3, #0
 8004454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e003      	b.n	8004464 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004460:	2300      	movs	r3, #0
 8004462:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800446c:	e02a      	b.n	80044c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2200      	movs	r2, #0
 8004476:	2180      	movs	r1, #128	; 0x80
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f840 	bl	80044fe <UART_WaitOnFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e036      	b.n	80044f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10b      	bne.n	80044a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800449c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	3302      	adds	r3, #2
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	e007      	b.n	80044b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	781a      	ldrb	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	3301      	adds	r3, #1
 80044b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1cf      	bne.n	800446e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2200      	movs	r2, #0
 80044d6:	2140      	movs	r1, #64	; 0x40
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f810 	bl	80044fe <UART_WaitOnFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e006      	b.n	80044f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	e000      	b.n	80044f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80044f4:	2302      	movs	r3, #2
  }
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b090      	sub	sp, #64	; 0x40
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	603b      	str	r3, [r7, #0]
 800450a:	4613      	mov	r3, r2
 800450c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450e:	e050      	b.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d04c      	beq.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <UART_WaitOnFlagUntilTimeout+0x30>
 800451e:	f7fd fcab 	bl	8001e78 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800452a:	429a      	cmp	r2, r3
 800452c:	d241      	bcs.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	330c      	adds	r3, #12
 8004534:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	330c      	adds	r3, #12
 800454c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800454e:	637a      	str	r2, [r7, #52]	; 0x34
 8004550:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800455c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e5      	bne.n	800452e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3314      	adds	r3, #20
 8004568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	613b      	str	r3, [r7, #16]
   return(result);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	63bb      	str	r3, [r7, #56]	; 0x38
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3314      	adds	r3, #20
 8004580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004582:	623a      	str	r2, [r7, #32]
 8004584:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	69f9      	ldr	r1, [r7, #28]
 8004588:	6a3a      	ldr	r2, [r7, #32]
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e5      	bne.n	8004562 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e00f      	b.n	80045d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4013      	ands	r3, r2
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	429a      	cmp	r2, r3
 80045c0:	bf0c      	ite	eq
 80045c2:	2301      	moveq	r3, #1
 80045c4:	2300      	movne	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d09f      	beq.n	8004510 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3740      	adds	r7, #64	; 0x40
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e0:	b0c0      	sub	sp, #256	; 0x100
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	68d9      	ldr	r1, [r3, #12]
 80045fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	ea40 0301 	orr.w	r3, r0, r1
 8004604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	431a      	orrs	r2, r3
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	431a      	orrs	r2, r3
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004634:	f021 010c 	bic.w	r1, r1, #12
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004642:	430b      	orrs	r3, r1
 8004644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004656:	6999      	ldr	r1, [r3, #24]
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	ea40 0301 	orr.w	r3, r0, r1
 8004662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4b8f      	ldr	r3, [pc, #572]	; (80048a8 <UART_SetConfig+0x2cc>)
 800466c:	429a      	cmp	r2, r3
 800466e:	d005      	beq.n	800467c <UART_SetConfig+0xa0>
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b8d      	ldr	r3, [pc, #564]	; (80048ac <UART_SetConfig+0x2d0>)
 8004678:	429a      	cmp	r2, r3
 800467a:	d104      	bne.n	8004686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800467c:	f7ff fb52 	bl	8003d24 <HAL_RCC_GetPCLK2Freq>
 8004680:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004684:	e003      	b.n	800468e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004686:	f7ff fb39 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 800468a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004698:	f040 810c 	bne.w	80048b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800469c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046ae:	4622      	mov	r2, r4
 80046b0:	462b      	mov	r3, r5
 80046b2:	1891      	adds	r1, r2, r2
 80046b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80046b6:	415b      	adcs	r3, r3
 80046b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046be:	4621      	mov	r1, r4
 80046c0:	eb12 0801 	adds.w	r8, r2, r1
 80046c4:	4629      	mov	r1, r5
 80046c6:	eb43 0901 	adc.w	r9, r3, r1
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046de:	4690      	mov	r8, r2
 80046e0:	4699      	mov	r9, r3
 80046e2:	4623      	mov	r3, r4
 80046e4:	eb18 0303 	adds.w	r3, r8, r3
 80046e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046ec:	462b      	mov	r3, r5
 80046ee:	eb49 0303 	adc.w	r3, r9, r3
 80046f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004702:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800470a:	460b      	mov	r3, r1
 800470c:	18db      	adds	r3, r3, r3
 800470e:	653b      	str	r3, [r7, #80]	; 0x50
 8004710:	4613      	mov	r3, r2
 8004712:	eb42 0303 	adc.w	r3, r2, r3
 8004716:	657b      	str	r3, [r7, #84]	; 0x54
 8004718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800471c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004720:	f7fc f980 	bl	8000a24 <__aeabi_uldivmod>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4b61      	ldr	r3, [pc, #388]	; (80048b0 <UART_SetConfig+0x2d4>)
 800472a:	fba3 2302 	umull	r2, r3, r3, r2
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	011c      	lsls	r4, r3, #4
 8004732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004736:	2200      	movs	r2, #0
 8004738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800473c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004744:	4642      	mov	r2, r8
 8004746:	464b      	mov	r3, r9
 8004748:	1891      	adds	r1, r2, r2
 800474a:	64b9      	str	r1, [r7, #72]	; 0x48
 800474c:	415b      	adcs	r3, r3
 800474e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004754:	4641      	mov	r1, r8
 8004756:	eb12 0a01 	adds.w	sl, r2, r1
 800475a:	4649      	mov	r1, r9
 800475c:	eb43 0b01 	adc.w	fp, r3, r1
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800476c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004774:	4692      	mov	sl, r2
 8004776:	469b      	mov	fp, r3
 8004778:	4643      	mov	r3, r8
 800477a:	eb1a 0303 	adds.w	r3, sl, r3
 800477e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004782:	464b      	mov	r3, r9
 8004784:	eb4b 0303 	adc.w	r3, fp, r3
 8004788:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004798:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800479c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047a0:	460b      	mov	r3, r1
 80047a2:	18db      	adds	r3, r3, r3
 80047a4:	643b      	str	r3, [r7, #64]	; 0x40
 80047a6:	4613      	mov	r3, r2
 80047a8:	eb42 0303 	adc.w	r3, r2, r3
 80047ac:	647b      	str	r3, [r7, #68]	; 0x44
 80047ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047b6:	f7fc f935 	bl	8000a24 <__aeabi_uldivmod>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <UART_SetConfig+0x2d4>)
 80047c2:	fba3 2301 	umull	r2, r3, r3, r1
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	2264      	movs	r2, #100	; 0x64
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	1acb      	subs	r3, r1, r3
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047d6:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <UART_SetConfig+0x2d4>)
 80047d8:	fba3 2302 	umull	r2, r3, r3, r2
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047e4:	441c      	add	r4, r3
 80047e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047f8:	4642      	mov	r2, r8
 80047fa:	464b      	mov	r3, r9
 80047fc:	1891      	adds	r1, r2, r2
 80047fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004800:	415b      	adcs	r3, r3
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004808:	4641      	mov	r1, r8
 800480a:	1851      	adds	r1, r2, r1
 800480c:	6339      	str	r1, [r7, #48]	; 0x30
 800480e:	4649      	mov	r1, r9
 8004810:	414b      	adcs	r3, r1
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004820:	4659      	mov	r1, fp
 8004822:	00cb      	lsls	r3, r1, #3
 8004824:	4651      	mov	r1, sl
 8004826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800482a:	4651      	mov	r1, sl
 800482c:	00ca      	lsls	r2, r1, #3
 800482e:	4610      	mov	r0, r2
 8004830:	4619      	mov	r1, r3
 8004832:	4603      	mov	r3, r0
 8004834:	4642      	mov	r2, r8
 8004836:	189b      	adds	r3, r3, r2
 8004838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800483c:	464b      	mov	r3, r9
 800483e:	460a      	mov	r2, r1
 8004840:	eb42 0303 	adc.w	r3, r2, r3
 8004844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004854:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800485c:	460b      	mov	r3, r1
 800485e:	18db      	adds	r3, r3, r3
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
 8004862:	4613      	mov	r3, r2
 8004864:	eb42 0303 	adc.w	r3, r2, r3
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800486a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800486e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004872:	f7fc f8d7 	bl	8000a24 <__aeabi_uldivmod>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <UART_SetConfig+0x2d4>)
 800487c:	fba3 1302 	umull	r1, r3, r3, r2
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	2164      	movs	r1, #100	; 0x64
 8004884:	fb01 f303 	mul.w	r3, r1, r3
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	3332      	adds	r3, #50	; 0x32
 800488e:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <UART_SetConfig+0x2d4>)
 8004890:	fba2 2303 	umull	r2, r3, r2, r3
 8004894:	095b      	lsrs	r3, r3, #5
 8004896:	f003 0207 	and.w	r2, r3, #7
 800489a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4422      	add	r2, r4
 80048a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048a4:	e105      	b.n	8004ab2 <UART_SetConfig+0x4d6>
 80048a6:	bf00      	nop
 80048a8:	40011000 	.word	0x40011000
 80048ac:	40011400 	.word	0x40011400
 80048b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b8:	2200      	movs	r2, #0
 80048ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048c6:	4642      	mov	r2, r8
 80048c8:	464b      	mov	r3, r9
 80048ca:	1891      	adds	r1, r2, r2
 80048cc:	6239      	str	r1, [r7, #32]
 80048ce:	415b      	adcs	r3, r3
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
 80048d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048d6:	4641      	mov	r1, r8
 80048d8:	1854      	adds	r4, r2, r1
 80048da:	4649      	mov	r1, r9
 80048dc:	eb43 0501 	adc.w	r5, r3, r1
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	00eb      	lsls	r3, r5, #3
 80048ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ee:	00e2      	lsls	r2, r4, #3
 80048f0:	4614      	mov	r4, r2
 80048f2:	461d      	mov	r5, r3
 80048f4:	4643      	mov	r3, r8
 80048f6:	18e3      	adds	r3, r4, r3
 80048f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048fc:	464b      	mov	r3, r9
 80048fe:	eb45 0303 	adc.w	r3, r5, r3
 8004902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004912:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004922:	4629      	mov	r1, r5
 8004924:	008b      	lsls	r3, r1, #2
 8004926:	4621      	mov	r1, r4
 8004928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800492c:	4621      	mov	r1, r4
 800492e:	008a      	lsls	r2, r1, #2
 8004930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004934:	f7fc f876 	bl	8000a24 <__aeabi_uldivmod>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4b60      	ldr	r3, [pc, #384]	; (8004ac0 <UART_SetConfig+0x4e4>)
 800493e:	fba3 2302 	umull	r2, r3, r3, r2
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	011c      	lsls	r4, r3, #4
 8004946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800494a:	2200      	movs	r2, #0
 800494c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004950:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004958:	4642      	mov	r2, r8
 800495a:	464b      	mov	r3, r9
 800495c:	1891      	adds	r1, r2, r2
 800495e:	61b9      	str	r1, [r7, #24]
 8004960:	415b      	adcs	r3, r3
 8004962:	61fb      	str	r3, [r7, #28]
 8004964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004968:	4641      	mov	r1, r8
 800496a:	1851      	adds	r1, r2, r1
 800496c:	6139      	str	r1, [r7, #16]
 800496e:	4649      	mov	r1, r9
 8004970:	414b      	adcs	r3, r1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004980:	4659      	mov	r1, fp
 8004982:	00cb      	lsls	r3, r1, #3
 8004984:	4651      	mov	r1, sl
 8004986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800498a:	4651      	mov	r1, sl
 800498c:	00ca      	lsls	r2, r1, #3
 800498e:	4610      	mov	r0, r2
 8004990:	4619      	mov	r1, r3
 8004992:	4603      	mov	r3, r0
 8004994:	4642      	mov	r2, r8
 8004996:	189b      	adds	r3, r3, r2
 8004998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800499c:	464b      	mov	r3, r9
 800499e:	460a      	mov	r2, r1
 80049a0:	eb42 0303 	adc.w	r3, r2, r3
 80049a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80049b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049c0:	4649      	mov	r1, r9
 80049c2:	008b      	lsls	r3, r1, #2
 80049c4:	4641      	mov	r1, r8
 80049c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ca:	4641      	mov	r1, r8
 80049cc:	008a      	lsls	r2, r1, #2
 80049ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049d2:	f7fc f827 	bl	8000a24 <__aeabi_uldivmod>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4b39      	ldr	r3, [pc, #228]	; (8004ac0 <UART_SetConfig+0x4e4>)
 80049dc:	fba3 1302 	umull	r1, r3, r3, r2
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	2164      	movs	r1, #100	; 0x64
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	3332      	adds	r3, #50	; 0x32
 80049ee:	4a34      	ldr	r2, [pc, #208]	; (8004ac0 <UART_SetConfig+0x4e4>)
 80049f0:	fba2 2303 	umull	r2, r3, r2, r3
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049fa:	441c      	add	r4, r3
 80049fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a00:	2200      	movs	r2, #0
 8004a02:	673b      	str	r3, [r7, #112]	; 0x70
 8004a04:	677a      	str	r2, [r7, #116]	; 0x74
 8004a06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a0a:	4642      	mov	r2, r8
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	1891      	adds	r1, r2, r2
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	415b      	adcs	r3, r3
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a1a:	4641      	mov	r1, r8
 8004a1c:	1851      	adds	r1, r2, r1
 8004a1e:	6039      	str	r1, [r7, #0]
 8004a20:	4649      	mov	r1, r9
 8004a22:	414b      	adcs	r3, r1
 8004a24:	607b      	str	r3, [r7, #4]
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a32:	4659      	mov	r1, fp
 8004a34:	00cb      	lsls	r3, r1, #3
 8004a36:	4651      	mov	r1, sl
 8004a38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a3c:	4651      	mov	r1, sl
 8004a3e:	00ca      	lsls	r2, r1, #3
 8004a40:	4610      	mov	r0, r2
 8004a42:	4619      	mov	r1, r3
 8004a44:	4603      	mov	r3, r0
 8004a46:	4642      	mov	r2, r8
 8004a48:	189b      	adds	r3, r3, r2
 8004a4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a4c:	464b      	mov	r3, r9
 8004a4e:	460a      	mov	r2, r1
 8004a50:	eb42 0303 	adc.w	r3, r2, r3
 8004a54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a60:	667a      	str	r2, [r7, #100]	; 0x64
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a6e:	4649      	mov	r1, r9
 8004a70:	008b      	lsls	r3, r1, #2
 8004a72:	4641      	mov	r1, r8
 8004a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a78:	4641      	mov	r1, r8
 8004a7a:	008a      	lsls	r2, r1, #2
 8004a7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a80:	f7fb ffd0 	bl	8000a24 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <UART_SetConfig+0x4e4>)
 8004a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	2164      	movs	r1, #100	; 0x64
 8004a92:	fb01 f303 	mul.w	r3, r1, r3
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	3332      	adds	r3, #50	; 0x32
 8004a9c:	4a08      	ldr	r2, [pc, #32]	; (8004ac0 <UART_SetConfig+0x4e4>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	f003 020f 	and.w	r2, r3, #15
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4422      	add	r2, r4
 8004ab0:	609a      	str	r2, [r3, #8]
}
 8004ab2:	bf00      	nop
 8004ab4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004abe:	bf00      	nop
 8004ac0:	51eb851f 	.word	0x51eb851f

08004ac4 <_ZNSaIcEC1Ev>:
 8004ac4:	4770      	bx	lr

08004ac6 <_ZNSaIcED1Ev>:
 8004ac6:	4770      	bx	lr

08004ac8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8004ac8:	b10a      	cbz	r2, 8004ace <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8004aca:	f000 bb31 	b.w	8005130 <memcpy>
 8004ace:	4770      	bx	lr

08004ad0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8004ad0:	b508      	push	{r3, lr}
 8004ad2:	680b      	ldr	r3, [r1, #0]
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad8:	d302      	bcc.n	8004ae0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8004ada:	480d      	ldr	r0, [pc, #52]	; (8004b10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8004adc:	f000 fa2b 	bl	8004f36 <_ZSt20__throw_length_errorPKc>
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d90b      	bls.n	8004afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8004ae4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8004ae8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8004aec:	d206      	bcs.n	8004afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8004aee:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004af2:	bf2a      	itet	cs
 8004af4:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8004af8:	6008      	strcc	r0, [r1, #0]
 8004afa:	600b      	strcs	r3, [r1, #0]
 8004afc:	6808      	ldr	r0, [r1, #0]
 8004afe:	3001      	adds	r0, #1
 8004b00:	d501      	bpl.n	8004b06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8004b02:	f000 fa12 	bl	8004f2a <_ZSt17__throw_bad_allocv>
 8004b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004b0a:	f000 b9fd 	b.w	8004f08 <_Znwj>
 8004b0e:	bf00      	nop
 8004b10:	08005545 	.word	0x08005545

08004b14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8004b14:	f850 3b08 	ldr.w	r3, [r0], #8
 8004b18:	4283      	cmp	r3, r0
 8004b1a:	d002      	beq.n	8004b22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 b9f1 	b.w	8004f04 <_ZdlPv>
 8004b22:	4770      	bx	lr

08004b24 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8004b24:	b508      	push	{r3, lr}
 8004b26:	4603      	mov	r3, r0
 8004b28:	4608      	mov	r0, r1
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	4298      	cmp	r0, r3
 8004b2e:	4611      	mov	r1, r2
 8004b30:	d903      	bls.n	8004b3a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8004b32:	4602      	mov	r2, r0
 8004b34:	4801      	ldr	r0, [pc, #4]	; (8004b3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8004b36:	f000 fa01 	bl	8004f3c <_ZSt24__throw_out_of_range_fmtPKcz>
 8004b3a:	bd08      	pop	{r3, pc}
 8004b3c:	0800555d 	.word	0x0800555d

08004b40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8004b40:	6840      	ldr	r0, [r0, #4]
 8004b42:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004b46:	3901      	subs	r1, #1
 8004b48:	1a09      	subs	r1, r1, r0
 8004b4a:	4291      	cmp	r1, r2
 8004b4c:	b508      	push	{r3, lr}
 8004b4e:	d202      	bcs.n	8004b56 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 f9f0 	bl	8004f36 <_ZSt20__throw_length_errorPKc>
 8004b56:	bd08      	pop	{r3, pc}

08004b58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8004b58:	6803      	ldr	r3, [r0, #0]
 8004b5a:	428b      	cmp	r3, r1
 8004b5c:	d806      	bhi.n	8004b6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8004b5e:	6840      	ldr	r0, [r0, #4]
 8004b60:	4418      	add	r0, r3
 8004b62:	4281      	cmp	r1, r0
 8004b64:	bf94      	ite	ls
 8004b66:	2000      	movls	r0, #0
 8004b68:	2001      	movhi	r0, #1
 8004b6a:	4770      	bx	lr
 8004b6c:	2001      	movs	r0, #1
 8004b6e:	4770      	bx	lr

08004b70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8004b70:	2a01      	cmp	r2, #1
 8004b72:	b410      	push	{r4}
 8004b74:	d104      	bne.n	8004b80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8004b76:	780a      	ldrb	r2, [r1, #0]
 8004b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b7c:	7002      	strb	r2, [r0, #0]
 8004b7e:	4770      	bx	lr
 8004b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b84:	f7ff bfa0 	b.w	8004ac8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08004b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8004b88:	2a01      	cmp	r2, #1
 8004b8a:	b430      	push	{r4, r5}
 8004b8c:	d103      	bne.n	8004b96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8004b8e:	780b      	ldrb	r3, [r1, #0]
 8004b90:	7003      	strb	r3, [r0, #0]
 8004b92:	bc30      	pop	{r4, r5}
 8004b94:	4770      	bx	lr
 8004b96:	2a00      	cmp	r2, #0
 8004b98:	d0fb      	beq.n	8004b92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8004b9a:	bc30      	pop	{r4, r5}
 8004b9c:	f000 bad6 	b.w	800514c <memmove>

08004ba0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	b410      	push	{r4}
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4604      	mov	r4, r0
 8004baa:	d103      	bne.n	8004bb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8004bac:	7022      	strb	r2, [r4, #0]
 8004bae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0fa      	beq.n	8004bae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8004bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f000 badf 	b.w	8005180 <memset>

08004bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8004bc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bc4:	290f      	cmp	r1, #15
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	9101      	str	r1, [sp, #4]
 8004bca:	4615      	mov	r5, r2
 8004bcc:	d906      	bls.n	8004bdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8004bce:	2200      	movs	r2, #0
 8004bd0:	a901      	add	r1, sp, #4
 8004bd2:	f7ff ff7d 	bl	8004ad0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004bd6:	9b01      	ldr	r3, [sp, #4]
 8004bd8:	6020      	str	r0, [r4, #0]
 8004bda:	60a3      	str	r3, [r4, #8]
 8004bdc:	9901      	ldr	r1, [sp, #4]
 8004bde:	b119      	cbz	r1, 8004be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8004be0:	6820      	ldr	r0, [r4, #0]
 8004be2:	462a      	mov	r2, r5
 8004be4:	f7ff ffdc 	bl	8004ba0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8004be8:	9b01      	ldr	r3, [sp, #4]
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	6063      	str	r3, [r4, #4]
 8004bee:	2100      	movs	r1, #0
 8004bf0:	54d1      	strb	r1, [r2, r3]
 8004bf2:	b003      	add	sp, #12
 8004bf4:	bd30      	pop	{r4, r5, pc}

08004bf6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8004bf6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004bfc:	461f      	mov	r7, r3
 8004bfe:	6843      	ldr	r3, [r0, #4]
 8004c00:	eb01 0802 	add.w	r8, r1, r2
 8004c04:	1ab2      	subs	r2, r6, r2
 8004c06:	441a      	add	r2, r3
 8004c08:	eba3 0908 	sub.w	r9, r3, r8
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	9201      	str	r2, [sp, #4]
 8004c10:	f853 2b08 	ldr.w	r2, [r3], #8
 8004c14:	429a      	cmp	r2, r3
 8004c16:	bf18      	it	ne
 8004c18:	6882      	ldrne	r2, [r0, #8]
 8004c1a:	460d      	mov	r5, r1
 8004c1c:	bf08      	it	eq
 8004c1e:	220f      	moveq	r2, #15
 8004c20:	a901      	add	r1, sp, #4
 8004c22:	4604      	mov	r4, r0
 8004c24:	f7ff ff54 	bl	8004ad0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004c28:	4682      	mov	sl, r0
 8004c2a:	b11d      	cbz	r5, 8004c34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8004c2c:	6821      	ldr	r1, [r4, #0]
 8004c2e:	462a      	mov	r2, r5
 8004c30:	f7ff ff9e 	bl	8004b70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004c34:	b137      	cbz	r7, 8004c44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8004c36:	b12e      	cbz	r6, 8004c44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8004c38:	4632      	mov	r2, r6
 8004c3a:	4639      	mov	r1, r7
 8004c3c:	eb0a 0005 	add.w	r0, sl, r5
 8004c40:	f7ff ff96 	bl	8004b70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004c44:	f1b9 0f00 	cmp.w	r9, #0
 8004c48:	d007      	beq.n	8004c5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8004c4a:	6821      	ldr	r1, [r4, #0]
 8004c4c:	4435      	add	r5, r6
 8004c4e:	464a      	mov	r2, r9
 8004c50:	4441      	add	r1, r8
 8004c52:	eb0a 0005 	add.w	r0, sl, r5
 8004c56:	f7ff ff8b 	bl	8004b70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f7ff ff5a 	bl	8004b14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004c60:	9b01      	ldr	r3, [sp, #4]
 8004c62:	f8c4 a000 	str.w	sl, [r4]
 8004c66:	60a3      	str	r3, [r4, #8]
 8004c68:	b002      	add	sp, #8
 8004c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004c6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8004c6e:	f100 0208 	add.w	r2, r0, #8
 8004c72:	6002      	str	r2, [r0, #0]
 8004c74:	2200      	movs	r2, #0
 8004c76:	6042      	str	r2, [r0, #4]
 8004c78:	7202      	strb	r2, [r0, #8]
 8004c7a:	4770      	bx	lr

08004c7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 8004c7c:	b510      	push	{r4, lr}
 8004c7e:	f100 0308 	add.w	r3, r0, #8
 8004c82:	4604      	mov	r4, r0
 8004c84:	6003      	str	r3, [r0, #0]
 8004c86:	f7ff ff9c 	bl	8004bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	bd10      	pop	{r4, pc}

08004c8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8004c8e:	b570      	push	{r4, r5, r6, lr}
 8004c90:	4604      	mov	r4, r0
 8004c92:	460e      	mov	r6, r1
 8004c94:	3008      	adds	r0, #8
 8004c96:	6020      	str	r0, [r4, #0]
 8004c98:	f856 3b08 	ldr.w	r3, [r6], #8
 8004c9c:	429e      	cmp	r6, r3
 8004c9e:	460d      	mov	r5, r1
 8004ca0:	d10b      	bne.n	8004cba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8004ca2:	2210      	movs	r2, #16
 8004ca4:	4631      	mov	r1, r6
 8004ca6:	f7ff ff0f 	bl	8004ac8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8004caa:	686b      	ldr	r3, [r5, #4]
 8004cac:	6063      	str	r3, [r4, #4]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	602e      	str	r6, [r5, #0]
 8004cb2:	606b      	str	r3, [r5, #4]
 8004cb4:	722b      	strb	r3, [r5, #8]
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	bd70      	pop	{r4, r5, r6, pc}
 8004cba:	6023      	str	r3, [r4, #0]
 8004cbc:	688b      	ldr	r3, [r1, #8]
 8004cbe:	60a3      	str	r3, [r4, #8]
 8004cc0:	e7f3      	b.n	8004caa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08004cc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8004cc2:	b510      	push	{r4, lr}
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	f7ff ff25 	bl	8004b14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004cca:	4620      	mov	r0, r4
 8004ccc:	bd10      	pop	{r4, pc}

08004cce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8004cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd0:	460d      	mov	r5, r1
 8004cd2:	f851 3b08 	ldr.w	r3, [r1], #8
 8004cd6:	686a      	ldr	r2, [r5, #4]
 8004cd8:	4299      	cmp	r1, r3
 8004cda:	4604      	mov	r4, r0
 8004cdc:	6800      	ldr	r0, [r0, #0]
 8004cde:	d10d      	bne.n	8004cfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8004ce0:	b10a      	cbz	r2, 8004ce6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 8004ce2:	f7ff ff45 	bl	8004b70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004ce6:	686b      	ldr	r3, [r5, #4]
 8004ce8:	6822      	ldr	r2, [r4, #0]
 8004cea:	6063      	str	r3, [r4, #4]
 8004cec:	2100      	movs	r1, #0
 8004cee:	54d1      	strb	r1, [r2, r3]
 8004cf0:	682a      	ldr	r2, [r5, #0]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	606b      	str	r3, [r5, #4]
 8004cf6:	7013      	strb	r3, [r2, #0]
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cfc:	e9c4 3200 	strd	r3, r2, [r4]
 8004d00:	f104 0708 	add.w	r7, r4, #8
 8004d04:	42b8      	cmp	r0, r7
 8004d06:	68ab      	ldr	r3, [r5, #8]
 8004d08:	bf18      	it	ne
 8004d0a:	68a6      	ldrne	r6, [r4, #8]
 8004d0c:	60a3      	str	r3, [r4, #8]
 8004d0e:	bf08      	it	eq
 8004d10:	2000      	moveq	r0, #0
 8004d12:	b110      	cbz	r0, 8004d1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 8004d14:	6028      	str	r0, [r5, #0]
 8004d16:	60ae      	str	r6, [r5, #8]
 8004d18:	e7ea      	b.n	8004cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 8004d1a:	6029      	str	r1, [r5, #0]
 8004d1c:	e7e8      	b.n	8004cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

08004d1e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8004d1e:	6840      	ldr	r0, [r0, #4]
 8004d20:	4770      	bx	lr

08004d22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8004d22:	6800      	ldr	r0, [r0, #0]
 8004d24:	4408      	add	r0, r1
 8004d26:	4770      	bx	lr

08004d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8004d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d2e:	4614      	mov	r4, r2
 8004d30:	4680      	mov	r8, r0
 8004d32:	462a      	mov	r2, r5
 8004d34:	4689      	mov	r9, r1
 8004d36:	461f      	mov	r7, r3
 8004d38:	4621      	mov	r1, r4
 8004d3a:	4b39      	ldr	r3, [pc, #228]	; (8004e20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 8004d3c:	f7ff ff00 	bl	8004b40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8004d40:	4642      	mov	r2, r8
 8004d42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004d46:	f852 6b08 	ldr.w	r6, [r2], #8
 8004d4a:	4296      	cmp	r6, r2
 8004d4c:	bf18      	it	ne
 8004d4e:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8004d52:	eba5 0b04 	sub.w	fp, r5, r4
 8004d56:	eb03 0a0b 	add.w	sl, r3, fp
 8004d5a:	bf08      	it	eq
 8004d5c:	220f      	moveq	r2, #15
 8004d5e:	4552      	cmp	r2, sl
 8004d60:	d351      	bcc.n	8004e06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8004d62:	444e      	add	r6, r9
 8004d64:	4639      	mov	r1, r7
 8004d66:	44a1      	add	r9, r4
 8004d68:	4640      	mov	r0, r8
 8004d6a:	eba3 0909 	sub.w	r9, r3, r9
 8004d6e:	f7ff fef3 	bl	8004b58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8004d72:	b180      	cbz	r0, 8004d96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8004d74:	f1b9 0f00 	cmp.w	r9, #0
 8004d78:	d006      	beq.n	8004d88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8004d7a:	42ac      	cmp	r4, r5
 8004d7c:	d004      	beq.n	8004d88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8004d7e:	464a      	mov	r2, r9
 8004d80:	1931      	adds	r1, r6, r4
 8004d82:	1970      	adds	r0, r6, r5
 8004d84:	f7ff ff00 	bl	8004b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004d88:	b315      	cbz	r5, 8004dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004d8a:	462a      	mov	r2, r5
 8004d8c:	4639      	mov	r1, r7
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f7ff feee 	bl	8004b70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004d94:	e01c      	b.n	8004dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004d96:	b135      	cbz	r5, 8004da6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8004d98:	42ac      	cmp	r4, r5
 8004d9a:	d33c      	bcc.n	8004e16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8004d9c:	462a      	mov	r2, r5
 8004d9e:	4639      	mov	r1, r7
 8004da0:	4630      	mov	r0, r6
 8004da2:	f7ff fef1 	bl	8004b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004da6:	f1b9 0f00 	cmp.w	r9, #0
 8004daa:	d011      	beq.n	8004dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004dac:	42ac      	cmp	r4, r5
 8004dae:	d00f      	beq.n	8004dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004db0:	464a      	mov	r2, r9
 8004db2:	1931      	adds	r1, r6, r4
 8004db4:	1970      	adds	r0, r6, r5
 8004db6:	f7ff fee7 	bl	8004b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004dba:	42ac      	cmp	r4, r5
 8004dbc:	d208      	bcs.n	8004dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004dbe:	4434      	add	r4, r6
 8004dc0:	197b      	adds	r3, r7, r5
 8004dc2:	429c      	cmp	r4, r3
 8004dc4:	d30f      	bcc.n	8004de6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 8004dc6:	462a      	mov	r2, r5
 8004dc8:	4639      	mov	r1, r7
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f7ff fedc 	bl	8004b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8004dd4:	f8c8 a004 	str.w	sl, [r8, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4640      	mov	r0, r8
 8004ddc:	f803 200a 	strb.w	r2, [r3, sl]
 8004de0:	b003      	add	sp, #12
 8004de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de6:	42bc      	cmp	r4, r7
 8004de8:	d803      	bhi.n	8004df2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8004dea:	462a      	mov	r2, r5
 8004dec:	eb07 010b 	add.w	r1, r7, fp
 8004df0:	e7cd      	b.n	8004d8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8004df2:	1be4      	subs	r4, r4, r7
 8004df4:	4622      	mov	r2, r4
 8004df6:	4639      	mov	r1, r7
 8004df8:	4630      	mov	r0, r6
 8004dfa:	f7ff fec5 	bl	8004b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004dfe:	1b2a      	subs	r2, r5, r4
 8004e00:	1971      	adds	r1, r6, r5
 8004e02:	1930      	adds	r0, r6, r4
 8004e04:	e7c4      	b.n	8004d90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8004e06:	9500      	str	r5, [sp, #0]
 8004e08:	463b      	mov	r3, r7
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	4649      	mov	r1, r9
 8004e0e:	4640      	mov	r0, r8
 8004e10:	f7ff fef1 	bl	8004bf6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8004e14:	e7dc      	b.n	8004dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004e16:	f1b9 0f00 	cmp.w	r9, #0
 8004e1a:	d0d0      	beq.n	8004dbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8004e1c:	e7c8      	b.n	8004db0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8004e1e:	bf00      	nop
 8004e20:	080055aa 	.word	0x080055aa

08004e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8004e24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004e26:	4604      	mov	r4, r0
 8004e28:	4615      	mov	r5, r2
 8004e2a:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8004e2c:	9303      	str	r3, [sp, #12]
 8004e2e:	460e      	mov	r6, r1
 8004e30:	f7ff fe78 	bl	8004b24 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8004e34:	6862      	ldr	r2, [r4, #4]
 8004e36:	9b03      	ldr	r3, [sp, #12]
 8004e38:	1b92      	subs	r2, r2, r6
 8004e3a:	4601      	mov	r1, r0
 8004e3c:	42aa      	cmp	r2, r5
 8004e3e:	9808      	ldr	r0, [sp, #32]
 8004e40:	9000      	str	r0, [sp, #0]
 8004e42:	bf28      	it	cs
 8004e44:	462a      	movcs	r2, r5
 8004e46:	4620      	mov	r0, r4
 8004e48:	f7ff ff6e 	bl	8004d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8004e4c:	b004      	add	sp, #16
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	08005594 	.word	0x08005594

08004e54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8004e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e56:	4604      	mov	r4, r0
 8004e58:	4610      	mov	r0, r2
 8004e5a:	9103      	str	r1, [sp, #12]
 8004e5c:	9202      	str	r2, [sp, #8]
 8004e5e:	f7fb f9bb 	bl	80001d8 <strlen>
 8004e62:	9b02      	ldr	r3, [sp, #8]
 8004e64:	9000      	str	r0, [sp, #0]
 8004e66:	9903      	ldr	r1, [sp, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f7ff ffda 	bl	8004e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8004e70:	b004      	add	sp, #16
 8004e72:	bd10      	pop	{r4, pc}

08004e74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8004e74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e76:	4604      	mov	r4, r0
 8004e78:	4623      	mov	r3, r4
 8004e7a:	6840      	ldr	r0, [r0, #4]
 8004e7c:	f853 6b08 	ldr.w	r6, [r3], #8
 8004e80:	429e      	cmp	r6, r3
 8004e82:	bf18      	it	ne
 8004e84:	68a3      	ldrne	r3, [r4, #8]
 8004e86:	eb00 0502 	add.w	r5, r0, r2
 8004e8a:	bf08      	it	eq
 8004e8c:	230f      	moveq	r3, #15
 8004e8e:	429d      	cmp	r5, r3
 8004e90:	d80a      	bhi.n	8004ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8004e92:	b112      	cbz	r2, 8004e9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8004e94:	4430      	add	r0, r6
 8004e96:	f7ff fe6b 	bl	8004b70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	6065      	str	r5, [r4, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	555a      	strb	r2, [r3, r5]
 8004ea4:	b002      	add	sp, #8
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	9200      	str	r2, [sp, #0]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	2200      	movs	r2, #0
 8004eae:	4601      	mov	r1, r0
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f7ff fea0 	bl	8004bf6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8004eb6:	e7f0      	b.n	8004e9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08004eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8004eb8:	b508      	push	{r3, lr}
 8004eba:	e9d1 1200 	ldrd	r1, r2, [r1]
 8004ebe:	f7ff ffd9 	bl	8004e74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8004ec2:	bd08      	pop	{r3, pc}

08004ec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 8004ec4:	b508      	push	{r3, lr}
 8004ec6:	f7ff fff7 	bl	8004eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8004eca:	bd08      	pop	{r3, pc}

08004ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8004ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ece:	4604      	mov	r4, r0
 8004ed0:	4608      	mov	r0, r1
 8004ed2:	460d      	mov	r5, r1
 8004ed4:	f7fb f980 	bl	80001d8 <strlen>
 8004ed8:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8004eda:	9001      	str	r0, [sp, #4]
 8004edc:	4602      	mov	r2, r0
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f7ff fe2d 	bl	8004b40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8004ee6:	9a01      	ldr	r2, [sp, #4]
 8004ee8:	4629      	mov	r1, r5
 8004eea:	4620      	mov	r0, r4
 8004eec:	f7ff ffc2 	bl	8004e74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8004ef0:	b003      	add	sp, #12
 8004ef2:	bd30      	pop	{r4, r5, pc}
 8004ef4:	080055c3 	.word	0x080055c3

08004ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 8004ef8:	b508      	push	{r3, lr}
 8004efa:	f7ff ffe7 	bl	8004ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8004efe:	bd08      	pop	{r3, pc}

08004f00 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8004f00:	6800      	ldr	r0, [r0, #0]
 8004f02:	4770      	bx	lr

08004f04 <_ZdlPv>:
 8004f04:	f000 b90c 	b.w	8005120 <free>

08004f08 <_Znwj>:
 8004f08:	2801      	cmp	r0, #1
 8004f0a:	bf38      	it	cc
 8004f0c:	2001      	movcc	r0, #1
 8004f0e:	b510      	push	{r4, lr}
 8004f10:	4604      	mov	r4, r0
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 f8fc 	bl	8005110 <malloc>
 8004f18:	b930      	cbnz	r0, 8004f28 <_Znwj+0x20>
 8004f1a:	f000 f8bf 	bl	800509c <_ZSt15get_new_handlerv>
 8004f1e:	b908      	cbnz	r0, 8004f24 <_Znwj+0x1c>
 8004f20:	f000 f8c4 	bl	80050ac <abort>
 8004f24:	4780      	blx	r0
 8004f26:	e7f4      	b.n	8004f12 <_Znwj+0xa>
 8004f28:	bd10      	pop	{r4, pc}

08004f2a <_ZSt17__throw_bad_allocv>:
 8004f2a:	b508      	push	{r3, lr}
 8004f2c:	f000 f8be 	bl	80050ac <abort>

08004f30 <_ZSt19__throw_logic_errorPKc>:
 8004f30:	b508      	push	{r3, lr}
 8004f32:	f000 f8bb 	bl	80050ac <abort>

08004f36 <_ZSt20__throw_length_errorPKc>:
 8004f36:	b508      	push	{r3, lr}
 8004f38:	f000 f8b8 	bl	80050ac <abort>

08004f3c <_ZSt24__throw_out_of_range_fmtPKcz>:
 8004f3c:	b40f      	push	{r0, r1, r2, r3}
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	f107 0418 	add.w	r4, r7, #24
 8004f48:	f854 2b04 	ldr.w	r2, [r4], #4
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f7fb f942 	bl	80001d8 <strlen>
 8004f54:	f200 2307 	addw	r3, r0, #519	; 0x207
 8004f58:	f023 0307 	bic.w	r3, r3, #7
 8004f5c:	ebad 0d03 	sub.w	sp, sp, r3
 8004f60:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	60fc      	str	r4, [r7, #12]
 8004f68:	4623      	mov	r3, r4
 8004f6a:	4668      	mov	r0, sp
 8004f6c:	f000 f854 	bl	8005018 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8004f70:	f000 f89c 	bl	80050ac <abort>

08004f74 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b09c      	sub	sp, #112	; 0x70
 8004f78:	4606      	mov	r6, r0
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	1ba4      	subs	r4, r4, r6
 8004f80:	490e      	ldr	r1, [pc, #56]	; (8004fbc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8004f82:	2269      	movs	r2, #105	; 0x69
 8004f84:	1d38      	adds	r0, r7, #4
 8004f86:	f000 f8d3 	bl	8005130 <memcpy>
 8004f8a:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8004f8e:	f023 0307 	bic.w	r3, r3, #7
 8004f92:	ebad 0d03 	sub.w	sp, sp, r3
 8004f96:	466d      	mov	r5, sp
 8004f98:	2268      	movs	r2, #104	; 0x68
 8004f9a:	1d39      	adds	r1, r7, #4
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	f000 f8c7 	bl	8005130 <memcpy>
 8004fa2:	4622      	mov	r2, r4
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8004faa:	442c      	add	r4, r5
 8004fac:	f000 f8c0 	bl	8005130 <memcpy>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f7ff ffba 	bl	8004f30 <_ZSt19__throw_logic_errorPKc>
 8004fbc:	080055d8 	.word	0x080055d8

08004fc0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8004fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	466d      	mov	r5, sp
 8004fca:	f105 040c 	add.w	r4, r5, #12
 8004fce:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8005014 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8004fd2:	4623      	mov	r3, r4
 8004fd4:	f04f 0c0a 	mov.w	ip, #10
 8004fd8:	fbb2 f6fc 	udiv	r6, r2, ip
 8004fdc:	fb0c 2e16 	mls	lr, ip, r6, r2
 8004fe0:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8004fe4:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8004fe8:	4696      	mov	lr, r2
 8004fea:	f1be 0f09 	cmp.w	lr, #9
 8004fee:	4632      	mov	r2, r6
 8004ff0:	d8f2      	bhi.n	8004fd8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8004ff2:	1ae4      	subs	r4, r4, r3
 8004ff4:	428c      	cmp	r4, r1
 8004ff6:	d809      	bhi.n	800500c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8004ff8:	f1c4 030c 	rsb	r3, r4, #12
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	18e9      	adds	r1, r5, r3
 8005000:	f000 f896 	bl	8005130 <memcpy>
 8005004:	4620      	mov	r0, r4
 8005006:	46bd      	mov	sp, r7
 8005008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800500c:	f04f 34ff 	mov.w	r4, #4294967295
 8005010:	e7f8      	b.n	8005004 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8005012:	bf00      	nop
 8005014:	08005641 	.word	0x08005641

08005018 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8005018:	3901      	subs	r1, #1
 800501a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800501e:	4607      	mov	r7, r0
 8005020:	4615      	mov	r5, r2
 8005022:	eb00 0801 	add.w	r8, r0, r1
 8005026:	4604      	mov	r4, r0
 8005028:	782a      	ldrb	r2, [r5, #0]
 800502a:	b392      	cbz	r2, 8005092 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 800502c:	4544      	cmp	r4, r8
 800502e:	d22a      	bcs.n	8005086 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8005030:	2a25      	cmp	r2, #37	; 0x25
 8005032:	d107      	bne.n	8005044 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8005034:	786a      	ldrb	r2, [r5, #1]
 8005036:	2a73      	cmp	r2, #115	; 0x73
 8005038:	d009      	beq.n	800504e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800503a:	2a7a      	cmp	r2, #122	; 0x7a
 800503c:	d012      	beq.n	8005064 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800503e:	2a25      	cmp	r2, #37	; 0x25
 8005040:	d100      	bne.n	8005044 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8005042:	3501      	adds	r5, #1
 8005044:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005048:	f804 2b01 	strb.w	r2, [r4], #1
 800504c:	e7ec      	b.n	8005028 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800504e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005052:	3a01      	subs	r2, #1
 8005054:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005058:	b1c9      	cbz	r1, 800508e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800505a:	4544      	cmp	r4, r8
 800505c:	d013      	beq.n	8005086 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800505e:	f804 1b01 	strb.w	r1, [r4], #1
 8005062:	e7f7      	b.n	8005054 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8005064:	78aa      	ldrb	r2, [r5, #2]
 8005066:	2a75      	cmp	r2, #117	; 0x75
 8005068:	d1ec      	bne.n	8005044 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800506a:	461e      	mov	r6, r3
 800506c:	eba8 0104 	sub.w	r1, r8, r4
 8005070:	f856 2b04 	ldr.w	r2, [r6], #4
 8005074:	4620      	mov	r0, r4
 8005076:	f7ff ffa3 	bl	8004fc0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800507a:	2800      	cmp	r0, #0
 800507c:	dd03      	ble.n	8005086 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800507e:	4404      	add	r4, r0
 8005080:	3503      	adds	r5, #3
 8005082:	4633      	mov	r3, r6
 8005084:	e7d0      	b.n	8005028 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8005086:	4621      	mov	r1, r4
 8005088:	4638      	mov	r0, r7
 800508a:	f7ff ff73 	bl	8004f74 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800508e:	3502      	adds	r5, #2
 8005090:	e7ca      	b.n	8005028 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8005092:	7022      	strb	r2, [r4, #0]
 8005094:	1be0      	subs	r0, r4, r7
 8005096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800509c <_ZSt15get_new_handlerv>:
 800509c:	4b02      	ldr	r3, [pc, #8]	; (80050a8 <_ZSt15get_new_handlerv+0xc>)
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	f3bf 8f5b 	dmb	ish
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	200001c0 	.word	0x200001c0

080050ac <abort>:
 80050ac:	b508      	push	{r3, lr}
 80050ae:	2006      	movs	r0, #6
 80050b0:	f000 f986 	bl	80053c0 <raise>
 80050b4:	2001      	movs	r0, #1
 80050b6:	f7fc f9d9 	bl	800146c <_exit>
	...

080050bc <__errno>:
 80050bc:	4b01      	ldr	r3, [pc, #4]	; (80050c4 <__errno+0x8>)
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	2000000c 	.word	0x2000000c

080050c8 <__libc_init_array>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	4d0d      	ldr	r5, [pc, #52]	; (8005100 <__libc_init_array+0x38>)
 80050cc:	4c0d      	ldr	r4, [pc, #52]	; (8005104 <__libc_init_array+0x3c>)
 80050ce:	1b64      	subs	r4, r4, r5
 80050d0:	10a4      	asrs	r4, r4, #2
 80050d2:	2600      	movs	r6, #0
 80050d4:	42a6      	cmp	r6, r4
 80050d6:	d109      	bne.n	80050ec <__libc_init_array+0x24>
 80050d8:	4d0b      	ldr	r5, [pc, #44]	; (8005108 <__libc_init_array+0x40>)
 80050da:	4c0c      	ldr	r4, [pc, #48]	; (800510c <__libc_init_array+0x44>)
 80050dc:	f000 f99a 	bl	8005414 <_init>
 80050e0:	1b64      	subs	r4, r4, r5
 80050e2:	10a4      	asrs	r4, r4, #2
 80050e4:	2600      	movs	r6, #0
 80050e6:	42a6      	cmp	r6, r4
 80050e8:	d105      	bne.n	80050f6 <__libc_init_array+0x2e>
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
 80050ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f0:	4798      	blx	r3
 80050f2:	3601      	adds	r6, #1
 80050f4:	e7ee      	b.n	80050d4 <__libc_init_array+0xc>
 80050f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fa:	4798      	blx	r3
 80050fc:	3601      	adds	r6, #1
 80050fe:	e7f2      	b.n	80050e6 <__libc_init_array+0x1e>
 8005100:	08005654 	.word	0x08005654
 8005104:	08005654 	.word	0x08005654
 8005108:	08005654 	.word	0x08005654
 800510c:	0800565c 	.word	0x0800565c

08005110 <malloc>:
 8005110:	4b02      	ldr	r3, [pc, #8]	; (800511c <malloc+0xc>)
 8005112:	4601      	mov	r1, r0
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	f000 b8a7 	b.w	8005268 <_malloc_r>
 800511a:	bf00      	nop
 800511c:	2000000c 	.word	0x2000000c

08005120 <free>:
 8005120:	4b02      	ldr	r3, [pc, #8]	; (800512c <free+0xc>)
 8005122:	4601      	mov	r1, r0
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	f000 b833 	b.w	8005190 <_free_r>
 800512a:	bf00      	nop
 800512c:	2000000c 	.word	0x2000000c

08005130 <memcpy>:
 8005130:	440a      	add	r2, r1
 8005132:	4291      	cmp	r1, r2
 8005134:	f100 33ff 	add.w	r3, r0, #4294967295
 8005138:	d100      	bne.n	800513c <memcpy+0xc>
 800513a:	4770      	bx	lr
 800513c:	b510      	push	{r4, lr}
 800513e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005142:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005146:	4291      	cmp	r1, r2
 8005148:	d1f9      	bne.n	800513e <memcpy+0xe>
 800514a:	bd10      	pop	{r4, pc}

0800514c <memmove>:
 800514c:	4288      	cmp	r0, r1
 800514e:	b510      	push	{r4, lr}
 8005150:	eb01 0402 	add.w	r4, r1, r2
 8005154:	d902      	bls.n	800515c <memmove+0x10>
 8005156:	4284      	cmp	r4, r0
 8005158:	4623      	mov	r3, r4
 800515a:	d807      	bhi.n	800516c <memmove+0x20>
 800515c:	1e43      	subs	r3, r0, #1
 800515e:	42a1      	cmp	r1, r4
 8005160:	d008      	beq.n	8005174 <memmove+0x28>
 8005162:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005166:	f803 2f01 	strb.w	r2, [r3, #1]!
 800516a:	e7f8      	b.n	800515e <memmove+0x12>
 800516c:	4402      	add	r2, r0
 800516e:	4601      	mov	r1, r0
 8005170:	428a      	cmp	r2, r1
 8005172:	d100      	bne.n	8005176 <memmove+0x2a>
 8005174:	bd10      	pop	{r4, pc}
 8005176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800517a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800517e:	e7f7      	b.n	8005170 <memmove+0x24>

08005180 <memset>:
 8005180:	4402      	add	r2, r0
 8005182:	4603      	mov	r3, r0
 8005184:	4293      	cmp	r3, r2
 8005186:	d100      	bne.n	800518a <memset+0xa>
 8005188:	4770      	bx	lr
 800518a:	f803 1b01 	strb.w	r1, [r3], #1
 800518e:	e7f9      	b.n	8005184 <memset+0x4>

08005190 <_free_r>:
 8005190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005192:	2900      	cmp	r1, #0
 8005194:	d044      	beq.n	8005220 <_free_r+0x90>
 8005196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800519a:	9001      	str	r0, [sp, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f1a1 0404 	sub.w	r4, r1, #4
 80051a2:	bfb8      	it	lt
 80051a4:	18e4      	addlt	r4, r4, r3
 80051a6:	f000 f927 	bl	80053f8 <__malloc_lock>
 80051aa:	4a1e      	ldr	r2, [pc, #120]	; (8005224 <_free_r+0x94>)
 80051ac:	9801      	ldr	r0, [sp, #4]
 80051ae:	6813      	ldr	r3, [r2, #0]
 80051b0:	b933      	cbnz	r3, 80051c0 <_free_r+0x30>
 80051b2:	6063      	str	r3, [r4, #4]
 80051b4:	6014      	str	r4, [r2, #0]
 80051b6:	b003      	add	sp, #12
 80051b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051bc:	f000 b922 	b.w	8005404 <__malloc_unlock>
 80051c0:	42a3      	cmp	r3, r4
 80051c2:	d908      	bls.n	80051d6 <_free_r+0x46>
 80051c4:	6825      	ldr	r5, [r4, #0]
 80051c6:	1961      	adds	r1, r4, r5
 80051c8:	428b      	cmp	r3, r1
 80051ca:	bf01      	itttt	eq
 80051cc:	6819      	ldreq	r1, [r3, #0]
 80051ce:	685b      	ldreq	r3, [r3, #4]
 80051d0:	1949      	addeq	r1, r1, r5
 80051d2:	6021      	streq	r1, [r4, #0]
 80051d4:	e7ed      	b.n	80051b2 <_free_r+0x22>
 80051d6:	461a      	mov	r2, r3
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	b10b      	cbz	r3, 80051e0 <_free_r+0x50>
 80051dc:	42a3      	cmp	r3, r4
 80051de:	d9fa      	bls.n	80051d6 <_free_r+0x46>
 80051e0:	6811      	ldr	r1, [r2, #0]
 80051e2:	1855      	adds	r5, r2, r1
 80051e4:	42a5      	cmp	r5, r4
 80051e6:	d10b      	bne.n	8005200 <_free_r+0x70>
 80051e8:	6824      	ldr	r4, [r4, #0]
 80051ea:	4421      	add	r1, r4
 80051ec:	1854      	adds	r4, r2, r1
 80051ee:	42a3      	cmp	r3, r4
 80051f0:	6011      	str	r1, [r2, #0]
 80051f2:	d1e0      	bne.n	80051b6 <_free_r+0x26>
 80051f4:	681c      	ldr	r4, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	6053      	str	r3, [r2, #4]
 80051fa:	4421      	add	r1, r4
 80051fc:	6011      	str	r1, [r2, #0]
 80051fe:	e7da      	b.n	80051b6 <_free_r+0x26>
 8005200:	d902      	bls.n	8005208 <_free_r+0x78>
 8005202:	230c      	movs	r3, #12
 8005204:	6003      	str	r3, [r0, #0]
 8005206:	e7d6      	b.n	80051b6 <_free_r+0x26>
 8005208:	6825      	ldr	r5, [r4, #0]
 800520a:	1961      	adds	r1, r4, r5
 800520c:	428b      	cmp	r3, r1
 800520e:	bf04      	itt	eq
 8005210:	6819      	ldreq	r1, [r3, #0]
 8005212:	685b      	ldreq	r3, [r3, #4]
 8005214:	6063      	str	r3, [r4, #4]
 8005216:	bf04      	itt	eq
 8005218:	1949      	addeq	r1, r1, r5
 800521a:	6021      	streq	r1, [r4, #0]
 800521c:	6054      	str	r4, [r2, #4]
 800521e:	e7ca      	b.n	80051b6 <_free_r+0x26>
 8005220:	b003      	add	sp, #12
 8005222:	bd30      	pop	{r4, r5, pc}
 8005224:	200001c4 	.word	0x200001c4

08005228 <sbrk_aligned>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	4e0e      	ldr	r6, [pc, #56]	; (8005264 <sbrk_aligned+0x3c>)
 800522c:	460c      	mov	r4, r1
 800522e:	6831      	ldr	r1, [r6, #0]
 8005230:	4605      	mov	r5, r0
 8005232:	b911      	cbnz	r1, 800523a <sbrk_aligned+0x12>
 8005234:	f000 f88c 	bl	8005350 <_sbrk_r>
 8005238:	6030      	str	r0, [r6, #0]
 800523a:	4621      	mov	r1, r4
 800523c:	4628      	mov	r0, r5
 800523e:	f000 f887 	bl	8005350 <_sbrk_r>
 8005242:	1c43      	adds	r3, r0, #1
 8005244:	d00a      	beq.n	800525c <sbrk_aligned+0x34>
 8005246:	1cc4      	adds	r4, r0, #3
 8005248:	f024 0403 	bic.w	r4, r4, #3
 800524c:	42a0      	cmp	r0, r4
 800524e:	d007      	beq.n	8005260 <sbrk_aligned+0x38>
 8005250:	1a21      	subs	r1, r4, r0
 8005252:	4628      	mov	r0, r5
 8005254:	f000 f87c 	bl	8005350 <_sbrk_r>
 8005258:	3001      	adds	r0, #1
 800525a:	d101      	bne.n	8005260 <sbrk_aligned+0x38>
 800525c:	f04f 34ff 	mov.w	r4, #4294967295
 8005260:	4620      	mov	r0, r4
 8005262:	bd70      	pop	{r4, r5, r6, pc}
 8005264:	200001c8 	.word	0x200001c8

08005268 <_malloc_r>:
 8005268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526c:	1ccd      	adds	r5, r1, #3
 800526e:	f025 0503 	bic.w	r5, r5, #3
 8005272:	3508      	adds	r5, #8
 8005274:	2d0c      	cmp	r5, #12
 8005276:	bf38      	it	cc
 8005278:	250c      	movcc	r5, #12
 800527a:	2d00      	cmp	r5, #0
 800527c:	4607      	mov	r7, r0
 800527e:	db01      	blt.n	8005284 <_malloc_r+0x1c>
 8005280:	42a9      	cmp	r1, r5
 8005282:	d905      	bls.n	8005290 <_malloc_r+0x28>
 8005284:	230c      	movs	r3, #12
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	2600      	movs	r6, #0
 800528a:	4630      	mov	r0, r6
 800528c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005290:	4e2e      	ldr	r6, [pc, #184]	; (800534c <_malloc_r+0xe4>)
 8005292:	f000 f8b1 	bl	80053f8 <__malloc_lock>
 8005296:	6833      	ldr	r3, [r6, #0]
 8005298:	461c      	mov	r4, r3
 800529a:	bb34      	cbnz	r4, 80052ea <_malloc_r+0x82>
 800529c:	4629      	mov	r1, r5
 800529e:	4638      	mov	r0, r7
 80052a0:	f7ff ffc2 	bl	8005228 <sbrk_aligned>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	4604      	mov	r4, r0
 80052a8:	d14d      	bne.n	8005346 <_malloc_r+0xde>
 80052aa:	6834      	ldr	r4, [r6, #0]
 80052ac:	4626      	mov	r6, r4
 80052ae:	2e00      	cmp	r6, #0
 80052b0:	d140      	bne.n	8005334 <_malloc_r+0xcc>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	4631      	mov	r1, r6
 80052b6:	4638      	mov	r0, r7
 80052b8:	eb04 0803 	add.w	r8, r4, r3
 80052bc:	f000 f848 	bl	8005350 <_sbrk_r>
 80052c0:	4580      	cmp	r8, r0
 80052c2:	d13a      	bne.n	800533a <_malloc_r+0xd2>
 80052c4:	6821      	ldr	r1, [r4, #0]
 80052c6:	3503      	adds	r5, #3
 80052c8:	1a6d      	subs	r5, r5, r1
 80052ca:	f025 0503 	bic.w	r5, r5, #3
 80052ce:	3508      	adds	r5, #8
 80052d0:	2d0c      	cmp	r5, #12
 80052d2:	bf38      	it	cc
 80052d4:	250c      	movcc	r5, #12
 80052d6:	4629      	mov	r1, r5
 80052d8:	4638      	mov	r0, r7
 80052da:	f7ff ffa5 	bl	8005228 <sbrk_aligned>
 80052de:	3001      	adds	r0, #1
 80052e0:	d02b      	beq.n	800533a <_malloc_r+0xd2>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	442b      	add	r3, r5
 80052e6:	6023      	str	r3, [r4, #0]
 80052e8:	e00e      	b.n	8005308 <_malloc_r+0xa0>
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	1b52      	subs	r2, r2, r5
 80052ee:	d41e      	bmi.n	800532e <_malloc_r+0xc6>
 80052f0:	2a0b      	cmp	r2, #11
 80052f2:	d916      	bls.n	8005322 <_malloc_r+0xba>
 80052f4:	1961      	adds	r1, r4, r5
 80052f6:	42a3      	cmp	r3, r4
 80052f8:	6025      	str	r5, [r4, #0]
 80052fa:	bf18      	it	ne
 80052fc:	6059      	strne	r1, [r3, #4]
 80052fe:	6863      	ldr	r3, [r4, #4]
 8005300:	bf08      	it	eq
 8005302:	6031      	streq	r1, [r6, #0]
 8005304:	5162      	str	r2, [r4, r5]
 8005306:	604b      	str	r3, [r1, #4]
 8005308:	4638      	mov	r0, r7
 800530a:	f104 060b 	add.w	r6, r4, #11
 800530e:	f000 f879 	bl	8005404 <__malloc_unlock>
 8005312:	f026 0607 	bic.w	r6, r6, #7
 8005316:	1d23      	adds	r3, r4, #4
 8005318:	1af2      	subs	r2, r6, r3
 800531a:	d0b6      	beq.n	800528a <_malloc_r+0x22>
 800531c:	1b9b      	subs	r3, r3, r6
 800531e:	50a3      	str	r3, [r4, r2]
 8005320:	e7b3      	b.n	800528a <_malloc_r+0x22>
 8005322:	6862      	ldr	r2, [r4, #4]
 8005324:	42a3      	cmp	r3, r4
 8005326:	bf0c      	ite	eq
 8005328:	6032      	streq	r2, [r6, #0]
 800532a:	605a      	strne	r2, [r3, #4]
 800532c:	e7ec      	b.n	8005308 <_malloc_r+0xa0>
 800532e:	4623      	mov	r3, r4
 8005330:	6864      	ldr	r4, [r4, #4]
 8005332:	e7b2      	b.n	800529a <_malloc_r+0x32>
 8005334:	4634      	mov	r4, r6
 8005336:	6876      	ldr	r6, [r6, #4]
 8005338:	e7b9      	b.n	80052ae <_malloc_r+0x46>
 800533a:	230c      	movs	r3, #12
 800533c:	603b      	str	r3, [r7, #0]
 800533e:	4638      	mov	r0, r7
 8005340:	f000 f860 	bl	8005404 <__malloc_unlock>
 8005344:	e7a1      	b.n	800528a <_malloc_r+0x22>
 8005346:	6025      	str	r5, [r4, #0]
 8005348:	e7de      	b.n	8005308 <_malloc_r+0xa0>
 800534a:	bf00      	nop
 800534c:	200001c4 	.word	0x200001c4

08005350 <_sbrk_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4d06      	ldr	r5, [pc, #24]	; (800536c <_sbrk_r+0x1c>)
 8005354:	2300      	movs	r3, #0
 8005356:	4604      	mov	r4, r0
 8005358:	4608      	mov	r0, r1
 800535a:	602b      	str	r3, [r5, #0]
 800535c:	f7fc f890 	bl	8001480 <_sbrk>
 8005360:	1c43      	adds	r3, r0, #1
 8005362:	d102      	bne.n	800536a <_sbrk_r+0x1a>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	b103      	cbz	r3, 800536a <_sbrk_r+0x1a>
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	bd38      	pop	{r3, r4, r5, pc}
 800536c:	200001cc 	.word	0x200001cc

08005370 <_raise_r>:
 8005370:	291f      	cmp	r1, #31
 8005372:	b538      	push	{r3, r4, r5, lr}
 8005374:	4604      	mov	r4, r0
 8005376:	460d      	mov	r5, r1
 8005378:	d904      	bls.n	8005384 <_raise_r+0x14>
 800537a:	2316      	movs	r3, #22
 800537c:	6003      	str	r3, [r0, #0]
 800537e:	f04f 30ff 	mov.w	r0, #4294967295
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005386:	b112      	cbz	r2, 800538e <_raise_r+0x1e>
 8005388:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800538c:	b94b      	cbnz	r3, 80053a2 <_raise_r+0x32>
 800538e:	4620      	mov	r0, r4
 8005390:	f000 f830 	bl	80053f4 <_getpid_r>
 8005394:	462a      	mov	r2, r5
 8005396:	4601      	mov	r1, r0
 8005398:	4620      	mov	r0, r4
 800539a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800539e:	f000 b817 	b.w	80053d0 <_kill_r>
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d00a      	beq.n	80053bc <_raise_r+0x4c>
 80053a6:	1c59      	adds	r1, r3, #1
 80053a8:	d103      	bne.n	80053b2 <_raise_r+0x42>
 80053aa:	2316      	movs	r3, #22
 80053ac:	6003      	str	r3, [r0, #0]
 80053ae:	2001      	movs	r0, #1
 80053b0:	e7e7      	b.n	8005382 <_raise_r+0x12>
 80053b2:	2400      	movs	r4, #0
 80053b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80053b8:	4628      	mov	r0, r5
 80053ba:	4798      	blx	r3
 80053bc:	2000      	movs	r0, #0
 80053be:	e7e0      	b.n	8005382 <_raise_r+0x12>

080053c0 <raise>:
 80053c0:	4b02      	ldr	r3, [pc, #8]	; (80053cc <raise+0xc>)
 80053c2:	4601      	mov	r1, r0
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	f7ff bfd3 	b.w	8005370 <_raise_r>
 80053ca:	bf00      	nop
 80053cc:	2000000c 	.word	0x2000000c

080053d0 <_kill_r>:
 80053d0:	b538      	push	{r3, r4, r5, lr}
 80053d2:	4d07      	ldr	r5, [pc, #28]	; (80053f0 <_kill_r+0x20>)
 80053d4:	2300      	movs	r3, #0
 80053d6:	4604      	mov	r4, r0
 80053d8:	4608      	mov	r0, r1
 80053da:	4611      	mov	r1, r2
 80053dc:	602b      	str	r3, [r5, #0]
 80053de:	f7fc f835 	bl	800144c <_kill>
 80053e2:	1c43      	adds	r3, r0, #1
 80053e4:	d102      	bne.n	80053ec <_kill_r+0x1c>
 80053e6:	682b      	ldr	r3, [r5, #0]
 80053e8:	b103      	cbz	r3, 80053ec <_kill_r+0x1c>
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	bd38      	pop	{r3, r4, r5, pc}
 80053ee:	bf00      	nop
 80053f0:	200001cc 	.word	0x200001cc

080053f4 <_getpid_r>:
 80053f4:	f7fc b822 	b.w	800143c <_getpid>

080053f8 <__malloc_lock>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__malloc_lock+0x8>)
 80053fa:	f000 b809 	b.w	8005410 <__retarget_lock_acquire_recursive>
 80053fe:	bf00      	nop
 8005400:	200001d0 	.word	0x200001d0

08005404 <__malloc_unlock>:
 8005404:	4801      	ldr	r0, [pc, #4]	; (800540c <__malloc_unlock+0x8>)
 8005406:	f000 b804 	b.w	8005412 <__retarget_lock_release_recursive>
 800540a:	bf00      	nop
 800540c:	200001d0 	.word	0x200001d0

08005410 <__retarget_lock_acquire_recursive>:
 8005410:	4770      	bx	lr

08005412 <__retarget_lock_release_recursive>:
 8005412:	4770      	bx	lr

08005414 <_init>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr

08005420 <_fini>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr
