
icm20948_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000670c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080068a8  080068a8  000168a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006988  08006988  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006988  08006988  00016988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006990  08006990  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006990  08006990  00016990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006998  08006998  00016998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800699c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000090  08006a2c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08006a2c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d33  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e76  00000000  00000000  00037df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  0003ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  0003bc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a64b  00000000  00000000  0003cb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014fb2  00000000  00000000  0005719b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b720  00000000  00000000  0006c14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010786d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b4  00000000  00000000  001078c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800688c 	.word	0x0800688c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800688c 	.word	0x0800688c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <_ZN8ICM209486whoamiEv>:
//
//ICM20948::~ICM20948() {
//	// TODO Auto-generated destructor stub
//}

uint8_t ICM20948::whoami(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af04      	add	r7, sp, #16
 8000e5a:	6078      	str	r0, [r7, #4]
	    uint8_t adress=0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Read(hi2c, (uint16_t)address<<1, REGISTER.WHO_AM_I, 1, &adress, 1, 1000);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6898      	ldr	r0, [r3, #8]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	7b1b      	ldrb	r3, [r3, #12]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	b299      	uxth	r1, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	f107 030f 	add.w	r3, r7, #15
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2301      	movs	r3, #1
 8000e86:	f002 f9af 	bl	80031e8 <HAL_I2C_Mem_Read>
		return adress;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]

	}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_ZN8ICM209488pwrmgmt1Eh>:

	uint8_t ICM20948::pwrmgmt1(uint8_t data){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af04      	add	r7, sp, #16
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	70fb      	strb	r3, [r7, #3]
	     HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.PWR_MGMT_1,1,&data,1,1000);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6898      	ldr	r0, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7b1b      	ldrb	r3, [r3, #12]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	b299      	uxth	r1, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	1cfb      	adds	r3, r7, #3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f002 f896 	bl	8002ff4 <HAL_I2C_Mem_Write>
	     return 0;
 8000ec8:	2300      	movs	r3, #0
	}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <_ZN8ICM209488pwrmgmt2Eh>:
	uint8_t ICM20948::pwrmgmt2(uint8_t data){
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af04      	add	r7, sp, #16
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	70fb      	strb	r3, [r7, #3]
	     HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.PWR_MGMT_2,1,&data,1,1000);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6898      	ldr	r0, [r3, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7b1b      	ldrb	r3, [r3, #12]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b299      	uxth	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	789b      	ldrb	r3, [r3, #2]
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	1cfb      	adds	r3, r7, #3
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2301      	movs	r3, #1
 8000f02:	f002 f877 	bl	8002ff4 <HAL_I2C_Mem_Write>
	     return 0;
 8000f06:	2300      	movs	r3, #0
	}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_ZN8ICM209485resetEv>:
	void ICM20948::reset(){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af04      	add	r7, sp, #16
 8000f16:	6078      	str	r0, [r7, #4]
	    pwrmgmt1(ICM20948_BIT_H_RESET);
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffba 	bl	8000e94 <_ZN8ICM209488pwrmgmt1Eh>
	    HAL_Delay(100);
 8000f20:	2064      	movs	r0, #100	; 0x64
 8000f22:	f001 fc1d 	bl	8002760 <HAL_Delay>
	    pwrmgmt1(ICM20948_BTT_CLK_PLL);
 8000f26:	2101      	movs	r1, #1
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ffb3 	bl	8000e94 <_ZN8ICM209488pwrmgmt1Eh>
	    HAL_Delay(100);
 8000f2e:	2064      	movs	r0, #100	; 0x64
 8000f30:	f001 fc16 	bl	8002760 <HAL_Delay>
	    uint8_t buffer=ICM20948_BIT_INT_ACTL | ICM20948_BIT_INT_OPEN;
 8000f34:	23c0      	movs	r3, #192	; 0xc0
 8000f36:	73fb      	strb	r3, [r7, #15]
	    HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.INT_PIN_CFG,1,&buffer,1,1000);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6898      	ldr	r0, [r3, #8]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7b1b      	ldrb	r3, [r3, #12]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	b299      	uxth	r1, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	78db      	ldrb	r3, [r3, #3]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2301      	movs	r3, #1
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	f107 030f 	add.w	r3, r7, #15
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f002 f849 	bl	8002ff4 <HAL_I2C_Mem_Write>
		}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_ZN8ICM2094814changeUserBankEh>:
	bool ICM20948::changeUserBank(const uint8_t bank){
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b088      	sub	sp, #32
 8000f6e:	af04      	add	r7, sp, #16
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	70fb      	strb	r3, [r7, #3]
	    if(bank>3 || bank<0){
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d901      	bls.n	8000f80 <_ZN8ICM2094814changeUserBankEh+0x16>
	        return false;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e01b      	b.n	8000fb8 <_ZN8ICM2094814changeUserBankEh+0x4e>
	    }
	    uint8_t data=bank<<4;
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	73bb      	strb	r3, [r7, #14]
	    uint8_t res = HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.BANK_SEL,1,&data,1,1000);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6898      	ldr	r0, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7b1b      	ldrb	r3, [r3, #12]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	b299      	uxth	r1, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	791b      	ldrb	r3, [r3, #4]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	f107 030e 	add.w	r3, r7, #14
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	f002 f821 	bl	8002ff4 <HAL_I2C_Mem_Write>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
	    //printf("data=0x%02x\n",data);
	    //printf("res=%d\n",res);
	    return true;
 8000fb6:	2301      	movs	r3, #1
	}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh>:

	bool ICM20948::accelConfig(const AccelSensitivity fssel,const bool enableDLPF,const uint8_t configDLPF){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	4608      	mov	r0, r1
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	70fb      	strb	r3, [r7, #3]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	70bb      	strb	r3, [r7, #2]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	707b      	strb	r3, [r7, #1]

	    _accelsensitivity=fssel;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	78fa      	ldrb	r2, [r7, #3]
 8000fde:	735a      	strb	r2, [r3, #13]
	    if(configDLPF>7 || configDLPF<0){
 8000fe0:	787b      	ldrb	r3, [r7, #1]
 8000fe2:	2b07      	cmp	r3, #7
 8000fe4:	d901      	bls.n	8000fea <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh+0x2a>
	        return false;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e038      	b.n	800105c <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh+0x9c>
	    }
	    uint8_t data=0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
	    data |=configDLPF<<3;
 8000fee:	787b      	ldrb	r3, [r7, #1]
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	b25a      	sxtb	r2, r3
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
	    data |=(uint8_t)fssel<<1;
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	b25a      	sxtb	r2, r3
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b25b      	sxtb	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	73fb      	strb	r3, [r7, #15]
	    data |=enableDLPF;
 8001012:	78ba      	ldrb	r2, [r7, #2]
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	4313      	orrs	r3, r2
 8001018:	b2db      	uxtb	r3, r3
 800101a:	73fb      	strb	r3, [r7, #15]
	    changeUserBank(2);
 800101c:	2102      	movs	r1, #2
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffa3 	bl	8000f6a <_ZN8ICM2094814changeUserBankEh>

	    data=HAL_I2C_Mem_Write(hi2c, (uint16_t)address<<1,REGISTER.ACCEL_CONFIG,1,&data,1,1000);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6898      	ldr	r0, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7b1b      	ldrb	r3, [r3, #12]
 800102c:	b29b      	uxth	r3, r3
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	b299      	uxth	r1, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	795b      	ldrb	r3, [r3, #5]
 8001036:	b29a      	uxth	r2, r3
 8001038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	f107 030f 	add.w	r3, r7, #15
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	f001 ffd3 	bl	8002ff4 <HAL_I2C_Mem_Write>
 800104e:	4603      	mov	r3, r0
 8001050:	73fb      	strb	r3, [r7, #15]
	    //printf("data=%d\n",data);
	    changeUserBank(0);
 8001052:	2100      	movs	r1, #0
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff88 	bl	8000f6a <_ZN8ICM2094814changeUserBankEh>
	    return true;
 800105a:	2301      	movs	r3, #1

	}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <_ZN8ICM2094810gyroConfigENS_15GyroSensitivityEbh>:
	bool ICM20948::gyroConfig(const GyroSensitivity fssel,const bool enableDLPF,const uint8_t configDLPF){
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af04      	add	r7, sp, #16
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	4608      	mov	r0, r1
 800106e:	4611      	mov	r1, r2
 8001070:	461a      	mov	r2, r3
 8001072:	4603      	mov	r3, r0
 8001074:	70fb      	strb	r3, [r7, #3]
 8001076:	460b      	mov	r3, r1
 8001078:	70bb      	strb	r3, [r7, #2]
 800107a:	4613      	mov	r3, r2
 800107c:	707b      	strb	r3, [r7, #1]

		_gyrosensitivity=fssel;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	78fa      	ldrb	r2, [r7, #3]
 8001082:	739a      	strb	r2, [r3, #14]
		if(configDLPF>7||configDLPF<0){
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b07      	cmp	r3, #7
 8001088:	d901      	bls.n	800108e <_ZN8ICM2094810gyroConfigENS_15GyroSensitivityEbh+0x2a>
			return false;
 800108a:	2300      	movs	r3, #0
 800108c:	e036      	b.n	80010fc <_ZN8ICM2094810gyroConfigENS_15GyroSensitivityEbh+0x98>
		}
		uint8_t data=0;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
		data |=configDLPF<<3;
 8001092:	787b      	ldrb	r3, [r7, #1]
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	b25a      	sxtb	r2, r3
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	b25b      	sxtb	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	73fb      	strb	r3, [r7, #15]
		data |=(uint8_t)fssel<<1;
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	73fb      	strb	r3, [r7, #15]
		data |=enableDLPF;
 80010b6:	78ba      	ldrb	r2, [r7, #2]
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	73fb      	strb	r3, [r7, #15]
		changeUserBank(2);
 80010c0:	2102      	movs	r1, #2
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff51 	bl	8000f6a <_ZN8ICM2094814changeUserBankEh>

		HAL_I2C_Mem_Write(hi2c,(uint16_t)address<<1,REGISTER.GYRO_CONFIG,1,&data,1,1000);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6898      	ldr	r0, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7b1b      	ldrb	r3, [r3, #12]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	b299      	uxth	r1, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	799b      	ldrb	r3, [r3, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	2301      	movs	r3, #1
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	f107 030f 	add.w	r3, r7, #15
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2301      	movs	r3, #1
 80010ee:	f001 ff81 	bl	8002ff4 <HAL_I2C_Mem_Write>
		changeUserBank(0);
 80010f2:	2100      	movs	r1, #0
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff38 	bl	8000f6a <_ZN8ICM2094814changeUserBankEh>
		return true;
 80010fa:	2301      	movs	r3, #1

	}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_ZN8ICM2094814get6ValueBurstERSt5arrayIfLj3EES2_>:
			value[n] = (float)((int16_t)buffer[2*n]<<8 | (int16_t)buffer[2*n+1])/GYRO_SENSITIVITY[(uint8_t)_gyrosensitivity];
		}
	}
float debug;
int16_t ddd;
	void ICM20948::get6ValueBurst(std::array<float,3> &accel, std::array<float,3> &gyro){
 8001104:	b580      	push	{r7, lr}
 8001106:	ed2d 8b02 	vpush	{d8}
 800110a:	b08e      	sub	sp, #56	; 0x38
 800110c:	af04      	add	r7, sp, #16
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
		const uint8_t headRegAddr = 0x2d;
 8001114:	232d      	movs	r3, #45	; 0x2d
 8001116:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t buffer[12]={};
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]

		HAL_I2C_Mem_Read(hi2c, (uint16_t)address<<1,headRegAddr,1,buffer,12,1000);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6898      	ldr	r0, [r3, #8]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	7b1b      	ldrb	r3, [r3, #12]
 8001130:	b29b      	uxth	r3, r3
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	b299      	uxth	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	230c      	movs	r3, #12
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	222d      	movs	r2, #45	; 0x2d
 800114a:	f002 f84d 	bl	80031e8 <HAL_I2C_Mem_Read>

		for(uint8_t n=0;n<3;n++){
 800114e:	2300      	movs	r3, #0
 8001150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001158:	2b02      	cmp	r3, #2
 800115a:	d832      	bhi.n	80011c2 <_ZN8ICM2094814get6ValueBurstERSt5arrayIfLj3EES2_+0xbe>
			int16_t tmp = (int16_t)buffer[2*n]<<8 | (int16_t)buffer[2*n+1];
 800115c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	3328      	adds	r3, #40	; 0x28
 8001164:	443b      	add	r3, r7
 8001166:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b21a      	sxth	r2, r3
 800116e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	3301      	adds	r3, #1
 8001176:	3328      	adds	r3, #40	; 0x28
 8001178:	443b      	add	r3, r7
 800117a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	847b      	strh	r3, [r7, #34]	; 0x22
			accel[n] = (float)(tmp)/ACCEL_SENSITIVITY[(uint8_t)_accelsensitivity];
 8001184:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	7b5b      	ldrb	r3, [r3, #13]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	3304      	adds	r3, #4
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	ed93 8a00 	vldr	s16, [r3]
 80011a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011a4:	4619      	mov	r1, r3
 80011a6:	68b8      	ldr	r0, [r7, #8]
 80011a8:	f000 f888 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 80011ac:	4603      	mov	r3, r0
 80011ae:	eec8 7a88 	vdiv.f32	s15, s17, s16
 80011b2:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t n=0;n<3;n++){
 80011b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ba:	3301      	adds	r3, #1
 80011bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011c0:	e7c8      	b.n	8001154 <_ZN8ICM2094814get6ValueBurstERSt5arrayIfLj3EES2_+0x50>
		}
		for(uint8_t n=0;n<3;n++){
 80011c2:	2300      	movs	r3, #0
 80011c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d833      	bhi.n	8001238 <_ZN8ICM2094814get6ValueBurstERSt5arrayIfLj3EES2_+0x134>
			int16_t tmp = (int16_t)buffer[2*n+6]<<8 | (int16_t)buffer[2*n+1+6];
 80011d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011d4:	3303      	adds	r3, #3
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	3328      	adds	r3, #40	; 0x28
 80011da:	443b      	add	r3, r7
 80011dc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	3307      	adds	r3, #7
 80011ec:	3328      	adds	r3, #40	; 0x28
 80011ee:	443b      	add	r3, r7
 80011f0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	843b      	strh	r3, [r7, #32]
			gyro[n] = (float)(tmp)/GYRO_SENSITIVITY[(uint8_t)_gyrosensitivity];
 80011fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	7b9b      	ldrb	r3, [r3, #14]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	3308      	adds	r3, #8
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	ed93 8a00 	vldr	s16, [r3]
 8001216:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800121a:	4619      	mov	r1, r3
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f84d 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001222:	4603      	mov	r3, r0
 8001224:	eec8 7a88 	vdiv.f32	s15, s17, s16
 8001228:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t n=0;n<3;n++){
 800122c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001230:	3301      	adds	r3, #1
 8001232:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001236:	e7c7      	b.n	80011c8 <_ZN8ICM2094814get6ValueBurstERSt5arrayIfLj3EES2_+0xc4>
		}
	}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	ecbd 8b02 	vpop	{d8}
 8001242:	bd80      	pop	{r7, pc}

08001244 <_ZN8ICM2094812intPinConfigEh>:

	void ICM20948::intPinConfig(uint8_t value){
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af04      	add	r7, sp, #16
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(hi2c,(uint16_t)address<<1,REGISTER.INT_PIN_CFG,1,&value,1,1000);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6898      	ldr	r0, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7b1b      	ldrb	r3, [r3, #12]
 8001258:	b29b      	uxth	r3, r3
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	b299      	uxth	r1, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	78db      	ldrb	r3, [r3, #3]
 8001262:	b29a      	uxth	r2, r3
 8001264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001268:	9302      	str	r3, [sp, #8]
 800126a:	2301      	movs	r3, #1
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	1cfb      	adds	r3, r7, #3
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2301      	movs	r3, #1
 8001274:	f001 febe 	bl	8002ff4 <HAL_I2C_Mem_Write>

	}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZN8ICM209489intenableEh>:

	void ICM20948::intenable(uint8_t value){
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af04      	add	r7, sp, #16
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(hi2c,(uint16_t)address<<1,REGISTER.INT_ENABLE,1,&value,1,1000);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6898      	ldr	r0, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7b1b      	ldrb	r3, [r3, #12]
 8001294:	b29b      	uxth	r3, r3
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	b299      	uxth	r1, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	79db      	ldrb	r3, [r3, #7]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	2301      	movs	r3, #1
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	1cfb      	adds	r3, r7, #3
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	f001 fea0 	bl	8002ff4 <HAL_I2C_Mem_Write>
	}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_ZNSt5arrayIfLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6839      	ldr	r1, [r7, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f805 	bl	80012da <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a37      	ldr	r2, [pc, #220]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <MX_GPIO_Init+0xfc>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <MX_GPIO_Init+0xfc>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a29      	ldr	r2, [pc, #164]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a22      	ldr	r2, [pc, #136]	; (80013f4 <MX_GPIO_Init+0xfc>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <MX_GPIO_Init+0xfc>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	2120      	movs	r1, #32
 8001382:	481d      	ldr	r0, [pc, #116]	; (80013f8 <MX_GPIO_Init+0x100>)
 8001384:	f001 fca6 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800138e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4817      	ldr	r0, [pc, #92]	; (80013fc <MX_GPIO_Init+0x104>)
 80013a0:	f001 fb14 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013a4:	2320      	movs	r3, #32
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	480f      	ldr	r0, [pc, #60]	; (80013f8 <MX_GPIO_Init+0x100>)
 80013bc:	f001 fb06 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4809      	ldr	r0, [pc, #36]	; (80013fc <MX_GPIO_Init+0x104>)
 80013d8:	f001 faf8 	bl	80029cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2028      	movs	r0, #40	; 0x28
 80013e2:	f001 fabc 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013e6:	2028      	movs	r0, #40	; 0x28
 80013e8:	f001 fad5 	bl	8002996 <HAL_NVIC_EnableIRQ>

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40020800 	.word	0x40020800

08001400 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_I2C1_Init+0x50>)
 8001406:	4a13      	ldr	r2, [pc, #76]	; (8001454 <MX_I2C1_Init+0x54>)
 8001408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_I2C1_Init+0x50>)
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <MX_I2C1_Init+0x58>)
 800140e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_I2C1_Init+0x50>)
 800141e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001422:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <MX_I2C1_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_I2C1_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_I2C1_Init+0x50>)
 800143e:	f001 fc95 	bl	8002d6c <HAL_I2C_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001448:	f000 f8ce 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200000ac 	.word	0x200000ac
 8001454:	40005400 	.word	0x40005400
 8001458:	000186a0 	.word	0x000186a0

0800145c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_I2C_MspInit+0x84>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d12c      	bne.n	80014d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_I2C_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <HAL_I2C_MspInit+0x88>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_I2C_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800149a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a0:	2312      	movs	r3, #18
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ac:	2304      	movs	r3, #4
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	480c      	ldr	r0, [pc, #48]	; (80014e8 <HAL_I2C_MspInit+0x8c>)
 80014b8:	f001 fa88 	bl	80029cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_I2C_MspInit+0x88>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_I2C_MspInit+0x88>)
 80014c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_I2C_MspInit+0x88>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40005400 	.word	0x40005400
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020400 	.word	0x40020400

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f0:	f001 f8c4 	bl	800267c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f4:	f000 f80e 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f8:	f7ff fefe 	bl	80012f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014fc:	f000 f95c 	bl	80017b8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001500:	f7ff ff7e 	bl	8001400 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001504:	f000 f8e6 	bl	80016d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  init();
 8001508:	f000 fa42 	bl	8001990 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 800150c:	f000 fa94 	bl	8001a38 <loop>
 8001510:	e7fc      	b.n	800150c <main+0x20>
	...

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b094      	sub	sp, #80	; 0x50
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2230      	movs	r2, #48	; 0x30
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f005 f9aa 	bl	800687c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <SystemClock_Config+0xcc>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <SystemClock_Config+0xcc>)
 8001542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <SystemClock_Config+0xcc>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <SystemClock_Config+0xd0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <SystemClock_Config+0xd0>)
 800155e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <SystemClock_Config+0xd0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001570:	2302      	movs	r3, #2
 8001572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001574:	2301      	movs	r3, #1
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001578:	2310      	movs	r3, #16
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157c:	2302      	movs	r3, #2
 800157e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001580:	2300      	movs	r3, #0
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001584:	2310      	movs	r3, #16
 8001586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001588:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800158c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800158e:	2304      	movs	r3, #4
 8001590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001592:	2304      	movs	r3, #4
 8001594:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001596:	f107 0320 	add.w	r3, r7, #32
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fba6 	bl	8003cec <HAL_RCC_OscConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015a6:	f000 f81f 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015aa:	230f      	movs	r3, #15
 80015ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ae:	2302      	movs	r3, #2
 80015b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2102      	movs	r1, #2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fe08 	bl	80041dc <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015d2:	f000 f809 	bl	80015e8 <Error_Handler>
  }
}
 80015d6:	bf00      	nop
 80015d8:	3750      	adds	r7, #80	; 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>
	...

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <HAL_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <HAL_MspInit+0x4c>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_MspInit+0x4c>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_MspInit+0x4c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_MspInit+0x4c>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_MspInit+0x4c>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001632:	2007      	movs	r0, #7
 8001634:	f001 f988 	bl	8002948 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <NMI_Handler+0x4>

0800164a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <MemManage_Handler+0x4>

08001656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <UsageFault_Handler+0x4>

08001662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001690:	f001 f846 	bl	8002720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800169c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016a0:	f001 fb4c 	bl	8002d3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016a8:	f001 fb48 	bl	8002d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <SystemInit+0x20>)
 80016b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <SystemInit+0x20>)
 80016bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e8:	463b      	mov	r3, r7
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <MX_TIM1_Init+0x98>)
 80016f2:	4a1f      	ldr	r2, [pc, #124]	; (8001770 <MX_TIM1_Init+0x9c>)
 80016f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <MX_TIM1_Init+0x98>)
 80016f8:	2253      	movs	r2, #83	; 0x53
 80016fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <MX_TIM1_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <MX_TIM1_Init+0x98>)
 8001704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001708:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <MX_TIM1_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_TIM1_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_TIM1_Init+0x98>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800171c:	4813      	ldr	r0, [pc, #76]	; (800176c <MX_TIM1_Init+0x98>)
 800171e:	f002 ff7d 	bl	800461c <HAL_TIM_Base_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001728:	f7ff ff5e 	bl	80015e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <MX_TIM1_Init+0x98>)
 800173a:	f003 f819 	bl	8004770 <HAL_TIM_ConfigClockSource>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001744:	f7ff ff50 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_TIM1_Init+0x98>)
 8001756:	f003 f9ed 	bl	8004b34 <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001760:	f7ff ff42 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000100 	.word	0x20000100
 8001770:	40010000 	.word	0x40010000

08001774 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_TIM_Base_MspInit+0x3c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10d      	bne.n	80017a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_TIM_Base_MspInit+0x40>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_TIM_Base_MspInit+0x40>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <HAL_TIM_Base_MspInit+0x40>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40010000 	.word	0x40010000
 80017b4:	40023800 	.word	0x40023800

080017b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <MX_USART2_UART_Init+0x50>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017f0:	f003 fa0e 	bl	8004c10 <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017fa:	f7ff fef5 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000148 	.word	0x20000148
 8001808:	40004400 	.word	0x40004400

0800180c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a19      	ldr	r2, [pc, #100]	; (8001890 <HAL_UART_MspInit+0x84>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d12b      	bne.n	8001886 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_UART_MspInit+0x88>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a17      	ldr	r2, [pc, #92]	; (8001894 <HAL_UART_MspInit+0x88>)
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_UART_MspInit+0x88>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_UART_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_UART_MspInit+0x88>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_UART_MspInit+0x88>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001866:	230c      	movs	r3, #12
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001876:	2307      	movs	r3, #7
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_UART_MspInit+0x8c>)
 8001882:	f001 f8a3 	bl	80029cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	; 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40004400 	.word	0x40004400
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000

0800189c <_ZN8ICM20948Ut_C1Ev>:
		SENS_500,
		SENS_1000,
		SENS_2000,
	};

	const struct{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2206      	movs	r2, #6
 80018ae:	705a      	strb	r2, [r3, #1]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2207      	movs	r2, #7
 80018b4:	709a      	strb	r2, [r3, #2]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	220f      	movs	r2, #15
 80018ba:	70da      	strb	r2, [r3, #3]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	227f      	movs	r2, #127	; 0x7f
 80018c0:	711a      	strb	r2, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2214      	movs	r2, #20
 80018c6:	715a      	strb	r2, [r3, #5]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	719a      	strb	r2, [r3, #6]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2211      	movs	r2, #17
 80018d2:	71da      	strb	r2, [r3, #7]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE>:

	enum class Address:uint8_t{
		LOW=0x68,
		HIGH=0x69,
	};
	ICM20948(I2C_HandleTypeDef *hi2c,Address address)
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	71fb      	strb	r3, [r7, #7]
			:hi2c(hi2c),address(address){};
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ffd1 	bl	800189c <_ZN8ICM20948Ut_C1Ev>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	79fa      	ldrb	r2, [r7, #7]
 8001904:	731a      	strb	r2, [r3, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4a09      	ldr	r2, [pc, #36]	; (8001930 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE+0x4c>)
 800190a:	f103 0410 	add.w	r4, r3, #16
 800190e:	4613      	mov	r3, r2
 8001910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE+0x50>)
 800191a:	f103 0420 	add.w	r4, r3, #32
 800191e:	4613      	mov	r3, r2
 8001920:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001922:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	080068a8 	.word	0x080068a8
 8001934:	080068b8 	.word	0x080068b8

08001938 <_ZN13TIM_StopWatchC1EP17TIM_HandleTypeDefm>:

#include "main.h"

class TIM_StopWatch {
public:
	TIM_StopWatch(TIM_HandleTypeDef *htim=nullptr, uint32_t frequence = 1000000)
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
	:htim(htim),
	 frequence(frequence)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	741a      	strb	r2, [r3, #16]
	{
	}
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	ed87 0a01 	vstr	s0, [r7, #4]
 800197a:	ed97 0a01 	vldr	s0, [r7, #4]
 800197e:	f003 fd17 	bl	80053b0 <asinf>
 8001982:	eef0 7a40 	vmov.f32	s15, s0
 8001986:	eeb0 0a67 	vmov.f32	s0, s15
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <init>:
quaternion qDot;
const float beta=std::sqrt(3/4.0)*M_PI*(5.0/180.0);

/* Variable End */

void init(void){
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
   stopwatch.start();
 8001996:	4825      	ldr	r0, [pc, #148]	; (8001a2c <init+0x9c>)
 8001998:	f003 fbfc 	bl	8005194 <_ZN13TIM_StopWatch5startEv>
	if(icm20948.whoami() == 0xea){
 800199c:	4824      	ldr	r0, [pc, #144]	; (8001a30 <init+0xa0>)
 800199e:	f7ff fa59 	bl	8000e54 <_ZN8ICM209486whoamiEv>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2bea      	cmp	r3, #234	; 0xea
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <init+0x2c>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	2120      	movs	r1, #32
 80019b6:	481f      	ldr	r0, [pc, #124]	; (8001a34 <init+0xa4>)
 80019b8:	f001 f98c 	bl	8002cd4 <HAL_GPIO_WritePin>
	}
	int result = icm20948.whoami();
 80019bc:	481c      	ldr	r0, [pc, #112]	; (8001a30 <init+0xa0>)
 80019be:	f7ff fa49 	bl	8000e54 <_ZN8ICM209486whoamiEv>
 80019c2:	4603      	mov	r3, r0
 80019c4:	607b      	str	r3, [r7, #4]
//		    result=whoami();
		    if(result==0xea){
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2bea      	cmp	r3, #234	; 0xea
 80019ca:	d12b      	bne.n	8001a24 <init+0x94>
//		        printf("ICM20948 confirm\n");
		    	icm20948.reset();
 80019cc:	4818      	ldr	r0, [pc, #96]	; (8001a30 <init+0xa0>)
 80019ce:	f7ff fa9f 	bl	8000f10 <_ZN8ICM209485resetEv>
		    	icm20948.pwrmgmt2(ICM20948_DISABLE_SENSORS);
 80019d2:	213f      	movs	r1, #63	; 0x3f
 80019d4:	4816      	ldr	r0, [pc, #88]	; (8001a30 <init+0xa0>)
 80019d6:	f7ff fa7c 	bl	8000ed2 <_ZN8ICM209488pwrmgmt2Eh>
		    	icm20948.accelConfig(ICM20948::AccelSensitivity::SENS_2G,false,0);
 80019da:	2300      	movs	r3, #0
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	4813      	ldr	r0, [pc, #76]	; (8001a30 <init+0xa0>)
 80019e2:	f7ff faed 	bl	8000fc0 <_ZN8ICM2094811accelConfigENS_16AccelSensitivityEbh>
		    	icm20948.gyroConfig(ICM20948::GyroSensitivity::SENS_500, false, 0);
 80019e6:	2300      	movs	r3, #0
 80019e8:	2200      	movs	r2, #0
 80019ea:	2101      	movs	r1, #1
 80019ec:	4810      	ldr	r0, [pc, #64]	; (8001a30 <init+0xa0>)
 80019ee:	f7ff fb39 	bl	8001064 <_ZN8ICM2094810gyroConfigENS_15GyroSensitivityEbh>
		    	icm20948.pwrmgmt2(ICM20948_ENABLE_SENSORS);
 80019f2:	2100      	movs	r1, #0
 80019f4:	480e      	ldr	r0, [pc, #56]	; (8001a30 <init+0xa0>)
 80019f6:	f7ff fa6c 	bl	8000ed2 <_ZN8ICM209488pwrmgmt2Eh>
		    	icm20948.intPinConfig(0b01110000);
 80019fa:	2170      	movs	r1, #112	; 0x70
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <init+0xa0>)
 80019fe:	f7ff fc21 	bl	8001244 <_ZN8ICM2094812intPinConfigEh>
		    	icm20948.intenable();
 8001a02:	2101      	movs	r1, #1
 8001a04:	480a      	ldr	r0, [pc, #40]	; (8001a30 <init+0xa0>)
 8001a06:	f7ff fc3b 	bl	8001280 <_ZN8ICM209489intenableEh>

		        HAL_Delay(100);
 8001a0a:	2064      	movs	r0, #100	; 0x64
 8001a0c:	f000 fea8 	bl	8002760 <HAL_Delay>
//		        printf("initialized\n");

		        icm20948.changeUserBank(2);
 8001a10:	2102      	movs	r1, #2
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <init+0xa0>)
 8001a14:	f7ff faa9 	bl	8000f6a <_ZN8ICM2094814changeUserBankEh>
		        uint8_t buffer2=0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	70fb      	strb	r3, [r7, #3]
		        //HAL_I2C_Mem_Read(&hi2c1, 0x68<<1,ICM20948::REGISTER.ACCEL_CONFIG,1,&buffer2,1,1000);
		        icm20948.changeUserBank(0);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4804      	ldr	r0, [pc, #16]	; (8001a30 <init+0xa0>)
 8001a20:	f7ff faa3 	bl	8000f6a <_ZN8ICM2094814changeUserBankEh>
		    }


}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200001c8 	.word	0x200001c8
 8001a30:	2000018c 	.word	0x2000018c
 8001a34:	40020000 	.word	0x40020000

08001a38 <loop>:

void loop(void){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
stopwatch.update();
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <loop+0x10>)
 8001a3e:	f003 fbbc 	bl	80051ba <_ZN13TIM_StopWatch6updateEv>
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200001c8 	.word	0x200001c8

08001a4c <HAL_GPIO_EXTI_Callback>:

float gyro;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a50:	ed2d 8b02 	vpush	{d8}
 8001a54:	b08a      	sub	sp, #40	; 0x28
 8001a56:	af04      	add	r7, sp, #16
 8001a58:	4603      	mov	r3, r0
 8001a5a:	80fb      	strh	r3, [r7, #6]
//	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
	if (GPIO_Pin == GPIO_PIN_11){
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a62:	f040 8540 	bne.w	80024e6 <HAL_GPIO_EXTI_Callback+0xa9a>
//		float fSize=0;
//		quaternion qDot;
//		const float beta=std::sqrt(3/4.0)*M_PI*(5.0/180.0);


		preTime=time;
 8001a66:	4bd9      	ldr	r3, [pc, #868]	; (8001dcc <HAL_GPIO_EXTI_Callback+0x380>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4ad9      	ldr	r2, [pc, #868]	; (8001dd0 <HAL_GPIO_EXTI_Callback+0x384>)
 8001a6c:	6013      	str	r3, [r2, #0]
		stopwatch.update();
 8001a6e:	48d9      	ldr	r0, [pc, #868]	; (8001dd4 <HAL_GPIO_EXTI_Callback+0x388>)
 8001a70:	f003 fba3 	bl	80051ba <_ZN13TIM_StopWatch6updateEv>
		time=stopwatch.getTimeMS();
 8001a74:	48d7      	ldr	r0, [pc, #860]	; (8001dd4 <HAL_GPIO_EXTI_Callback+0x388>)
 8001a76:	f003 fbdd 	bl	8005234 <_ZN13TIM_StopWatch9getTimeMSEv>
 8001a7a:	eef0 7a40 	vmov.f32	s15, s0
 8001a7e:	4bd3      	ldr	r3, [pc, #844]	; (8001dcc <HAL_GPIO_EXTI_Callback+0x380>)
 8001a80:	edc3 7a00 	vstr	s15, [r3]
		stepTime=time-preTime;
 8001a84:	4bd1      	ldr	r3, [pc, #836]	; (8001dcc <HAL_GPIO_EXTI_Callback+0x380>)
 8001a86:	ed93 7a00 	vldr	s14, [r3]
 8001a8a:	4bd1      	ldr	r3, [pc, #836]	; (8001dd0 <HAL_GPIO_EXTI_Callback+0x384>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a94:	4bd0      	ldr	r3, [pc, #832]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x38c>)
 8001a96:	edc3 7a00 	vstr	s15, [r3]

		icm20948.get6ValueBurst(accelValue, gyroValue);
 8001a9a:	4ad0      	ldr	r2, [pc, #832]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x390>)
 8001a9c:	49d0      	ldr	r1, [pc, #832]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x394>)
 8001a9e:	48d1      	ldr	r0, [pc, #836]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x398>)
 8001aa0:	f7ff fb30 	bl	8001104 <_ZN8ICM2094814get6ValueBurstERSt5arrayIfLj3EES2_>
		float accelSize=std::sqrt(std::pow(accelValue[0],2)+std::pow(accelValue[1],2)+std::pow(accelValue[2],2));
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	48ce      	ldr	r0, [pc, #824]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x394>)
 8001aa8:	f7ff fc08 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001aac:	4603      	mov	r3, r0
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab8:	f000 fd28 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001abc:	ec55 4b10 	vmov	r4, r5, d0
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	48c7      	ldr	r0, [pc, #796]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x394>)
 8001ac4:	f7ff fbfa 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	2002      	movs	r0, #2
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	f000 fd1a 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ad8:	ec53 2b10 	vmov	r2, r3, d0
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fb80 	bl	80001e4 <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4614      	mov	r4, r2
 8001aea:	461d      	mov	r5, r3
 8001aec:	2102      	movs	r1, #2
 8001aee:	48bc      	ldr	r0, [pc, #752]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x394>)
 8001af0:	f7ff fbe4 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001af4:	4603      	mov	r3, r0
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	2002      	movs	r0, #2
 8001afc:	eeb0 0a67 	vmov.f32	s0, s15
 8001b00:	f000 fd04 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b04:	ec53 2b10 	vmov	r2, r3, d0
 8001b08:	4620      	mov	r0, r4
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	f7fe fb6a 	bl	80001e4 <__adddf3>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	ec43 2b17 	vmov	d7, r2, r3
 8001b18:	eeb0 0a47 	vmov.f32	s0, s14
 8001b1c:	eef0 0a67 	vmov.f32	s1, s15
 8001b20:	f003 fc1a 	bl	8005358 <sqrt>
 8001b24:	ec53 2b10 	vmov	r2, r3, d0
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7fe ffc0 	bl	8000ab0 <__aeabi_d2f>
 8001b30:	4603      	mov	r3, r0
 8001b32:	613b      	str	r3, [r7, #16]
		if(accelSize!=0){
 8001b34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b40:	d026      	beq.n	8001b90 <HAL_GPIO_EXTI_Callback+0x144>
		accelValue[0]/=accelSize;
 8001b42:	2100      	movs	r1, #0
 8001b44:	48a6      	ldr	r0, [pc, #664]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x394>)
 8001b46:	f7ff fbb9 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	edd3 6a00 	vldr	s13, [r3]
 8001b50:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b58:	edc3 7a00 	vstr	s15, [r3]
		accelValue[1]/=accelSize;
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	48a0      	ldr	r0, [pc, #640]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x394>)
 8001b60:	f7ff fbac 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001b64:	4603      	mov	r3, r0
 8001b66:	edd3 6a00 	vldr	s13, [r3]
 8001b6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b72:	edc3 7a00 	vstr	s15, [r3]
		accelValue[2]/=accelSize;
 8001b76:	2102      	movs	r1, #2
 8001b78:	4899      	ldr	r0, [pc, #612]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x394>)
 8001b7a:	f7ff fb9f 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	edd3 6a00 	vldr	s13, [r3]
 8001b84:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b8c:	edc3 7a00 	vstr	s15, [r3]
		}

		gyro=accelValue[0];
 8001b90:	2100      	movs	r1, #0
 8001b92:	4893      	ldr	r0, [pc, #588]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x394>)
 8001b94:	f7ff fb92 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a92      	ldr	r2, [pc, #584]	; (8001de8 <HAL_GPIO_EXTI_Callback+0x39c>)
 8001b9e:	6013      	str	r3, [r2, #0]

		qDotOmega[0]=1/2.0*(-preAttitude[1]*gyroValue[0]-preAttitude[2]*gyroValue[1]-preAttitude[3]*gyroValue[2]);
 8001ba0:	4b92      	ldr	r3, [pc, #584]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001ba2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ba6:	eeb1 8a67 	vneg.f32	s16, s15
 8001baa:	2100      	movs	r1, #0
 8001bac:	488b      	ldr	r0, [pc, #556]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x390>)
 8001bae:	f7ff fb85 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001bbc:	4b8b      	ldr	r3, [pc, #556]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001bbe:	edd3 8a02 	vldr	s17, [r3, #8]
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4885      	ldr	r0, [pc, #532]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x390>)
 8001bc6:	f7ff fb79 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001bd4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001bd8:	4b84      	ldr	r3, [pc, #528]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001bda:	edd3 8a03 	vldr	s17, [r3, #12]
 8001bde:	2102      	movs	r1, #2
 8001be0:	487e      	ldr	r0, [pc, #504]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x390>)
 8001be2:	f7ff fb6b 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001be6:	4603      	mov	r3, r0
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001bf0:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001bf4:	ee17 0a90 	vmov	r0, s15
 8001bf8:	f7fe fc52 	bl	80004a0 <__aeabi_f2d>
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b7b      	ldr	r3, [pc, #492]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001c02:	f7fe fca5 	bl	8000550 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe ff4f 	bl	8000ab0 <__aeabi_d2f>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4a77      	ldr	r2, [pc, #476]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x3a8>)
 8001c16:	6013      	str	r3, [r2, #0]
		qDotOmega[1]=1/2.0*(preAttitude[0]*gyroValue[0]+preAttitude[2]*gyroValue[2]-preAttitude[3]*gyroValue[1]);
 8001c18:	4b74      	ldr	r3, [pc, #464]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001c1a:	ed93 8a00 	vldr	s16, [r3]
 8001c1e:	2100      	movs	r1, #0
 8001c20:	486e      	ldr	r0, [pc, #440]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x390>)
 8001c22:	f7ff fb4b 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001c26:	4603      	mov	r3, r0
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001c30:	4b6e      	ldr	r3, [pc, #440]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001c32:	edd3 8a02 	vldr	s17, [r3, #8]
 8001c36:	2102      	movs	r1, #2
 8001c38:	4868      	ldr	r0, [pc, #416]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x390>)
 8001c3a:	f7ff fb3f 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001c48:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001c4c:	4b67      	ldr	r3, [pc, #412]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001c4e:	edd3 8a03 	vldr	s17, [r3, #12]
 8001c52:	2101      	movs	r1, #1
 8001c54:	4861      	ldr	r0, [pc, #388]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x390>)
 8001c56:	f7ff fb31 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001c64:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001c68:	ee17 0a90 	vmov	r0, s15
 8001c6c:	f7fe fc18 	bl	80004a0 <__aeabi_f2d>
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	4b5e      	ldr	r3, [pc, #376]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001c76:	f7fe fc6b 	bl	8000550 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f7fe ff15 	bl	8000ab0 <__aeabi_d2f>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4a5a      	ldr	r2, [pc, #360]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x3a8>)
 8001c8a:	6053      	str	r3, [r2, #4]
		qDotOmega[2]=1/2.0*(preAttitude[0]*gyroValue[1]-preAttitude[1]*gyroValue[2]+preAttitude[3]*gyroValue[0]);
 8001c8c:	4b57      	ldr	r3, [pc, #348]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001c8e:	ed93 8a00 	vldr	s16, [r3]
 8001c92:	2101      	movs	r1, #1
 8001c94:	4851      	ldr	r0, [pc, #324]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x390>)
 8001c96:	f7ff fb11 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001ca4:	4b51      	ldr	r3, [pc, #324]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001ca6:	edd3 8a01 	vldr	s17, [r3, #4]
 8001caa:	2102      	movs	r1, #2
 8001cac:	484b      	ldr	r0, [pc, #300]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x390>)
 8001cae:	f7ff fb05 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001cbc:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001cc0:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001cc2:	edd3 8a03 	vldr	s17, [r3, #12]
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4844      	ldr	r0, [pc, #272]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x390>)
 8001cca:	f7ff faf7 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001cd8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001cdc:	ee17 0a90 	vmov	r0, s15
 8001ce0:	f7fe fbde 	bl	80004a0 <__aeabi_f2d>
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001cea:	f7fe fc31 	bl	8000550 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7fe fedb 	bl	8000ab0 <__aeabi_d2f>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a3d      	ldr	r2, [pc, #244]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x3a8>)
 8001cfe:	6093      	str	r3, [r2, #8]
		qDotOmega[3]=1/2.0*(preAttitude[0]*gyroValue[2]+preAttitude[1]*gyroValue[1]-preAttitude[2]*gyroValue[0]);
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001d02:	ed93 8a00 	vldr	s16, [r3]
 8001d06:	2102      	movs	r1, #2
 8001d08:	4834      	ldr	r0, [pc, #208]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x390>)
 8001d0a:	f7ff fad7 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001d18:	4b34      	ldr	r3, [pc, #208]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001d1a:	edd3 8a01 	vldr	s17, [r3, #4]
 8001d1e:	2101      	movs	r1, #1
 8001d20:	482e      	ldr	r0, [pc, #184]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x390>)
 8001d22:	f7ff facb 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001d26:	4603      	mov	r3, r0
 8001d28:	edd3 7a00 	vldr	s15, [r3]
 8001d2c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001d30:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001d34:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001d36:	edd3 8a02 	vldr	s17, [r3, #8]
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4827      	ldr	r0, [pc, #156]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x390>)
 8001d3e:	f7ff fabd 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001d42:	4603      	mov	r3, r0
 8001d44:	edd3 7a00 	vldr	s15, [r3]
 8001d48:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001d4c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001d50:	ee17 0a90 	vmov	r0, s15
 8001d54:	f7fe fba4 	bl	80004a0 <__aeabi_f2d>
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001d5e:	f7fe fbf7 	bl	8000550 <__aeabi_dmul>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe fea1 	bl	8000ab0 <__aeabi_d2f>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4a20      	ldr	r2, [pc, #128]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x3a8>)
 8001d72:	60d3      	str	r3, [r2, #12]

		f[0]=2*(preAttitude[1]*preAttitude[3]-preAttitude[0]*preAttitude[2])-accelValue[0];
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001d76:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001d7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001d86:	edd3 6a00 	vldr	s13, [r3]
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001d8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d98:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4810      	ldr	r0, [pc, #64]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x394>)
 8001da0:	f7ff fa8c 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001da4:	4603      	mov	r3, r0
 8001da6:	ed93 8a00 	vldr	s16, [r3]
 8001daa:	2100      	movs	r1, #0
 8001dac:	4812      	ldr	r0, [pc, #72]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x3ac>)
 8001dae:	f7ff fa85 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001db2:	4603      	mov	r3, r0
 8001db4:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8001db8:	edc3 7a00 	vstr	s15, [r3]
		f[1]=2*(preAttitude[0]*preAttitude[1]+preAttitude[2]*preAttitude[3]-accelValue[1]);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001dbe:	ed93 7a00 	vldr	s14, [r3]
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001dc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dc8:	e018      	b.n	8001dfc <HAL_GPIO_EXTI_Callback+0x3b0>
 8001dca:	bf00      	nop
 8001dcc:	200001c0 	.word	0x200001c0
 8001dd0:	200001bc 	.word	0x200001bc
 8001dd4:	200001c8 	.word	0x200001c8
 8001dd8:	200001c4 	.word	0x200001c4
 8001ddc:	200001e8 	.word	0x200001e8
 8001de0:	200001dc 	.word	0x200001dc
 8001de4:	2000018c 	.word	0x2000018c
 8001de8:	20000270 	.word	0x20000270
 8001dec:	20000004 	.word	0x20000004
 8001df0:	3fe00000 	.word	0x3fe00000
 8001df4:	20000200 	.word	0x20000200
 8001df8:	20000210 	.word	0x20000210
 8001dfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e00:	4bba      	ldr	r3, [pc, #744]	; (80020ec <HAL_GPIO_EXTI_Callback+0x6a0>)
 8001e02:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e06:	4bb9      	ldr	r3, [pc, #740]	; (80020ec <HAL_GPIO_EXTI_Callback+0x6a0>)
 8001e08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e10:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001e14:	2101      	movs	r1, #1
 8001e16:	48b6      	ldr	r0, [pc, #728]	; (80020f0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8001e18:	f7ff fa50 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001e26:	2101      	movs	r1, #1
 8001e28:	48b2      	ldr	r0, [pc, #712]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8001e2a:	f7ff fa47 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	ee78 7a08 	vadd.f32	s15, s16, s16
 8001e34:	edc3 7a00 	vstr	s15, [r3]
		f[2]=2*(1/2.0-std::pow(preAttitude[1],2)-std::pow(preAttitude[2],2))-accelValue[2];
 8001e38:	4bac      	ldr	r3, [pc, #688]	; (80020ec <HAL_GPIO_EXTI_Callback+0x6a0>)
 8001e3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e3e:	2002      	movs	r0, #2
 8001e40:	eeb0 0a67 	vmov.f32	s0, s15
 8001e44:	f000 fb62 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001e48:	ec53 2b10 	vmov	r2, r3, d0
 8001e4c:	f04f 0000 	mov.w	r0, #0
 8001e50:	49a9      	ldr	r1, [pc, #676]	; (80020f8 <HAL_GPIO_EXTI_Callback+0x6ac>)
 8001e52:	f7fe f9c5 	bl	80001e0 <__aeabi_dsub>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4614      	mov	r4, r2
 8001e5c:	461d      	mov	r5, r3
 8001e5e:	4ba3      	ldr	r3, [pc, #652]	; (80020ec <HAL_GPIO_EXTI_Callback+0x6a0>)
 8001e60:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e64:	2002      	movs	r0, #2
 8001e66:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6a:	f000 fb4f 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001e6e:	ec53 2b10 	vmov	r2, r3, d0
 8001e72:	4620      	mov	r0, r4
 8001e74:	4629      	mov	r1, r5
 8001e76:	f7fe f9b3 	bl	80001e0 <__aeabi_dsub>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	f7fe f9ad 	bl	80001e4 <__adddf3>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4614      	mov	r4, r2
 8001e90:	461d      	mov	r5, r3
 8001e92:	2102      	movs	r1, #2
 8001e94:	4896      	ldr	r0, [pc, #600]	; (80020f0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8001e96:	f7ff fa11 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fafe 	bl	80004a0 <__aeabi_f2d>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	4629      	mov	r1, r5
 8001eac:	f7fe f998 	bl	80001e0 <__aeabi_dsub>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4690      	mov	r8, r2
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	2102      	movs	r1, #2
 8001eba:	488e      	ldr	r0, [pc, #568]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8001ebc:	f7ff f9fe 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001ec0:	4604      	mov	r4, r0
 8001ec2:	4640      	mov	r0, r8
 8001ec4:	4649      	mov	r1, r9
 8001ec6:	f7fe fdf3 	bl	8000ab0 <__aeabi_d2f>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6023      	str	r3, [r4, #0]

		j[0]= {-2*preAttitude[2], 2*preAttitude[1],0};
 8001ece:	2100      	movs	r1, #0
 8001ed0:	488a      	ldr	r0, [pc, #552]	; (80020fc <HAL_GPIO_EXTI_Callback+0x6b0>)
 8001ed2:	f000 fb3c 	bl	800254e <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4a84      	ldr	r2, [pc, #528]	; (80020ec <HAL_GPIO_EXTI_Callback+0x6a0>)
 8001eda:	edd2 7a02 	vldr	s15, [r2, #8]
 8001ede:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001ee2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ee6:	4a81      	ldr	r2, [pc, #516]	; (80020ec <HAL_GPIO_EXTI_Callback+0x6a0>)
 8001ee8:	edd2 7a01 	vldr	s15, [r2, #4]
 8001eec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ef0:	ed83 7a00 	vstr	s14, [r3]
 8001ef4:	edc3 7a01 	vstr	s15, [r3, #4]
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
		j[1]=  {2*preAttitude[3],2*preAttitude[0],-4*preAttitude[1]};
 8001efe:	2101      	movs	r1, #1
 8001f00:	487e      	ldr	r0, [pc, #504]	; (80020fc <HAL_GPIO_EXTI_Callback+0x6b0>)
 8001f02:	f000 fb24 	bl	800254e <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4a78      	ldr	r2, [pc, #480]	; (80020ec <HAL_GPIO_EXTI_Callback+0x6a0>)
 8001f0a:	edd2 7a03 	vldr	s15, [r2, #12]
 8001f0e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f12:	4a76      	ldr	r2, [pc, #472]	; (80020ec <HAL_GPIO_EXTI_Callback+0x6a0>)
 8001f14:	edd2 7a00 	vldr	s15, [r2]
 8001f18:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f1c:	4a73      	ldr	r2, [pc, #460]	; (80020ec <HAL_GPIO_EXTI_Callback+0x6a0>)
 8001f1e:	edd2 7a01 	vldr	s15, [r2, #4]
 8001f22:	eeb9 6a00 	vmov.f32	s12, #144	; 0xc0800000 -4.0
 8001f26:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001f2a:	edc3 6a00 	vstr	s13, [r3]
 8001f2e:	ed83 7a01 	vstr	s14, [r3, #4]
 8001f32:	edc3 7a02 	vstr	s15, [r3, #8]
		j[2]=  {-2*preAttitude[0],2*preAttitude[3],-4*preAttitude[2]};
 8001f36:	2102      	movs	r1, #2
 8001f38:	4870      	ldr	r0, [pc, #448]	; (80020fc <HAL_GPIO_EXTI_Callback+0x6b0>)
 8001f3a:	f000 fb08 	bl	800254e <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4a6a      	ldr	r2, [pc, #424]	; (80020ec <HAL_GPIO_EXTI_Callback+0x6a0>)
 8001f42:	edd2 7a00 	vldr	s15, [r2]
 8001f46:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001f4a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001f4e:	4a67      	ldr	r2, [pc, #412]	; (80020ec <HAL_GPIO_EXTI_Callback+0x6a0>)
 8001f50:	edd2 7a03 	vldr	s15, [r2, #12]
 8001f54:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f58:	4a64      	ldr	r2, [pc, #400]	; (80020ec <HAL_GPIO_EXTI_Callback+0x6a0>)
 8001f5a:	edd2 7a02 	vldr	s15, [r2, #8]
 8001f5e:	eeb9 6a00 	vmov.f32	s12, #144	; 0xc0800000 -4.0
 8001f62:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001f66:	edc3 6a00 	vstr	s13, [r3]
 8001f6a:	ed83 7a01 	vstr	s14, [r3, #4]
 8001f6e:	edc3 7a02 	vstr	s15, [r3, #8]
		j[3]=  {2*preAttitude[1],2*preAttitude[2],0};
 8001f72:	2103      	movs	r1, #3
 8001f74:	4861      	ldr	r0, [pc, #388]	; (80020fc <HAL_GPIO_EXTI_Callback+0x6b0>)
 8001f76:	f000 faea 	bl	800254e <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4a5b      	ldr	r2, [pc, #364]	; (80020ec <HAL_GPIO_EXTI_Callback+0x6a0>)
 8001f7e:	edd2 7a01 	vldr	s15, [r2, #4]
 8001f82:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f86:	4a59      	ldr	r2, [pc, #356]	; (80020ec <HAL_GPIO_EXTI_Callback+0x6a0>)
 8001f88:	edd2 7a02 	vldr	s15, [r2, #8]
 8001f8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f90:	ed83 7a00 	vstr	s14, [r3]
 8001f94:	edc3 7a01 	vstr	s15, [r3, #4]
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]

		 for(uint8_t n=0;n<4;n++){
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	75fb      	strb	r3, [r7, #23]
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d839      	bhi.n	800201c <HAL_GPIO_EXTI_Callback+0x5d0>
			 qDotEpsilon[n]=0;
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	4a55      	ldr	r2, [pc, #340]	; (8002100 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
			 for(uint8_t m=0;m<3;m++){
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	75bb      	strb	r3, [r7, #22]
 8001fba:	7dbb      	ldrb	r3, [r7, #22]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d829      	bhi.n	8002014 <HAL_GPIO_EXTI_Callback+0x5c8>
				 qDotEpsilon[n]+= j[n][m]*f[m];
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	484d      	ldr	r0, [pc, #308]	; (80020fc <HAL_GPIO_EXTI_Callback+0x6b0>)
 8001fc6:	f000 fac2 	bl	800254e <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	7dbb      	ldrb	r3, [r7, #22]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	f7ff f973 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	ed93 8a00 	vldr	s16, [r3]
 8001fdc:	7dbb      	ldrb	r3, [r7, #22]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4844      	ldr	r0, [pc, #272]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8001fe2:	f7ff f96b 	bl	80012bc <_ZNSt5arrayIfLj3EEixEj>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
 8001ff2:	4a43      	ldr	r2, [pc, #268]	; (8002100 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	7dfb      	ldrb	r3, [r7, #23]
 8001ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002002:	4a3f      	ldr	r2, [pc, #252]	; (8002100 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	edc3 7a00 	vstr	s15, [r3]
			 for(uint8_t m=0;m<3;m++){
 800200c:	7dbb      	ldrb	r3, [r7, #22]
 800200e:	3301      	adds	r3, #1
 8002010:	75bb      	strb	r3, [r7, #22]
 8002012:	e7d2      	b.n	8001fba <HAL_GPIO_EXTI_Callback+0x56e>
		 for(uint8_t n=0;n<4;n++){
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	3301      	adds	r3, #1
 8002018:	75fb      	strb	r3, [r7, #23]
 800201a:	e7c2      	b.n	8001fa2 <HAL_GPIO_EXTI_Callback+0x556>
			 }
		 }

		 fSize=std::sqrt(std::pow(qDotEpsilon[0],2)+std::pow(qDotEpsilon[1],2)+std::pow(qDotEpsilon[2],2)+std::pow(qDotEpsilon[3],2));
 800201c:	4b38      	ldr	r3, [pc, #224]	; (8002100 <HAL_GPIO_EXTI_Callback+0x6b4>)
 800201e:	edd3 7a00 	vldr	s15, [r3]
 8002022:	2002      	movs	r0, #2
 8002024:	eeb0 0a67 	vmov.f32	s0, s15
 8002028:	f000 fa70 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800202c:	ec55 4b10 	vmov	r4, r5, d0
 8002030:	4b33      	ldr	r3, [pc, #204]	; (8002100 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8002032:	edd3 7a01 	vldr	s15, [r3, #4]
 8002036:	2002      	movs	r0, #2
 8002038:	eeb0 0a67 	vmov.f32	s0, s15
 800203c:	f000 fa66 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002040:	ec53 2b10 	vmov	r2, r3, d0
 8002044:	4620      	mov	r0, r4
 8002046:	4629      	mov	r1, r5
 8002048:	f7fe f8cc 	bl	80001e4 <__adddf3>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4614      	mov	r4, r2
 8002052:	461d      	mov	r5, r3
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_GPIO_EXTI_Callback+0x6b4>)
 8002056:	edd3 7a02 	vldr	s15, [r3, #8]
 800205a:	2002      	movs	r0, #2
 800205c:	eeb0 0a67 	vmov.f32	s0, s15
 8002060:	f000 fa54 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002064:	ec53 2b10 	vmov	r2, r3, d0
 8002068:	4620      	mov	r0, r4
 800206a:	4629      	mov	r1, r5
 800206c:	f7fe f8ba 	bl	80001e4 <__adddf3>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4614      	mov	r4, r2
 8002076:	461d      	mov	r5, r3
 8002078:	4b21      	ldr	r3, [pc, #132]	; (8002100 <HAL_GPIO_EXTI_Callback+0x6b4>)
 800207a:	edd3 7a03 	vldr	s15, [r3, #12]
 800207e:	2002      	movs	r0, #2
 8002080:	eeb0 0a67 	vmov.f32	s0, s15
 8002084:	f000 fa42 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002088:	ec53 2b10 	vmov	r2, r3, d0
 800208c:	4620      	mov	r0, r4
 800208e:	4629      	mov	r1, r5
 8002090:	f7fe f8a8 	bl	80001e4 <__adddf3>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	ec43 2b17 	vmov	d7, r2, r3
 800209c:	eeb0 0a47 	vmov.f32	s0, s14
 80020a0:	eef0 0a67 	vmov.f32	s1, s15
 80020a4:	f003 f958 	bl	8005358 <sqrt>
 80020a8:	ec53 2b10 	vmov	r2, r3, d0
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f7fe fcfe 	bl	8000ab0 <__aeabi_d2f>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a13      	ldr	r2, [pc, #76]	; (8002104 <HAL_GPIO_EXTI_Callback+0x6b8>)
 80020b8:	6013      	str	r3, [r2, #0]

		 for(uint8_t n=0;n<4;n++){
 80020ba:	2300      	movs	r3, #0
 80020bc:	757b      	strb	r3, [r7, #21]
 80020be:	7d7b      	ldrb	r3, [r7, #21]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	f200 8093 	bhi.w	80021ec <HAL_GPIO_EXTI_Callback+0x7a0>
			 if(fSize==0){
 80020c6:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HAL_GPIO_EXTI_Callback+0x6b8>)
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d4:	d11c      	bne.n	8002110 <HAL_GPIO_EXTI_Callback+0x6c4>
				 qDot[n]=qDotOmega[n];
 80020d6:	7d7a      	ldrb	r2, [r7, #21]
 80020d8:	7d7b      	ldrb	r3, [r7, #21]
 80020da:	490b      	ldr	r1, [pc, #44]	; (8002108 <HAL_GPIO_EXTI_Callback+0x6bc>)
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	440a      	add	r2, r1
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	490a      	ldr	r1, [pc, #40]	; (800210c <HAL_GPIO_EXTI_Callback+0x6c0>)
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	e02e      	b.n	800214a <HAL_GPIO_EXTI_Callback+0x6fe>
 80020ec:	20000004 	.word	0x20000004
 80020f0:	200001dc 	.word	0x200001dc
 80020f4:	20000210 	.word	0x20000210
 80020f8:	3fe00000 	.word	0x3fe00000
 80020fc:	2000021c 	.word	0x2000021c
 8002100:	2000024c 	.word	0x2000024c
 8002104:	2000025c 	.word	0x2000025c
 8002108:	20000200 	.word	0x20000200
 800210c:	20000260 	.word	0x20000260
			 }else{
				 qDot[n]=qDotOmega[n]-beta*qDotEpsilon[n]/fSize;
 8002110:	7d7b      	ldrb	r3, [r7, #21]
 8002112:	4a2d      	ldr	r2, [pc, #180]	; (80021c8 <HAL_GPIO_EXTI_Callback+0x77c>)
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	ed93 7a00 	vldr	s14, [r3]
 800211c:	7d7b      	ldrb	r3, [r7, #21]
 800211e:	4a2b      	ldr	r2, [pc, #172]	; (80021cc <HAL_GPIO_EXTI_Callback+0x780>)
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	eddf 6a29 	vldr	s13, [pc, #164]	; 80021d0 <HAL_GPIO_EXTI_Callback+0x784>
 800212c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8002130:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x788>)
 8002132:	edd3 6a00 	vldr	s13, [r3]
 8002136:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800213a:	7d7b      	ldrb	r3, [r7, #21]
 800213c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002140:	4a25      	ldr	r2, [pc, #148]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x78c>)
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	edc3 7a00 	vstr	s15, [r3]
			 }

			 attitude[n]=preAttitude[n]+qDot[n]*stepTime/1000.0;
 800214a:	7d7b      	ldrb	r3, [r7, #21]
 800214c:	4a23      	ldr	r2, [pc, #140]	; (80021dc <HAL_GPIO_EXTI_Callback+0x790>)
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f9a3 	bl	80004a0 <__aeabi_f2d>
 800215a:	4604      	mov	r4, r0
 800215c:	460d      	mov	r5, r1
 800215e:	7d7b      	ldrb	r3, [r7, #21]
 8002160:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x78c>)
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	ed93 7a00 	vldr	s14, [r3]
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_GPIO_EXTI_Callback+0x794>)
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002174:	ee17 0a90 	vmov	r0, s15
 8002178:	f7fe f992 	bl	80004a0 <__aeabi_f2d>
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HAL_GPIO_EXTI_Callback+0x798>)
 8002182:	f7fe fb0f 	bl	80007a4 <__aeabi_ddiv>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4620      	mov	r0, r4
 800218c:	4629      	mov	r1, r5
 800218e:	f7fe f829 	bl	80001e4 <__adddf3>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	7d7c      	ldrb	r4, [r7, #21]
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	f7fe fc88 	bl	8000ab0 <__aeabi_d2f>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4911      	ldr	r1, [pc, #68]	; (80021e8 <HAL_GPIO_EXTI_Callback+0x79c>)
 80021a4:	00a3      	lsls	r3, r4, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	601a      	str	r2, [r3, #0]
			 preAttitude[n]=attitude[n];
 80021aa:	7d7a      	ldrb	r2, [r7, #21]
 80021ac:	7d7b      	ldrb	r3, [r7, #21]
 80021ae:	490e      	ldr	r1, [pc, #56]	; (80021e8 <HAL_GPIO_EXTI_Callback+0x79c>)
 80021b0:	0092      	lsls	r2, r2, #2
 80021b2:	440a      	add	r2, r1
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	4909      	ldr	r1, [pc, #36]	; (80021dc <HAL_GPIO_EXTI_Callback+0x790>)
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	601a      	str	r2, [r3, #0]
		 for(uint8_t n=0;n<4;n++){
 80021be:	7d7b      	ldrb	r3, [r7, #21]
 80021c0:	3301      	adds	r3, #1
 80021c2:	757b      	strb	r3, [r7, #21]
 80021c4:	e77b      	b.n	80020be <HAL_GPIO_EXTI_Callback+0x672>
 80021c6:	bf00      	nop
 80021c8:	20000200 	.word	0x20000200
 80021cc:	2000024c 	.word	0x2000024c
 80021d0:	3d9ac70d 	.word	0x3d9ac70d
 80021d4:	2000025c 	.word	0x2000025c
 80021d8:	20000260 	.word	0x20000260
 80021dc:	20000004 	.word	0x20000004
 80021e0:	200001c4 	.word	0x200001c4
 80021e4:	408f4000 	.word	0x408f4000
 80021e8:	20000014 	.word	0x20000014
		 }


		 float attitudeSize=std::sqrt(std::pow(attitude[0],2)+std::pow(attitude[1],2)+std::pow(attitude[2],2)+std::pow(attitude[3],2));
 80021ec:	4bc1      	ldr	r3, [pc, #772]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	2002      	movs	r0, #2
 80021f4:	eeb0 0a67 	vmov.f32	s0, s15
 80021f8:	f000 f988 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80021fc:	ec55 4b10 	vmov	r4, r5, d0
 8002200:	4bbc      	ldr	r3, [pc, #752]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 8002202:	edd3 7a01 	vldr	s15, [r3, #4]
 8002206:	2002      	movs	r0, #2
 8002208:	eeb0 0a67 	vmov.f32	s0, s15
 800220c:	f000 f97e 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002210:	ec53 2b10 	vmov	r2, r3, d0
 8002214:	4620      	mov	r0, r4
 8002216:	4629      	mov	r1, r5
 8002218:	f7fd ffe4 	bl	80001e4 <__adddf3>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4614      	mov	r4, r2
 8002222:	461d      	mov	r5, r3
 8002224:	4bb3      	ldr	r3, [pc, #716]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 8002226:	edd3 7a02 	vldr	s15, [r3, #8]
 800222a:	2002      	movs	r0, #2
 800222c:	eeb0 0a67 	vmov.f32	s0, s15
 8002230:	f000 f96c 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002234:	ec53 2b10 	vmov	r2, r3, d0
 8002238:	4620      	mov	r0, r4
 800223a:	4629      	mov	r1, r5
 800223c:	f7fd ffd2 	bl	80001e4 <__adddf3>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4614      	mov	r4, r2
 8002246:	461d      	mov	r5, r3
 8002248:	4baa      	ldr	r3, [pc, #680]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 800224a:	edd3 7a03 	vldr	s15, [r3, #12]
 800224e:	2002      	movs	r0, #2
 8002250:	eeb0 0a67 	vmov.f32	s0, s15
 8002254:	f000 f95a 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002258:	ec53 2b10 	vmov	r2, r3, d0
 800225c:	4620      	mov	r0, r4
 800225e:	4629      	mov	r1, r5
 8002260:	f7fd ffc0 	bl	80001e4 <__adddf3>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	ec43 2b17 	vmov	d7, r2, r3
 800226c:	eeb0 0a47 	vmov.f32	s0, s14
 8002270:	eef0 0a67 	vmov.f32	s1, s15
 8002274:	f003 f870 	bl	8005358 <sqrt>
 8002278:	ec53 2b10 	vmov	r2, r3, d0
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f7fe fc16 	bl	8000ab0 <__aeabi_d2f>
 8002284:	4603      	mov	r3, r0
 8002286:	60fb      	str	r3, [r7, #12]
		 attitude[0]/=attitudeSize;
 8002288:	4b9a      	ldr	r3, [pc, #616]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 800228a:	edd3 6a00 	vldr	s13, [r3]
 800228e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002296:	4b97      	ldr	r3, [pc, #604]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 8002298:	edc3 7a00 	vstr	s15, [r3]
		 attitude[1]/=attitudeSize;
 800229c:	4b95      	ldr	r3, [pc, #596]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 800229e:	edd3 6a01 	vldr	s13, [r3, #4]
 80022a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80022a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022aa:	4b92      	ldr	r3, [pc, #584]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80022ac:	edc3 7a01 	vstr	s15, [r3, #4]
		 attitude[2]/=attitudeSize;
 80022b0:	4b90      	ldr	r3, [pc, #576]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80022b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80022b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80022ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022be:	4b8d      	ldr	r3, [pc, #564]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80022c0:	edc3 7a02 	vstr	s15, [r3, #8]
		 attitude[3]/=attitudeSize;
 80022c4:	4b8b      	ldr	r3, [pc, #556]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80022c6:	edd3 6a03 	vldr	s13, [r3, #12]
 80022ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80022ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d2:	4b88      	ldr	r3, [pc, #544]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80022d4:	edc3 7a03 	vstr	s15, [r3, #12]

		 roll=std::atan2(2*(attitude[0]*attitude[1]+attitude[2]*attitude[3])
 80022d8:	4b86      	ldr	r3, [pc, #536]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80022da:	ed93 7a00 	vldr	s14, [r3]
 80022de:	4b85      	ldr	r3, [pc, #532]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80022e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80022e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e8:	4b82      	ldr	r3, [pc, #520]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80022ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80022ee:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80022f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80022f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fc:	ee37 8aa7 	vadd.f32	s16, s15, s15
			 ,std::pow(attitude[0],2)-std::pow(attitude[1],2)-std::pow(attitude[2],2)+std::pow(attitude[3],2));
 8002300:	4b7c      	ldr	r3, [pc, #496]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 8002302:	edd3 7a00 	vldr	s15, [r3]
 8002306:	2002      	movs	r0, #2
 8002308:	eeb0 0a67 	vmov.f32	s0, s15
 800230c:	f000 f8fe 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002310:	ec55 4b10 	vmov	r4, r5, d0
 8002314:	4b77      	ldr	r3, [pc, #476]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 8002316:	edd3 7a01 	vldr	s15, [r3, #4]
 800231a:	2002      	movs	r0, #2
 800231c:	eeb0 0a67 	vmov.f32	s0, s15
 8002320:	f000 f8f4 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002324:	ec53 2b10 	vmov	r2, r3, d0
 8002328:	4620      	mov	r0, r4
 800232a:	4629      	mov	r1, r5
 800232c:	f7fd ff58 	bl	80001e0 <__aeabi_dsub>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4614      	mov	r4, r2
 8002336:	461d      	mov	r5, r3
 8002338:	4b6e      	ldr	r3, [pc, #440]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 800233a:	edd3 7a02 	vldr	s15, [r3, #8]
 800233e:	2002      	movs	r0, #2
 8002340:	eeb0 0a67 	vmov.f32	s0, s15
 8002344:	f000 f8e2 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002348:	ec53 2b10 	vmov	r2, r3, d0
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fd ff46 	bl	80001e0 <__aeabi_dsub>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4614      	mov	r4, r2
 800235a:	461d      	mov	r5, r3
 800235c:	4b65      	ldr	r3, [pc, #404]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 800235e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002362:	2002      	movs	r0, #2
 8002364:	eeb0 0a67 	vmov.f32	s0, s15
 8002368:	f000 f8d0 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800236c:	ec53 2b10 	vmov	r2, r3, d0
		 roll=std::atan2(2*(attitude[0]*attitude[1]+attitude[2]*attitude[3])
 8002370:	4620      	mov	r0, r4
 8002372:	4629      	mov	r1, r5
 8002374:	f7fd ff36 	bl	80001e4 <__adddf3>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	ec43 2b17 	vmov	d7, r2, r3
 8002380:	eeb0 1a47 	vmov.f32	s2, s14
 8002384:	eef0 1a67 	vmov.f32	s3, s15
 8002388:	eeb0 0a48 	vmov.f32	s0, s16
 800238c:	f000 f8ee 	bl	800256c <_ZSt5atan2IfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002390:	ec53 2b10 	vmov	r2, r3, d0
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	f7fe fb8a 	bl	8000ab0 <__aeabi_d2f>
 800239c:	4603      	mov	r3, r0
 800239e:	4a56      	ldr	r2, [pc, #344]	; (80024f8 <HAL_GPIO_EXTI_Callback+0xaac>)
 80023a0:	6013      	str	r3, [r2, #0]

		 pitch=std::asin(2*(attitude[0]*attitude[2]-attitude[1]*attitude[3]));
 80023a2:	4b54      	ldr	r3, [pc, #336]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80023a4:	ed93 7a00 	vldr	s14, [r3]
 80023a8:	4b52      	ldr	r3, [pc, #328]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80023aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023b2:	4b50      	ldr	r3, [pc, #320]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80023b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80023b8:	4b4e      	ldr	r3, [pc, #312]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80023ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80023be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023ca:	eeb0 0a67 	vmov.f32	s0, s15
 80023ce:	f7ff facf 	bl	8001970 <_ZSt4asinf>
 80023d2:	eef0 7a40 	vmov.f32	s15, s0
 80023d6:	4b49      	ldr	r3, [pc, #292]	; (80024fc <HAL_GPIO_EXTI_Callback+0xab0>)
 80023d8:	edc3 7a00 	vstr	s15, [r3]

		 yaw=std::atan2(2*(attitude[0]*attitude[3]+attitude[1]*attitude[2])
 80023dc:	4b45      	ldr	r3, [pc, #276]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80023de:	ed93 7a00 	vldr	s14, [r3]
 80023e2:	4b44      	ldr	r3, [pc, #272]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80023e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80023e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ec:	4b41      	ldr	r3, [pc, #260]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80023ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80023f2:	4b40      	ldr	r3, [pc, #256]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 80023f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80023f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002400:	ee37 8aa7 	vadd.f32	s16, s15, s15
			 ,std::pow(attitude[0],2)+std::pow(attitude[1],2)-std::pow(attitude[2],2)-std::pow(attitude[3],2));
 8002404:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	2002      	movs	r0, #2
 800240c:	eeb0 0a67 	vmov.f32	s0, s15
 8002410:	f000 f87c 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002414:	ec55 4b10 	vmov	r4, r5, d0
 8002418:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 800241a:	edd3 7a01 	vldr	s15, [r3, #4]
 800241e:	2002      	movs	r0, #2
 8002420:	eeb0 0a67 	vmov.f32	s0, s15
 8002424:	f000 f872 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002428:	ec53 2b10 	vmov	r2, r3, d0
 800242c:	4620      	mov	r0, r4
 800242e:	4629      	mov	r1, r5
 8002430:	f7fd fed8 	bl	80001e4 <__adddf3>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4614      	mov	r4, r2
 800243a:	461d      	mov	r5, r3
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 800243e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002442:	2002      	movs	r0, #2
 8002444:	eeb0 0a67 	vmov.f32	s0, s15
 8002448:	f000 f860 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800244c:	ec53 2b10 	vmov	r2, r3, d0
 8002450:	4620      	mov	r0, r4
 8002452:	4629      	mov	r1, r5
 8002454:	f7fd fec4 	bl	80001e0 <__aeabi_dsub>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4614      	mov	r4, r2
 800245e:	461d      	mov	r5, r3
 8002460:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_GPIO_EXTI_Callback+0xaa8>)
 8002462:	edd3 7a03 	vldr	s15, [r3, #12]
 8002466:	2002      	movs	r0, #2
 8002468:	eeb0 0a67 	vmov.f32	s0, s15
 800246c:	f000 f84e 	bl	800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002470:	ec53 2b10 	vmov	r2, r3, d0
		 yaw=std::atan2(2*(attitude[0]*attitude[3]+attitude[1]*attitude[2])
 8002474:	4620      	mov	r0, r4
 8002476:	4629      	mov	r1, r5
 8002478:	f7fd feb2 	bl	80001e0 <__aeabi_dsub>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	ec43 2b17 	vmov	d7, r2, r3
 8002484:	eeb0 1a47 	vmov.f32	s2, s14
 8002488:	eef0 1a67 	vmov.f32	s3, s15
 800248c:	eeb0 0a48 	vmov.f32	s0, s16
 8002490:	f000 f86c 	bl	800256c <_ZSt5atan2IfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002494:	ec53 2b10 	vmov	r2, r3, d0
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fb08 	bl	8000ab0 <__aeabi_d2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4a17      	ldr	r2, [pc, #92]	; (8002500 <HAL_GPIO_EXTI_Callback+0xab4>)
 80024a4:	6013      	str	r3, [r2, #0]

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80024a6:	2120      	movs	r1, #32
 80024a8:	4816      	ldr	r0, [pc, #88]	; (8002504 <HAL_GPIO_EXTI_Callback+0xab8>)
 80024aa:	f000 fc2c 	bl	8002d06 <HAL_GPIO_TogglePin>
		uint8_t n=0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	72fb      	strb	r3, [r7, #11]
		HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, 0x1a, 1, &n, 1, 100);
 80024b2:	2364      	movs	r3, #100	; 0x64
 80024b4:	9302      	str	r3, [sp, #8]
 80024b6:	2301      	movs	r3, #1
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	f107 030b 	add.w	r3, r7, #11
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2301      	movs	r3, #1
 80024c2:	221a      	movs	r2, #26
 80024c4:	21d0      	movs	r1, #208	; 0xd0
 80024c6:	4810      	ldr	r0, [pc, #64]	; (8002508 <HAL_GPIO_EXTI_Callback+0xabc>)
 80024c8:	f000 fe8e 	bl	80031e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, 0x11, 1, &n, 1, 100);
 80024cc:	2364      	movs	r3, #100	; 0x64
 80024ce:	9302      	str	r3, [sp, #8]
 80024d0:	2301      	movs	r3, #1
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	f107 030b 	add.w	r3, r7, #11
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2301      	movs	r3, #1
 80024dc:	2211      	movs	r2, #17
 80024de:	21d0      	movs	r1, #208	; 0xd0
 80024e0:	4809      	ldr	r0, [pc, #36]	; (8002508 <HAL_GPIO_EXTI_Callback+0xabc>)
 80024e2:	f000 fe81 	bl	80031e8 <HAL_I2C_Mem_Read>
//		str = std::to_string(n);
//		str += "\r\n";
//		HAL_UART_Transmit(&huart2, (uint8_t *)str.c_str(), str.size(), 100);
	}
}
 80024e6:	bf00      	nop
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	ecbd 8b02 	vpop	{d8}
 80024f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024f4:	20000014 	.word	0x20000014
 80024f8:	200001f4 	.word	0x200001f4
 80024fc:	200001f8 	.word	0x200001f8
 8002500:	200001fc 	.word	0x200001fc
 8002504:	40020000 	.word	0x40020000
 8002508:	200000ac 	.word	0x200000ac

0800250c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	ed87 0a01 	vstr	s0, [r7, #4]
 8002516:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7fd ffc1 	bl	80004a0 <__aeabi_f2d>
 800251e:	4604      	mov	r4, r0
 8002520:	460d      	mov	r5, r1
 8002522:	6838      	ldr	r0, [r7, #0]
 8002524:	f7fd ffaa 	bl	800047c <__aeabi_i2d>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	ec43 2b11 	vmov	d1, r2, r3
 8002530:	ec45 4b10 	vmov	d0, r4, r5
 8002534:	f002 fea0 	bl	8005278 <pow>
 8002538:	eeb0 7a40 	vmov.f32	s14, s0
 800253c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002540:	eeb0 0a47 	vmov.f32	s0, s14
 8002544:	eef0 0a67 	vmov.f32	s1, s15
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bdb0      	pop	{r4, r5, r7, pc}

0800254e <_ZNSt5arrayIS_IfLj3EELj4EEixEj>:
      operator[](size_type __n) noexcept
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6839      	ldr	r1, [r7, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f000 f822 	bl	80025a6 <_ZNSt14__array_traitsISt5arrayIfLj3EELj4EE6_S_refERA4_KS1_j>
 8002562:	4603      	mov	r3, r0
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_ZSt5atan2IfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	ed87 0a03 	vstr	s0, [r7, #12]
 8002576:	ed87 1b00 	vstr	d1, [r7]
      return atan2(__type(__y), __type(__x));
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f7fd ff90 	bl	80004a0 <__aeabi_f2d>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	ed97 1b00 	vldr	d1, [r7]
 8002588:	ec43 2b10 	vmov	d0, r2, r3
 800258c:	f002 fe72 	bl	8005274 <atan2>
 8002590:	eeb0 7a40 	vmov.f32	s14, s0
 8002594:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002598:	eeb0 0a47 	vmov.f32	s0, s14
 800259c:	eef0 0a67 	vmov.f32	s1, s15
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_ZNSt14__array_traitsISt5arrayIfLj3EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <_Z41__static_initialization_and_destruction_0ii>:
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d10e      	bne.n	80025fa <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d109      	bne.n	80025fa <_Z41__static_initialization_and_destruction_0ii+0x2e>
ICM20948 icm20948(&hi2c1,ICM20948::Address::LOW);
 80025e6:	2268      	movs	r2, #104	; 0x68
 80025e8:	4906      	ldr	r1, [pc, #24]	; (8002604 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80025ea:	4807      	ldr	r0, [pc, #28]	; (8002608 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80025ec:	f7ff f97a 	bl	80018e4 <_ZN8ICM20948C1EP17I2C_HandleTypeDefNS_7AddressE>
TIM_StopWatch stopwatch(&htim1);
 80025f0:	4a06      	ldr	r2, [pc, #24]	; (800260c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80025f2:	4907      	ldr	r1, [pc, #28]	; (8002610 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80025f4:	4807      	ldr	r0, [pc, #28]	; (8002614 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80025f6:	f7ff f99f 	bl	8001938 <_ZN13TIM_StopWatchC1EP17TIM_HandleTypeDefm>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200000ac 	.word	0x200000ac
 8002608:	2000018c 	.word	0x2000018c
 800260c:	000f4240 	.word	0x000f4240
 8002610:	20000100 	.word	0x20000100
 8002614:	200001c8 	.word	0x200001c8

08002618 <_GLOBAL__sub_I_icm20948>:
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
 800261c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002620:	2001      	movs	r0, #1
 8002622:	f7ff ffd3 	bl	80025cc <_Z41__static_initialization_and_destruction_0ii>
 8002626:	bd80      	pop	{r7, pc}

08002628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002660 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800262c:	480d      	ldr	r0, [pc, #52]	; (8002664 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800262e:	490e      	ldr	r1, [pc, #56]	; (8002668 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002630:	4a0e      	ldr	r2, [pc, #56]	; (800266c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002634:	e002      	b.n	800263c <LoopCopyDataInit>

08002636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263a:	3304      	adds	r3, #4

0800263c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800263c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002640:	d3f9      	bcc.n	8002636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002642:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002644:	4c0b      	ldr	r4, [pc, #44]	; (8002674 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002648:	e001      	b.n	800264e <LoopFillZerobss>

0800264a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800264c:	3204      	adds	r2, #4

0800264e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002650:	d3fb      	bcc.n	800264a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002652:	f7ff f82d 	bl	80016b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002656:	f004 f8ed 	bl	8006834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800265a:	f7fe ff47 	bl	80014ec <main>
  bx  lr    
 800265e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002668:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800266c:	0800699c 	.word	0x0800699c
  ldr r2, =_sbss
 8002670:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002674:	20000278 	.word	0x20000278

08002678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002678:	e7fe      	b.n	8002678 <ADC_IRQHandler>
	...

0800267c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_Init+0x40>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0d      	ldr	r2, [pc, #52]	; (80026bc <HAL_Init+0x40>)
 8002686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <HAL_Init+0x40>)
 8002692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002698:	4b08      	ldr	r3, [pc, #32]	; (80026bc <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a07      	ldr	r2, [pc, #28]	; (80026bc <HAL_Init+0x40>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a4:	2003      	movs	r0, #3
 80026a6:	f000 f94f 	bl	8002948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f000 f808 	bl	80026c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b0:	f7fe ffa0 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023c00 	.word	0x40023c00

080026c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_InitTick+0x54>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_InitTick+0x58>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f967 	bl	80029b2 <HAL_SYSTICK_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00e      	b.n	800270c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b0f      	cmp	r3, #15
 80026f2:	d80a      	bhi.n	800270a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f4:	2200      	movs	r2, #0
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f000 f92f 	bl	800295e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002700:	4a06      	ldr	r2, [pc, #24]	; (800271c <HAL_InitTick+0x5c>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e000      	b.n	800270c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000000 	.word	0x20000000
 8002718:	20000028 	.word	0x20000028
 800271c:	20000024 	.word	0x20000024

08002720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_IncTick+0x20>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_IncTick+0x24>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4413      	add	r3, r2
 8002730:	4a04      	ldr	r2, [pc, #16]	; (8002744 <HAL_IncTick+0x24>)
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000028 	.word	0x20000028
 8002744:	20000274 	.word	0x20000274

08002748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return uwTick;
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_GetTick+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000274 	.word	0x20000274

08002760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002768:	f7ff ffee 	bl	8002748 <HAL_GetTick>
 800276c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d005      	beq.n	8002786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_Delay+0x44>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002786:	bf00      	nop
 8002788:	f7ff ffde 	bl	8002748 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	d8f7      	bhi.n	8002788 <HAL_Delay+0x28>
  {
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000028 	.word	0x20000028

080027a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <__NVIC_SetPriorityGrouping+0x44>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c4:	4013      	ands	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027da:	4a04      	ldr	r2, [pc, #16]	; (80027ec <__NVIC_SetPriorityGrouping+0x44>)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	60d3      	str	r3, [r2, #12]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <__NVIC_GetPriorityGrouping+0x18>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	f003 0307 	and.w	r3, r3, #7
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	2b00      	cmp	r3, #0
 800281c:	db0b      	blt.n	8002836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	f003 021f 	and.w	r2, r3, #31
 8002824:	4907      	ldr	r1, [pc, #28]	; (8002844 <__NVIC_EnableIRQ+0x38>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	2001      	movs	r0, #1
 800282e:	fa00 f202 	lsl.w	r2, r0, r2
 8002832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000e100 	.word	0xe000e100

08002848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	2b00      	cmp	r3, #0
 800285a:	db0a      	blt.n	8002872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	490c      	ldr	r1, [pc, #48]	; (8002894 <__NVIC_SetPriority+0x4c>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	0112      	lsls	r2, r2, #4
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	440b      	add	r3, r1
 800286c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002870:	e00a      	b.n	8002888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4908      	ldr	r1, [pc, #32]	; (8002898 <__NVIC_SetPriority+0x50>)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	3b04      	subs	r3, #4
 8002880:	0112      	lsls	r2, r2, #4
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	440b      	add	r3, r1
 8002886:	761a      	strb	r2, [r3, #24]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f1c3 0307 	rsb	r3, r3, #7
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	bf28      	it	cs
 80028ba:	2304      	movcs	r3, #4
 80028bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d902      	bls.n	80028cc <NVIC_EncodePriority+0x30>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3b03      	subs	r3, #3
 80028ca:	e000      	b.n	80028ce <NVIC_EncodePriority+0x32>
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	f04f 32ff 	mov.w	r2, #4294967295
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	401a      	ands	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43d9      	mvns	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	4313      	orrs	r3, r2
         );
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002914:	d301      	bcc.n	800291a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002916:	2301      	movs	r3, #1
 8002918:	e00f      	b.n	800293a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <SysTick_Config+0x40>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002922:	210f      	movs	r1, #15
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	f7ff ff8e 	bl	8002848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <SysTick_Config+0x40>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <SysTick_Config+0x40>)
 8002934:	2207      	movs	r2, #7
 8002936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	e000e010 	.word	0xe000e010

08002948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ff29 	bl	80027a8 <__NVIC_SetPriorityGrouping>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002970:	f7ff ff3e 	bl	80027f0 <__NVIC_GetPriorityGrouping>
 8002974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff ff8e 	bl	800289c <NVIC_EncodePriority>
 8002980:	4602      	mov	r2, r0
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff5d 	bl	8002848 <__NVIC_SetPriority>
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff31 	bl	800280c <__NVIC_EnableIRQ>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ffa2 	bl	8002904 <SysTick_Config>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e159      	b.n	8002c9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e8:	2201      	movs	r2, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	f040 8148 	bne.w	8002c96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d005      	beq.n	8002a1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d130      	bne.n	8002a80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a54:	2201      	movs	r2, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 0201 	and.w	r2, r3, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d017      	beq.n	8002abc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d123      	bne.n	8002b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	08da      	lsrs	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3208      	adds	r2, #8
 8002ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	220f      	movs	r2, #15
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	69b9      	ldr	r1, [r7, #24]
 8002b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0203 	and.w	r2, r3, #3
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80a2 	beq.w	8002c96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	4b57      	ldr	r3, [pc, #348]	; (8002cb4 <HAL_GPIO_Init+0x2e8>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	4a56      	ldr	r2, [pc, #344]	; (8002cb4 <HAL_GPIO_Init+0x2e8>)
 8002b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b60:	6453      	str	r3, [r2, #68]	; 0x44
 8002b62:	4b54      	ldr	r3, [pc, #336]	; (8002cb4 <HAL_GPIO_Init+0x2e8>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b6e:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_GPIO_Init+0x2ec>)
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	3302      	adds	r3, #2
 8002b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	220f      	movs	r2, #15
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a49      	ldr	r2, [pc, #292]	; (8002cbc <HAL_GPIO_Init+0x2f0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d019      	beq.n	8002bce <HAL_GPIO_Init+0x202>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a48      	ldr	r2, [pc, #288]	; (8002cc0 <HAL_GPIO_Init+0x2f4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d013      	beq.n	8002bca <HAL_GPIO_Init+0x1fe>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a47      	ldr	r2, [pc, #284]	; (8002cc4 <HAL_GPIO_Init+0x2f8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00d      	beq.n	8002bc6 <HAL_GPIO_Init+0x1fa>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a46      	ldr	r2, [pc, #280]	; (8002cc8 <HAL_GPIO_Init+0x2fc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d007      	beq.n	8002bc2 <HAL_GPIO_Init+0x1f6>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a45      	ldr	r2, [pc, #276]	; (8002ccc <HAL_GPIO_Init+0x300>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d101      	bne.n	8002bbe <HAL_GPIO_Init+0x1f2>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e008      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bbe:	2307      	movs	r3, #7
 8002bc0:	e006      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e004      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e002      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	f002 0203 	and.w	r2, r2, #3
 8002bd6:	0092      	lsls	r2, r2, #2
 8002bd8:	4093      	lsls	r3, r2
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002be0:	4935      	ldr	r1, [pc, #212]	; (8002cb8 <HAL_GPIO_Init+0x2ec>)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	089b      	lsrs	r3, r3, #2
 8002be6:	3302      	adds	r3, #2
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bee:	4b38      	ldr	r3, [pc, #224]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c12:	4a2f      	ldr	r2, [pc, #188]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c18:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c3c:	4a24      	ldr	r2, [pc, #144]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c66:	4a1a      	ldr	r2, [pc, #104]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c90:	4a0f      	ldr	r2, [pc, #60]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b0f      	cmp	r3, #15
 8002ca0:	f67f aea2 	bls.w	80029e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3724      	adds	r7, #36	; 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	40020000 	.word	0x40020000
 8002cc0:	40020400 	.word	0x40020400
 8002cc4:	40020800 	.word	0x40020800
 8002cc8:	40020c00 	.word	0x40020c00
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40013c00 	.word	0x40013c00

08002cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	807b      	strh	r3, [r7, #2]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce4:	787b      	ldrb	r3, [r7, #1]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf0:	e003      	b.n	8002cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	041a      	lsls	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	619a      	str	r2, [r3, #24]
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b085      	sub	sp, #20
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d18:	887a      	ldrh	r2, [r7, #2]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	041a      	lsls	r2, r3, #16
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	43d9      	mvns	r1, r3
 8002d24:	887b      	ldrh	r3, [r7, #2]
 8002d26:	400b      	ands	r3, r1
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	619a      	str	r2, [r3, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d52:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fe76 	bl	8001a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40013c00 	.word	0x40013c00

08002d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e12b      	b.n	8002fd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fe fb62 	bl	800145c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	; 0x24
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dd0:	f001 fbfc 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 8002dd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4a81      	ldr	r2, [pc, #516]	; (8002fe0 <HAL_I2C_Init+0x274>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d807      	bhi.n	8002df0 <HAL_I2C_Init+0x84>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4a80      	ldr	r2, [pc, #512]	; (8002fe4 <HAL_I2C_Init+0x278>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	bf94      	ite	ls
 8002de8:	2301      	movls	r3, #1
 8002dea:	2300      	movhi	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	e006      	b.n	8002dfe <HAL_I2C_Init+0x92>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a7d      	ldr	r2, [pc, #500]	; (8002fe8 <HAL_I2C_Init+0x27c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	bf94      	ite	ls
 8002df8:	2301      	movls	r3, #1
 8002dfa:	2300      	movhi	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0e7      	b.n	8002fd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4a78      	ldr	r2, [pc, #480]	; (8002fec <HAL_I2C_Init+0x280>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0c9b      	lsrs	r3, r3, #18
 8002e10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4a6a      	ldr	r2, [pc, #424]	; (8002fe0 <HAL_I2C_Init+0x274>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d802      	bhi.n	8002e40 <HAL_I2C_Init+0xd4>
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	e009      	b.n	8002e54 <HAL_I2C_Init+0xe8>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	4a69      	ldr	r2, [pc, #420]	; (8002ff0 <HAL_I2C_Init+0x284>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	099b      	lsrs	r3, r3, #6
 8002e52:	3301      	adds	r3, #1
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	495c      	ldr	r1, [pc, #368]	; (8002fe0 <HAL_I2C_Init+0x274>)
 8002e70:	428b      	cmp	r3, r1
 8002e72:	d819      	bhi.n	8002ea8 <HAL_I2C_Init+0x13c>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1e59      	subs	r1, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e82:	1c59      	adds	r1, r3, #1
 8002e84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e88:	400b      	ands	r3, r1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_I2C_Init+0x138>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1e59      	subs	r1, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea2:	e051      	b.n	8002f48 <HAL_I2C_Init+0x1dc>
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	e04f      	b.n	8002f48 <HAL_I2C_Init+0x1dc>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d111      	bne.n	8002ed4 <HAL_I2C_Init+0x168>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1e58      	subs	r0, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	440b      	add	r3, r1
 8002ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e012      	b.n	8002efa <HAL_I2C_Init+0x18e>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1e58      	subs	r0, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	0099      	lsls	r1, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eea:	3301      	adds	r3, #1
 8002eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Init+0x196>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e022      	b.n	8002f48 <HAL_I2C_Init+0x1dc>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10e      	bne.n	8002f28 <HAL_I2C_Init+0x1bc>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1e58      	subs	r0, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	460b      	mov	r3, r1
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	440b      	add	r3, r1
 8002f18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f26:	e00f      	b.n	8002f48 <HAL_I2C_Init+0x1dc>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1e58      	subs	r0, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	0099      	lsls	r1, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	6809      	ldr	r1, [r1, #0]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69da      	ldr	r2, [r3, #28]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6911      	ldr	r1, [r2, #16]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68d2      	ldr	r2, [r2, #12]
 8002f82:	4311      	orrs	r1, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	000186a0 	.word	0x000186a0
 8002fe4:	001e847f 	.word	0x001e847f
 8002fe8:	003d08ff 	.word	0x003d08ff
 8002fec:	431bde83 	.word	0x431bde83
 8002ff0:	10624dd3 	.word	0x10624dd3

08002ff4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	461a      	mov	r2, r3
 8003002:	4603      	mov	r3, r0
 8003004:	817b      	strh	r3, [r7, #10]
 8003006:	460b      	mov	r3, r1
 8003008:	813b      	strh	r3, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800300e:	f7ff fb9b 	bl	8002748 <HAL_GetTick>
 8003012:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b20      	cmp	r3, #32
 800301e:	f040 80d9 	bne.w	80031d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	2319      	movs	r3, #25
 8003028:	2201      	movs	r2, #1
 800302a:	496d      	ldr	r1, [pc, #436]	; (80031e0 <HAL_I2C_Mem_Write+0x1ec>)
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fc7f 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003038:	2302      	movs	r3, #2
 800303a:	e0cc      	b.n	80031d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_I2C_Mem_Write+0x56>
 8003046:	2302      	movs	r3, #2
 8003048:	e0c5      	b.n	80031d6 <HAL_I2C_Mem_Write+0x1e2>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d007      	beq.n	8003070 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800307e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2221      	movs	r2, #33	; 0x21
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2240      	movs	r2, #64	; 0x40
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a3a      	ldr	r2, [r7, #32]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a4d      	ldr	r2, [pc, #308]	; (80031e4 <HAL_I2C_Mem_Write+0x1f0>)
 80030b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030b2:	88f8      	ldrh	r0, [r7, #6]
 80030b4:	893a      	ldrh	r2, [r7, #8]
 80030b6:	8979      	ldrh	r1, [r7, #10]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	4603      	mov	r3, r0
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 fab6 	bl	8003634 <I2C_RequestMemoryWrite>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d052      	beq.n	8003174 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e081      	b.n	80031d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fd00 	bl	8003adc <I2C_WaitOnTXEFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00d      	beq.n	80030fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d107      	bne.n	80030fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e06b      	b.n	80031d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	781a      	ldrb	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b04      	cmp	r3, #4
 800313a:	d11b      	bne.n	8003174 <HAL_I2C_Mem_Write+0x180>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	d017      	beq.n	8003174 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	781a      	ldrb	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1aa      	bne.n	80030d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 fcec 	bl	8003b5e <I2C_WaitOnBTFFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00d      	beq.n	80031a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	2b04      	cmp	r3, #4
 8003192:	d107      	bne.n	80031a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e016      	b.n	80031d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	e000      	b.n	80031d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
  }
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	00100002 	.word	0x00100002
 80031e4:	ffff0000 	.word	0xffff0000

080031e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08c      	sub	sp, #48	; 0x30
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	4608      	mov	r0, r1
 80031f2:	4611      	mov	r1, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	460b      	mov	r3, r1
 80031fc:	813b      	strh	r3, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003202:	f7ff faa1 	bl	8002748 <HAL_GetTick>
 8003206:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b20      	cmp	r3, #32
 8003212:	f040 8208 	bne.w	8003626 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2319      	movs	r3, #25
 800321c:	2201      	movs	r2, #1
 800321e:	497b      	ldr	r1, [pc, #492]	; (800340c <HAL_I2C_Mem_Read+0x224>)
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 fb85 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
 800322e:	e1fb      	b.n	8003628 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_I2C_Mem_Read+0x56>
 800323a:	2302      	movs	r3, #2
 800323c:	e1f4      	b.n	8003628 <HAL_I2C_Mem_Read+0x440>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d007      	beq.n	8003264 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003272:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2222      	movs	r2, #34	; 0x22
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003294:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a5b      	ldr	r2, [pc, #364]	; (8003410 <HAL_I2C_Mem_Read+0x228>)
 80032a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032a6:	88f8      	ldrh	r0, [r7, #6]
 80032a8:	893a      	ldrh	r2, [r7, #8]
 80032aa:	8979      	ldrh	r1, [r7, #10]
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	4603      	mov	r3, r0
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fa52 	bl	8003760 <I2C_RequestMemoryRead>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e1b0      	b.n	8003628 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d113      	bne.n	80032f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ce:	2300      	movs	r3, #0
 80032d0:	623b      	str	r3, [r7, #32]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	623b      	str	r3, [r7, #32]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	623b      	str	r3, [r7, #32]
 80032e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	e184      	b.n	8003600 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d11b      	bne.n	8003336 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e164      	b.n	8003600 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	2b02      	cmp	r3, #2
 800333c:	d11b      	bne.n	8003376 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800335c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	e144      	b.n	8003600 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800338c:	e138      	b.n	8003600 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	2b03      	cmp	r3, #3
 8003394:	f200 80f1 	bhi.w	800357a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339c:	2b01      	cmp	r3, #1
 800339e:	d123      	bne.n	80033e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fc1b 	bl	8003be0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e139      	b.n	8003628 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033e6:	e10b      	b.n	8003600 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d14e      	bne.n	800348e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f6:	2200      	movs	r2, #0
 80033f8:	4906      	ldr	r1, [pc, #24]	; (8003414 <HAL_I2C_Mem_Read+0x22c>)
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fa98 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e10e      	b.n	8003628 <HAL_I2C_Mem_Read+0x440>
 800340a:	bf00      	nop
 800340c:	00100002 	.word	0x00100002
 8003410:	ffff0000 	.word	0xffff0000
 8003414:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800348c:	e0b8      	b.n	8003600 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003494:	2200      	movs	r2, #0
 8003496:	4966      	ldr	r1, [pc, #408]	; (8003630 <HAL_I2C_Mem_Read+0x448>)
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fa49 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0bf      	b.n	8003628 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f0:	2200      	movs	r2, #0
 80034f2:	494f      	ldr	r1, [pc, #316]	; (8003630 <HAL_I2C_Mem_Read+0x448>)
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 fa1b 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e091      	b.n	8003628 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003512:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003578:	e042      	b.n	8003600 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fb2e 	bl	8003be0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e04c      	b.n	8003628 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d118      	bne.n	8003600 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	f47f aec2 	bne.w	800338e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	e000      	b.n	8003628 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003626:	2302      	movs	r3, #2
  }
}
 8003628:	4618      	mov	r0, r3
 800362a:	3728      	adds	r7, #40	; 0x28
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	00010004 	.word	0x00010004

08003634 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	4608      	mov	r0, r1
 800363e:	4611      	mov	r1, r2
 8003640:	461a      	mov	r2, r3
 8003642:	4603      	mov	r3, r0
 8003644:	817b      	strh	r3, [r7, #10]
 8003646:	460b      	mov	r3, r1
 8003648:	813b      	strh	r3, [r7, #8]
 800364a:	4613      	mov	r3, r2
 800364c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800365c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	2200      	movs	r2, #0
 8003666:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f960 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003684:	d103      	bne.n	800368e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800368c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e05f      	b.n	8003752 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003692:	897b      	ldrh	r3, [r7, #10]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	6a3a      	ldr	r2, [r7, #32]
 80036a6:	492d      	ldr	r1, [pc, #180]	; (800375c <I2C_RequestMemoryWrite+0x128>)
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f998 	bl	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e04c      	b.n	8003752 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d0:	6a39      	ldr	r1, [r7, #32]
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 fa02 	bl	8003adc <I2C_WaitOnTXEFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00d      	beq.n	80036fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d107      	bne.n	80036f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e02b      	b.n	8003752 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003700:	893b      	ldrh	r3, [r7, #8]
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	611a      	str	r2, [r3, #16]
 800370a:	e021      	b.n	8003750 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800370c:	893b      	ldrh	r3, [r7, #8]
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	b29b      	uxth	r3, r3
 8003712:	b2da      	uxtb	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800371a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371c:	6a39      	ldr	r1, [r7, #32]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f9dc 	bl	8003adc <I2C_WaitOnTXEFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00d      	beq.n	8003746 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	2b04      	cmp	r3, #4
 8003730:	d107      	bne.n	8003742 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003740:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e005      	b.n	8003752 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003746:	893b      	ldrh	r3, [r7, #8]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	00010002 	.word	0x00010002

08003760 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	4608      	mov	r0, r1
 800376a:	4611      	mov	r1, r2
 800376c:	461a      	mov	r2, r3
 800376e:	4603      	mov	r3, r0
 8003770:	817b      	strh	r3, [r7, #10]
 8003772:	460b      	mov	r3, r1
 8003774:	813b      	strh	r3, [r7, #8]
 8003776:	4613      	mov	r3, r2
 8003778:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003788:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003798:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f8c2 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00d      	beq.n	80037ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c0:	d103      	bne.n	80037ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e0aa      	b.n	8003924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ce:	897b      	ldrh	r3, [r7, #10]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	4952      	ldr	r1, [pc, #328]	; (800392c <I2C_RequestMemoryRead+0x1cc>)
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f8fa 	bl	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e097      	b.n	8003924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800380a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380c:	6a39      	ldr	r1, [r7, #32]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f964 	bl	8003adc <I2C_WaitOnTXEFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	2b04      	cmp	r3, #4
 8003820:	d107      	bne.n	8003832 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003830:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e076      	b.n	8003924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d105      	bne.n	8003848 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800383c:	893b      	ldrh	r3, [r7, #8]
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	611a      	str	r2, [r3, #16]
 8003846:	e021      	b.n	800388c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003848:	893b      	ldrh	r3, [r7, #8]
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	b29b      	uxth	r3, r3
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003858:	6a39      	ldr	r1, [r7, #32]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f93e 	bl	8003adc <I2C_WaitOnTXEFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00d      	beq.n	8003882 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	2b04      	cmp	r3, #4
 800386c:	d107      	bne.n	800387e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e050      	b.n	8003924 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003882:	893b      	ldrh	r3, [r7, #8]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800388c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388e:	6a39      	ldr	r1, [r7, #32]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f923 	bl	8003adc <I2C_WaitOnTXEFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00d      	beq.n	80038b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d107      	bne.n	80038b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e035      	b.n	8003924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f82b 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00d      	beq.n	80038fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ee:	d103      	bne.n	80038f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e013      	b.n	8003924 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038fc:	897b      	ldrh	r3, [r7, #10]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	b2da      	uxtb	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	6a3a      	ldr	r2, [r7, #32]
 8003910:	4906      	ldr	r1, [pc, #24]	; (800392c <I2C_RequestMemoryRead+0x1cc>)
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f863 	bl	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	00010002 	.word	0x00010002

08003930 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003940:	e025      	b.n	800398e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d021      	beq.n	800398e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394a:	f7fe fefd 	bl	8002748 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d302      	bcc.n	8003960 <I2C_WaitOnFlagUntilTimeout+0x30>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d116      	bne.n	800398e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e023      	b.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10d      	bne.n	80039b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	43da      	mvns	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4013      	ands	r3, r2
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bf0c      	ite	eq
 80039aa:	2301      	moveq	r3, #1
 80039ac:	2300      	movne	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	461a      	mov	r2, r3
 80039b2:	e00c      	b.n	80039ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	43da      	mvns	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4013      	ands	r3, r2
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf0c      	ite	eq
 80039c6:	2301      	moveq	r3, #1
 80039c8:	2300      	movne	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d0b6      	beq.n	8003942 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039ec:	e051      	b.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fc:	d123      	bne.n	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f043 0204 	orr.w	r2, r3, #4
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e046      	b.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d021      	beq.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4e:	f7fe fe7b 	bl	8002748 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d302      	bcc.n	8003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d116      	bne.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f043 0220 	orr.w	r2, r3, #32
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e020      	b.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d10c      	bne.n	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf14      	ite	ne
 8003aae:	2301      	movne	r3, #1
 8003ab0:	2300      	moveq	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	e00b      	b.n	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	43da      	mvns	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d18d      	bne.n	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae8:	e02d      	b.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f8ce 	bl	8003c8c <I2C_IsAcknowledgeFailed>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e02d      	b.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d021      	beq.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fe fe21 	bl	8002748 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d116      	bne.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f043 0220 	orr.w	r2, r3, #32
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e007      	b.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d1ca      	bne.n	8003aea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b6a:	e02d      	b.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f88d 	bl	8003c8c <I2C_IsAcknowledgeFailed>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e02d      	b.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d021      	beq.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b84:	f7fe fde0 	bl	8002748 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d116      	bne.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	f043 0220 	orr.w	r2, r3, #32
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e007      	b.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d1ca      	bne.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bec:	e042      	b.n	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d119      	bne.n	8003c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0210 	mvn.w	r2, #16
 8003c04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e029      	b.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c30:	f7fe fd8a 	bl	8002748 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d302      	bcc.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d116      	bne.n	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e007      	b.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b40      	cmp	r3, #64	; 0x40
 8003c80:	d1b5      	bne.n	8003bee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca2:	d11b      	bne.n	8003cdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f043 0204 	orr.w	r2, r3, #4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e267      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d075      	beq.n	8003df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d0a:	4b88      	ldr	r3, [pc, #544]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d00c      	beq.n	8003d30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d16:	4b85      	ldr	r3, [pc, #532]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d112      	bne.n	8003d48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d22:	4b82      	ldr	r3, [pc, #520]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d2e:	d10b      	bne.n	8003d48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d30:	4b7e      	ldr	r3, [pc, #504]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d05b      	beq.n	8003df4 <HAL_RCC_OscConfig+0x108>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d157      	bne.n	8003df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e242      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d50:	d106      	bne.n	8003d60 <HAL_RCC_OscConfig+0x74>
 8003d52:	4b76      	ldr	r3, [pc, #472]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a75      	ldr	r2, [pc, #468]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	e01d      	b.n	8003d9c <HAL_RCC_OscConfig+0xb0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCC_OscConfig+0x98>
 8003d6a:	4b70      	ldr	r3, [pc, #448]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6f      	ldr	r2, [pc, #444]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	4b6d      	ldr	r3, [pc, #436]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a6c      	ldr	r2, [pc, #432]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	e00b      	b.n	8003d9c <HAL_RCC_OscConfig+0xb0>
 8003d84:	4b69      	ldr	r3, [pc, #420]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a68      	ldr	r2, [pc, #416]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	4b66      	ldr	r3, [pc, #408]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a65      	ldr	r2, [pc, #404]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d013      	beq.n	8003dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fe fcd0 	bl	8002748 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dac:	f7fe fccc 	bl	8002748 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	; 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e207      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b5b      	ldr	r3, [pc, #364]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0xc0>
 8003dca:	e014      	b.n	8003df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dcc:	f7fe fcbc 	bl	8002748 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd4:	f7fe fcb8 	bl	8002748 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b64      	cmp	r3, #100	; 0x64
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e1f3      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de6:	4b51      	ldr	r3, [pc, #324]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0xe8>
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d063      	beq.n	8003eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e02:	4b4a      	ldr	r3, [pc, #296]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0e:	4b47      	ldr	r3, [pc, #284]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d11c      	bne.n	8003e54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e1a:	4b44      	ldr	r3, [pc, #272]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d116      	bne.n	8003e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e26:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d005      	beq.n	8003e3e <HAL_RCC_OscConfig+0x152>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d001      	beq.n	8003e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e1c7      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3e:	4b3b      	ldr	r3, [pc, #236]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4937      	ldr	r1, [pc, #220]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e52:	e03a      	b.n	8003eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d020      	beq.n	8003e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e5c:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <HAL_RCC_OscConfig+0x244>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e62:	f7fe fc71 	bl	8002748 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e6a:	f7fe fc6d 	bl	8002748 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e1a8      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7c:	4b2b      	ldr	r3, [pc, #172]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e88:	4b28      	ldr	r3, [pc, #160]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4925      	ldr	r1, [pc, #148]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	600b      	str	r3, [r1, #0]
 8003e9c:	e015      	b.n	8003eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9e:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <HAL_RCC_OscConfig+0x244>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fe fc50 	bl	8002748 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eac:	f7fe fc4c 	bl	8002748 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e187      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ebe:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d036      	beq.n	8003f44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d016      	beq.n	8003f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ede:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <HAL_RCC_OscConfig+0x248>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fe fc30 	bl	8002748 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eec:	f7fe fc2c 	bl	8002748 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e167      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCC_OscConfig+0x200>
 8003f0a:	e01b      	b.n	8003f44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_RCC_OscConfig+0x248>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f12:	f7fe fc19 	bl	8002748 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f18:	e00e      	b.n	8003f38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f1a:	f7fe fc15 	bl	8002748 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d907      	bls.n	8003f38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e150      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	42470000 	.word	0x42470000
 8003f34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f38:	4b88      	ldr	r3, [pc, #544]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1ea      	bne.n	8003f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8097 	beq.w	8004080 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f52:	2300      	movs	r3, #0
 8003f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f56:	4b81      	ldr	r3, [pc, #516]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10f      	bne.n	8003f82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	4b7d      	ldr	r3, [pc, #500]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a7c      	ldr	r2, [pc, #496]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b7a      	ldr	r3, [pc, #488]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f82:	4b77      	ldr	r3, [pc, #476]	; (8004160 <HAL_RCC_OscConfig+0x474>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d118      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f8e:	4b74      	ldr	r3, [pc, #464]	; (8004160 <HAL_RCC_OscConfig+0x474>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a73      	ldr	r2, [pc, #460]	; (8004160 <HAL_RCC_OscConfig+0x474>)
 8003f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9a:	f7fe fbd5 	bl	8002748 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa2:	f7fe fbd1 	bl	8002748 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e10c      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb4:	4b6a      	ldr	r3, [pc, #424]	; (8004160 <HAL_RCC_OscConfig+0x474>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x2ea>
 8003fc8:	4b64      	ldr	r3, [pc, #400]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fcc:	4a63      	ldr	r2, [pc, #396]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd4:	e01c      	b.n	8004010 <HAL_RCC_OscConfig+0x324>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b05      	cmp	r3, #5
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x30c>
 8003fde:	4b5f      	ldr	r3, [pc, #380]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	4a5e      	ldr	r2, [pc, #376]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003fe4:	f043 0304 	orr.w	r3, r3, #4
 8003fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fea:	4b5c      	ldr	r3, [pc, #368]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	4a5b      	ldr	r2, [pc, #364]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff6:	e00b      	b.n	8004010 <HAL_RCC_OscConfig+0x324>
 8003ff8:	4b58      	ldr	r3, [pc, #352]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	4a57      	ldr	r2, [pc, #348]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	6713      	str	r3, [r2, #112]	; 0x70
 8004004:	4b55      	ldr	r3, [pc, #340]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a54      	ldr	r2, [pc, #336]	; (800415c <HAL_RCC_OscConfig+0x470>)
 800400a:	f023 0304 	bic.w	r3, r3, #4
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d015      	beq.n	8004044 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004018:	f7fe fb96 	bl	8002748 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401e:	e00a      	b.n	8004036 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004020:	f7fe fb92 	bl	8002748 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	; 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e0cb      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004036:	4b49      	ldr	r3, [pc, #292]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0ee      	beq.n	8004020 <HAL_RCC_OscConfig+0x334>
 8004042:	e014      	b.n	800406e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004044:	f7fe fb80 	bl	8002748 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404a:	e00a      	b.n	8004062 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404c:	f7fe fb7c 	bl	8002748 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e0b5      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004062:	4b3e      	ldr	r3, [pc, #248]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1ee      	bne.n	800404c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800406e:	7dfb      	ldrb	r3, [r7, #23]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d105      	bne.n	8004080 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004074:	4b39      	ldr	r3, [pc, #228]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	4a38      	ldr	r2, [pc, #224]	; (800415c <HAL_RCC_OscConfig+0x470>)
 800407a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 80a1 	beq.w	80041cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800408a:	4b34      	ldr	r3, [pc, #208]	; (800415c <HAL_RCC_OscConfig+0x470>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b08      	cmp	r3, #8
 8004094:	d05c      	beq.n	8004150 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d141      	bne.n	8004122 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409e:	4b31      	ldr	r3, [pc, #196]	; (8004164 <HAL_RCC_OscConfig+0x478>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fe fb50 	bl	8002748 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ac:	f7fe fb4c 	bl	8002748 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e087      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040be:	4b27      	ldr	r3, [pc, #156]	; (800415c <HAL_RCC_OscConfig+0x470>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	019b      	lsls	r3, r3, #6
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	3b01      	subs	r3, #1
 80040e4:	041b      	lsls	r3, r3, #16
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	061b      	lsls	r3, r3, #24
 80040ee:	491b      	ldr	r1, [pc, #108]	; (800415c <HAL_RCC_OscConfig+0x470>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f4:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <HAL_RCC_OscConfig+0x478>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fa:	f7fe fb25 	bl	8002748 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004102:	f7fe fb21 	bl	8002748 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e05c      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004114:	4b11      	ldr	r3, [pc, #68]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x416>
 8004120:	e054      	b.n	80041cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004122:	4b10      	ldr	r3, [pc, #64]	; (8004164 <HAL_RCC_OscConfig+0x478>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004128:	f7fe fb0e 	bl	8002748 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004130:	f7fe fb0a 	bl	8002748 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e045      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0x444>
 800414e:	e03d      	b.n	80041cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d107      	bne.n	8004168 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e038      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
 800415c:	40023800 	.word	0x40023800
 8004160:	40007000 	.word	0x40007000
 8004164:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004168:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <HAL_RCC_OscConfig+0x4ec>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d028      	beq.n	80041c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d121      	bne.n	80041c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418e:	429a      	cmp	r2, r3
 8004190:	d11a      	bne.n	80041c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800419e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d111      	bne.n	80041c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	085b      	lsrs	r3, r3, #1
 80041b0:	3b01      	subs	r3, #1
 80041b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800

080041dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0cc      	b.n	800438a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041f0:	4b68      	ldr	r3, [pc, #416]	; (8004394 <HAL_RCC_ClockConfig+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d90c      	bls.n	8004218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b65      	ldr	r3, [pc, #404]	; (8004394 <HAL_RCC_ClockConfig+0x1b8>)
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b63      	ldr	r3, [pc, #396]	; (8004394 <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0b8      	b.n	800438a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d020      	beq.n	8004266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004230:	4b59      	ldr	r3, [pc, #356]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a58      	ldr	r2, [pc, #352]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800423a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004248:	4b53      	ldr	r3, [pc, #332]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	4a52      	ldr	r2, [pc, #328]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004254:	4b50      	ldr	r3, [pc, #320]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	494d      	ldr	r1, [pc, #308]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d044      	beq.n	80042fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d107      	bne.n	800428a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	4b47      	ldr	r3, [pc, #284]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d119      	bne.n	80042ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e07f      	b.n	800438a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d003      	beq.n	800429a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004296:	2b03      	cmp	r3, #3
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429a:	4b3f      	ldr	r3, [pc, #252]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e06f      	b.n	800438a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042aa:	4b3b      	ldr	r3, [pc, #236]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e067      	b.n	800438a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ba:	4b37      	ldr	r3, [pc, #220]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f023 0203 	bic.w	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	4934      	ldr	r1, [pc, #208]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042cc:	f7fe fa3c 	bl	8002748 <HAL_GetTick>
 80042d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d4:	f7fe fa38 	bl	8002748 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e04f      	b.n	800438a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	4b2b      	ldr	r3, [pc, #172]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 020c 	and.w	r2, r3, #12
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d1eb      	bne.n	80042d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042fc:	4b25      	ldr	r3, [pc, #148]	; (8004394 <HAL_RCC_ClockConfig+0x1b8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d20c      	bcs.n	8004324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b22      	ldr	r3, [pc, #136]	; (8004394 <HAL_RCC_ClockConfig+0x1b8>)
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_RCC_ClockConfig+0x1b8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e032      	b.n	800438a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4916      	ldr	r1, [pc, #88]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	490e      	ldr	r1, [pc, #56]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004362:	f000 f821 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 8004366:	4602      	mov	r2, r0
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	490a      	ldr	r1, [pc, #40]	; (800439c <HAL_RCC_ClockConfig+0x1c0>)
 8004374:	5ccb      	ldrb	r3, [r1, r3]
 8004376:	fa22 f303 	lsr.w	r3, r2, r3
 800437a:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800437e:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe f99c 	bl	80026c0 <HAL_InitTick>

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40023c00 	.word	0x40023c00
 8004398:	40023800 	.word	0x40023800
 800439c:	080068c8 	.word	0x080068c8
 80043a0:	20000000 	.word	0x20000000
 80043a4:	20000024 	.word	0x20000024

080043a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ac:	b094      	sub	sp, #80	; 0x50
 80043ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	647b      	str	r3, [r7, #68]	; 0x44
 80043b4:	2300      	movs	r3, #0
 80043b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b8:	2300      	movs	r3, #0
 80043ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c0:	4b79      	ldr	r3, [pc, #484]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 030c 	and.w	r3, r3, #12
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d00d      	beq.n	80043e8 <HAL_RCC_GetSysClockFreq+0x40>
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	f200 80e1 	bhi.w	8004594 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_RCC_GetSysClockFreq+0x34>
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d003      	beq.n	80043e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80043da:	e0db      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043dc:	4b73      	ldr	r3, [pc, #460]	; (80045ac <HAL_RCC_GetSysClockFreq+0x204>)
 80043de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043e0:	e0db      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043e2:	4b73      	ldr	r3, [pc, #460]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80043e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043e6:	e0d8      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043e8:	4b6f      	ldr	r3, [pc, #444]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043f2:	4b6d      	ldr	r3, [pc, #436]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d063      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fe:	4b6a      	ldr	r3, [pc, #424]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	099b      	lsrs	r3, r3, #6
 8004404:	2200      	movs	r2, #0
 8004406:	63bb      	str	r3, [r7, #56]	; 0x38
 8004408:	63fa      	str	r2, [r7, #60]	; 0x3c
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004410:	633b      	str	r3, [r7, #48]	; 0x30
 8004412:	2300      	movs	r3, #0
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
 8004416:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800441a:	4622      	mov	r2, r4
 800441c:	462b      	mov	r3, r5
 800441e:	f04f 0000 	mov.w	r0, #0
 8004422:	f04f 0100 	mov.w	r1, #0
 8004426:	0159      	lsls	r1, r3, #5
 8004428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800442c:	0150      	lsls	r0, r2, #5
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4621      	mov	r1, r4
 8004434:	1a51      	subs	r1, r2, r1
 8004436:	6139      	str	r1, [r7, #16]
 8004438:	4629      	mov	r1, r5
 800443a:	eb63 0301 	sbc.w	r3, r3, r1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800444c:	4659      	mov	r1, fp
 800444e:	018b      	lsls	r3, r1, #6
 8004450:	4651      	mov	r1, sl
 8004452:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004456:	4651      	mov	r1, sl
 8004458:	018a      	lsls	r2, r1, #6
 800445a:	4651      	mov	r1, sl
 800445c:	ebb2 0801 	subs.w	r8, r2, r1
 8004460:	4659      	mov	r1, fp
 8004462:	eb63 0901 	sbc.w	r9, r3, r1
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800447a:	4690      	mov	r8, r2
 800447c:	4699      	mov	r9, r3
 800447e:	4623      	mov	r3, r4
 8004480:	eb18 0303 	adds.w	r3, r8, r3
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	462b      	mov	r3, r5
 8004488:	eb49 0303 	adc.w	r3, r9, r3
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800449a:	4629      	mov	r1, r5
 800449c:	024b      	lsls	r3, r1, #9
 800449e:	4621      	mov	r1, r4
 80044a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044a4:	4621      	mov	r1, r4
 80044a6:	024a      	lsls	r2, r1, #9
 80044a8:	4610      	mov	r0, r2
 80044aa:	4619      	mov	r1, r3
 80044ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ae:	2200      	movs	r2, #0
 80044b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044b8:	f7fc fb4a 	bl	8000b50 <__aeabi_uldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4613      	mov	r3, r2
 80044c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c4:	e058      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c6:	4b38      	ldr	r3, [pc, #224]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	099b      	lsrs	r3, r3, #6
 80044cc:	2200      	movs	r2, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	4611      	mov	r1, r2
 80044d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044d6:	623b      	str	r3, [r7, #32]
 80044d8:	2300      	movs	r3, #0
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
 80044dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044e0:	4642      	mov	r2, r8
 80044e2:	464b      	mov	r3, r9
 80044e4:	f04f 0000 	mov.w	r0, #0
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	0159      	lsls	r1, r3, #5
 80044ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f2:	0150      	lsls	r0, r2, #5
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4641      	mov	r1, r8
 80044fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80044fe:	4649      	mov	r1, r9
 8004500:	eb63 0b01 	sbc.w	fp, r3, r1
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004510:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004514:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004518:	ebb2 040a 	subs.w	r4, r2, sl
 800451c:	eb63 050b 	sbc.w	r5, r3, fp
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	00eb      	lsls	r3, r5, #3
 800452a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800452e:	00e2      	lsls	r2, r4, #3
 8004530:	4614      	mov	r4, r2
 8004532:	461d      	mov	r5, r3
 8004534:	4643      	mov	r3, r8
 8004536:	18e3      	adds	r3, r4, r3
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	464b      	mov	r3, r9
 800453c:	eb45 0303 	adc.w	r3, r5, r3
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800454e:	4629      	mov	r1, r5
 8004550:	028b      	lsls	r3, r1, #10
 8004552:	4621      	mov	r1, r4
 8004554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004558:	4621      	mov	r1, r4
 800455a:	028a      	lsls	r2, r1, #10
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004562:	2200      	movs	r2, #0
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	61fa      	str	r2, [r7, #28]
 8004568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800456c:	f7fc faf0 	bl	8000b50 <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4613      	mov	r3, r2
 8004576:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	3301      	adds	r3, #1
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004588:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800458a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004592:	e002      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004596:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800459a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800459c:	4618      	mov	r0, r3
 800459e:	3750      	adds	r7, #80	; 0x50
 80045a0:	46bd      	mov	sp, r7
 80045a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800
 80045ac:	00f42400 	.word	0x00f42400
 80045b0:	007a1200 	.word	0x007a1200

080045b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ba:	681b      	ldr	r3, [r3, #0]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000000 	.word	0x20000000

080045cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045d0:	f7ff fff0 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	0a9b      	lsrs	r3, r3, #10
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	4903      	ldr	r1, [pc, #12]	; (80045f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	080068d8 	.word	0x080068d8

080045f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045f8:	f7ff ffdc 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	0b5b      	lsrs	r3, r3, #13
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	4903      	ldr	r1, [pc, #12]	; (8004618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40023800 	.word	0x40023800
 8004618:	080068d8 	.word	0x080068d8

0800461c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e041      	b.n	80046b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fd f896 	bl	8001774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f000 f950 	bl	8004900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d001      	beq.n	80046d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e03c      	b.n	800474e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1e      	ldr	r2, [pc, #120]	; (800475c <HAL_TIM_Base_Start+0xa0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d018      	beq.n	8004718 <HAL_TIM_Base_Start+0x5c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ee:	d013      	beq.n	8004718 <HAL_TIM_Base_Start+0x5c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1a      	ldr	r2, [pc, #104]	; (8004760 <HAL_TIM_Base_Start+0xa4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00e      	beq.n	8004718 <HAL_TIM_Base_Start+0x5c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a19      	ldr	r2, [pc, #100]	; (8004764 <HAL_TIM_Base_Start+0xa8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d009      	beq.n	8004718 <HAL_TIM_Base_Start+0x5c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a17      	ldr	r2, [pc, #92]	; (8004768 <HAL_TIM_Base_Start+0xac>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d004      	beq.n	8004718 <HAL_TIM_Base_Start+0x5c>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a16      	ldr	r2, [pc, #88]	; (800476c <HAL_TIM_Base_Start+0xb0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d111      	bne.n	800473c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b06      	cmp	r3, #6
 8004728:	d010      	beq.n	800474c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0201 	orr.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473a:	e007      	b.n	800474c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40010000 	.word	0x40010000
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800
 8004768:	40000c00 	.word	0x40000c00
 800476c:	40014000 	.word	0x40014000

08004770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_TIM_ConfigClockSource+0x1c>
 8004788:	2302      	movs	r3, #2
 800478a:	e0b4      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x186>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c4:	d03e      	beq.n	8004844 <HAL_TIM_ConfigClockSource+0xd4>
 80047c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ca:	f200 8087 	bhi.w	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 80047ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d2:	f000 8086 	beq.w	80048e2 <HAL_TIM_ConfigClockSource+0x172>
 80047d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047da:	d87f      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 80047dc:	2b70      	cmp	r3, #112	; 0x70
 80047de:	d01a      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0xa6>
 80047e0:	2b70      	cmp	r3, #112	; 0x70
 80047e2:	d87b      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 80047e4:	2b60      	cmp	r3, #96	; 0x60
 80047e6:	d050      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x11a>
 80047e8:	2b60      	cmp	r3, #96	; 0x60
 80047ea:	d877      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 80047ec:	2b50      	cmp	r3, #80	; 0x50
 80047ee:	d03c      	beq.n	800486a <HAL_TIM_ConfigClockSource+0xfa>
 80047f0:	2b50      	cmp	r3, #80	; 0x50
 80047f2:	d873      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 80047f4:	2b40      	cmp	r3, #64	; 0x40
 80047f6:	d058      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0x13a>
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d86f      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 80047fc:	2b30      	cmp	r3, #48	; 0x30
 80047fe:	d064      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x15a>
 8004800:	2b30      	cmp	r3, #48	; 0x30
 8004802:	d86b      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b20      	cmp	r3, #32
 8004806:	d060      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x15a>
 8004808:	2b20      	cmp	r3, #32
 800480a:	d867      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d05c      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x15a>
 8004810:	2b10      	cmp	r3, #16
 8004812:	d05a      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x15a>
 8004814:	e062      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6899      	ldr	r1, [r3, #8]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f000 f965 	bl	8004af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004838:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	609a      	str	r2, [r3, #8]
      break;
 8004842:	e04f      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	6899      	ldr	r1, [r3, #8]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f000 f94e 	bl	8004af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004866:	609a      	str	r2, [r3, #8]
      break;
 8004868:	e03c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6859      	ldr	r1, [r3, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	461a      	mov	r2, r3
 8004878:	f000 f8c2 	bl	8004a00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2150      	movs	r1, #80	; 0x50
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f91b 	bl	8004abe <TIM_ITRx_SetConfig>
      break;
 8004888:	e02c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6859      	ldr	r1, [r3, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	461a      	mov	r2, r3
 8004898:	f000 f8e1 	bl	8004a5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2160      	movs	r1, #96	; 0x60
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f90b 	bl	8004abe <TIM_ITRx_SetConfig>
      break;
 80048a8:	e01c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6859      	ldr	r1, [r3, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	461a      	mov	r2, r3
 80048b8:	f000 f8a2 	bl	8004a00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2140      	movs	r1, #64	; 0x40
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f8fb 	bl	8004abe <TIM_ITRx_SetConfig>
      break;
 80048c8:	e00c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f000 f8f2 	bl	8004abe <TIM_ITRx_SetConfig>
      break;
 80048da:	e003      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      break;
 80048e0:	e000      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a34      	ldr	r2, [pc, #208]	; (80049e4 <TIM_Base_SetConfig+0xe4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00f      	beq.n	8004938 <TIM_Base_SetConfig+0x38>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491e:	d00b      	beq.n	8004938 <TIM_Base_SetConfig+0x38>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a31      	ldr	r2, [pc, #196]	; (80049e8 <TIM_Base_SetConfig+0xe8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <TIM_Base_SetConfig+0x38>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a30      	ldr	r2, [pc, #192]	; (80049ec <TIM_Base_SetConfig+0xec>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_Base_SetConfig+0x38>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a2f      	ldr	r2, [pc, #188]	; (80049f0 <TIM_Base_SetConfig+0xf0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d108      	bne.n	800494a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a25      	ldr	r2, [pc, #148]	; (80049e4 <TIM_Base_SetConfig+0xe4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d01b      	beq.n	800498a <TIM_Base_SetConfig+0x8a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004958:	d017      	beq.n	800498a <TIM_Base_SetConfig+0x8a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a22      	ldr	r2, [pc, #136]	; (80049e8 <TIM_Base_SetConfig+0xe8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <TIM_Base_SetConfig+0x8a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a21      	ldr	r2, [pc, #132]	; (80049ec <TIM_Base_SetConfig+0xec>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00f      	beq.n	800498a <TIM_Base_SetConfig+0x8a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a20      	ldr	r2, [pc, #128]	; (80049f0 <TIM_Base_SetConfig+0xf0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00b      	beq.n	800498a <TIM_Base_SetConfig+0x8a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a1f      	ldr	r2, [pc, #124]	; (80049f4 <TIM_Base_SetConfig+0xf4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d007      	beq.n	800498a <TIM_Base_SetConfig+0x8a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a1e      	ldr	r2, [pc, #120]	; (80049f8 <TIM_Base_SetConfig+0xf8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d003      	beq.n	800498a <TIM_Base_SetConfig+0x8a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1d      	ldr	r2, [pc, #116]	; (80049fc <TIM_Base_SetConfig+0xfc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d108      	bne.n	800499c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <TIM_Base_SetConfig+0xe4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d103      	bne.n	80049d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	615a      	str	r2, [r3, #20]
}
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40010000 	.word	0x40010000
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800
 80049f0:	40000c00 	.word	0x40000c00
 80049f4:	40014000 	.word	0x40014000
 80049f8:	40014400 	.word	0x40014400
 80049fc:	40014800 	.word	0x40014800

08004a00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f023 0201 	bic.w	r2, r3, #1
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f023 030a 	bic.w	r3, r3, #10
 8004a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	621a      	str	r2, [r3, #32]
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b087      	sub	sp, #28
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f023 0210 	bic.w	r2, r3, #16
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	031b      	lsls	r3, r3, #12
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b085      	sub	sp, #20
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f043 0307 	orr.w	r3, r3, #7
 8004ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	609a      	str	r2, [r3, #8]
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	021a      	lsls	r2, r3, #8
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	609a      	str	r2, [r3, #8]
}
 8004b28:	bf00      	nop
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e050      	b.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1c      	ldr	r2, [pc, #112]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d018      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b98:	d013      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a18      	ldr	r2, [pc, #96]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00e      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a16      	ldr	r2, [pc, #88]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d009      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a15      	ldr	r2, [pc, #84]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d004      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d10c      	bne.n	8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40010000 	.word	0x40010000
 8004c00:	40000400 	.word	0x40000400
 8004c04:	40000800 	.word	0x40000800
 8004c08:	40000c00 	.word	0x40000c00
 8004c0c:	40014000 	.word	0x40014000

08004c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e03f      	b.n	8004ca2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc fde8 	bl	800180c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	; 0x24
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f829 	bl	8004cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb0:	b0c0      	sub	sp, #256	; 0x100
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	68d9      	ldr	r1, [r3, #12]
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	ea40 0301 	orr.w	r3, r0, r1
 8004cd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d04:	f021 010c 	bic.w	r1, r1, #12
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d12:	430b      	orrs	r3, r1
 8004d14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d26:	6999      	ldr	r1, [r3, #24]
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	ea40 0301 	orr.w	r3, r0, r1
 8004d32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4b8f      	ldr	r3, [pc, #572]	; (8004f78 <UART_SetConfig+0x2cc>)
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d005      	beq.n	8004d4c <UART_SetConfig+0xa0>
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4b8d      	ldr	r3, [pc, #564]	; (8004f7c <UART_SetConfig+0x2d0>)
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d104      	bne.n	8004d56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d4c:	f7ff fc52 	bl	80045f4 <HAL_RCC_GetPCLK2Freq>
 8004d50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d54:	e003      	b.n	8004d5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d56:	f7ff fc39 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 8004d5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d68:	f040 810c 	bne.w	8004f84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d7e:	4622      	mov	r2, r4
 8004d80:	462b      	mov	r3, r5
 8004d82:	1891      	adds	r1, r2, r2
 8004d84:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d86:	415b      	adcs	r3, r3
 8004d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d8e:	4621      	mov	r1, r4
 8004d90:	eb12 0801 	adds.w	r8, r2, r1
 8004d94:	4629      	mov	r1, r5
 8004d96:	eb43 0901 	adc.w	r9, r3, r1
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dae:	4690      	mov	r8, r2
 8004db0:	4699      	mov	r9, r3
 8004db2:	4623      	mov	r3, r4
 8004db4:	eb18 0303 	adds.w	r3, r8, r3
 8004db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dbc:	462b      	mov	r3, r5
 8004dbe:	eb49 0303 	adc.w	r3, r9, r3
 8004dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dda:	460b      	mov	r3, r1
 8004ddc:	18db      	adds	r3, r3, r3
 8004dde:	653b      	str	r3, [r7, #80]	; 0x50
 8004de0:	4613      	mov	r3, r2
 8004de2:	eb42 0303 	adc.w	r3, r2, r3
 8004de6:	657b      	str	r3, [r7, #84]	; 0x54
 8004de8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004df0:	f7fb feae 	bl	8000b50 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4b61      	ldr	r3, [pc, #388]	; (8004f80 <UART_SetConfig+0x2d4>)
 8004dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	011c      	lsls	r4, r3, #4
 8004e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e14:	4642      	mov	r2, r8
 8004e16:	464b      	mov	r3, r9
 8004e18:	1891      	adds	r1, r2, r2
 8004e1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e1c:	415b      	adcs	r3, r3
 8004e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e24:	4641      	mov	r1, r8
 8004e26:	eb12 0a01 	adds.w	sl, r2, r1
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e44:	4692      	mov	sl, r2
 8004e46:	469b      	mov	fp, r3
 8004e48:	4643      	mov	r3, r8
 8004e4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e52:	464b      	mov	r3, r9
 8004e54:	eb4b 0303 	adc.w	r3, fp, r3
 8004e58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e70:	460b      	mov	r3, r1
 8004e72:	18db      	adds	r3, r3, r3
 8004e74:	643b      	str	r3, [r7, #64]	; 0x40
 8004e76:	4613      	mov	r3, r2
 8004e78:	eb42 0303 	adc.w	r3, r2, r3
 8004e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e86:	f7fb fe63 	bl	8000b50 <__aeabi_uldivmod>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <UART_SetConfig+0x2d4>)
 8004e92:	fba3 2301 	umull	r2, r3, r3, r1
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	2264      	movs	r2, #100	; 0x64
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	1acb      	subs	r3, r1, r3
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ea6:	4b36      	ldr	r3, [pc, #216]	; (8004f80 <UART_SetConfig+0x2d4>)
 8004ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eb4:	441c      	add	r4, r3
 8004eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ec0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ec4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ec8:	4642      	mov	r2, r8
 8004eca:	464b      	mov	r3, r9
 8004ecc:	1891      	adds	r1, r2, r2
 8004ece:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ed0:	415b      	adcs	r3, r3
 8004ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ed8:	4641      	mov	r1, r8
 8004eda:	1851      	adds	r1, r2, r1
 8004edc:	6339      	str	r1, [r7, #48]	; 0x30
 8004ede:	4649      	mov	r1, r9
 8004ee0:	414b      	adcs	r3, r1
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ef0:	4659      	mov	r1, fp
 8004ef2:	00cb      	lsls	r3, r1, #3
 8004ef4:	4651      	mov	r1, sl
 8004ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efa:	4651      	mov	r1, sl
 8004efc:	00ca      	lsls	r2, r1, #3
 8004efe:	4610      	mov	r0, r2
 8004f00:	4619      	mov	r1, r3
 8004f02:	4603      	mov	r3, r0
 8004f04:	4642      	mov	r2, r8
 8004f06:	189b      	adds	r3, r3, r2
 8004f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	460a      	mov	r2, r1
 8004f10:	eb42 0303 	adc.w	r3, r2, r3
 8004f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	18db      	adds	r3, r3, r3
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f32:	4613      	mov	r3, r2
 8004f34:	eb42 0303 	adc.w	r3, r2, r3
 8004f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f42:	f7fb fe05 	bl	8000b50 <__aeabi_uldivmod>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <UART_SetConfig+0x2d4>)
 8004f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	2164      	movs	r1, #100	; 0x64
 8004f54:	fb01 f303 	mul.w	r3, r1, r3
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	3332      	adds	r3, #50	; 0x32
 8004f5e:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <UART_SetConfig+0x2d4>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	f003 0207 	and.w	r2, r3, #7
 8004f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4422      	add	r2, r4
 8004f72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f74:	e105      	b.n	8005182 <UART_SetConfig+0x4d6>
 8004f76:	bf00      	nop
 8004f78:	40011000 	.word	0x40011000
 8004f7c:	40011400 	.word	0x40011400
 8004f80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f96:	4642      	mov	r2, r8
 8004f98:	464b      	mov	r3, r9
 8004f9a:	1891      	adds	r1, r2, r2
 8004f9c:	6239      	str	r1, [r7, #32]
 8004f9e:	415b      	adcs	r3, r3
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fa6:	4641      	mov	r1, r8
 8004fa8:	1854      	adds	r4, r2, r1
 8004faa:	4649      	mov	r1, r9
 8004fac:	eb43 0501 	adc.w	r5, r3, r1
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	00eb      	lsls	r3, r5, #3
 8004fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fbe:	00e2      	lsls	r2, r4, #3
 8004fc0:	4614      	mov	r4, r2
 8004fc2:	461d      	mov	r5, r3
 8004fc4:	4643      	mov	r3, r8
 8004fc6:	18e3      	adds	r3, r4, r3
 8004fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fcc:	464b      	mov	r3, r9
 8004fce:	eb45 0303 	adc.w	r3, r5, r3
 8004fd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	008b      	lsls	r3, r1, #2
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	008a      	lsls	r2, r1, #2
 8005000:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005004:	f7fb fda4 	bl	8000b50 <__aeabi_uldivmod>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4b60      	ldr	r3, [pc, #384]	; (8005190 <UART_SetConfig+0x4e4>)
 800500e:	fba3 2302 	umull	r2, r3, r3, r2
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	011c      	lsls	r4, r3, #4
 8005016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800501a:	2200      	movs	r2, #0
 800501c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005020:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005024:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005028:	4642      	mov	r2, r8
 800502a:	464b      	mov	r3, r9
 800502c:	1891      	adds	r1, r2, r2
 800502e:	61b9      	str	r1, [r7, #24]
 8005030:	415b      	adcs	r3, r3
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005038:	4641      	mov	r1, r8
 800503a:	1851      	adds	r1, r2, r1
 800503c:	6139      	str	r1, [r7, #16]
 800503e:	4649      	mov	r1, r9
 8005040:	414b      	adcs	r3, r1
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005050:	4659      	mov	r1, fp
 8005052:	00cb      	lsls	r3, r1, #3
 8005054:	4651      	mov	r1, sl
 8005056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800505a:	4651      	mov	r1, sl
 800505c:	00ca      	lsls	r2, r1, #3
 800505e:	4610      	mov	r0, r2
 8005060:	4619      	mov	r1, r3
 8005062:	4603      	mov	r3, r0
 8005064:	4642      	mov	r2, r8
 8005066:	189b      	adds	r3, r3, r2
 8005068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800506c:	464b      	mov	r3, r9
 800506e:	460a      	mov	r2, r1
 8005070:	eb42 0303 	adc.w	r3, r2, r3
 8005074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	67bb      	str	r3, [r7, #120]	; 0x78
 8005082:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005090:	4649      	mov	r1, r9
 8005092:	008b      	lsls	r3, r1, #2
 8005094:	4641      	mov	r1, r8
 8005096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800509a:	4641      	mov	r1, r8
 800509c:	008a      	lsls	r2, r1, #2
 800509e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050a2:	f7fb fd55 	bl	8000b50 <__aeabi_uldivmod>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4b39      	ldr	r3, [pc, #228]	; (8005190 <UART_SetConfig+0x4e4>)
 80050ac:	fba3 1302 	umull	r1, r3, r3, r2
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	2164      	movs	r1, #100	; 0x64
 80050b4:	fb01 f303 	mul.w	r3, r1, r3
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	3332      	adds	r3, #50	; 0x32
 80050be:	4a34      	ldr	r2, [pc, #208]	; (8005190 <UART_SetConfig+0x4e4>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ca:	441c      	add	r4, r3
 80050cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d0:	2200      	movs	r2, #0
 80050d2:	673b      	str	r3, [r7, #112]	; 0x70
 80050d4:	677a      	str	r2, [r7, #116]	; 0x74
 80050d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050da:	4642      	mov	r2, r8
 80050dc:	464b      	mov	r3, r9
 80050de:	1891      	adds	r1, r2, r2
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	415b      	adcs	r3, r3
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050ea:	4641      	mov	r1, r8
 80050ec:	1851      	adds	r1, r2, r1
 80050ee:	6039      	str	r1, [r7, #0]
 80050f0:	4649      	mov	r1, r9
 80050f2:	414b      	adcs	r3, r1
 80050f4:	607b      	str	r3, [r7, #4]
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005102:	4659      	mov	r1, fp
 8005104:	00cb      	lsls	r3, r1, #3
 8005106:	4651      	mov	r1, sl
 8005108:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800510c:	4651      	mov	r1, sl
 800510e:	00ca      	lsls	r2, r1, #3
 8005110:	4610      	mov	r0, r2
 8005112:	4619      	mov	r1, r3
 8005114:	4603      	mov	r3, r0
 8005116:	4642      	mov	r2, r8
 8005118:	189b      	adds	r3, r3, r2
 800511a:	66bb      	str	r3, [r7, #104]	; 0x68
 800511c:	464b      	mov	r3, r9
 800511e:	460a      	mov	r2, r1
 8005120:	eb42 0303 	adc.w	r3, r2, r3
 8005124:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	663b      	str	r3, [r7, #96]	; 0x60
 8005130:	667a      	str	r2, [r7, #100]	; 0x64
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800513e:	4649      	mov	r1, r9
 8005140:	008b      	lsls	r3, r1, #2
 8005142:	4641      	mov	r1, r8
 8005144:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005148:	4641      	mov	r1, r8
 800514a:	008a      	lsls	r2, r1, #2
 800514c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005150:	f7fb fcfe 	bl	8000b50 <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4b0d      	ldr	r3, [pc, #52]	; (8005190 <UART_SetConfig+0x4e4>)
 800515a:	fba3 1302 	umull	r1, r3, r3, r2
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	2164      	movs	r1, #100	; 0x64
 8005162:	fb01 f303 	mul.w	r3, r1, r3
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	3332      	adds	r3, #50	; 0x32
 800516c:	4a08      	ldr	r2, [pc, #32]	; (8005190 <UART_SetConfig+0x4e4>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	f003 020f 	and.w	r2, r3, #15
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4422      	add	r2, r4
 8005180:	609a      	str	r2, [r3, #8]
}
 8005182:	bf00      	nop
 8005184:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005188:	46bd      	mov	sp, r7
 800518a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800518e:	bf00      	nop
 8005190:	51eb851f 	.word	0x51eb851f

08005194 <_ZN13TIM_StopWatch5startEv>:
 *      Author: conat
 */

#include "TIMStopWatch.h"

void TIM_StopWatch::start(){
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	update();
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f80c 	bl	80051ba <_ZN13TIM_StopWatch6updateEv>
	HAL_TIM_Base_Start(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fa88 	bl	80046bc <HAL_TIM_Base_Start>
	isStart = true;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	741a      	strb	r2, [r3, #16]
}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <_ZN13TIM_StopWatch6updateEv>:
	count = 0;
	__HAL_TIM_SET_COUNTER(htim, 0);
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
}

void TIM_StopWatch::update(){
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
	uint32_t cnt = __HAL_TIM_GET_COUNTER(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	60fb      	str	r3, [r7, #12]

	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE)) {//over_flow
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b01      	cmp	r3, #1
 80051da:	bf0c      	ite	eq
 80051dc:	2301      	moveq	r3, #1
 80051de:	2300      	movne	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d014      	beq.n	8005210 <_ZN13TIM_StopWatch6updateEv+0x56>
		count += cnt - (befCount - __HAL_TIM_GET_AUTORELOAD(htim));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	1ad2      	subs	r2, r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	441a      	add	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	441a      	add	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	609a      	str	r2, [r3, #8]
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0201 	mvn.w	r2, #1
 800520c:	611a      	str	r2, [r3, #16]
 800520e:	e008      	b.n	8005222 <_ZN13TIM_StopWatch6updateEv+0x68>
	} else {
		count += cnt - befCount;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	68f9      	ldr	r1, [r7, #12]
 800521a:	1acb      	subs	r3, r1, r3
 800521c:	441a      	add	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	609a      	str	r2, [r3, #8]
	}

	befCount = cnt;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	60da      	str	r2, [r3, #12]
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <_ZN13TIM_StopWatch9getTimeMSEv>:

float TIM_StopWatch::getTimeMS(){
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	return count / (float)frequence * 1000.0f;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	ee07 3a90 	vmov	s15, r3
 8005244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	ee07 3a90 	vmov	s15, r3
 8005250:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005258:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005270 <_ZN13TIM_StopWatch9getTimeMSEv+0x3c>
 800525c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005260:	eeb0 0a67 	vmov.f32	s0, s15
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	447a0000 	.word	0x447a0000

08005274 <atan2>:
 8005274:	f000 b8c8 	b.w	8005408 <__ieee754_atan2>

08005278 <pow>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	ed2d 8b02 	vpush	{d8}
 800527e:	eeb0 8a40 	vmov.f32	s16, s0
 8005282:	eef0 8a60 	vmov.f32	s17, s1
 8005286:	ec55 4b11 	vmov	r4, r5, d1
 800528a:	f000 f989 	bl	80055a0 <__ieee754_pow>
 800528e:	4622      	mov	r2, r4
 8005290:	462b      	mov	r3, r5
 8005292:	4620      	mov	r0, r4
 8005294:	4629      	mov	r1, r5
 8005296:	ec57 6b10 	vmov	r6, r7, d0
 800529a:	f7fb fbf3 	bl	8000a84 <__aeabi_dcmpun>
 800529e:	2800      	cmp	r0, #0
 80052a0:	d13b      	bne.n	800531a <pow+0xa2>
 80052a2:	ec51 0b18 	vmov	r0, r1, d8
 80052a6:	2200      	movs	r2, #0
 80052a8:	2300      	movs	r3, #0
 80052aa:	f7fb fbb9 	bl	8000a20 <__aeabi_dcmpeq>
 80052ae:	b1b8      	cbz	r0, 80052e0 <pow+0x68>
 80052b0:	2200      	movs	r2, #0
 80052b2:	2300      	movs	r3, #0
 80052b4:	4620      	mov	r0, r4
 80052b6:	4629      	mov	r1, r5
 80052b8:	f7fb fbb2 	bl	8000a20 <__aeabi_dcmpeq>
 80052bc:	2800      	cmp	r0, #0
 80052be:	d146      	bne.n	800534e <pow+0xd6>
 80052c0:	ec45 4b10 	vmov	d0, r4, r5
 80052c4:	f001 fa11 	bl	80066ea <finite>
 80052c8:	b338      	cbz	r0, 800531a <pow+0xa2>
 80052ca:	2200      	movs	r2, #0
 80052cc:	2300      	movs	r3, #0
 80052ce:	4620      	mov	r0, r4
 80052d0:	4629      	mov	r1, r5
 80052d2:	f7fb fbaf 	bl	8000a34 <__aeabi_dcmplt>
 80052d6:	b300      	cbz	r0, 800531a <pow+0xa2>
 80052d8:	f001 faa6 	bl	8006828 <__errno>
 80052dc:	2322      	movs	r3, #34	; 0x22
 80052de:	e01b      	b.n	8005318 <pow+0xa0>
 80052e0:	ec47 6b10 	vmov	d0, r6, r7
 80052e4:	f001 fa01 	bl	80066ea <finite>
 80052e8:	b9e0      	cbnz	r0, 8005324 <pow+0xac>
 80052ea:	eeb0 0a48 	vmov.f32	s0, s16
 80052ee:	eef0 0a68 	vmov.f32	s1, s17
 80052f2:	f001 f9fa 	bl	80066ea <finite>
 80052f6:	b1a8      	cbz	r0, 8005324 <pow+0xac>
 80052f8:	ec45 4b10 	vmov	d0, r4, r5
 80052fc:	f001 f9f5 	bl	80066ea <finite>
 8005300:	b180      	cbz	r0, 8005324 <pow+0xac>
 8005302:	4632      	mov	r2, r6
 8005304:	463b      	mov	r3, r7
 8005306:	4630      	mov	r0, r6
 8005308:	4639      	mov	r1, r7
 800530a:	f7fb fbbb 	bl	8000a84 <__aeabi_dcmpun>
 800530e:	2800      	cmp	r0, #0
 8005310:	d0e2      	beq.n	80052d8 <pow+0x60>
 8005312:	f001 fa89 	bl	8006828 <__errno>
 8005316:	2321      	movs	r3, #33	; 0x21
 8005318:	6003      	str	r3, [r0, #0]
 800531a:	ecbd 8b02 	vpop	{d8}
 800531e:	ec47 6b10 	vmov	d0, r6, r7
 8005322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005324:	2200      	movs	r2, #0
 8005326:	2300      	movs	r3, #0
 8005328:	4630      	mov	r0, r6
 800532a:	4639      	mov	r1, r7
 800532c:	f7fb fb78 	bl	8000a20 <__aeabi_dcmpeq>
 8005330:	2800      	cmp	r0, #0
 8005332:	d0f2      	beq.n	800531a <pow+0xa2>
 8005334:	eeb0 0a48 	vmov.f32	s0, s16
 8005338:	eef0 0a68 	vmov.f32	s1, s17
 800533c:	f001 f9d5 	bl	80066ea <finite>
 8005340:	2800      	cmp	r0, #0
 8005342:	d0ea      	beq.n	800531a <pow+0xa2>
 8005344:	ec45 4b10 	vmov	d0, r4, r5
 8005348:	f001 f9cf 	bl	80066ea <finite>
 800534c:	e7c3      	b.n	80052d6 <pow+0x5e>
 800534e:	4f01      	ldr	r7, [pc, #4]	; (8005354 <pow+0xdc>)
 8005350:	2600      	movs	r6, #0
 8005352:	e7e2      	b.n	800531a <pow+0xa2>
 8005354:	3ff00000 	.word	0x3ff00000

08005358 <sqrt>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	ed2d 8b02 	vpush	{d8}
 800535e:	ec55 4b10 	vmov	r4, r5, d0
 8005362:	f000 fe4b 	bl	8005ffc <__ieee754_sqrt>
 8005366:	4622      	mov	r2, r4
 8005368:	462b      	mov	r3, r5
 800536a:	4620      	mov	r0, r4
 800536c:	4629      	mov	r1, r5
 800536e:	eeb0 8a40 	vmov.f32	s16, s0
 8005372:	eef0 8a60 	vmov.f32	s17, s1
 8005376:	f7fb fb85 	bl	8000a84 <__aeabi_dcmpun>
 800537a:	b990      	cbnz	r0, 80053a2 <sqrt+0x4a>
 800537c:	2200      	movs	r2, #0
 800537e:	2300      	movs	r3, #0
 8005380:	4620      	mov	r0, r4
 8005382:	4629      	mov	r1, r5
 8005384:	f7fb fb56 	bl	8000a34 <__aeabi_dcmplt>
 8005388:	b158      	cbz	r0, 80053a2 <sqrt+0x4a>
 800538a:	f001 fa4d 	bl	8006828 <__errno>
 800538e:	2321      	movs	r3, #33	; 0x21
 8005390:	6003      	str	r3, [r0, #0]
 8005392:	2200      	movs	r2, #0
 8005394:	2300      	movs	r3, #0
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	f7fb fa03 	bl	80007a4 <__aeabi_ddiv>
 800539e:	ec41 0b18 	vmov	d8, r0, r1
 80053a2:	eeb0 0a48 	vmov.f32	s0, s16
 80053a6:	eef0 0a68 	vmov.f32	s1, s17
 80053aa:	ecbd 8b02 	vpop	{d8}
 80053ae:	bd38      	pop	{r3, r4, r5, pc}

080053b0 <asinf>:
 80053b0:	b508      	push	{r3, lr}
 80053b2:	ed2d 8b02 	vpush	{d8}
 80053b6:	eeb0 8a40 	vmov.f32	s16, s0
 80053ba:	f000 fed1 	bl	8006160 <__ieee754_asinf>
 80053be:	eeb4 8a48 	vcmp.f32	s16, s16
 80053c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c6:	eef0 8a40 	vmov.f32	s17, s0
 80053ca:	d615      	bvs.n	80053f8 <asinf+0x48>
 80053cc:	eeb0 0a48 	vmov.f32	s0, s16
 80053d0:	f001 fa1c 	bl	800680c <fabsf>
 80053d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80053d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80053dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e0:	dd0a      	ble.n	80053f8 <asinf+0x48>
 80053e2:	f001 fa21 	bl	8006828 <__errno>
 80053e6:	ecbd 8b02 	vpop	{d8}
 80053ea:	2321      	movs	r3, #33	; 0x21
 80053ec:	6003      	str	r3, [r0, #0]
 80053ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80053f2:	4804      	ldr	r0, [pc, #16]	; (8005404 <asinf+0x54>)
 80053f4:	f001 ba12 	b.w	800681c <nanf>
 80053f8:	eeb0 0a68 	vmov.f32	s0, s17
 80053fc:	ecbd 8b02 	vpop	{d8}
 8005400:	bd08      	pop	{r3, pc}
 8005402:	bf00      	nop
 8005404:	080068e0 	.word	0x080068e0

08005408 <__ieee754_atan2>:
 8005408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800540c:	ec57 6b11 	vmov	r6, r7, d1
 8005410:	4273      	negs	r3, r6
 8005412:	f8df e184 	ldr.w	lr, [pc, #388]	; 8005598 <__ieee754_atan2+0x190>
 8005416:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800541a:	4333      	orrs	r3, r6
 800541c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005420:	4573      	cmp	r3, lr
 8005422:	ec51 0b10 	vmov	r0, r1, d0
 8005426:	ee11 8a10 	vmov	r8, s2
 800542a:	d80a      	bhi.n	8005442 <__ieee754_atan2+0x3a>
 800542c:	4244      	negs	r4, r0
 800542e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005432:	4304      	orrs	r4, r0
 8005434:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005438:	4574      	cmp	r4, lr
 800543a:	ee10 9a10 	vmov	r9, s0
 800543e:	468c      	mov	ip, r1
 8005440:	d907      	bls.n	8005452 <__ieee754_atan2+0x4a>
 8005442:	4632      	mov	r2, r6
 8005444:	463b      	mov	r3, r7
 8005446:	f7fa fecd 	bl	80001e4 <__adddf3>
 800544a:	ec41 0b10 	vmov	d0, r0, r1
 800544e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005452:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8005456:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800545a:	4334      	orrs	r4, r6
 800545c:	d103      	bne.n	8005466 <__ieee754_atan2+0x5e>
 800545e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005462:	f000 bf99 	b.w	8006398 <atan>
 8005466:	17bc      	asrs	r4, r7, #30
 8005468:	f004 0402 	and.w	r4, r4, #2
 800546c:	ea53 0909 	orrs.w	r9, r3, r9
 8005470:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005474:	d107      	bne.n	8005486 <__ieee754_atan2+0x7e>
 8005476:	2c02      	cmp	r4, #2
 8005478:	d060      	beq.n	800553c <__ieee754_atan2+0x134>
 800547a:	2c03      	cmp	r4, #3
 800547c:	d1e5      	bne.n	800544a <__ieee754_atan2+0x42>
 800547e:	a142      	add	r1, pc, #264	; (adr r1, 8005588 <__ieee754_atan2+0x180>)
 8005480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005484:	e7e1      	b.n	800544a <__ieee754_atan2+0x42>
 8005486:	ea52 0808 	orrs.w	r8, r2, r8
 800548a:	d106      	bne.n	800549a <__ieee754_atan2+0x92>
 800548c:	f1bc 0f00 	cmp.w	ip, #0
 8005490:	da5f      	bge.n	8005552 <__ieee754_atan2+0x14a>
 8005492:	a13f      	add	r1, pc, #252	; (adr r1, 8005590 <__ieee754_atan2+0x188>)
 8005494:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005498:	e7d7      	b.n	800544a <__ieee754_atan2+0x42>
 800549a:	4572      	cmp	r2, lr
 800549c:	d10f      	bne.n	80054be <__ieee754_atan2+0xb6>
 800549e:	4293      	cmp	r3, r2
 80054a0:	f104 34ff 	add.w	r4, r4, #4294967295
 80054a4:	d107      	bne.n	80054b6 <__ieee754_atan2+0xae>
 80054a6:	2c02      	cmp	r4, #2
 80054a8:	d84c      	bhi.n	8005544 <__ieee754_atan2+0x13c>
 80054aa:	4b35      	ldr	r3, [pc, #212]	; (8005580 <__ieee754_atan2+0x178>)
 80054ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80054b0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80054b4:	e7c9      	b.n	800544a <__ieee754_atan2+0x42>
 80054b6:	2c02      	cmp	r4, #2
 80054b8:	d848      	bhi.n	800554c <__ieee754_atan2+0x144>
 80054ba:	4b32      	ldr	r3, [pc, #200]	; (8005584 <__ieee754_atan2+0x17c>)
 80054bc:	e7f6      	b.n	80054ac <__ieee754_atan2+0xa4>
 80054be:	4573      	cmp	r3, lr
 80054c0:	d0e4      	beq.n	800548c <__ieee754_atan2+0x84>
 80054c2:	1a9b      	subs	r3, r3, r2
 80054c4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80054c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80054cc:	da1e      	bge.n	800550c <__ieee754_atan2+0x104>
 80054ce:	2f00      	cmp	r7, #0
 80054d0:	da01      	bge.n	80054d6 <__ieee754_atan2+0xce>
 80054d2:	323c      	adds	r2, #60	; 0x3c
 80054d4:	db1e      	blt.n	8005514 <__ieee754_atan2+0x10c>
 80054d6:	4632      	mov	r2, r6
 80054d8:	463b      	mov	r3, r7
 80054da:	f7fb f963 	bl	80007a4 <__aeabi_ddiv>
 80054de:	ec41 0b10 	vmov	d0, r0, r1
 80054e2:	f001 f8f9 	bl	80066d8 <fabs>
 80054e6:	f000 ff57 	bl	8006398 <atan>
 80054ea:	ec51 0b10 	vmov	r0, r1, d0
 80054ee:	2c01      	cmp	r4, #1
 80054f0:	d013      	beq.n	800551a <__ieee754_atan2+0x112>
 80054f2:	2c02      	cmp	r4, #2
 80054f4:	d015      	beq.n	8005522 <__ieee754_atan2+0x11a>
 80054f6:	2c00      	cmp	r4, #0
 80054f8:	d0a7      	beq.n	800544a <__ieee754_atan2+0x42>
 80054fa:	a319      	add	r3, pc, #100	; (adr r3, 8005560 <__ieee754_atan2+0x158>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f7fa fe6e 	bl	80001e0 <__aeabi_dsub>
 8005504:	a318      	add	r3, pc, #96	; (adr r3, 8005568 <__ieee754_atan2+0x160>)
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	e014      	b.n	8005536 <__ieee754_atan2+0x12e>
 800550c:	a118      	add	r1, pc, #96	; (adr r1, 8005570 <__ieee754_atan2+0x168>)
 800550e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005512:	e7ec      	b.n	80054ee <__ieee754_atan2+0xe6>
 8005514:	2000      	movs	r0, #0
 8005516:	2100      	movs	r1, #0
 8005518:	e7e9      	b.n	80054ee <__ieee754_atan2+0xe6>
 800551a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800551e:	4619      	mov	r1, r3
 8005520:	e793      	b.n	800544a <__ieee754_atan2+0x42>
 8005522:	a30f      	add	r3, pc, #60	; (adr r3, 8005560 <__ieee754_atan2+0x158>)
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f7fa fe5a 	bl	80001e0 <__aeabi_dsub>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	a10d      	add	r1, pc, #52	; (adr r1, 8005568 <__ieee754_atan2+0x160>)
 8005532:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005536:	f7fa fe53 	bl	80001e0 <__aeabi_dsub>
 800553a:	e786      	b.n	800544a <__ieee754_atan2+0x42>
 800553c:	a10a      	add	r1, pc, #40	; (adr r1, 8005568 <__ieee754_atan2+0x160>)
 800553e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005542:	e782      	b.n	800544a <__ieee754_atan2+0x42>
 8005544:	a10c      	add	r1, pc, #48	; (adr r1, 8005578 <__ieee754_atan2+0x170>)
 8005546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800554a:	e77e      	b.n	800544a <__ieee754_atan2+0x42>
 800554c:	2000      	movs	r0, #0
 800554e:	2100      	movs	r1, #0
 8005550:	e77b      	b.n	800544a <__ieee754_atan2+0x42>
 8005552:	a107      	add	r1, pc, #28	; (adr r1, 8005570 <__ieee754_atan2+0x168>)
 8005554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005558:	e777      	b.n	800544a <__ieee754_atan2+0x42>
 800555a:	bf00      	nop
 800555c:	f3af 8000 	nop.w
 8005560:	33145c07 	.word	0x33145c07
 8005564:	3ca1a626 	.word	0x3ca1a626
 8005568:	54442d18 	.word	0x54442d18
 800556c:	400921fb 	.word	0x400921fb
 8005570:	54442d18 	.word	0x54442d18
 8005574:	3ff921fb 	.word	0x3ff921fb
 8005578:	54442d18 	.word	0x54442d18
 800557c:	3fe921fb 	.word	0x3fe921fb
 8005580:	080068e8 	.word	0x080068e8
 8005584:	08006900 	.word	0x08006900
 8005588:	54442d18 	.word	0x54442d18
 800558c:	c00921fb 	.word	0xc00921fb
 8005590:	54442d18 	.word	0x54442d18
 8005594:	bff921fb 	.word	0xbff921fb
 8005598:	7ff00000 	.word	0x7ff00000
 800559c:	00000000 	.word	0x00000000

080055a0 <__ieee754_pow>:
 80055a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a4:	ed2d 8b06 	vpush	{d8-d10}
 80055a8:	b089      	sub	sp, #36	; 0x24
 80055aa:	ed8d 1b00 	vstr	d1, [sp]
 80055ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 80055b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80055b6:	ea58 0102 	orrs.w	r1, r8, r2
 80055ba:	ec57 6b10 	vmov	r6, r7, d0
 80055be:	d115      	bne.n	80055ec <__ieee754_pow+0x4c>
 80055c0:	19b3      	adds	r3, r6, r6
 80055c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80055c6:	4152      	adcs	r2, r2
 80055c8:	4299      	cmp	r1, r3
 80055ca:	4b89      	ldr	r3, [pc, #548]	; (80057f0 <__ieee754_pow+0x250>)
 80055cc:	4193      	sbcs	r3, r2
 80055ce:	f080 84d2 	bcs.w	8005f76 <__ieee754_pow+0x9d6>
 80055d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055d6:	4630      	mov	r0, r6
 80055d8:	4639      	mov	r1, r7
 80055da:	f7fa fe03 	bl	80001e4 <__adddf3>
 80055de:	ec41 0b10 	vmov	d0, r0, r1
 80055e2:	b009      	add	sp, #36	; 0x24
 80055e4:	ecbd 8b06 	vpop	{d8-d10}
 80055e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ec:	4b81      	ldr	r3, [pc, #516]	; (80057f4 <__ieee754_pow+0x254>)
 80055ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80055f2:	429c      	cmp	r4, r3
 80055f4:	ee10 aa10 	vmov	sl, s0
 80055f8:	463d      	mov	r5, r7
 80055fa:	dc06      	bgt.n	800560a <__ieee754_pow+0x6a>
 80055fc:	d101      	bne.n	8005602 <__ieee754_pow+0x62>
 80055fe:	2e00      	cmp	r6, #0
 8005600:	d1e7      	bne.n	80055d2 <__ieee754_pow+0x32>
 8005602:	4598      	cmp	r8, r3
 8005604:	dc01      	bgt.n	800560a <__ieee754_pow+0x6a>
 8005606:	d10f      	bne.n	8005628 <__ieee754_pow+0x88>
 8005608:	b172      	cbz	r2, 8005628 <__ieee754_pow+0x88>
 800560a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800560e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005612:	ea55 050a 	orrs.w	r5, r5, sl
 8005616:	d1dc      	bne.n	80055d2 <__ieee754_pow+0x32>
 8005618:	e9dd 3200 	ldrd	r3, r2, [sp]
 800561c:	18db      	adds	r3, r3, r3
 800561e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005622:	4152      	adcs	r2, r2
 8005624:	429d      	cmp	r5, r3
 8005626:	e7d0      	b.n	80055ca <__ieee754_pow+0x2a>
 8005628:	2d00      	cmp	r5, #0
 800562a:	da3b      	bge.n	80056a4 <__ieee754_pow+0x104>
 800562c:	4b72      	ldr	r3, [pc, #456]	; (80057f8 <__ieee754_pow+0x258>)
 800562e:	4598      	cmp	r8, r3
 8005630:	dc51      	bgt.n	80056d6 <__ieee754_pow+0x136>
 8005632:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005636:	4598      	cmp	r8, r3
 8005638:	f340 84ac 	ble.w	8005f94 <__ieee754_pow+0x9f4>
 800563c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005640:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005644:	2b14      	cmp	r3, #20
 8005646:	dd0f      	ble.n	8005668 <__ieee754_pow+0xc8>
 8005648:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800564c:	fa22 f103 	lsr.w	r1, r2, r3
 8005650:	fa01 f303 	lsl.w	r3, r1, r3
 8005654:	4293      	cmp	r3, r2
 8005656:	f040 849d 	bne.w	8005f94 <__ieee754_pow+0x9f4>
 800565a:	f001 0101 	and.w	r1, r1, #1
 800565e:	f1c1 0302 	rsb	r3, r1, #2
 8005662:	9304      	str	r3, [sp, #16]
 8005664:	b182      	cbz	r2, 8005688 <__ieee754_pow+0xe8>
 8005666:	e05f      	b.n	8005728 <__ieee754_pow+0x188>
 8005668:	2a00      	cmp	r2, #0
 800566a:	d15b      	bne.n	8005724 <__ieee754_pow+0x184>
 800566c:	f1c3 0314 	rsb	r3, r3, #20
 8005670:	fa48 f103 	asr.w	r1, r8, r3
 8005674:	fa01 f303 	lsl.w	r3, r1, r3
 8005678:	4543      	cmp	r3, r8
 800567a:	f040 8488 	bne.w	8005f8e <__ieee754_pow+0x9ee>
 800567e:	f001 0101 	and.w	r1, r1, #1
 8005682:	f1c1 0302 	rsb	r3, r1, #2
 8005686:	9304      	str	r3, [sp, #16]
 8005688:	4b5c      	ldr	r3, [pc, #368]	; (80057fc <__ieee754_pow+0x25c>)
 800568a:	4598      	cmp	r8, r3
 800568c:	d132      	bne.n	80056f4 <__ieee754_pow+0x154>
 800568e:	f1b9 0f00 	cmp.w	r9, #0
 8005692:	f280 8478 	bge.w	8005f86 <__ieee754_pow+0x9e6>
 8005696:	4959      	ldr	r1, [pc, #356]	; (80057fc <__ieee754_pow+0x25c>)
 8005698:	4632      	mov	r2, r6
 800569a:	463b      	mov	r3, r7
 800569c:	2000      	movs	r0, #0
 800569e:	f7fb f881 	bl	80007a4 <__aeabi_ddiv>
 80056a2:	e79c      	b.n	80055de <__ieee754_pow+0x3e>
 80056a4:	2300      	movs	r3, #0
 80056a6:	9304      	str	r3, [sp, #16]
 80056a8:	2a00      	cmp	r2, #0
 80056aa:	d13d      	bne.n	8005728 <__ieee754_pow+0x188>
 80056ac:	4b51      	ldr	r3, [pc, #324]	; (80057f4 <__ieee754_pow+0x254>)
 80056ae:	4598      	cmp	r8, r3
 80056b0:	d1ea      	bne.n	8005688 <__ieee754_pow+0xe8>
 80056b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80056b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80056ba:	ea53 030a 	orrs.w	r3, r3, sl
 80056be:	f000 845a 	beq.w	8005f76 <__ieee754_pow+0x9d6>
 80056c2:	4b4f      	ldr	r3, [pc, #316]	; (8005800 <__ieee754_pow+0x260>)
 80056c4:	429c      	cmp	r4, r3
 80056c6:	dd08      	ble.n	80056da <__ieee754_pow+0x13a>
 80056c8:	f1b9 0f00 	cmp.w	r9, #0
 80056cc:	f2c0 8457 	blt.w	8005f7e <__ieee754_pow+0x9de>
 80056d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056d4:	e783      	b.n	80055de <__ieee754_pow+0x3e>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e7e5      	b.n	80056a6 <__ieee754_pow+0x106>
 80056da:	f1b9 0f00 	cmp.w	r9, #0
 80056de:	f04f 0000 	mov.w	r0, #0
 80056e2:	f04f 0100 	mov.w	r1, #0
 80056e6:	f6bf af7a 	bge.w	80055de <__ieee754_pow+0x3e>
 80056ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 80056ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80056f2:	e774      	b.n	80055de <__ieee754_pow+0x3e>
 80056f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80056f8:	d106      	bne.n	8005708 <__ieee754_pow+0x168>
 80056fa:	4632      	mov	r2, r6
 80056fc:	463b      	mov	r3, r7
 80056fe:	4630      	mov	r0, r6
 8005700:	4639      	mov	r1, r7
 8005702:	f7fa ff25 	bl	8000550 <__aeabi_dmul>
 8005706:	e76a      	b.n	80055de <__ieee754_pow+0x3e>
 8005708:	4b3e      	ldr	r3, [pc, #248]	; (8005804 <__ieee754_pow+0x264>)
 800570a:	4599      	cmp	r9, r3
 800570c:	d10c      	bne.n	8005728 <__ieee754_pow+0x188>
 800570e:	2d00      	cmp	r5, #0
 8005710:	db0a      	blt.n	8005728 <__ieee754_pow+0x188>
 8005712:	ec47 6b10 	vmov	d0, r6, r7
 8005716:	b009      	add	sp, #36	; 0x24
 8005718:	ecbd 8b06 	vpop	{d8-d10}
 800571c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005720:	f000 bc6c 	b.w	8005ffc <__ieee754_sqrt>
 8005724:	2300      	movs	r3, #0
 8005726:	9304      	str	r3, [sp, #16]
 8005728:	ec47 6b10 	vmov	d0, r6, r7
 800572c:	f000 ffd4 	bl	80066d8 <fabs>
 8005730:	ec51 0b10 	vmov	r0, r1, d0
 8005734:	f1ba 0f00 	cmp.w	sl, #0
 8005738:	d129      	bne.n	800578e <__ieee754_pow+0x1ee>
 800573a:	b124      	cbz	r4, 8005746 <__ieee754_pow+0x1a6>
 800573c:	4b2f      	ldr	r3, [pc, #188]	; (80057fc <__ieee754_pow+0x25c>)
 800573e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005742:	429a      	cmp	r2, r3
 8005744:	d123      	bne.n	800578e <__ieee754_pow+0x1ee>
 8005746:	f1b9 0f00 	cmp.w	r9, #0
 800574a:	da05      	bge.n	8005758 <__ieee754_pow+0x1b8>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	2000      	movs	r0, #0
 8005752:	492a      	ldr	r1, [pc, #168]	; (80057fc <__ieee754_pow+0x25c>)
 8005754:	f7fb f826 	bl	80007a4 <__aeabi_ddiv>
 8005758:	2d00      	cmp	r5, #0
 800575a:	f6bf af40 	bge.w	80055de <__ieee754_pow+0x3e>
 800575e:	9b04      	ldr	r3, [sp, #16]
 8005760:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005764:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005768:	4323      	orrs	r3, r4
 800576a:	d108      	bne.n	800577e <__ieee754_pow+0x1de>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4610      	mov	r0, r2
 8005772:	4619      	mov	r1, r3
 8005774:	f7fa fd34 	bl	80001e0 <__aeabi_dsub>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	e78f      	b.n	800569e <__ieee754_pow+0xfe>
 800577e:	9b04      	ldr	r3, [sp, #16]
 8005780:	2b01      	cmp	r3, #1
 8005782:	f47f af2c 	bne.w	80055de <__ieee754_pow+0x3e>
 8005786:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800578a:	4619      	mov	r1, r3
 800578c:	e727      	b.n	80055de <__ieee754_pow+0x3e>
 800578e:	0feb      	lsrs	r3, r5, #31
 8005790:	3b01      	subs	r3, #1
 8005792:	9306      	str	r3, [sp, #24]
 8005794:	9a06      	ldr	r2, [sp, #24]
 8005796:	9b04      	ldr	r3, [sp, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	d102      	bne.n	80057a2 <__ieee754_pow+0x202>
 800579c:	4632      	mov	r2, r6
 800579e:	463b      	mov	r3, r7
 80057a0:	e7e6      	b.n	8005770 <__ieee754_pow+0x1d0>
 80057a2:	4b19      	ldr	r3, [pc, #100]	; (8005808 <__ieee754_pow+0x268>)
 80057a4:	4598      	cmp	r8, r3
 80057a6:	f340 80fb 	ble.w	80059a0 <__ieee754_pow+0x400>
 80057aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80057ae:	4598      	cmp	r8, r3
 80057b0:	4b13      	ldr	r3, [pc, #76]	; (8005800 <__ieee754_pow+0x260>)
 80057b2:	dd0c      	ble.n	80057ce <__ieee754_pow+0x22e>
 80057b4:	429c      	cmp	r4, r3
 80057b6:	dc0f      	bgt.n	80057d8 <__ieee754_pow+0x238>
 80057b8:	f1b9 0f00 	cmp.w	r9, #0
 80057bc:	da0f      	bge.n	80057de <__ieee754_pow+0x23e>
 80057be:	2000      	movs	r0, #0
 80057c0:	b009      	add	sp, #36	; 0x24
 80057c2:	ecbd 8b06 	vpop	{d8-d10}
 80057c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ca:	f000 bdd9 	b.w	8006380 <__math_oflow>
 80057ce:	429c      	cmp	r4, r3
 80057d0:	dbf2      	blt.n	80057b8 <__ieee754_pow+0x218>
 80057d2:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <__ieee754_pow+0x25c>)
 80057d4:	429c      	cmp	r4, r3
 80057d6:	dd19      	ble.n	800580c <__ieee754_pow+0x26c>
 80057d8:	f1b9 0f00 	cmp.w	r9, #0
 80057dc:	dcef      	bgt.n	80057be <__ieee754_pow+0x21e>
 80057de:	2000      	movs	r0, #0
 80057e0:	b009      	add	sp, #36	; 0x24
 80057e2:	ecbd 8b06 	vpop	{d8-d10}
 80057e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ea:	f000 bdc0 	b.w	800636e <__math_uflow>
 80057ee:	bf00      	nop
 80057f0:	fff00000 	.word	0xfff00000
 80057f4:	7ff00000 	.word	0x7ff00000
 80057f8:	433fffff 	.word	0x433fffff
 80057fc:	3ff00000 	.word	0x3ff00000
 8005800:	3fefffff 	.word	0x3fefffff
 8005804:	3fe00000 	.word	0x3fe00000
 8005808:	41e00000 	.word	0x41e00000
 800580c:	4b60      	ldr	r3, [pc, #384]	; (8005990 <__ieee754_pow+0x3f0>)
 800580e:	2200      	movs	r2, #0
 8005810:	f7fa fce6 	bl	80001e0 <__aeabi_dsub>
 8005814:	a354      	add	r3, pc, #336	; (adr r3, 8005968 <__ieee754_pow+0x3c8>)
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	4604      	mov	r4, r0
 800581c:	460d      	mov	r5, r1
 800581e:	f7fa fe97 	bl	8000550 <__aeabi_dmul>
 8005822:	a353      	add	r3, pc, #332	; (adr r3, 8005970 <__ieee754_pow+0x3d0>)
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	4606      	mov	r6, r0
 800582a:	460f      	mov	r7, r1
 800582c:	4620      	mov	r0, r4
 800582e:	4629      	mov	r1, r5
 8005830:	f7fa fe8e 	bl	8000550 <__aeabi_dmul>
 8005834:	4b57      	ldr	r3, [pc, #348]	; (8005994 <__ieee754_pow+0x3f4>)
 8005836:	4682      	mov	sl, r0
 8005838:	468b      	mov	fp, r1
 800583a:	2200      	movs	r2, #0
 800583c:	4620      	mov	r0, r4
 800583e:	4629      	mov	r1, r5
 8005840:	f7fa fe86 	bl	8000550 <__aeabi_dmul>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	a14b      	add	r1, pc, #300	; (adr r1, 8005978 <__ieee754_pow+0x3d8>)
 800584a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800584e:	f7fa fcc7 	bl	80001e0 <__aeabi_dsub>
 8005852:	4622      	mov	r2, r4
 8005854:	462b      	mov	r3, r5
 8005856:	f7fa fe7b 	bl	8000550 <__aeabi_dmul>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	2000      	movs	r0, #0
 8005860:	494d      	ldr	r1, [pc, #308]	; (8005998 <__ieee754_pow+0x3f8>)
 8005862:	f7fa fcbd 	bl	80001e0 <__aeabi_dsub>
 8005866:	4622      	mov	r2, r4
 8005868:	4680      	mov	r8, r0
 800586a:	4689      	mov	r9, r1
 800586c:	462b      	mov	r3, r5
 800586e:	4620      	mov	r0, r4
 8005870:	4629      	mov	r1, r5
 8005872:	f7fa fe6d 	bl	8000550 <__aeabi_dmul>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4640      	mov	r0, r8
 800587c:	4649      	mov	r1, r9
 800587e:	f7fa fe67 	bl	8000550 <__aeabi_dmul>
 8005882:	a33f      	add	r3, pc, #252	; (adr r3, 8005980 <__ieee754_pow+0x3e0>)
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	f7fa fe62 	bl	8000550 <__aeabi_dmul>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4650      	mov	r0, sl
 8005892:	4659      	mov	r1, fp
 8005894:	f7fa fca4 	bl	80001e0 <__aeabi_dsub>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4680      	mov	r8, r0
 800589e:	4689      	mov	r9, r1
 80058a0:	4630      	mov	r0, r6
 80058a2:	4639      	mov	r1, r7
 80058a4:	f7fa fc9e 	bl	80001e4 <__adddf3>
 80058a8:	2000      	movs	r0, #0
 80058aa:	4632      	mov	r2, r6
 80058ac:	463b      	mov	r3, r7
 80058ae:	4604      	mov	r4, r0
 80058b0:	460d      	mov	r5, r1
 80058b2:	f7fa fc95 	bl	80001e0 <__aeabi_dsub>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4640      	mov	r0, r8
 80058bc:	4649      	mov	r1, r9
 80058be:	f7fa fc8f 	bl	80001e0 <__aeabi_dsub>
 80058c2:	9b04      	ldr	r3, [sp, #16]
 80058c4:	9a06      	ldr	r2, [sp, #24]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	4313      	orrs	r3, r2
 80058ca:	4682      	mov	sl, r0
 80058cc:	468b      	mov	fp, r1
 80058ce:	f040 81e7 	bne.w	8005ca0 <__ieee754_pow+0x700>
 80058d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005988 <__ieee754_pow+0x3e8>
 80058d6:	eeb0 8a47 	vmov.f32	s16, s14
 80058da:	eef0 8a67 	vmov.f32	s17, s15
 80058de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80058e2:	2600      	movs	r6, #0
 80058e4:	4632      	mov	r2, r6
 80058e6:	463b      	mov	r3, r7
 80058e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ec:	f7fa fc78 	bl	80001e0 <__aeabi_dsub>
 80058f0:	4622      	mov	r2, r4
 80058f2:	462b      	mov	r3, r5
 80058f4:	f7fa fe2c 	bl	8000550 <__aeabi_dmul>
 80058f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058fc:	4680      	mov	r8, r0
 80058fe:	4689      	mov	r9, r1
 8005900:	4650      	mov	r0, sl
 8005902:	4659      	mov	r1, fp
 8005904:	f7fa fe24 	bl	8000550 <__aeabi_dmul>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4640      	mov	r0, r8
 800590e:	4649      	mov	r1, r9
 8005910:	f7fa fc68 	bl	80001e4 <__adddf3>
 8005914:	4632      	mov	r2, r6
 8005916:	463b      	mov	r3, r7
 8005918:	4680      	mov	r8, r0
 800591a:	4689      	mov	r9, r1
 800591c:	4620      	mov	r0, r4
 800591e:	4629      	mov	r1, r5
 8005920:	f7fa fe16 	bl	8000550 <__aeabi_dmul>
 8005924:	460b      	mov	r3, r1
 8005926:	4604      	mov	r4, r0
 8005928:	460d      	mov	r5, r1
 800592a:	4602      	mov	r2, r0
 800592c:	4649      	mov	r1, r9
 800592e:	4640      	mov	r0, r8
 8005930:	f7fa fc58 	bl	80001e4 <__adddf3>
 8005934:	4b19      	ldr	r3, [pc, #100]	; (800599c <__ieee754_pow+0x3fc>)
 8005936:	4299      	cmp	r1, r3
 8005938:	ec45 4b19 	vmov	d9, r4, r5
 800593c:	4606      	mov	r6, r0
 800593e:	460f      	mov	r7, r1
 8005940:	468b      	mov	fp, r1
 8005942:	f340 82f1 	ble.w	8005f28 <__ieee754_pow+0x988>
 8005946:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800594a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800594e:	4303      	orrs	r3, r0
 8005950:	f000 81e4 	beq.w	8005d1c <__ieee754_pow+0x77c>
 8005954:	ec51 0b18 	vmov	r0, r1, d8
 8005958:	2200      	movs	r2, #0
 800595a:	2300      	movs	r3, #0
 800595c:	f7fb f86a 	bl	8000a34 <__aeabi_dcmplt>
 8005960:	3800      	subs	r0, #0
 8005962:	bf18      	it	ne
 8005964:	2001      	movne	r0, #1
 8005966:	e72b      	b.n	80057c0 <__ieee754_pow+0x220>
 8005968:	60000000 	.word	0x60000000
 800596c:	3ff71547 	.word	0x3ff71547
 8005970:	f85ddf44 	.word	0xf85ddf44
 8005974:	3e54ae0b 	.word	0x3e54ae0b
 8005978:	55555555 	.word	0x55555555
 800597c:	3fd55555 	.word	0x3fd55555
 8005980:	652b82fe 	.word	0x652b82fe
 8005984:	3ff71547 	.word	0x3ff71547
 8005988:	00000000 	.word	0x00000000
 800598c:	bff00000 	.word	0xbff00000
 8005990:	3ff00000 	.word	0x3ff00000
 8005994:	3fd00000 	.word	0x3fd00000
 8005998:	3fe00000 	.word	0x3fe00000
 800599c:	408fffff 	.word	0x408fffff
 80059a0:	4bd5      	ldr	r3, [pc, #852]	; (8005cf8 <__ieee754_pow+0x758>)
 80059a2:	402b      	ands	r3, r5
 80059a4:	2200      	movs	r2, #0
 80059a6:	b92b      	cbnz	r3, 80059b4 <__ieee754_pow+0x414>
 80059a8:	4bd4      	ldr	r3, [pc, #848]	; (8005cfc <__ieee754_pow+0x75c>)
 80059aa:	f7fa fdd1 	bl	8000550 <__aeabi_dmul>
 80059ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80059b2:	460c      	mov	r4, r1
 80059b4:	1523      	asrs	r3, r4, #20
 80059b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80059ba:	4413      	add	r3, r2
 80059bc:	9305      	str	r3, [sp, #20]
 80059be:	4bd0      	ldr	r3, [pc, #832]	; (8005d00 <__ieee754_pow+0x760>)
 80059c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80059c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80059c8:	429c      	cmp	r4, r3
 80059ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80059ce:	dd08      	ble.n	80059e2 <__ieee754_pow+0x442>
 80059d0:	4bcc      	ldr	r3, [pc, #816]	; (8005d04 <__ieee754_pow+0x764>)
 80059d2:	429c      	cmp	r4, r3
 80059d4:	f340 8162 	ble.w	8005c9c <__ieee754_pow+0x6fc>
 80059d8:	9b05      	ldr	r3, [sp, #20]
 80059da:	3301      	adds	r3, #1
 80059dc:	9305      	str	r3, [sp, #20]
 80059de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80059e2:	2400      	movs	r4, #0
 80059e4:	00e3      	lsls	r3, r4, #3
 80059e6:	9307      	str	r3, [sp, #28]
 80059e8:	4bc7      	ldr	r3, [pc, #796]	; (8005d08 <__ieee754_pow+0x768>)
 80059ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80059ee:	ed93 7b00 	vldr	d7, [r3]
 80059f2:	4629      	mov	r1, r5
 80059f4:	ec53 2b17 	vmov	r2, r3, d7
 80059f8:	eeb0 9a47 	vmov.f32	s18, s14
 80059fc:	eef0 9a67 	vmov.f32	s19, s15
 8005a00:	4682      	mov	sl, r0
 8005a02:	f7fa fbed 	bl	80001e0 <__aeabi_dsub>
 8005a06:	4652      	mov	r2, sl
 8005a08:	4606      	mov	r6, r0
 8005a0a:	460f      	mov	r7, r1
 8005a0c:	462b      	mov	r3, r5
 8005a0e:	ec51 0b19 	vmov	r0, r1, d9
 8005a12:	f7fa fbe7 	bl	80001e4 <__adddf3>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	49bb      	ldr	r1, [pc, #748]	; (8005d0c <__ieee754_pow+0x76c>)
 8005a1e:	f7fa fec1 	bl	80007a4 <__aeabi_ddiv>
 8005a22:	ec41 0b1a 	vmov	d10, r0, r1
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	4639      	mov	r1, r7
 8005a2e:	f7fa fd8f 	bl	8000550 <__aeabi_dmul>
 8005a32:	2300      	movs	r3, #0
 8005a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a38:	9302      	str	r3, [sp, #8]
 8005a3a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a3e:	46ab      	mov	fp, r5
 8005a40:	106d      	asrs	r5, r5, #1
 8005a42:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005a46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005a4a:	ec41 0b18 	vmov	d8, r0, r1
 8005a4e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005a52:	2200      	movs	r2, #0
 8005a54:	4640      	mov	r0, r8
 8005a56:	4649      	mov	r1, r9
 8005a58:	4614      	mov	r4, r2
 8005a5a:	461d      	mov	r5, r3
 8005a5c:	f7fa fd78 	bl	8000550 <__aeabi_dmul>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4630      	mov	r0, r6
 8005a66:	4639      	mov	r1, r7
 8005a68:	f7fa fbba 	bl	80001e0 <__aeabi_dsub>
 8005a6c:	ec53 2b19 	vmov	r2, r3, d9
 8005a70:	4606      	mov	r6, r0
 8005a72:	460f      	mov	r7, r1
 8005a74:	4620      	mov	r0, r4
 8005a76:	4629      	mov	r1, r5
 8005a78:	f7fa fbb2 	bl	80001e0 <__aeabi_dsub>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4650      	mov	r0, sl
 8005a82:	4659      	mov	r1, fp
 8005a84:	f7fa fbac 	bl	80001e0 <__aeabi_dsub>
 8005a88:	4642      	mov	r2, r8
 8005a8a:	464b      	mov	r3, r9
 8005a8c:	f7fa fd60 	bl	8000550 <__aeabi_dmul>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4630      	mov	r0, r6
 8005a96:	4639      	mov	r1, r7
 8005a98:	f7fa fba2 	bl	80001e0 <__aeabi_dsub>
 8005a9c:	ec53 2b1a 	vmov	r2, r3, d10
 8005aa0:	f7fa fd56 	bl	8000550 <__aeabi_dmul>
 8005aa4:	ec53 2b18 	vmov	r2, r3, d8
 8005aa8:	ec41 0b19 	vmov	d9, r0, r1
 8005aac:	ec51 0b18 	vmov	r0, r1, d8
 8005ab0:	f7fa fd4e 	bl	8000550 <__aeabi_dmul>
 8005ab4:	a37c      	add	r3, pc, #496	; (adr r3, 8005ca8 <__ieee754_pow+0x708>)
 8005ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aba:	4604      	mov	r4, r0
 8005abc:	460d      	mov	r5, r1
 8005abe:	f7fa fd47 	bl	8000550 <__aeabi_dmul>
 8005ac2:	a37b      	add	r3, pc, #492	; (adr r3, 8005cb0 <__ieee754_pow+0x710>)
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	f7fa fb8c 	bl	80001e4 <__adddf3>
 8005acc:	4622      	mov	r2, r4
 8005ace:	462b      	mov	r3, r5
 8005ad0:	f7fa fd3e 	bl	8000550 <__aeabi_dmul>
 8005ad4:	a378      	add	r3, pc, #480	; (adr r3, 8005cb8 <__ieee754_pow+0x718>)
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	f7fa fb83 	bl	80001e4 <__adddf3>
 8005ade:	4622      	mov	r2, r4
 8005ae0:	462b      	mov	r3, r5
 8005ae2:	f7fa fd35 	bl	8000550 <__aeabi_dmul>
 8005ae6:	a376      	add	r3, pc, #472	; (adr r3, 8005cc0 <__ieee754_pow+0x720>)
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	f7fa fb7a 	bl	80001e4 <__adddf3>
 8005af0:	4622      	mov	r2, r4
 8005af2:	462b      	mov	r3, r5
 8005af4:	f7fa fd2c 	bl	8000550 <__aeabi_dmul>
 8005af8:	a373      	add	r3, pc, #460	; (adr r3, 8005cc8 <__ieee754_pow+0x728>)
 8005afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afe:	f7fa fb71 	bl	80001e4 <__adddf3>
 8005b02:	4622      	mov	r2, r4
 8005b04:	462b      	mov	r3, r5
 8005b06:	f7fa fd23 	bl	8000550 <__aeabi_dmul>
 8005b0a:	a371      	add	r3, pc, #452	; (adr r3, 8005cd0 <__ieee754_pow+0x730>)
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f7fa fb68 	bl	80001e4 <__adddf3>
 8005b14:	4622      	mov	r2, r4
 8005b16:	4606      	mov	r6, r0
 8005b18:	460f      	mov	r7, r1
 8005b1a:	462b      	mov	r3, r5
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	4629      	mov	r1, r5
 8005b20:	f7fa fd16 	bl	8000550 <__aeabi_dmul>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4630      	mov	r0, r6
 8005b2a:	4639      	mov	r1, r7
 8005b2c:	f7fa fd10 	bl	8000550 <__aeabi_dmul>
 8005b30:	4642      	mov	r2, r8
 8005b32:	4604      	mov	r4, r0
 8005b34:	460d      	mov	r5, r1
 8005b36:	464b      	mov	r3, r9
 8005b38:	ec51 0b18 	vmov	r0, r1, d8
 8005b3c:	f7fa fb52 	bl	80001e4 <__adddf3>
 8005b40:	ec53 2b19 	vmov	r2, r3, d9
 8005b44:	f7fa fd04 	bl	8000550 <__aeabi_dmul>
 8005b48:	4622      	mov	r2, r4
 8005b4a:	462b      	mov	r3, r5
 8005b4c:	f7fa fb4a 	bl	80001e4 <__adddf3>
 8005b50:	4642      	mov	r2, r8
 8005b52:	4682      	mov	sl, r0
 8005b54:	468b      	mov	fp, r1
 8005b56:	464b      	mov	r3, r9
 8005b58:	4640      	mov	r0, r8
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	f7fa fcf8 	bl	8000550 <__aeabi_dmul>
 8005b60:	4b6b      	ldr	r3, [pc, #428]	; (8005d10 <__ieee754_pow+0x770>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	4606      	mov	r6, r0
 8005b66:	460f      	mov	r7, r1
 8005b68:	f7fa fb3c 	bl	80001e4 <__adddf3>
 8005b6c:	4652      	mov	r2, sl
 8005b6e:	465b      	mov	r3, fp
 8005b70:	f7fa fb38 	bl	80001e4 <__adddf3>
 8005b74:	2000      	movs	r0, #0
 8005b76:	4604      	mov	r4, r0
 8005b78:	460d      	mov	r5, r1
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4640      	mov	r0, r8
 8005b80:	4649      	mov	r1, r9
 8005b82:	f7fa fce5 	bl	8000550 <__aeabi_dmul>
 8005b86:	4b62      	ldr	r3, [pc, #392]	; (8005d10 <__ieee754_pow+0x770>)
 8005b88:	4680      	mov	r8, r0
 8005b8a:	4689      	mov	r9, r1
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	4620      	mov	r0, r4
 8005b90:	4629      	mov	r1, r5
 8005b92:	f7fa fb25 	bl	80001e0 <__aeabi_dsub>
 8005b96:	4632      	mov	r2, r6
 8005b98:	463b      	mov	r3, r7
 8005b9a:	f7fa fb21 	bl	80001e0 <__aeabi_dsub>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4650      	mov	r0, sl
 8005ba4:	4659      	mov	r1, fp
 8005ba6:	f7fa fb1b 	bl	80001e0 <__aeabi_dsub>
 8005baa:	ec53 2b18 	vmov	r2, r3, d8
 8005bae:	f7fa fccf 	bl	8000550 <__aeabi_dmul>
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	460f      	mov	r7, r1
 8005bb8:	462b      	mov	r3, r5
 8005bba:	ec51 0b19 	vmov	r0, r1, d9
 8005bbe:	f7fa fcc7 	bl	8000550 <__aeabi_dmul>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	4639      	mov	r1, r7
 8005bca:	f7fa fb0b 	bl	80001e4 <__adddf3>
 8005bce:	4606      	mov	r6, r0
 8005bd0:	460f      	mov	r7, r1
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	4649      	mov	r1, r9
 8005bda:	f7fa fb03 	bl	80001e4 <__adddf3>
 8005bde:	a33e      	add	r3, pc, #248	; (adr r3, 8005cd8 <__ieee754_pow+0x738>)
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	2000      	movs	r0, #0
 8005be6:	4604      	mov	r4, r0
 8005be8:	460d      	mov	r5, r1
 8005bea:	f7fa fcb1 	bl	8000550 <__aeabi_dmul>
 8005bee:	4642      	mov	r2, r8
 8005bf0:	ec41 0b18 	vmov	d8, r0, r1
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	f7fa faf1 	bl	80001e0 <__aeabi_dsub>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4630      	mov	r0, r6
 8005c04:	4639      	mov	r1, r7
 8005c06:	f7fa faeb 	bl	80001e0 <__aeabi_dsub>
 8005c0a:	a335      	add	r3, pc, #212	; (adr r3, 8005ce0 <__ieee754_pow+0x740>)
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	f7fa fc9e 	bl	8000550 <__aeabi_dmul>
 8005c14:	a334      	add	r3, pc, #208	; (adr r3, 8005ce8 <__ieee754_pow+0x748>)
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	460f      	mov	r7, r1
 8005c1e:	4620      	mov	r0, r4
 8005c20:	4629      	mov	r1, r5
 8005c22:	f7fa fc95 	bl	8000550 <__aeabi_dmul>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	4639      	mov	r1, r7
 8005c2e:	f7fa fad9 	bl	80001e4 <__adddf3>
 8005c32:	9a07      	ldr	r2, [sp, #28]
 8005c34:	4b37      	ldr	r3, [pc, #220]	; (8005d14 <__ieee754_pow+0x774>)
 8005c36:	4413      	add	r3, r2
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa fad2 	bl	80001e4 <__adddf3>
 8005c40:	4682      	mov	sl, r0
 8005c42:	9805      	ldr	r0, [sp, #20]
 8005c44:	468b      	mov	fp, r1
 8005c46:	f7fa fc19 	bl	800047c <__aeabi_i2d>
 8005c4a:	9a07      	ldr	r2, [sp, #28]
 8005c4c:	4b32      	ldr	r3, [pc, #200]	; (8005d18 <__ieee754_pow+0x778>)
 8005c4e:	4413      	add	r3, r2
 8005c50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c54:	4606      	mov	r6, r0
 8005c56:	460f      	mov	r7, r1
 8005c58:	4652      	mov	r2, sl
 8005c5a:	465b      	mov	r3, fp
 8005c5c:	ec51 0b18 	vmov	r0, r1, d8
 8005c60:	f7fa fac0 	bl	80001e4 <__adddf3>
 8005c64:	4642      	mov	r2, r8
 8005c66:	464b      	mov	r3, r9
 8005c68:	f7fa fabc 	bl	80001e4 <__adddf3>
 8005c6c:	4632      	mov	r2, r6
 8005c6e:	463b      	mov	r3, r7
 8005c70:	f7fa fab8 	bl	80001e4 <__adddf3>
 8005c74:	2000      	movs	r0, #0
 8005c76:	4632      	mov	r2, r6
 8005c78:	463b      	mov	r3, r7
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	460d      	mov	r5, r1
 8005c7e:	f7fa faaf 	bl	80001e0 <__aeabi_dsub>
 8005c82:	4642      	mov	r2, r8
 8005c84:	464b      	mov	r3, r9
 8005c86:	f7fa faab 	bl	80001e0 <__aeabi_dsub>
 8005c8a:	ec53 2b18 	vmov	r2, r3, d8
 8005c8e:	f7fa faa7 	bl	80001e0 <__aeabi_dsub>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4650      	mov	r0, sl
 8005c98:	4659      	mov	r1, fp
 8005c9a:	e610      	b.n	80058be <__ieee754_pow+0x31e>
 8005c9c:	2401      	movs	r4, #1
 8005c9e:	e6a1      	b.n	80059e4 <__ieee754_pow+0x444>
 8005ca0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005cf0 <__ieee754_pow+0x750>
 8005ca4:	e617      	b.n	80058d6 <__ieee754_pow+0x336>
 8005ca6:	bf00      	nop
 8005ca8:	4a454eef 	.word	0x4a454eef
 8005cac:	3fca7e28 	.word	0x3fca7e28
 8005cb0:	93c9db65 	.word	0x93c9db65
 8005cb4:	3fcd864a 	.word	0x3fcd864a
 8005cb8:	a91d4101 	.word	0xa91d4101
 8005cbc:	3fd17460 	.word	0x3fd17460
 8005cc0:	518f264d 	.word	0x518f264d
 8005cc4:	3fd55555 	.word	0x3fd55555
 8005cc8:	db6fabff 	.word	0xdb6fabff
 8005ccc:	3fdb6db6 	.word	0x3fdb6db6
 8005cd0:	33333303 	.word	0x33333303
 8005cd4:	3fe33333 	.word	0x3fe33333
 8005cd8:	e0000000 	.word	0xe0000000
 8005cdc:	3feec709 	.word	0x3feec709
 8005ce0:	dc3a03fd 	.word	0xdc3a03fd
 8005ce4:	3feec709 	.word	0x3feec709
 8005ce8:	145b01f5 	.word	0x145b01f5
 8005cec:	be3e2fe0 	.word	0xbe3e2fe0
 8005cf0:	00000000 	.word	0x00000000
 8005cf4:	3ff00000 	.word	0x3ff00000
 8005cf8:	7ff00000 	.word	0x7ff00000
 8005cfc:	43400000 	.word	0x43400000
 8005d00:	0003988e 	.word	0x0003988e
 8005d04:	000bb679 	.word	0x000bb679
 8005d08:	08006918 	.word	0x08006918
 8005d0c:	3ff00000 	.word	0x3ff00000
 8005d10:	40080000 	.word	0x40080000
 8005d14:	08006938 	.word	0x08006938
 8005d18:	08006928 	.word	0x08006928
 8005d1c:	a3b5      	add	r3, pc, #724	; (adr r3, 8005ff4 <__ieee754_pow+0xa54>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	4640      	mov	r0, r8
 8005d24:	4649      	mov	r1, r9
 8005d26:	f7fa fa5d 	bl	80001e4 <__adddf3>
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	ec41 0b1a 	vmov	d10, r0, r1
 8005d30:	462b      	mov	r3, r5
 8005d32:	4630      	mov	r0, r6
 8005d34:	4639      	mov	r1, r7
 8005d36:	f7fa fa53 	bl	80001e0 <__aeabi_dsub>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	ec51 0b1a 	vmov	r0, r1, d10
 8005d42:	f7fa fe95 	bl	8000a70 <__aeabi_dcmpgt>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	f47f ae04 	bne.w	8005954 <__ieee754_pow+0x3b4>
 8005d4c:	4aa4      	ldr	r2, [pc, #656]	; (8005fe0 <__ieee754_pow+0xa40>)
 8005d4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d52:	4293      	cmp	r3, r2
 8005d54:	f340 8108 	ble.w	8005f68 <__ieee754_pow+0x9c8>
 8005d58:	151b      	asrs	r3, r3, #20
 8005d5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005d5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005d62:	fa4a f303 	asr.w	r3, sl, r3
 8005d66:	445b      	add	r3, fp
 8005d68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005d6c:	4e9d      	ldr	r6, [pc, #628]	; (8005fe4 <__ieee754_pow+0xa44>)
 8005d6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005d72:	4116      	asrs	r6, r2
 8005d74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005d78:	2000      	movs	r0, #0
 8005d7a:	ea23 0106 	bic.w	r1, r3, r6
 8005d7e:	f1c2 0214 	rsb	r2, r2, #20
 8005d82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005d86:	fa4a fa02 	asr.w	sl, sl, r2
 8005d8a:	f1bb 0f00 	cmp.w	fp, #0
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4620      	mov	r0, r4
 8005d94:	4629      	mov	r1, r5
 8005d96:	bfb8      	it	lt
 8005d98:	f1ca 0a00 	rsblt	sl, sl, #0
 8005d9c:	f7fa fa20 	bl	80001e0 <__aeabi_dsub>
 8005da0:	ec41 0b19 	vmov	d9, r0, r1
 8005da4:	4642      	mov	r2, r8
 8005da6:	464b      	mov	r3, r9
 8005da8:	ec51 0b19 	vmov	r0, r1, d9
 8005dac:	f7fa fa1a 	bl	80001e4 <__adddf3>
 8005db0:	a37b      	add	r3, pc, #492	; (adr r3, 8005fa0 <__ieee754_pow+0xa00>)
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	2000      	movs	r0, #0
 8005db8:	4604      	mov	r4, r0
 8005dba:	460d      	mov	r5, r1
 8005dbc:	f7fa fbc8 	bl	8000550 <__aeabi_dmul>
 8005dc0:	ec53 2b19 	vmov	r2, r3, d9
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	460f      	mov	r7, r1
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4629      	mov	r1, r5
 8005dcc:	f7fa fa08 	bl	80001e0 <__aeabi_dsub>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	f7fa fa02 	bl	80001e0 <__aeabi_dsub>
 8005ddc:	a372      	add	r3, pc, #456	; (adr r3, 8005fa8 <__ieee754_pow+0xa08>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f7fa fbb5 	bl	8000550 <__aeabi_dmul>
 8005de6:	a372      	add	r3, pc, #456	; (adr r3, 8005fb0 <__ieee754_pow+0xa10>)
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	4680      	mov	r8, r0
 8005dee:	4689      	mov	r9, r1
 8005df0:	4620      	mov	r0, r4
 8005df2:	4629      	mov	r1, r5
 8005df4:	f7fa fbac 	bl	8000550 <__aeabi_dmul>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	4649      	mov	r1, r9
 8005e00:	f7fa f9f0 	bl	80001e4 <__adddf3>
 8005e04:	4604      	mov	r4, r0
 8005e06:	460d      	mov	r5, r1
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	4639      	mov	r1, r7
 8005e10:	f7fa f9e8 	bl	80001e4 <__adddf3>
 8005e14:	4632      	mov	r2, r6
 8005e16:	463b      	mov	r3, r7
 8005e18:	4680      	mov	r8, r0
 8005e1a:	4689      	mov	r9, r1
 8005e1c:	f7fa f9e0 	bl	80001e0 <__aeabi_dsub>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4620      	mov	r0, r4
 8005e26:	4629      	mov	r1, r5
 8005e28:	f7fa f9da 	bl	80001e0 <__aeabi_dsub>
 8005e2c:	4642      	mov	r2, r8
 8005e2e:	4606      	mov	r6, r0
 8005e30:	460f      	mov	r7, r1
 8005e32:	464b      	mov	r3, r9
 8005e34:	4640      	mov	r0, r8
 8005e36:	4649      	mov	r1, r9
 8005e38:	f7fa fb8a 	bl	8000550 <__aeabi_dmul>
 8005e3c:	a35e      	add	r3, pc, #376	; (adr r3, 8005fb8 <__ieee754_pow+0xa18>)
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	4604      	mov	r4, r0
 8005e44:	460d      	mov	r5, r1
 8005e46:	f7fa fb83 	bl	8000550 <__aeabi_dmul>
 8005e4a:	a35d      	add	r3, pc, #372	; (adr r3, 8005fc0 <__ieee754_pow+0xa20>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f7fa f9c6 	bl	80001e0 <__aeabi_dsub>
 8005e54:	4622      	mov	r2, r4
 8005e56:	462b      	mov	r3, r5
 8005e58:	f7fa fb7a 	bl	8000550 <__aeabi_dmul>
 8005e5c:	a35a      	add	r3, pc, #360	; (adr r3, 8005fc8 <__ieee754_pow+0xa28>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f7fa f9bf 	bl	80001e4 <__adddf3>
 8005e66:	4622      	mov	r2, r4
 8005e68:	462b      	mov	r3, r5
 8005e6a:	f7fa fb71 	bl	8000550 <__aeabi_dmul>
 8005e6e:	a358      	add	r3, pc, #352	; (adr r3, 8005fd0 <__ieee754_pow+0xa30>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f7fa f9b4 	bl	80001e0 <__aeabi_dsub>
 8005e78:	4622      	mov	r2, r4
 8005e7a:	462b      	mov	r3, r5
 8005e7c:	f7fa fb68 	bl	8000550 <__aeabi_dmul>
 8005e80:	a355      	add	r3, pc, #340	; (adr r3, 8005fd8 <__ieee754_pow+0xa38>)
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	f7fa f9ad 	bl	80001e4 <__adddf3>
 8005e8a:	4622      	mov	r2, r4
 8005e8c:	462b      	mov	r3, r5
 8005e8e:	f7fa fb5f 	bl	8000550 <__aeabi_dmul>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4640      	mov	r0, r8
 8005e98:	4649      	mov	r1, r9
 8005e9a:	f7fa f9a1 	bl	80001e0 <__aeabi_dsub>
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	460d      	mov	r5, r1
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	f7fa fb51 	bl	8000550 <__aeabi_dmul>
 8005eae:	2200      	movs	r2, #0
 8005eb0:	ec41 0b19 	vmov	d9, r0, r1
 8005eb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005eb8:	4620      	mov	r0, r4
 8005eba:	4629      	mov	r1, r5
 8005ebc:	f7fa f990 	bl	80001e0 <__aeabi_dsub>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	ec51 0b19 	vmov	r0, r1, d9
 8005ec8:	f7fa fc6c 	bl	80007a4 <__aeabi_ddiv>
 8005ecc:	4632      	mov	r2, r6
 8005ece:	4604      	mov	r4, r0
 8005ed0:	460d      	mov	r5, r1
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	f7fa fb3a 	bl	8000550 <__aeabi_dmul>
 8005edc:	4632      	mov	r2, r6
 8005ede:	463b      	mov	r3, r7
 8005ee0:	f7fa f980 	bl	80001e4 <__adddf3>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4620      	mov	r0, r4
 8005eea:	4629      	mov	r1, r5
 8005eec:	f7fa f978 	bl	80001e0 <__aeabi_dsub>
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	f7fa f974 	bl	80001e0 <__aeabi_dsub>
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4602      	mov	r2, r0
 8005efc:	493a      	ldr	r1, [pc, #232]	; (8005fe8 <__ieee754_pow+0xa48>)
 8005efe:	2000      	movs	r0, #0
 8005f00:	f7fa f96e 	bl	80001e0 <__aeabi_dsub>
 8005f04:	ec41 0b10 	vmov	d0, r0, r1
 8005f08:	ee10 3a90 	vmov	r3, s1
 8005f0c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f14:	da2b      	bge.n	8005f6e <__ieee754_pow+0x9ce>
 8005f16:	4650      	mov	r0, sl
 8005f18:	f000 fbf2 	bl	8006700 <scalbn>
 8005f1c:	ec51 0b10 	vmov	r0, r1, d0
 8005f20:	ec53 2b18 	vmov	r2, r3, d8
 8005f24:	f7ff bbed 	b.w	8005702 <__ieee754_pow+0x162>
 8005f28:	4b30      	ldr	r3, [pc, #192]	; (8005fec <__ieee754_pow+0xa4c>)
 8005f2a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005f2e:	429e      	cmp	r6, r3
 8005f30:	f77f af0c 	ble.w	8005d4c <__ieee754_pow+0x7ac>
 8005f34:	4b2e      	ldr	r3, [pc, #184]	; (8005ff0 <__ieee754_pow+0xa50>)
 8005f36:	440b      	add	r3, r1
 8005f38:	4303      	orrs	r3, r0
 8005f3a:	d009      	beq.n	8005f50 <__ieee754_pow+0x9b0>
 8005f3c:	ec51 0b18 	vmov	r0, r1, d8
 8005f40:	2200      	movs	r2, #0
 8005f42:	2300      	movs	r3, #0
 8005f44:	f7fa fd76 	bl	8000a34 <__aeabi_dcmplt>
 8005f48:	3800      	subs	r0, #0
 8005f4a:	bf18      	it	ne
 8005f4c:	2001      	movne	r0, #1
 8005f4e:	e447      	b.n	80057e0 <__ieee754_pow+0x240>
 8005f50:	4622      	mov	r2, r4
 8005f52:	462b      	mov	r3, r5
 8005f54:	f7fa f944 	bl	80001e0 <__aeabi_dsub>
 8005f58:	4642      	mov	r2, r8
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	f7fa fd7e 	bl	8000a5c <__aeabi_dcmpge>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	f43f aef3 	beq.w	8005d4c <__ieee754_pow+0x7ac>
 8005f66:	e7e9      	b.n	8005f3c <__ieee754_pow+0x99c>
 8005f68:	f04f 0a00 	mov.w	sl, #0
 8005f6c:	e71a      	b.n	8005da4 <__ieee754_pow+0x804>
 8005f6e:	ec51 0b10 	vmov	r0, r1, d0
 8005f72:	4619      	mov	r1, r3
 8005f74:	e7d4      	b.n	8005f20 <__ieee754_pow+0x980>
 8005f76:	491c      	ldr	r1, [pc, #112]	; (8005fe8 <__ieee754_pow+0xa48>)
 8005f78:	2000      	movs	r0, #0
 8005f7a:	f7ff bb30 	b.w	80055de <__ieee754_pow+0x3e>
 8005f7e:	2000      	movs	r0, #0
 8005f80:	2100      	movs	r1, #0
 8005f82:	f7ff bb2c 	b.w	80055de <__ieee754_pow+0x3e>
 8005f86:	4630      	mov	r0, r6
 8005f88:	4639      	mov	r1, r7
 8005f8a:	f7ff bb28 	b.w	80055de <__ieee754_pow+0x3e>
 8005f8e:	9204      	str	r2, [sp, #16]
 8005f90:	f7ff bb7a 	b.w	8005688 <__ieee754_pow+0xe8>
 8005f94:	2300      	movs	r3, #0
 8005f96:	f7ff bb64 	b.w	8005662 <__ieee754_pow+0xc2>
 8005f9a:	bf00      	nop
 8005f9c:	f3af 8000 	nop.w
 8005fa0:	00000000 	.word	0x00000000
 8005fa4:	3fe62e43 	.word	0x3fe62e43
 8005fa8:	fefa39ef 	.word	0xfefa39ef
 8005fac:	3fe62e42 	.word	0x3fe62e42
 8005fb0:	0ca86c39 	.word	0x0ca86c39
 8005fb4:	be205c61 	.word	0xbe205c61
 8005fb8:	72bea4d0 	.word	0x72bea4d0
 8005fbc:	3e663769 	.word	0x3e663769
 8005fc0:	c5d26bf1 	.word	0xc5d26bf1
 8005fc4:	3ebbbd41 	.word	0x3ebbbd41
 8005fc8:	af25de2c 	.word	0xaf25de2c
 8005fcc:	3f11566a 	.word	0x3f11566a
 8005fd0:	16bebd93 	.word	0x16bebd93
 8005fd4:	3f66c16c 	.word	0x3f66c16c
 8005fd8:	5555553e 	.word	0x5555553e
 8005fdc:	3fc55555 	.word	0x3fc55555
 8005fe0:	3fe00000 	.word	0x3fe00000
 8005fe4:	000fffff 	.word	0x000fffff
 8005fe8:	3ff00000 	.word	0x3ff00000
 8005fec:	4090cbff 	.word	0x4090cbff
 8005ff0:	3f6f3400 	.word	0x3f6f3400
 8005ff4:	652b82fe 	.word	0x652b82fe
 8005ff8:	3c971547 	.word	0x3c971547

08005ffc <__ieee754_sqrt>:
 8005ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006000:	ec55 4b10 	vmov	r4, r5, d0
 8006004:	4e55      	ldr	r6, [pc, #340]	; (800615c <__ieee754_sqrt+0x160>)
 8006006:	43ae      	bics	r6, r5
 8006008:	ee10 0a10 	vmov	r0, s0
 800600c:	ee10 3a10 	vmov	r3, s0
 8006010:	462a      	mov	r2, r5
 8006012:	4629      	mov	r1, r5
 8006014:	d110      	bne.n	8006038 <__ieee754_sqrt+0x3c>
 8006016:	ee10 2a10 	vmov	r2, s0
 800601a:	462b      	mov	r3, r5
 800601c:	f7fa fa98 	bl	8000550 <__aeabi_dmul>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	4620      	mov	r0, r4
 8006026:	4629      	mov	r1, r5
 8006028:	f7fa f8dc 	bl	80001e4 <__adddf3>
 800602c:	4604      	mov	r4, r0
 800602e:	460d      	mov	r5, r1
 8006030:	ec45 4b10 	vmov	d0, r4, r5
 8006034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006038:	2d00      	cmp	r5, #0
 800603a:	dc10      	bgt.n	800605e <__ieee754_sqrt+0x62>
 800603c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006040:	4330      	orrs	r0, r6
 8006042:	d0f5      	beq.n	8006030 <__ieee754_sqrt+0x34>
 8006044:	b15d      	cbz	r5, 800605e <__ieee754_sqrt+0x62>
 8006046:	ee10 2a10 	vmov	r2, s0
 800604a:	462b      	mov	r3, r5
 800604c:	ee10 0a10 	vmov	r0, s0
 8006050:	f7fa f8c6 	bl	80001e0 <__aeabi_dsub>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	f7fa fba4 	bl	80007a4 <__aeabi_ddiv>
 800605c:	e7e6      	b.n	800602c <__ieee754_sqrt+0x30>
 800605e:	1512      	asrs	r2, r2, #20
 8006060:	d074      	beq.n	800614c <__ieee754_sqrt+0x150>
 8006062:	07d4      	lsls	r4, r2, #31
 8006064:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006068:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800606c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006070:	bf5e      	ittt	pl
 8006072:	0fda      	lsrpl	r2, r3, #31
 8006074:	005b      	lslpl	r3, r3, #1
 8006076:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800607a:	2400      	movs	r4, #0
 800607c:	0fda      	lsrs	r2, r3, #31
 800607e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006082:	107f      	asrs	r7, r7, #1
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	2516      	movs	r5, #22
 8006088:	4620      	mov	r0, r4
 800608a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800608e:	1886      	adds	r6, r0, r2
 8006090:	428e      	cmp	r6, r1
 8006092:	bfde      	ittt	le
 8006094:	1b89      	suble	r1, r1, r6
 8006096:	18b0      	addle	r0, r6, r2
 8006098:	18a4      	addle	r4, r4, r2
 800609a:	0049      	lsls	r1, r1, #1
 800609c:	3d01      	subs	r5, #1
 800609e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80060a2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80060a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80060aa:	d1f0      	bne.n	800608e <__ieee754_sqrt+0x92>
 80060ac:	462a      	mov	r2, r5
 80060ae:	f04f 0e20 	mov.w	lr, #32
 80060b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80060b6:	4281      	cmp	r1, r0
 80060b8:	eb06 0c05 	add.w	ip, r6, r5
 80060bc:	dc02      	bgt.n	80060c4 <__ieee754_sqrt+0xc8>
 80060be:	d113      	bne.n	80060e8 <__ieee754_sqrt+0xec>
 80060c0:	459c      	cmp	ip, r3
 80060c2:	d811      	bhi.n	80060e8 <__ieee754_sqrt+0xec>
 80060c4:	f1bc 0f00 	cmp.w	ip, #0
 80060c8:	eb0c 0506 	add.w	r5, ip, r6
 80060cc:	da43      	bge.n	8006156 <__ieee754_sqrt+0x15a>
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	db41      	blt.n	8006156 <__ieee754_sqrt+0x15a>
 80060d2:	f100 0801 	add.w	r8, r0, #1
 80060d6:	1a09      	subs	r1, r1, r0
 80060d8:	459c      	cmp	ip, r3
 80060da:	bf88      	it	hi
 80060dc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80060e0:	eba3 030c 	sub.w	r3, r3, ip
 80060e4:	4432      	add	r2, r6
 80060e6:	4640      	mov	r0, r8
 80060e8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80060ec:	f1be 0e01 	subs.w	lr, lr, #1
 80060f0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80060f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80060f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80060fc:	d1db      	bne.n	80060b6 <__ieee754_sqrt+0xba>
 80060fe:	430b      	orrs	r3, r1
 8006100:	d006      	beq.n	8006110 <__ieee754_sqrt+0x114>
 8006102:	1c50      	adds	r0, r2, #1
 8006104:	bf13      	iteet	ne
 8006106:	3201      	addne	r2, #1
 8006108:	3401      	addeq	r4, #1
 800610a:	4672      	moveq	r2, lr
 800610c:	f022 0201 	bicne.w	r2, r2, #1
 8006110:	1063      	asrs	r3, r4, #1
 8006112:	0852      	lsrs	r2, r2, #1
 8006114:	07e1      	lsls	r1, r4, #31
 8006116:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800611a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800611e:	bf48      	it	mi
 8006120:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006124:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006128:	4614      	mov	r4, r2
 800612a:	e781      	b.n	8006030 <__ieee754_sqrt+0x34>
 800612c:	0ad9      	lsrs	r1, r3, #11
 800612e:	3815      	subs	r0, #21
 8006130:	055b      	lsls	r3, r3, #21
 8006132:	2900      	cmp	r1, #0
 8006134:	d0fa      	beq.n	800612c <__ieee754_sqrt+0x130>
 8006136:	02cd      	lsls	r5, r1, #11
 8006138:	d50a      	bpl.n	8006150 <__ieee754_sqrt+0x154>
 800613a:	f1c2 0420 	rsb	r4, r2, #32
 800613e:	fa23 f404 	lsr.w	r4, r3, r4
 8006142:	1e55      	subs	r5, r2, #1
 8006144:	4093      	lsls	r3, r2
 8006146:	4321      	orrs	r1, r4
 8006148:	1b42      	subs	r2, r0, r5
 800614a:	e78a      	b.n	8006062 <__ieee754_sqrt+0x66>
 800614c:	4610      	mov	r0, r2
 800614e:	e7f0      	b.n	8006132 <__ieee754_sqrt+0x136>
 8006150:	0049      	lsls	r1, r1, #1
 8006152:	3201      	adds	r2, #1
 8006154:	e7ef      	b.n	8006136 <__ieee754_sqrt+0x13a>
 8006156:	4680      	mov	r8, r0
 8006158:	e7bd      	b.n	80060d6 <__ieee754_sqrt+0xda>
 800615a:	bf00      	nop
 800615c:	7ff00000 	.word	0x7ff00000

08006160 <__ieee754_asinf>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	ee10 5a10 	vmov	r5, s0
 8006166:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800616a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800616e:	ed2d 8b04 	vpush	{d8-d9}
 8006172:	d10c      	bne.n	800618e <__ieee754_asinf+0x2e>
 8006174:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80062ec <__ieee754_asinf+0x18c>
 8006178:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80062f0 <__ieee754_asinf+0x190>
 800617c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006180:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006184:	eeb0 0a67 	vmov.f32	s0, s15
 8006188:	ecbd 8b04 	vpop	{d8-d9}
 800618c:	bd38      	pop	{r3, r4, r5, pc}
 800618e:	dd04      	ble.n	800619a <__ieee754_asinf+0x3a>
 8006190:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006194:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006198:	e7f6      	b.n	8006188 <__ieee754_asinf+0x28>
 800619a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800619e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80061a2:	da0b      	bge.n	80061bc <__ieee754_asinf+0x5c>
 80061a4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80061a8:	da52      	bge.n	8006250 <__ieee754_asinf+0xf0>
 80061aa:	eddf 7a52 	vldr	s15, [pc, #328]	; 80062f4 <__ieee754_asinf+0x194>
 80061ae:	ee70 7a27 	vadd.f32	s15, s0, s15
 80061b2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80061b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ba:	dce5      	bgt.n	8006188 <__ieee754_asinf+0x28>
 80061bc:	f000 fb26 	bl	800680c <fabsf>
 80061c0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80061c4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80061c8:	ee20 8a08 	vmul.f32	s16, s0, s16
 80061cc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80062f8 <__ieee754_asinf+0x198>
 80061d0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80062fc <__ieee754_asinf+0x19c>
 80061d4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8006300 <__ieee754_asinf+0x1a0>
 80061d8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80061dc:	eddf 7a49 	vldr	s15, [pc, #292]	; 8006304 <__ieee754_asinf+0x1a4>
 80061e0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80061e4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8006308 <__ieee754_asinf+0x1a8>
 80061e8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80061ec:	eddf 7a47 	vldr	s15, [pc, #284]	; 800630c <__ieee754_asinf+0x1ac>
 80061f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80061f4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8006310 <__ieee754_asinf+0x1b0>
 80061f8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80061fc:	eddf 7a45 	vldr	s15, [pc, #276]	; 8006314 <__ieee754_asinf+0x1b4>
 8006200:	eee8 7a07 	vfma.f32	s15, s16, s14
 8006204:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006318 <__ieee754_asinf+0x1b8>
 8006208:	eea7 7a88 	vfma.f32	s14, s15, s16
 800620c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800631c <__ieee754_asinf+0x1bc>
 8006210:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006214:	eeb0 0a48 	vmov.f32	s0, s16
 8006218:	eee7 8a88 	vfma.f32	s17, s15, s16
 800621c:	f000 f886 	bl	800632c <__ieee754_sqrtf>
 8006220:	4b3f      	ldr	r3, [pc, #252]	; (8006320 <__ieee754_asinf+0x1c0>)
 8006222:	ee29 9a08 	vmul.f32	s18, s18, s16
 8006226:	429c      	cmp	r4, r3
 8006228:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800622c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006230:	dd3d      	ble.n	80062ae <__ieee754_asinf+0x14e>
 8006232:	eea0 0a06 	vfma.f32	s0, s0, s12
 8006236:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8006324 <__ieee754_asinf+0x1c4>
 800623a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800623e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80062f0 <__ieee754_asinf+0x190>
 8006242:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006246:	2d00      	cmp	r5, #0
 8006248:	bfd8      	it	le
 800624a:	eeb1 0a40 	vnegle.f32	s0, s0
 800624e:	e79b      	b.n	8006188 <__ieee754_asinf+0x28>
 8006250:	ee60 7a00 	vmul.f32	s15, s0, s0
 8006254:	eddf 6a28 	vldr	s13, [pc, #160]	; 80062f8 <__ieee754_asinf+0x198>
 8006258:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80062fc <__ieee754_asinf+0x19c>
 800625c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8006310 <__ieee754_asinf+0x1b0>
 8006260:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006264:	eddf 6a27 	vldr	s13, [pc, #156]	; 8006304 <__ieee754_asinf+0x1a4>
 8006268:	eee7 6a27 	vfma.f32	s13, s14, s15
 800626c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006308 <__ieee754_asinf+0x1a8>
 8006270:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006274:	eddf 6a25 	vldr	s13, [pc, #148]	; 800630c <__ieee754_asinf+0x1ac>
 8006278:	eee7 6a27 	vfma.f32	s13, s14, s15
 800627c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8006300 <__ieee754_asinf+0x1a0>
 8006280:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006284:	eddf 6a23 	vldr	s13, [pc, #140]	; 8006314 <__ieee754_asinf+0x1b4>
 8006288:	eee7 6a86 	vfma.f32	s13, s15, s12
 800628c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8006318 <__ieee754_asinf+0x1b8>
 8006290:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8006294:	eddf 6a21 	vldr	s13, [pc, #132]	; 800631c <__ieee754_asinf+0x1bc>
 8006298:	eee6 6a27 	vfma.f32	s13, s12, s15
 800629c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062a0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80062a4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80062a8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80062ac:	e76c      	b.n	8006188 <__ieee754_asinf+0x28>
 80062ae:	ee10 3a10 	vmov	r3, s0
 80062b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80062b6:	f023 030f 	bic.w	r3, r3, #15
 80062ba:	ee07 3a10 	vmov	s14, r3
 80062be:	eea7 8a47 	vfms.f32	s16, s14, s14
 80062c2:	ee70 7a07 	vadd.f32	s15, s0, s14
 80062c6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80062ca:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80062ce:	eddf 7a07 	vldr	s15, [pc, #28]	; 80062ec <__ieee754_asinf+0x18c>
 80062d2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80062d6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80062da:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8006328 <__ieee754_asinf+0x1c8>
 80062de:	eeb0 6a40 	vmov.f32	s12, s0
 80062e2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80062e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80062ea:	e7aa      	b.n	8006242 <__ieee754_asinf+0xe2>
 80062ec:	b33bbd2e 	.word	0xb33bbd2e
 80062f0:	3fc90fdb 	.word	0x3fc90fdb
 80062f4:	7149f2ca 	.word	0x7149f2ca
 80062f8:	3811ef08 	.word	0x3811ef08
 80062fc:	3a4f7f04 	.word	0x3a4f7f04
 8006300:	3e2aaaab 	.word	0x3e2aaaab
 8006304:	bd241146 	.word	0xbd241146
 8006308:	3e4e0aa8 	.word	0x3e4e0aa8
 800630c:	bea6b090 	.word	0xbea6b090
 8006310:	3d9dc62e 	.word	0x3d9dc62e
 8006314:	bf303361 	.word	0xbf303361
 8006318:	4001572d 	.word	0x4001572d
 800631c:	c019d139 	.word	0xc019d139
 8006320:	3f799999 	.word	0x3f799999
 8006324:	333bbd2e 	.word	0x333bbd2e
 8006328:	3f490fdb 	.word	0x3f490fdb

0800632c <__ieee754_sqrtf>:
 800632c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006330:	4770      	bx	lr

08006332 <with_errno>:
 8006332:	b570      	push	{r4, r5, r6, lr}
 8006334:	4604      	mov	r4, r0
 8006336:	460d      	mov	r5, r1
 8006338:	4616      	mov	r6, r2
 800633a:	f000 fa75 	bl	8006828 <__errno>
 800633e:	4629      	mov	r1, r5
 8006340:	6006      	str	r6, [r0, #0]
 8006342:	4620      	mov	r0, r4
 8006344:	bd70      	pop	{r4, r5, r6, pc}

08006346 <xflow>:
 8006346:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006348:	4614      	mov	r4, r2
 800634a:	461d      	mov	r5, r3
 800634c:	b108      	cbz	r0, 8006352 <xflow+0xc>
 800634e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006352:	e9cd 2300 	strd	r2, r3, [sp]
 8006356:	e9dd 2300 	ldrd	r2, r3, [sp]
 800635a:	4620      	mov	r0, r4
 800635c:	4629      	mov	r1, r5
 800635e:	f7fa f8f7 	bl	8000550 <__aeabi_dmul>
 8006362:	2222      	movs	r2, #34	; 0x22
 8006364:	b003      	add	sp, #12
 8006366:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800636a:	f7ff bfe2 	b.w	8006332 <with_errno>

0800636e <__math_uflow>:
 800636e:	b508      	push	{r3, lr}
 8006370:	2200      	movs	r2, #0
 8006372:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006376:	f7ff ffe6 	bl	8006346 <xflow>
 800637a:	ec41 0b10 	vmov	d0, r0, r1
 800637e:	bd08      	pop	{r3, pc}

08006380 <__math_oflow>:
 8006380:	b508      	push	{r3, lr}
 8006382:	2200      	movs	r2, #0
 8006384:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006388:	f7ff ffdd 	bl	8006346 <xflow>
 800638c:	ec41 0b10 	vmov	d0, r0, r1
 8006390:	bd08      	pop	{r3, pc}
 8006392:	0000      	movs	r0, r0
 8006394:	0000      	movs	r0, r0
	...

08006398 <atan>:
 8006398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639c:	ec55 4b10 	vmov	r4, r5, d0
 80063a0:	4bc3      	ldr	r3, [pc, #780]	; (80066b0 <atan+0x318>)
 80063a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80063a6:	429e      	cmp	r6, r3
 80063a8:	46ab      	mov	fp, r5
 80063aa:	dd18      	ble.n	80063de <atan+0x46>
 80063ac:	4bc1      	ldr	r3, [pc, #772]	; (80066b4 <atan+0x31c>)
 80063ae:	429e      	cmp	r6, r3
 80063b0:	dc01      	bgt.n	80063b6 <atan+0x1e>
 80063b2:	d109      	bne.n	80063c8 <atan+0x30>
 80063b4:	b144      	cbz	r4, 80063c8 <atan+0x30>
 80063b6:	4622      	mov	r2, r4
 80063b8:	462b      	mov	r3, r5
 80063ba:	4620      	mov	r0, r4
 80063bc:	4629      	mov	r1, r5
 80063be:	f7f9 ff11 	bl	80001e4 <__adddf3>
 80063c2:	4604      	mov	r4, r0
 80063c4:	460d      	mov	r5, r1
 80063c6:	e006      	b.n	80063d6 <atan+0x3e>
 80063c8:	f1bb 0f00 	cmp.w	fp, #0
 80063cc:	f300 8131 	bgt.w	8006632 <atan+0x29a>
 80063d0:	a59b      	add	r5, pc, #620	; (adr r5, 8006640 <atan+0x2a8>)
 80063d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80063d6:	ec45 4b10 	vmov	d0, r4, r5
 80063da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063de:	4bb6      	ldr	r3, [pc, #728]	; (80066b8 <atan+0x320>)
 80063e0:	429e      	cmp	r6, r3
 80063e2:	dc14      	bgt.n	800640e <atan+0x76>
 80063e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80063e8:	429e      	cmp	r6, r3
 80063ea:	dc0d      	bgt.n	8006408 <atan+0x70>
 80063ec:	a396      	add	r3, pc, #600	; (adr r3, 8006648 <atan+0x2b0>)
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	ee10 0a10 	vmov	r0, s0
 80063f6:	4629      	mov	r1, r5
 80063f8:	f7f9 fef4 	bl	80001e4 <__adddf3>
 80063fc:	4baf      	ldr	r3, [pc, #700]	; (80066bc <atan+0x324>)
 80063fe:	2200      	movs	r2, #0
 8006400:	f7fa fb36 	bl	8000a70 <__aeabi_dcmpgt>
 8006404:	2800      	cmp	r0, #0
 8006406:	d1e6      	bne.n	80063d6 <atan+0x3e>
 8006408:	f04f 3aff 	mov.w	sl, #4294967295
 800640c:	e02b      	b.n	8006466 <atan+0xce>
 800640e:	f000 f963 	bl	80066d8 <fabs>
 8006412:	4bab      	ldr	r3, [pc, #684]	; (80066c0 <atan+0x328>)
 8006414:	429e      	cmp	r6, r3
 8006416:	ec55 4b10 	vmov	r4, r5, d0
 800641a:	f300 80bf 	bgt.w	800659c <atan+0x204>
 800641e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006422:	429e      	cmp	r6, r3
 8006424:	f300 80a0 	bgt.w	8006568 <atan+0x1d0>
 8006428:	ee10 2a10 	vmov	r2, s0
 800642c:	ee10 0a10 	vmov	r0, s0
 8006430:	462b      	mov	r3, r5
 8006432:	4629      	mov	r1, r5
 8006434:	f7f9 fed6 	bl	80001e4 <__adddf3>
 8006438:	4ba0      	ldr	r3, [pc, #640]	; (80066bc <atan+0x324>)
 800643a:	2200      	movs	r2, #0
 800643c:	f7f9 fed0 	bl	80001e0 <__aeabi_dsub>
 8006440:	2200      	movs	r2, #0
 8006442:	4606      	mov	r6, r0
 8006444:	460f      	mov	r7, r1
 8006446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800644a:	4620      	mov	r0, r4
 800644c:	4629      	mov	r1, r5
 800644e:	f7f9 fec9 	bl	80001e4 <__adddf3>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4630      	mov	r0, r6
 8006458:	4639      	mov	r1, r7
 800645a:	f7fa f9a3 	bl	80007a4 <__aeabi_ddiv>
 800645e:	f04f 0a00 	mov.w	sl, #0
 8006462:	4604      	mov	r4, r0
 8006464:	460d      	mov	r5, r1
 8006466:	4622      	mov	r2, r4
 8006468:	462b      	mov	r3, r5
 800646a:	4620      	mov	r0, r4
 800646c:	4629      	mov	r1, r5
 800646e:	f7fa f86f 	bl	8000550 <__aeabi_dmul>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4680      	mov	r8, r0
 8006478:	4689      	mov	r9, r1
 800647a:	f7fa f869 	bl	8000550 <__aeabi_dmul>
 800647e:	a374      	add	r3, pc, #464	; (adr r3, 8006650 <atan+0x2b8>)
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	4606      	mov	r6, r0
 8006486:	460f      	mov	r7, r1
 8006488:	f7fa f862 	bl	8000550 <__aeabi_dmul>
 800648c:	a372      	add	r3, pc, #456	; (adr r3, 8006658 <atan+0x2c0>)
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f7f9 fea7 	bl	80001e4 <__adddf3>
 8006496:	4632      	mov	r2, r6
 8006498:	463b      	mov	r3, r7
 800649a:	f7fa f859 	bl	8000550 <__aeabi_dmul>
 800649e:	a370      	add	r3, pc, #448	; (adr r3, 8006660 <atan+0x2c8>)
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f7f9 fe9e 	bl	80001e4 <__adddf3>
 80064a8:	4632      	mov	r2, r6
 80064aa:	463b      	mov	r3, r7
 80064ac:	f7fa f850 	bl	8000550 <__aeabi_dmul>
 80064b0:	a36d      	add	r3, pc, #436	; (adr r3, 8006668 <atan+0x2d0>)
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	f7f9 fe95 	bl	80001e4 <__adddf3>
 80064ba:	4632      	mov	r2, r6
 80064bc:	463b      	mov	r3, r7
 80064be:	f7fa f847 	bl	8000550 <__aeabi_dmul>
 80064c2:	a36b      	add	r3, pc, #428	; (adr r3, 8006670 <atan+0x2d8>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f7f9 fe8c 	bl	80001e4 <__adddf3>
 80064cc:	4632      	mov	r2, r6
 80064ce:	463b      	mov	r3, r7
 80064d0:	f7fa f83e 	bl	8000550 <__aeabi_dmul>
 80064d4:	a368      	add	r3, pc, #416	; (adr r3, 8006678 <atan+0x2e0>)
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	f7f9 fe83 	bl	80001e4 <__adddf3>
 80064de:	4642      	mov	r2, r8
 80064e0:	464b      	mov	r3, r9
 80064e2:	f7fa f835 	bl	8000550 <__aeabi_dmul>
 80064e6:	a366      	add	r3, pc, #408	; (adr r3, 8006680 <atan+0x2e8>)
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	4680      	mov	r8, r0
 80064ee:	4689      	mov	r9, r1
 80064f0:	4630      	mov	r0, r6
 80064f2:	4639      	mov	r1, r7
 80064f4:	f7fa f82c 	bl	8000550 <__aeabi_dmul>
 80064f8:	a363      	add	r3, pc, #396	; (adr r3, 8006688 <atan+0x2f0>)
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f7f9 fe6f 	bl	80001e0 <__aeabi_dsub>
 8006502:	4632      	mov	r2, r6
 8006504:	463b      	mov	r3, r7
 8006506:	f7fa f823 	bl	8000550 <__aeabi_dmul>
 800650a:	a361      	add	r3, pc, #388	; (adr r3, 8006690 <atan+0x2f8>)
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f7f9 fe66 	bl	80001e0 <__aeabi_dsub>
 8006514:	4632      	mov	r2, r6
 8006516:	463b      	mov	r3, r7
 8006518:	f7fa f81a 	bl	8000550 <__aeabi_dmul>
 800651c:	a35e      	add	r3, pc, #376	; (adr r3, 8006698 <atan+0x300>)
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f7f9 fe5d 	bl	80001e0 <__aeabi_dsub>
 8006526:	4632      	mov	r2, r6
 8006528:	463b      	mov	r3, r7
 800652a:	f7fa f811 	bl	8000550 <__aeabi_dmul>
 800652e:	a35c      	add	r3, pc, #368	; (adr r3, 80066a0 <atan+0x308>)
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f7f9 fe54 	bl	80001e0 <__aeabi_dsub>
 8006538:	4632      	mov	r2, r6
 800653a:	463b      	mov	r3, r7
 800653c:	f7fa f808 	bl	8000550 <__aeabi_dmul>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4640      	mov	r0, r8
 8006546:	4649      	mov	r1, r9
 8006548:	f7f9 fe4c 	bl	80001e4 <__adddf3>
 800654c:	4622      	mov	r2, r4
 800654e:	462b      	mov	r3, r5
 8006550:	f7f9 fffe 	bl	8000550 <__aeabi_dmul>
 8006554:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	d14b      	bne.n	80065f6 <atan+0x25e>
 800655e:	4620      	mov	r0, r4
 8006560:	4629      	mov	r1, r5
 8006562:	f7f9 fe3d 	bl	80001e0 <__aeabi_dsub>
 8006566:	e72c      	b.n	80063c2 <atan+0x2a>
 8006568:	ee10 0a10 	vmov	r0, s0
 800656c:	4b53      	ldr	r3, [pc, #332]	; (80066bc <atan+0x324>)
 800656e:	2200      	movs	r2, #0
 8006570:	4629      	mov	r1, r5
 8006572:	f7f9 fe35 	bl	80001e0 <__aeabi_dsub>
 8006576:	4b51      	ldr	r3, [pc, #324]	; (80066bc <atan+0x324>)
 8006578:	4606      	mov	r6, r0
 800657a:	460f      	mov	r7, r1
 800657c:	2200      	movs	r2, #0
 800657e:	4620      	mov	r0, r4
 8006580:	4629      	mov	r1, r5
 8006582:	f7f9 fe2f 	bl	80001e4 <__adddf3>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	4630      	mov	r0, r6
 800658c:	4639      	mov	r1, r7
 800658e:	f7fa f909 	bl	80007a4 <__aeabi_ddiv>
 8006592:	f04f 0a01 	mov.w	sl, #1
 8006596:	4604      	mov	r4, r0
 8006598:	460d      	mov	r5, r1
 800659a:	e764      	b.n	8006466 <atan+0xce>
 800659c:	4b49      	ldr	r3, [pc, #292]	; (80066c4 <atan+0x32c>)
 800659e:	429e      	cmp	r6, r3
 80065a0:	da1d      	bge.n	80065de <atan+0x246>
 80065a2:	ee10 0a10 	vmov	r0, s0
 80065a6:	4b48      	ldr	r3, [pc, #288]	; (80066c8 <atan+0x330>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	4629      	mov	r1, r5
 80065ac:	f7f9 fe18 	bl	80001e0 <__aeabi_dsub>
 80065b0:	4b45      	ldr	r3, [pc, #276]	; (80066c8 <atan+0x330>)
 80065b2:	4606      	mov	r6, r0
 80065b4:	460f      	mov	r7, r1
 80065b6:	2200      	movs	r2, #0
 80065b8:	4620      	mov	r0, r4
 80065ba:	4629      	mov	r1, r5
 80065bc:	f7f9 ffc8 	bl	8000550 <__aeabi_dmul>
 80065c0:	4b3e      	ldr	r3, [pc, #248]	; (80066bc <atan+0x324>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	f7f9 fe0e 	bl	80001e4 <__adddf3>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4630      	mov	r0, r6
 80065ce:	4639      	mov	r1, r7
 80065d0:	f7fa f8e8 	bl	80007a4 <__aeabi_ddiv>
 80065d4:	f04f 0a02 	mov.w	sl, #2
 80065d8:	4604      	mov	r4, r0
 80065da:	460d      	mov	r5, r1
 80065dc:	e743      	b.n	8006466 <atan+0xce>
 80065de:	462b      	mov	r3, r5
 80065e0:	ee10 2a10 	vmov	r2, s0
 80065e4:	4939      	ldr	r1, [pc, #228]	; (80066cc <atan+0x334>)
 80065e6:	2000      	movs	r0, #0
 80065e8:	f7fa f8dc 	bl	80007a4 <__aeabi_ddiv>
 80065ec:	f04f 0a03 	mov.w	sl, #3
 80065f0:	4604      	mov	r4, r0
 80065f2:	460d      	mov	r5, r1
 80065f4:	e737      	b.n	8006466 <atan+0xce>
 80065f6:	4b36      	ldr	r3, [pc, #216]	; (80066d0 <atan+0x338>)
 80065f8:	4e36      	ldr	r6, [pc, #216]	; (80066d4 <atan+0x33c>)
 80065fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80065fe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006602:	e9da 2300 	ldrd	r2, r3, [sl]
 8006606:	f7f9 fdeb 	bl	80001e0 <__aeabi_dsub>
 800660a:	4622      	mov	r2, r4
 800660c:	462b      	mov	r3, r5
 800660e:	f7f9 fde7 	bl	80001e0 <__aeabi_dsub>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	e9d6 0100 	ldrd	r0, r1, [r6]
 800661a:	f7f9 fde1 	bl	80001e0 <__aeabi_dsub>
 800661e:	f1bb 0f00 	cmp.w	fp, #0
 8006622:	4604      	mov	r4, r0
 8006624:	460d      	mov	r5, r1
 8006626:	f6bf aed6 	bge.w	80063d6 <atan+0x3e>
 800662a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800662e:	461d      	mov	r5, r3
 8006630:	e6d1      	b.n	80063d6 <atan+0x3e>
 8006632:	a51d      	add	r5, pc, #116	; (adr r5, 80066a8 <atan+0x310>)
 8006634:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006638:	e6cd      	b.n	80063d6 <atan+0x3e>
 800663a:	bf00      	nop
 800663c:	f3af 8000 	nop.w
 8006640:	54442d18 	.word	0x54442d18
 8006644:	bff921fb 	.word	0xbff921fb
 8006648:	8800759c 	.word	0x8800759c
 800664c:	7e37e43c 	.word	0x7e37e43c
 8006650:	e322da11 	.word	0xe322da11
 8006654:	3f90ad3a 	.word	0x3f90ad3a
 8006658:	24760deb 	.word	0x24760deb
 800665c:	3fa97b4b 	.word	0x3fa97b4b
 8006660:	a0d03d51 	.word	0xa0d03d51
 8006664:	3fb10d66 	.word	0x3fb10d66
 8006668:	c54c206e 	.word	0xc54c206e
 800666c:	3fb745cd 	.word	0x3fb745cd
 8006670:	920083ff 	.word	0x920083ff
 8006674:	3fc24924 	.word	0x3fc24924
 8006678:	5555550d 	.word	0x5555550d
 800667c:	3fd55555 	.word	0x3fd55555
 8006680:	2c6a6c2f 	.word	0x2c6a6c2f
 8006684:	bfa2b444 	.word	0xbfa2b444
 8006688:	52defd9a 	.word	0x52defd9a
 800668c:	3fadde2d 	.word	0x3fadde2d
 8006690:	af749a6d 	.word	0xaf749a6d
 8006694:	3fb3b0f2 	.word	0x3fb3b0f2
 8006698:	fe231671 	.word	0xfe231671
 800669c:	3fbc71c6 	.word	0x3fbc71c6
 80066a0:	9998ebc4 	.word	0x9998ebc4
 80066a4:	3fc99999 	.word	0x3fc99999
 80066a8:	54442d18 	.word	0x54442d18
 80066ac:	3ff921fb 	.word	0x3ff921fb
 80066b0:	440fffff 	.word	0x440fffff
 80066b4:	7ff00000 	.word	0x7ff00000
 80066b8:	3fdbffff 	.word	0x3fdbffff
 80066bc:	3ff00000 	.word	0x3ff00000
 80066c0:	3ff2ffff 	.word	0x3ff2ffff
 80066c4:	40038000 	.word	0x40038000
 80066c8:	3ff80000 	.word	0x3ff80000
 80066cc:	bff00000 	.word	0xbff00000
 80066d0:	08006968 	.word	0x08006968
 80066d4:	08006948 	.word	0x08006948

080066d8 <fabs>:
 80066d8:	ec51 0b10 	vmov	r0, r1, d0
 80066dc:	ee10 2a10 	vmov	r2, s0
 80066e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066e4:	ec43 2b10 	vmov	d0, r2, r3
 80066e8:	4770      	bx	lr

080066ea <finite>:
 80066ea:	b082      	sub	sp, #8
 80066ec:	ed8d 0b00 	vstr	d0, [sp]
 80066f0:	9801      	ldr	r0, [sp, #4]
 80066f2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80066f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80066fa:	0fc0      	lsrs	r0, r0, #31
 80066fc:	b002      	add	sp, #8
 80066fe:	4770      	bx	lr

08006700 <scalbn>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	ec55 4b10 	vmov	r4, r5, d0
 8006706:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800670a:	4606      	mov	r6, r0
 800670c:	462b      	mov	r3, r5
 800670e:	b99a      	cbnz	r2, 8006738 <scalbn+0x38>
 8006710:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006714:	4323      	orrs	r3, r4
 8006716:	d036      	beq.n	8006786 <scalbn+0x86>
 8006718:	4b39      	ldr	r3, [pc, #228]	; (8006800 <scalbn+0x100>)
 800671a:	4629      	mov	r1, r5
 800671c:	ee10 0a10 	vmov	r0, s0
 8006720:	2200      	movs	r2, #0
 8006722:	f7f9 ff15 	bl	8000550 <__aeabi_dmul>
 8006726:	4b37      	ldr	r3, [pc, #220]	; (8006804 <scalbn+0x104>)
 8006728:	429e      	cmp	r6, r3
 800672a:	4604      	mov	r4, r0
 800672c:	460d      	mov	r5, r1
 800672e:	da10      	bge.n	8006752 <scalbn+0x52>
 8006730:	a32b      	add	r3, pc, #172	; (adr r3, 80067e0 <scalbn+0xe0>)
 8006732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006736:	e03a      	b.n	80067ae <scalbn+0xae>
 8006738:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800673c:	428a      	cmp	r2, r1
 800673e:	d10c      	bne.n	800675a <scalbn+0x5a>
 8006740:	ee10 2a10 	vmov	r2, s0
 8006744:	4620      	mov	r0, r4
 8006746:	4629      	mov	r1, r5
 8006748:	f7f9 fd4c 	bl	80001e4 <__adddf3>
 800674c:	4604      	mov	r4, r0
 800674e:	460d      	mov	r5, r1
 8006750:	e019      	b.n	8006786 <scalbn+0x86>
 8006752:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006756:	460b      	mov	r3, r1
 8006758:	3a36      	subs	r2, #54	; 0x36
 800675a:	4432      	add	r2, r6
 800675c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006760:	428a      	cmp	r2, r1
 8006762:	dd08      	ble.n	8006776 <scalbn+0x76>
 8006764:	2d00      	cmp	r5, #0
 8006766:	a120      	add	r1, pc, #128	; (adr r1, 80067e8 <scalbn+0xe8>)
 8006768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800676c:	da1c      	bge.n	80067a8 <scalbn+0xa8>
 800676e:	a120      	add	r1, pc, #128	; (adr r1, 80067f0 <scalbn+0xf0>)
 8006770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006774:	e018      	b.n	80067a8 <scalbn+0xa8>
 8006776:	2a00      	cmp	r2, #0
 8006778:	dd08      	ble.n	800678c <scalbn+0x8c>
 800677a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800677e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006782:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006786:	ec45 4b10 	vmov	d0, r4, r5
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006790:	da19      	bge.n	80067c6 <scalbn+0xc6>
 8006792:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006796:	429e      	cmp	r6, r3
 8006798:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800679c:	dd0a      	ble.n	80067b4 <scalbn+0xb4>
 800679e:	a112      	add	r1, pc, #72	; (adr r1, 80067e8 <scalbn+0xe8>)
 80067a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e2      	bne.n	800676e <scalbn+0x6e>
 80067a8:	a30f      	add	r3, pc, #60	; (adr r3, 80067e8 <scalbn+0xe8>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f7f9 fecf 	bl	8000550 <__aeabi_dmul>
 80067b2:	e7cb      	b.n	800674c <scalbn+0x4c>
 80067b4:	a10a      	add	r1, pc, #40	; (adr r1, 80067e0 <scalbn+0xe0>)
 80067b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0b8      	beq.n	8006730 <scalbn+0x30>
 80067be:	a10e      	add	r1, pc, #56	; (adr r1, 80067f8 <scalbn+0xf8>)
 80067c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067c4:	e7b4      	b.n	8006730 <scalbn+0x30>
 80067c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80067ca:	3236      	adds	r2, #54	; 0x36
 80067cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80067d4:	4620      	mov	r0, r4
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <scalbn+0x108>)
 80067d8:	2200      	movs	r2, #0
 80067da:	e7e8      	b.n	80067ae <scalbn+0xae>
 80067dc:	f3af 8000 	nop.w
 80067e0:	c2f8f359 	.word	0xc2f8f359
 80067e4:	01a56e1f 	.word	0x01a56e1f
 80067e8:	8800759c 	.word	0x8800759c
 80067ec:	7e37e43c 	.word	0x7e37e43c
 80067f0:	8800759c 	.word	0x8800759c
 80067f4:	fe37e43c 	.word	0xfe37e43c
 80067f8:	c2f8f359 	.word	0xc2f8f359
 80067fc:	81a56e1f 	.word	0x81a56e1f
 8006800:	43500000 	.word	0x43500000
 8006804:	ffff3cb0 	.word	0xffff3cb0
 8006808:	3c900000 	.word	0x3c900000

0800680c <fabsf>:
 800680c:	ee10 3a10 	vmov	r3, s0
 8006810:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006814:	ee00 3a10 	vmov	s0, r3
 8006818:	4770      	bx	lr
	...

0800681c <nanf>:
 800681c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006824 <nanf+0x8>
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	7fc00000 	.word	0x7fc00000

08006828 <__errno>:
 8006828:	4b01      	ldr	r3, [pc, #4]	; (8006830 <__errno+0x8>)
 800682a:	6818      	ldr	r0, [r3, #0]
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	2000002c 	.word	0x2000002c

08006834 <__libc_init_array>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	4d0d      	ldr	r5, [pc, #52]	; (800686c <__libc_init_array+0x38>)
 8006838:	4c0d      	ldr	r4, [pc, #52]	; (8006870 <__libc_init_array+0x3c>)
 800683a:	1b64      	subs	r4, r4, r5
 800683c:	10a4      	asrs	r4, r4, #2
 800683e:	2600      	movs	r6, #0
 8006840:	42a6      	cmp	r6, r4
 8006842:	d109      	bne.n	8006858 <__libc_init_array+0x24>
 8006844:	4d0b      	ldr	r5, [pc, #44]	; (8006874 <__libc_init_array+0x40>)
 8006846:	4c0c      	ldr	r4, [pc, #48]	; (8006878 <__libc_init_array+0x44>)
 8006848:	f000 f820 	bl	800688c <_init>
 800684c:	1b64      	subs	r4, r4, r5
 800684e:	10a4      	asrs	r4, r4, #2
 8006850:	2600      	movs	r6, #0
 8006852:	42a6      	cmp	r6, r4
 8006854:	d105      	bne.n	8006862 <__libc_init_array+0x2e>
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	f855 3b04 	ldr.w	r3, [r5], #4
 800685c:	4798      	blx	r3
 800685e:	3601      	adds	r6, #1
 8006860:	e7ee      	b.n	8006840 <__libc_init_array+0xc>
 8006862:	f855 3b04 	ldr.w	r3, [r5], #4
 8006866:	4798      	blx	r3
 8006868:	3601      	adds	r6, #1
 800686a:	e7f2      	b.n	8006852 <__libc_init_array+0x1e>
 800686c:	08006990 	.word	0x08006990
 8006870:	08006990 	.word	0x08006990
 8006874:	08006990 	.word	0x08006990
 8006878:	08006998 	.word	0x08006998

0800687c <memset>:
 800687c:	4402      	add	r2, r0
 800687e:	4603      	mov	r3, r0
 8006880:	4293      	cmp	r3, r2
 8006882:	d100      	bne.n	8006886 <memset+0xa>
 8006884:	4770      	bx	lr
 8006886:	f803 1b01 	strb.w	r1, [r3], #1
 800688a:	e7f9      	b.n	8006880 <memset+0x4>

0800688c <_init>:
 800688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688e:	bf00      	nop
 8006890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006892:	bc08      	pop	{r3}
 8006894:	469e      	mov	lr, r3
 8006896:	4770      	bx	lr

08006898 <_fini>:
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689a:	bf00      	nop
 800689c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689e:	bc08      	pop	{r3}
 80068a0:	469e      	mov	lr, r3
 80068a2:	4770      	bx	lr
