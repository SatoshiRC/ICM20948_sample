
icm20948_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004050  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  080041e8  080041e8  000141e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004414  08004414  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800441c  0800441c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800442c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  0800449c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  0800449c  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a89  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c4  00000000  00000000  00033b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00035ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  00036a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000673d  00000000  00000000  00037470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e825  00000000  00000000  0003dbad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000972a2  00000000  00000000  0004c3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3674  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004324  00000000  00000000  000e36c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080041d0 	.word	0x080041d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080041d0 	.word	0x080041d0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b08a      	sub	sp, #40	; 0x28
 80004f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
 8000506:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <MX_GPIO_Init+0xd0>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a2c      	ldr	r2, [pc, #176]	; (80005bc <MX_GPIO_Init+0xd0>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <MX_GPIO_Init+0xd0>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	4b26      	ldr	r3, [pc, #152]	; (80005bc <MX_GPIO_Init+0xd0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a25      	ldr	r2, [pc, #148]	; (80005bc <MX_GPIO_Init+0xd0>)
 8000528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b23      	ldr	r3, [pc, #140]	; (80005bc <MX_GPIO_Init+0xd0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <MX_GPIO_Init+0xd0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a1e      	ldr	r2, [pc, #120]	; (80005bc <MX_GPIO_Init+0xd0>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <MX_GPIO_Init+0xd0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	4b18      	ldr	r3, [pc, #96]	; (80005bc <MX_GPIO_Init+0xd0>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a17      	ldr	r2, [pc, #92]	; (80005bc <MX_GPIO_Init+0xd0>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <MX_GPIO_Init+0xd0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2120      	movs	r1, #32
 8000576:	4812      	ldr	r0, [pc, #72]	; (80005c0 <MX_GPIO_Init+0xd4>)
 8000578:	f001 f950 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800057c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000582:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	480c      	ldr	r0, [pc, #48]	; (80005c4 <MX_GPIO_Init+0xd8>)
 8000594:	f000 ffbe 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000598:	2320      	movs	r3, #32
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <MX_GPIO_Init+0xd4>)
 80005b0:	f000 ffb0 	bl	8001514 <HAL_GPIO_Init>

}
 80005b4:	bf00      	nop
 80005b6:	3728      	adds	r7, #40	; 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020000 	.word	0x40020000
 80005c4:	40020800 	.word	0x40020800

080005c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <MX_I2C1_Init+0x54>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_I2C1_Init+0x50>)
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_I2C1_Init+0x58>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_I2C1_Init+0x50>)
 8000606:	f001 f923 	bl	8001850 <HAL_I2C_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 f8cc 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000008c 	.word	0x2000008c
 800061c:	40005400 	.word	0x40005400
 8000620:	000186a0 	.word	0x000186a0

08000624 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a19      	ldr	r2, [pc, #100]	; (80006a8 <HAL_I2C_MspInit+0x84>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d12c      	bne.n	80006a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <HAL_I2C_MspInit+0x88>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a17      	ldr	r2, [pc, #92]	; (80006ac <HAL_I2C_MspInit+0x88>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <HAL_I2C_MspInit+0x88>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000662:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000668:	2312      	movs	r3, #18
 800066a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000670:	2303      	movs	r3, #3
 8000672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000674:	2304      	movs	r3, #4
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	480c      	ldr	r0, [pc, #48]	; (80006b0 <HAL_I2C_MspInit+0x8c>)
 8000680:	f000 ff48 	bl	8001514 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <HAL_I2C_MspInit+0x88>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <HAL_I2C_MspInit+0x88>)
 800068e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <HAL_I2C_MspInit+0x88>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006a0:	bf00      	nop
 80006a2:	3728      	adds	r7, #40	; 0x28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40005400 	.word	0x40005400
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020400 	.word	0x40020400

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fdb0 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f80c 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f7ff ff14 	bl	80004ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c4:	f000 f934 	bl	8000930 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006c8:	f7ff ff7e 	bl	80005c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init();
 80006cc:	f000 fba2 	bl	8000e14 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80006d0:	f000 fbe2 	bl	8000e98 <loop>
 80006d4:	e7fc      	b.n	80006d0 <main+0x1c>
	...

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fc28 	bl	8003f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <SystemClock_Config+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemClock_Config+0xd0>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000748:	2310      	movs	r3, #16
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800074c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000750:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000752:	2304      	movs	r3, #4
 8000754:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000756:	2304      	movs	r3, #4
 8000758:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	4618      	mov	r0, r3
 8000760:	f002 f836 	bl	80027d0 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800076a:	f000 f81f 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2302      	movs	r3, #2
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2102      	movs	r1, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f002 fa98 	bl	8002cc0 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000796:	f000 f809 	bl	80007ac <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <HAL_MspInit+0x4c>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_MspInit+0x4c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007f6:	2007      	movs	r0, #7
 80007f8:	f000 fe58 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f000 fd34 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
	return 1;
 8000860:	2301      	movs	r3, #1
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <_kill>:

int _kill(int pid, int sig)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000876:	f003 faff 	bl	8003e78 <__errno>
 800087a:	4603      	mov	r3, r0
 800087c:	2216      	movs	r2, #22
 800087e:	601a      	str	r2, [r3, #0]
	return -1;
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <_exit>:

void _exit (int status)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000894:	f04f 31ff 	mov.w	r1, #4294967295
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ffe7 	bl	800086c <_kill>
	while (1) {}		/* Make sure we hang here */
 800089e:	e7fe      	b.n	800089e <_exit+0x12>

080008a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a8:	4a14      	ldr	r2, [pc, #80]	; (80008fc <_sbrk+0x5c>)
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <_sbrk+0x60>)
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <_sbrk+0x64>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <_sbrk+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d207      	bcs.n	80008e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d0:	f003 fad2 	bl	8003e78 <__errno>
 80008d4:	4603      	mov	r3, r0
 80008d6:	220c      	movs	r2, #12
 80008d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	e009      	b.n	80008f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	4a05      	ldr	r2, [pc, #20]	; (8000904 <_sbrk+0x64>)
 80008f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20020000 	.word	0x20020000
 8000900:	00000400 	.word	0x00000400
 8000904:	200000e0 	.word	0x200000e0
 8000908:	20000170 	.word	0x20000170

0800090c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <MX_USART2_UART_Init+0x50>)
 8000938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_USART2_UART_Init+0x4c>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USART2_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART2_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000968:	f002 fbca 	bl	8003100 <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000972:	f7ff ff1b 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000e4 	.word	0x200000e4
 8000980:	40004400 	.word	0x40004400

08000984 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a19      	ldr	r2, [pc, #100]	; (8000a08 <HAL_UART_MspInit+0x84>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d12b      	bne.n	80009fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_UART_MspInit+0x88>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <HAL_UART_MspInit+0x88>)
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_UART_MspInit+0x88>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_UART_MspInit+0x88>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <HAL_UART_MspInit+0x88>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_UART_MspInit+0x88>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009de:	230c      	movs	r3, #12
 80009e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ee:	2307      	movs	r3, #7
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <HAL_UART_MspInit+0x8c>)
 80009fa:	f000 fd8b 	bl	8001514 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40004400 	.word	0x40004400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000

08000a14 <_ZN8ICM20948Ut_C1Ev>:
		SENS_4G,
		SENS_8G,
		SENS_16G,
	};

	const struct{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2206      	movs	r2, #6
 8000a26:	705a      	strb	r2, [r3, #1]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2207      	movs	r2, #7
 8000a2c:	709a      	strb	r2, [r3, #2]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	220f      	movs	r2, #15
 8000a32:	70da      	strb	r2, [r3, #3]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	227f      	movs	r2, #127	; 0x7f
 8000a38:	711a      	strb	r2, [r3, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2214      	movs	r2, #20
 8000a3e:	715a      	strb	r2, [r3, #5]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2201      	movs	r2, #1
 8000a44:	719a      	strb	r2, [r3, #6]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <_ZN8ICM20948C1Ev>:
	ICM20948(){};
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <_ZN8ICM20948C1Ev+0x44>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3304      	adds	r3, #4
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffd4 	bl	8000a14 <_ZN8ICM20948Ut_C1Ev>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <_ZN8ICM20948C1Ev+0x48>)
 8000a70:	f103 040c 	add.w	r4, r3, #12
 8000a74:	4613      	mov	r3, r2
 8000a76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <_ZN8ICM20948C1Ev+0x4c>)
 8000a80:	f103 041c 	add.w	r4, r3, #28
 8000a84:	4613      	mov	r3, r2
 8000a86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd90      	pop	{r4, r7, pc}
 8000a96:	bf00      	nop
 8000a98:	08004304 	.word	0x08004304
 8000a9c:	080041e8 	.word	0x080041e8
 8000aa0:	080041f8 	.word	0x080041f8

08000aa4 <_ZN8ICM20948D1Ev>:
	virtual ~ICM20948(){};
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <_ZN8ICM20948D1Ev+0x1c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	08004304 	.word	0x08004304

08000ac4 <_ZN8ICM20948D0Ev>:
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ffe9 	bl	8000aa4 <_ZN8ICM20948D1Ev>
 8000ad2:	212c      	movs	r1, #44	; 0x2c
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f002 fed5 	bl	8003884 <_ZdlPvj>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <_ZN8ICM209486whoamiEv>:
		uint8_t BANK_SEL = 0x7F;
		uint8_t ACCEL_CONFIG = 0x14;
		uint8_t GYRO_CONFIG = 0x01;
	}REGISTER;

	uint8_t whoami(){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af04      	add	r7, sp, #16
 8000aea:	6078      	str	r0, [r7, #4]
	    uint8_t adress=0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, REGISTER.WHO_AM_I, 1, &adress, 1, 1000);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	791b      	ldrb	r3, [r3, #4]
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	9302      	str	r3, [sp, #8]
 8000afc:	2301      	movs	r3, #1
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	f107 030f 	add.w	r3, r7, #15
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2301      	movs	r3, #1
 8000b08:	21d0      	movs	r1, #208	; 0xd0
 8000b0a:	4804      	ldr	r0, [pc, #16]	; (8000b1c <_ZN8ICM209486whoamiEv+0x38>)
 8000b0c:	f001 f8de 	bl	8001ccc <HAL_I2C_Mem_Read>
		return adress;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]

	}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000008c 	.word	0x2000008c

08000b20 <_ZN8ICM209488pwrmgmt1Eh>:

	uint8_t pwrmgmt1(uint8_t data){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af04      	add	r7, sp, #16
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	70fb      	strb	r3, [r7, #3]
	     HAL_I2C_Mem_Write(&hi2c1, 0x68<<1,REGISTER.PWR_MGMT_1,1,&data,1,1000);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	795b      	ldrb	r3, [r3, #5]
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	9302      	str	r3, [sp, #8]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	1cfb      	adds	r3, r7, #3
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2301      	movs	r3, #1
 8000b42:	21d0      	movs	r1, #208	; 0xd0
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <_ZN8ICM209488pwrmgmt1Eh+0x34>)
 8000b46:	f000 ffc7 	bl	8001ad8 <HAL_I2C_Mem_Write>
	     return 0;
 8000b4a:	2300      	movs	r3, #0
	}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000008c 	.word	0x2000008c

08000b58 <_ZN8ICM209488pwrmgmt2Eh>:
	uint8_t pwrmgmt2(uint8_t data){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af04      	add	r7, sp, #16
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
	     HAL_I2C_Mem_Write(&hi2c1, 0x68<<1,REGISTER.PWR_MGMT_2,1,&data,1,1000);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	799b      	ldrb	r3, [r3, #6]
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6e:	9302      	str	r3, [sp, #8]
 8000b70:	2301      	movs	r3, #1
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	1cfb      	adds	r3, r7, #3
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	21d0      	movs	r1, #208	; 0xd0
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <_ZN8ICM209488pwrmgmt2Eh+0x34>)
 8000b7e:	f000 ffab 	bl	8001ad8 <HAL_I2C_Mem_Write>
	     return 0;
 8000b82:	2300      	movs	r3, #0
	}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000008c 	.word	0x2000008c

08000b90 <_ZN8ICM209485resetEv>:
	void reset(){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af04      	add	r7, sp, #16
 8000b96:	6078      	str	r0, [r7, #4]
	    pwrmgmt1(ICM20948_BIT_H_RESET);
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffc0 	bl	8000b20 <_ZN8ICM209488pwrmgmt1Eh>
	    HAL_Delay(100);
 8000ba0:	2064      	movs	r0, #100	; 0x64
 8000ba2:	f000 fbad 	bl	8001300 <HAL_Delay>
	    pwrmgmt1(ICM20948_BTT_CLK_PLL);
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ffb9 	bl	8000b20 <_ZN8ICM209488pwrmgmt1Eh>
	    HAL_Delay(100);
 8000bae:	2064      	movs	r0, #100	; 0x64
 8000bb0:	f000 fba6 	bl	8001300 <HAL_Delay>
	    uint8_t buffer=ICM20948_BIT_INT_ACTL | ICM20948_BIT_INT_OPEN;
 8000bb4:	23c0      	movs	r3, #192	; 0xc0
 8000bb6:	73fb      	strb	r3, [r7, #15]
	    HAL_I2C_Mem_Write(&hi2c1, 0x68<<1,REGISTER.INT_PIN_CFG,1,&buffer,1,1000);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	79db      	ldrb	r3, [r3, #7]
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	9302      	str	r3, [sp, #8]
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	f107 030f 	add.w	r3, r7, #15
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2301      	movs	r3, #1
 8000bd0:	21d0      	movs	r1, #208	; 0xd0
 8000bd2:	4803      	ldr	r0, [pc, #12]	; (8000be0 <_ZN8ICM209485resetEv+0x50>)
 8000bd4:	f000 ff80 	bl	8001ad8 <HAL_I2C_Mem_Write>
		}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000008c 	.word	0x2000008c

08000be4 <_ZN8ICM2094814changeuserbankEh>:
	bool changeuserbank(const uint8_t bank){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af04      	add	r7, sp, #16
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
	    if(bank>3 || bank<0){
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d901      	bls.n	8000bfa <_ZN8ICM2094814changeuserbankEh+0x16>
	        return false;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e016      	b.n	8000c28 <_ZN8ICM2094814changeuserbankEh+0x44>
	    }
	    uint8_t data=bank<<4;
 8000bfa:	78fb      	ldrb	r3, [r7, #3]
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	73bb      	strb	r3, [r7, #14]
	    uint8_t res = HAL_I2C_Mem_Write(&hi2c1, 0x68<<1,REGISTER.BANK_SEL,1,&data,1,1000);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7a1b      	ldrb	r3, [r3, #8]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0c:	9302      	str	r3, [sp, #8]
 8000c0e:	2301      	movs	r3, #1
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	f107 030e 	add.w	r3, r7, #14
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	21d0      	movs	r1, #208	; 0xd0
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <_ZN8ICM2094814changeuserbankEh+0x4c>)
 8000c1e:	f000 ff5b 	bl	8001ad8 <HAL_I2C_Mem_Write>
 8000c22:	4603      	mov	r3, r0
 8000c24:	73fb      	strb	r3, [r7, #15]
	    //printf("data=0x%02x\n",data);
	    //printf("res=%d\n",res);
	    return true;
 8000c26:	2301      	movs	r3, #1
	}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	2000008c 	.word	0x2000008c

08000c34 <_ZN8ICM2094811accelconfigENS_16AccelSensitivityEbh>:

	bool accelconfig(const AccelSensitivity fssel,const bool enableDLPF,const uint8_t configDLPF){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af04      	add	r7, sp, #16
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	4611      	mov	r1, r2
 8000c40:	461a      	mov	r2, r3
 8000c42:	4603      	mov	r3, r0
 8000c44:	70fb      	strb	r3, [r7, #3]
 8000c46:	460b      	mov	r3, r1
 8000c48:	70bb      	strb	r3, [r7, #2]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	707b      	strb	r3, [r7, #1]

	    _accelsensitivity=fssel;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	78fa      	ldrb	r2, [r7, #3]
 8000c52:	72da      	strb	r2, [r3, #11]
	    if(configDLPF>7 || configDLPF<0){
 8000c54:	787b      	ldrb	r3, [r7, #1]
 8000c56:	2b07      	cmp	r3, #7
 8000c58:	d901      	bls.n	8000c5e <_ZN8ICM2094811accelconfigENS_16AccelSensitivityEbh+0x2a>
	        return false;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e033      	b.n	8000cc6 <_ZN8ICM2094811accelconfigENS_16AccelSensitivityEbh+0x92>
	    }
	    uint8_t data=0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
	    data |=configDLPF<<3;
 8000c62:	787b      	ldrb	r3, [r7, #1]
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	b25a      	sxtb	r2, r3
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	73fb      	strb	r3, [r7, #15]
	    data |=(uint8_t)fssel<<1;
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	b25a      	sxtb	r2, r3
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	73fb      	strb	r3, [r7, #15]
	    data |=enableDLPF;
 8000c86:	78ba      	ldrb	r2, [r7, #2]
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	73fb      	strb	r3, [r7, #15]
	    changeuserbank(2);
 8000c90:	2102      	movs	r1, #2
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffa6 	bl	8000be4 <_ZN8ICM2094814changeuserbankEh>

	    data=HAL_I2C_Mem_Write(&hi2c1, 0x68<<1,REGISTER.ACCEL_CONFIG,1,&data,1,1000);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7a5b      	ldrb	r3, [r3, #9]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	f107 030f 	add.w	r3, r7, #15
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2301      	movs	r3, #1
 8000cb0:	21d0      	movs	r1, #208	; 0xd0
 8000cb2:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <_ZN8ICM2094811accelconfigENS_16AccelSensitivityEbh+0x9c>)
 8000cb4:	f000 ff10 	bl	8001ad8 <HAL_I2C_Mem_Write>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	73fb      	strb	r3, [r7, #15]
	    //printf("data=%d\n",data);
	    changeuserbank(0);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ff90 	bl	8000be4 <_ZN8ICM2094814changeuserbankEh>
	    return true;
 8000cc4:	2301      	movs	r3, #1

	}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000008c 	.word	0x2000008c

08000cd4 <_ZN8ICM209488getaccelEh>:
	float getaccel(uint8_t axis){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af04      	add	r7, sp, #16
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
	    const uint8_t REG_ACCEL_H[3]={0x2D,0x2F,0x31};
 8000ce0:	4a2c      	ldr	r2, [pc, #176]	; (8000d94 <_ZN8ICM209488getaccelEh+0xc0>)
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	6812      	ldr	r2, [r2, #0]
 8000ce8:	4611      	mov	r1, r2
 8000cea:	8019      	strh	r1, [r3, #0]
 8000cec:	3302      	adds	r3, #2
 8000cee:	0c12      	lsrs	r2, r2, #16
 8000cf0:	701a      	strb	r2, [r3, #0]
	    const uint8_t REG_ACCEL_L[3]={0x2E,0x30,0x32};
 8000cf2:	4a29      	ldr	r2, [pc, #164]	; (8000d98 <_ZN8ICM209488getaccelEh+0xc4>)
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	6812      	ldr	r2, [r2, #0]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	8019      	strh	r1, [r3, #0]
 8000cfe:	3302      	adds	r3, #2
 8000d00:	0c12      	lsrs	r2, r2, #16
 8000d02:	701a      	strb	r2, [r3, #0]

	    int8_t accelH;
		HAL_I2C_Mem_Read(&hi2c1, 0x68<<1,REG_ACCEL_H[axis],1,(uint8_t*)&accelH,1,1000);
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	3318      	adds	r3, #24
 8000d08:	443b      	add	r3, r7
 8000d0a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d14:	9302      	str	r3, [sp, #8]
 8000d16:	2301      	movs	r3, #1
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	f107 030b 	add.w	r3, r7, #11
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	21d0      	movs	r1, #208	; 0xd0
 8000d24:	481d      	ldr	r0, [pc, #116]	; (8000d9c <_ZN8ICM209488getaccelEh+0xc8>)
 8000d26:	f000 ffd1 	bl	8001ccc <HAL_I2C_Mem_Read>
	    int8_t accelL;
	    HAL_I2C_Mem_Read(&hi2c1, 0x68<<1,REG_ACCEL_L[axis],1,(uint8_t*)&accelL,1,1000);
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	3318      	adds	r3, #24
 8000d2e:	443b      	add	r3, r7
 8000d30:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	f107 030a 	add.w	r3, r7, #10
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	21d0      	movs	r1, #208	; 0xd0
 8000d4a:	4814      	ldr	r0, [pc, #80]	; (8000d9c <_ZN8ICM209488getaccelEh+0xc8>)
 8000d4c:	f000 ffbe 	bl	8001ccc <HAL_I2C_Mem_Read>
	    int16_t accel=(int16_t)accelH<<8 | (int16_t)accelL;
 8000d50:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	82fb      	strh	r3, [r7, #22]

	    return (float)accel/ACCEL_SENSITIVITY[(uint8_t)_accelsensitivity];
 8000d62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7adb      	ldrb	r3, [r3, #11]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	3302      	adds	r3, #2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	edd3 7a00 	vldr	s15, [r3]
 8000d80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d84:	eef0 7a66 	vmov.f32	s15, s13
	}
 8000d88:	eeb0 0a67 	vmov.f32	s0, s15
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	08004208 	.word	0x08004208
 8000d98:	0800420c 	.word	0x0800420c
 8000d9c:	2000008c 	.word	0x2000008c

08000da0 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	0fdb      	lsrs	r3, r3, #31
 8000dae:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8000db0:	7dfb      	ldrb	r3, [r7, #23]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <_ZNSt7__cxx119to_stringEi+0x1c>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	425b      	negs	r3, r3
 8000dba:	e000      	b.n	8000dbe <_ZNSt7__cxx119to_stringEi+0x1e>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 8000dc0:	210a      	movs	r1, #10
 8000dc2:	6938      	ldr	r0, [r7, #16]
 8000dc4:	f000 f8fe 	bl	8000fc4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8000dc8:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 8000dca:	7dfa      	ldrb	r2, [r7, #23]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	18d4      	adds	r4, r2, r3
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fd57 	bl	8003888 <_ZNSaIcEC1Ev>
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	222d      	movs	r2, #45	; 0x2d
 8000de0:	4621      	mov	r1, r4
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f002 fe2c 	bl	8003a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	4618      	mov	r0, r3
 8000dee:	f002 fd4c 	bl	800388a <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8000df2:	7dfb      	ldrb	r3, [r7, #23]
 8000df4:	4619      	mov	r1, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f002 fe75 	bl	8003ae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	68f9      	ldr	r1, [r7, #12]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f91e 	bl	8001044 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 8000e08:	bf00      	nop
  }
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd90      	pop	{r4, r7, pc}
	...

08000e14 <init>:

/* Variable Begin */
ICM20948 icm20948;
/* Variable End */

void init(void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
	if(icm20948.whoami() == 0xea){
 8000e1a:	481d      	ldr	r0, [pc, #116]	; (8000e90 <init+0x7c>)
 8000e1c:	f7ff fe62 	bl	8000ae4 <_ZN8ICM209486whoamiEv>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2bea      	cmp	r3, #234	; 0xea
 8000e24:	bf0c      	ite	eq
 8000e26:	2301      	moveq	r3, #1
 8000e28:	2300      	movne	r3, #0
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d004      	beq.n	8000e3a <init+0x26>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2120      	movs	r1, #32
 8000e34:	4817      	ldr	r0, [pc, #92]	; (8000e94 <init+0x80>)
 8000e36:	f000 fcf1 	bl	800181c <HAL_GPIO_WritePin>
	}
	int result = icm20948.whoami();
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <init+0x7c>)
 8000e3c:	f7ff fe52 	bl	8000ae4 <_ZN8ICM209486whoamiEv>
 8000e40:	4603      	mov	r3, r0
 8000e42:	607b      	str	r3, [r7, #4]
//		    result=whoami();
		    if(result==0xea){
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2bea      	cmp	r3, #234	; 0xea
 8000e48:	d11d      	bne.n	8000e86 <init+0x72>
//		        printf("ICM20948 confirm\n");
		    	icm20948.reset();
 8000e4a:	4811      	ldr	r0, [pc, #68]	; (8000e90 <init+0x7c>)
 8000e4c:	f7ff fea0 	bl	8000b90 <_ZN8ICM209485resetEv>
		    	icm20948.pwrmgmt2(ICM20948_DISABLE_SENSORS);
 8000e50:	213f      	movs	r1, #63	; 0x3f
 8000e52:	480f      	ldr	r0, [pc, #60]	; (8000e90 <init+0x7c>)
 8000e54:	f7ff fe80 	bl	8000b58 <_ZN8ICM209488pwrmgmt2Eh>
		    	icm20948.accelconfig(ICM20948::AccelSensitivity::SENS_2G,false,0);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	480c      	ldr	r0, [pc, #48]	; (8000e90 <init+0x7c>)
 8000e60:	f7ff fee8 	bl	8000c34 <_ZN8ICM2094811accelconfigENS_16AccelSensitivityEbh>
		    	icm20948.pwrmgmt2(ICM20948_ENABLE_SENSORS);
 8000e64:	2100      	movs	r1, #0
 8000e66:	480a      	ldr	r0, [pc, #40]	; (8000e90 <init+0x7c>)
 8000e68:	f7ff fe76 	bl	8000b58 <_ZN8ICM209488pwrmgmt2Eh>
		        HAL_Delay(100);
 8000e6c:	2064      	movs	r0, #100	; 0x64
 8000e6e:	f000 fa47 	bl	8001300 <HAL_Delay>
//		        printf("initialized\n");

		        icm20948.changeuserbank(2);
 8000e72:	2102      	movs	r1, #2
 8000e74:	4806      	ldr	r0, [pc, #24]	; (8000e90 <init+0x7c>)
 8000e76:	f7ff feb5 	bl	8000be4 <_ZN8ICM2094814changeuserbankEh>
		        uint8_t buffer2=0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	70fb      	strb	r3, [r7, #3]
		        //HAL_I2C_Mem_Read(&hi2c1, 0x68<<1,ICM20948::REGISTER.ACCEL_CONFIG,1,&buffer2,1,1000);
		        icm20948.changeuserbank(0);
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <init+0x7c>)
 8000e82:	f7ff feaf 	bl	8000be4 <_ZN8ICM2094814changeuserbankEh>
		    }
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000128 	.word	0x20000128
 8000e94:	40020000 	.word	0x40020000

08000e98 <loop>:

void loop(void){
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b0a1      	sub	sp, #132	; 0x84
 8000e9c:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000e9e:	2032      	movs	r0, #50	; 0x32
 8000ea0:	f000 fa2e 	bl	8001300 <HAL_Delay>
	float accelx = icm20948.getaccel(0);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4841      	ldr	r0, [pc, #260]	; (8000fac <loop+0x114>)
 8000ea8:	f7ff ff14 	bl	8000cd4 <_ZN8ICM209488getaccelEh>
 8000eac:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
	int16_t num = (int16_t)accelx;
 8000eb0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eb8:	ee17 3a90 	vmov	r3, s15
 8000ebc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	std::string str;
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f002 fdb5 	bl	8003a32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	str = std::to_string(num);
 8000ec8:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 8000ecc:	f107 0318 	add.w	r3, r7, #24
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff64 	bl	8000da0 <_ZNSt7__cxx119to_stringEi>
 8000ed8:	f107 0218 	add.w	r2, r7, #24
 8000edc:	463b      	mov	r3, r7
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fdd6 	bl	8003a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8000ee6:	f107 0318 	add.w	r3, r7, #24
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 fdcb 	bl	8003a86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	num = (uint16_t)(accelx*1000)%1000;
 8000ef0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000ef4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000fb0 <loop+0x118>
 8000ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f00:	ee17 3a90 	vmov	r3, s15
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	4a2b      	ldr	r2, [pc, #172]	; (8000fb4 <loop+0x11c>)
 8000f08:	fba2 1203 	umull	r1, r2, r2, r3
 8000f0c:	0992      	lsrs	r2, r2, #6
 8000f0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f12:	fb01 f202 	mul.w	r2, r1, r2
 8000f16:	1a9b      	subs	r3, r3, r2
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	str += "."+std::to_string(num)+"\r\n";
 8000f1e:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 8000f22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff39 	bl	8000da0 <_ZNSt7__cxx119to_stringEi>
 8000f2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f32:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f36:	4920      	ldr	r1, [pc, #128]	; (8000fb8 <loop+0x120>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f8d9 	bl	80010f0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8000f3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f42:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000f46:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <loop+0x124>)
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f8e9 	bl	8001120 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8000f4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f52:	463b      	mov	r3, r7
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 fe96 	bl	8003c88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8000f5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 fd90 	bl	8003a86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000f66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fd8b 	bl	8003a86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000f70:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 fd86 	bl	8003a86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	HAL_UART_Transmit(&huart2, (uint8_t *)str.c_str(), str.size(), 100);
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 fe9d 	bl	8003cbc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000f82:	4604      	mov	r4, r0
 8000f84:	463b      	mov	r3, r7
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fdab 	bl	8003ae2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	2364      	movs	r3, #100	; 0x64
 8000f92:	4621      	mov	r1, r4
 8000f94:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <loop+0x128>)
 8000f96:	f002 f900 	bl	800319a <HAL_UART_Transmit>
	std::string str;
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 fd72 	bl	8003a86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
//	           printf("accel y=%f\t",getaccel(1));
//	           printf("accel z=%f\n",getaccel(2));
//	           delay(500);


}
 8000fa2:	bf00      	nop
 8000fa4:	3784      	adds	r7, #132	; 0x84
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000128 	.word	0x20000128
 8000fb0:	447a0000 	.word	0x447a0000
 8000fb4:	10624dd3 	.word	0x10624dd3
 8000fb8:	08004210 	.word	0x08004210
 8000fbc:	08004214 	.word	0x08004214
 8000fc0:	200000e4 	.word	0x200000e4

08000fc4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	fb03 f303 	mul.w	r3, r3, r3
 8000fd8:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	fb02 f303 	mul.w	r3, r2, r3
 8000fec:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d201      	bcs.n	8000ffa <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	e01d      	b.n	8001036 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d202      	bcs.n	8001008 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	e016      	b.n	8001036 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d202      	bcs.n	8001016 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3302      	adds	r3, #2
 8001014:	e00f      	b.n	8001036 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	429a      	cmp	r2, r3
 800101c:	d202      	bcs.n	8001024 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3303      	adds	r3, #3
 8001022:	e008      	b.n	8001036 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	fbb2 f3f3 	udiv	r3, r2, r3
 800102c:	607b      	str	r3, [r7, #4]
	  __n += 4;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3304      	adds	r3, #4
 8001032:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8001034:	e7db      	b.n	8000fee <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8001036:	4618      	mov	r0, r3
 8001038:	371c      	adds	r7, #28
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	3b01      	subs	r3, #1
 8001054:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b63      	cmp	r3, #99	; 0x63
 800105a:	d925      	bls.n	80010a8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8001060:	fba3 1302 	umull	r1, r3, r3, r2
 8001064:	095b      	lsrs	r3, r3, #5
 8001066:	2164      	movs	r1, #100	; 0x64
 8001068:	fb01 f303 	mul.w	r3, r1, r3
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	095b      	lsrs	r3, r3, #5
 800107c:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	68f9      	ldr	r1, [r7, #12]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	440b      	add	r3, r1
 8001088:	4918      	ldr	r1, [pc, #96]	; (80010ec <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800108a:	5c8a      	ldrb	r2, [r1, r2]
 800108c:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b01      	subs	r3, #1
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	4413      	add	r3, r2
 8001096:	4915      	ldr	r1, [pc, #84]	; (80010ec <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	440a      	add	r2, r1
 800109c:	7812      	ldrb	r2, [r2, #0]
 800109e:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	3b02      	subs	r3, #2
 80010a4:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 80010a6:	e7d6      	b.n	8001056 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b09      	cmp	r3, #9
 80010ac:	d910      	bls.n	80010d0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	490b      	ldr	r1, [pc, #44]	; (80010ec <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80010be:	5c8a      	ldrb	r2, [r1, r2]
 80010c0:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	4413      	add	r3, r2
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 80010ce:	e005      	b.n	80010dc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	3330      	adds	r3, #48	; 0x30
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	701a      	strb	r2, [r3, #0]
    }
 80010dc:	bf00      	nop
 80010de:	3724      	adds	r7, #36	; 0x24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	51eb851f 	.word	0x51eb851f
 80010ec:	08004230 	.word	0x08004230

080010f0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	2100      	movs	r1, #0
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f002 fd89 	bl	8003c18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8001106:	4603      	mov	r3, r0
 8001108:	4618      	mov	r0, r3
 800110a:	f000 f820 	bl	800114e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800110e:	4603      	mov	r3, r0
 8001110:	4619      	mov	r1, r3
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f002 fc9d 	bl	8003a52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	68b8      	ldr	r0, [r7, #8]
 8001130:	f002 fdae 	bl	8003c90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8001134:	4603      	mov	r3, r0
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f809 	bl	800114e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800113c:	4603      	mov	r3, r0
 800113e:	4619      	mov	r1, r3
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f002 fc86 	bl	8003a52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_Z41__static_initialization_and_destruction_0ii>:
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d107      	bne.n	8001184 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117a:	4293      	cmp	r3, r2
 800117c:	d102      	bne.n	8001184 <_Z41__static_initialization_and_destruction_0ii+0x20>
ICM20948 icm20948;
 800117e:	4809      	ldr	r0, [pc, #36]	; (80011a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001180:	f7ff fc68 	bl	8000a54 <_ZN8ICM20948C1Ev>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d107      	bne.n	800119a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001190:	4293      	cmp	r3, r2
 8001192:	d102      	bne.n	800119a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001196:	f7ff fc85 	bl	8000aa4 <_ZN8ICM20948D1Ev>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000128 	.word	0x20000128

080011a8 <_GLOBAL__sub_I_icm20948>:
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7ff ffd7 	bl	8001164 <_Z41__static_initialization_and_destruction_0ii>
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_GLOBAL__sub_D_icm20948>:
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff ffcf 	bl	8001164 <_Z41__static_initialization_and_destruction_0ii>
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011f2:	f7ff fb8b 	bl	800090c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f002 fe45 	bl	8003e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff fa5b 	bl	80006b4 <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800120c:	0800442c 	.word	0x0800442c
  ldr r2, =_sbss
 8001210:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001214:	2000016c 	.word	0x2000016c

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f931 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fab2 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f93b 	bl	80014fa <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f911 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000154 	.word	0x20000154

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000154 	.word	0x20000154

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff47 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff5c 	bl	8001390 <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff8e 	bl	8001400 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5d 	bl	80013ac <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ffb0 	bl	8001468 <SysTick_Config>
 8001508:	4603      	mov	r3, r0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	e159      	b.n	80017e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	429a      	cmp	r2, r3
 800154a:	f040 8148 	bne.w	80017de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d005      	beq.n	8001566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	2b02      	cmp	r3, #2
 8001564:	d130      	bne.n	80015c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0201 	and.w	r2, r3, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d017      	beq.n	8001604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d123      	bne.n	8001658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0203 	and.w	r2, r3, #3
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80a2 	beq.w	80017de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b57      	ldr	r3, [pc, #348]	; (80017fc <HAL_GPIO_Init+0x2e8>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a56      	ldr	r2, [pc, #344]	; (80017fc <HAL_GPIO_Init+0x2e8>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b54      	ldr	r3, [pc, #336]	; (80017fc <HAL_GPIO_Init+0x2e8>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b6:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_GPIO_Init+0x2ec>)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a49      	ldr	r2, [pc, #292]	; (8001804 <HAL_GPIO_Init+0x2f0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0x202>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a48      	ldr	r2, [pc, #288]	; (8001808 <HAL_GPIO_Init+0x2f4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x1fe>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a47      	ldr	r2, [pc, #284]	; (800180c <HAL_GPIO_Init+0x2f8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x1fa>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a46      	ldr	r2, [pc, #280]	; (8001810 <HAL_GPIO_Init+0x2fc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x1f6>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a45      	ldr	r2, [pc, #276]	; (8001814 <HAL_GPIO_Init+0x300>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x1f2>
 8001702:	2304      	movs	r3, #4
 8001704:	e008      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001706:	2307      	movs	r3, #7
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x204>
 800170a:	2303      	movs	r3, #3
 800170c:	e004      	b.n	8001718 <HAL_GPIO_Init+0x204>
 800170e:	2302      	movs	r3, #2
 8001710:	e002      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001716:	2300      	movs	r3, #0
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	f002 0203 	and.w	r2, r2, #3
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	4093      	lsls	r3, r2
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001728:	4935      	ldr	r1, [pc, #212]	; (8001800 <HAL_GPIO_Init+0x2ec>)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001736:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_GPIO_Init+0x304>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800175a:	4a2f      	ldr	r2, [pc, #188]	; (8001818 <HAL_GPIO_Init+0x304>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <HAL_GPIO_Init+0x304>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001784:	4a24      	ldr	r2, [pc, #144]	; (8001818 <HAL_GPIO_Init+0x304>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <HAL_GPIO_Init+0x304>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ae:	4a1a      	ldr	r2, [pc, #104]	; (8001818 <HAL_GPIO_Init+0x304>)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_GPIO_Init+0x304>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HAL_GPIO_Init+0x304>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	f67f aea2 	bls.w	8001530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40013800 	.word	0x40013800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	40020800 	.word	0x40020800
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40021000 	.word	0x40021000
 8001818:	40013c00 	.word	0x40013c00

0800181c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001838:	e003      	b.n	8001842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	619a      	str	r2, [r3, #24]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e12b      	b.n	8001aba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d106      	bne.n	800187c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7fe fed4 	bl	8000624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2224      	movs	r2, #36	; 0x24
 8001880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018b4:	f001 fbfc 	bl	80030b0 <HAL_RCC_GetPCLK1Freq>
 80018b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4a81      	ldr	r2, [pc, #516]	; (8001ac4 <HAL_I2C_Init+0x274>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d807      	bhi.n	80018d4 <HAL_I2C_Init+0x84>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4a80      	ldr	r2, [pc, #512]	; (8001ac8 <HAL_I2C_Init+0x278>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	bf94      	ite	ls
 80018cc:	2301      	movls	r3, #1
 80018ce:	2300      	movhi	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	e006      	b.n	80018e2 <HAL_I2C_Init+0x92>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4a7d      	ldr	r2, [pc, #500]	; (8001acc <HAL_I2C_Init+0x27c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	bf94      	ite	ls
 80018dc:	2301      	movls	r3, #1
 80018de:	2300      	movhi	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0e7      	b.n	8001aba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4a78      	ldr	r2, [pc, #480]	; (8001ad0 <HAL_I2C_Init+0x280>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	0c9b      	lsrs	r3, r3, #18
 80018f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4a6a      	ldr	r2, [pc, #424]	; (8001ac4 <HAL_I2C_Init+0x274>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d802      	bhi.n	8001924 <HAL_I2C_Init+0xd4>
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	3301      	adds	r3, #1
 8001922:	e009      	b.n	8001938 <HAL_I2C_Init+0xe8>
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800192a:	fb02 f303 	mul.w	r3, r2, r3
 800192e:	4a69      	ldr	r2, [pc, #420]	; (8001ad4 <HAL_I2C_Init+0x284>)
 8001930:	fba2 2303 	umull	r2, r3, r2, r3
 8001934:	099b      	lsrs	r3, r3, #6
 8001936:	3301      	adds	r3, #1
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	430b      	orrs	r3, r1
 800193e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800194a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	495c      	ldr	r1, [pc, #368]	; (8001ac4 <HAL_I2C_Init+0x274>)
 8001954:	428b      	cmp	r3, r1
 8001956:	d819      	bhi.n	800198c <HAL_I2C_Init+0x13c>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1e59      	subs	r1, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fbb1 f3f3 	udiv	r3, r1, r3
 8001966:	1c59      	adds	r1, r3, #1
 8001968:	f640 73fc 	movw	r3, #4092	; 0xffc
 800196c:	400b      	ands	r3, r1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00a      	beq.n	8001988 <HAL_I2C_Init+0x138>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1e59      	subs	r1, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001980:	3301      	adds	r3, #1
 8001982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001986:	e051      	b.n	8001a2c <HAL_I2C_Init+0x1dc>
 8001988:	2304      	movs	r3, #4
 800198a:	e04f      	b.n	8001a2c <HAL_I2C_Init+0x1dc>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d111      	bne.n	80019b8 <HAL_I2C_Init+0x168>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1e58      	subs	r0, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	440b      	add	r3, r1
 80019a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a6:	3301      	adds	r3, #1
 80019a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf0c      	ite	eq
 80019b0:	2301      	moveq	r3, #1
 80019b2:	2300      	movne	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	e012      	b.n	80019de <HAL_I2C_Init+0x18e>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1e58      	subs	r0, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	0099      	lsls	r1, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ce:	3301      	adds	r3, #1
 80019d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bf0c      	ite	eq
 80019d8:	2301      	moveq	r3, #1
 80019da:	2300      	movne	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_I2C_Init+0x196>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e022      	b.n	8001a2c <HAL_I2C_Init+0x1dc>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10e      	bne.n	8001a0c <HAL_I2C_Init+0x1bc>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	1e58      	subs	r0, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6859      	ldr	r1, [r3, #4]
 80019f6:	460b      	mov	r3, r1
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	440b      	add	r3, r1
 80019fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a00:	3301      	adds	r3, #1
 8001a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a0a:	e00f      	b.n	8001a2c <HAL_I2C_Init+0x1dc>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1e58      	subs	r0, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	0099      	lsls	r1, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	6809      	ldr	r1, [r1, #0]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69da      	ldr	r2, [r3, #28]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6911      	ldr	r1, [r2, #16]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68d2      	ldr	r2, [r2, #12]
 8001a66:	4311      	orrs	r1, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	000186a0 	.word	0x000186a0
 8001ac8:	001e847f 	.word	0x001e847f
 8001acc:	003d08ff 	.word	0x003d08ff
 8001ad0:	431bde83 	.word	0x431bde83
 8001ad4:	10624dd3 	.word	0x10624dd3

08001ad8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	817b      	strh	r3, [r7, #10]
 8001aea:	460b      	mov	r3, r1
 8001aec:	813b      	strh	r3, [r7, #8]
 8001aee:	4613      	mov	r3, r2
 8001af0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001af2:	f7ff fbf9 	bl	80012e8 <HAL_GetTick>
 8001af6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	f040 80d9 	bne.w	8001cb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2319      	movs	r3, #25
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	496d      	ldr	r1, [pc, #436]	; (8001cc4 <HAL_I2C_Mem_Write+0x1ec>)
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 fc7f 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e0cc      	b.n	8001cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_I2C_Mem_Write+0x56>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e0c5      	b.n	8001cba <HAL_I2C_Mem_Write+0x1e2>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d007      	beq.n	8001b54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2221      	movs	r2, #33	; 0x21
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2240      	movs	r2, #64	; 0x40
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a3a      	ldr	r2, [r7, #32]
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4a4d      	ldr	r2, [pc, #308]	; (8001cc8 <HAL_I2C_Mem_Write+0x1f0>)
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b96:	88f8      	ldrh	r0, [r7, #6]
 8001b98:	893a      	ldrh	r2, [r7, #8]
 8001b9a:	8979      	ldrh	r1, [r7, #10]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 fab6 	bl	8002118 <I2C_RequestMemoryWrite>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d052      	beq.n	8001c58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e081      	b.n	8001cba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 fd00 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00d      	beq.n	8001be2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d107      	bne.n	8001bde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e06b      	b.n	8001cba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	781a      	ldrb	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d11b      	bne.n	8001c58 <HAL_I2C_Mem_Write+0x180>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d017      	beq.n	8001c58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1aa      	bne.n	8001bb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 fcec 	bl	8002642 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00d      	beq.n	8001c8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d107      	bne.n	8001c88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e016      	b.n	8001cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e000      	b.n	8001cba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001cb8:	2302      	movs	r3, #2
  }
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	00100002 	.word	0x00100002
 8001cc8:	ffff0000 	.word	0xffff0000

08001ccc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08c      	sub	sp, #48	; 0x30
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4603      	mov	r3, r0
 8001cdc:	817b      	strh	r3, [r7, #10]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	813b      	strh	r3, [r7, #8]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ce6:	f7ff faff 	bl	80012e8 <HAL_GetTick>
 8001cea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	f040 8208 	bne.w	800210a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2319      	movs	r3, #25
 8001d00:	2201      	movs	r2, #1
 8001d02:	497b      	ldr	r1, [pc, #492]	; (8001ef0 <HAL_I2C_Mem_Read+0x224>)
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 fb85 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001d10:	2302      	movs	r3, #2
 8001d12:	e1fb      	b.n	800210c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_I2C_Mem_Read+0x56>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e1f4      	b.n	800210c <HAL_I2C_Mem_Read+0x440>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d007      	beq.n	8001d48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2222      	movs	r2, #34	; 0x22
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2240      	movs	r2, #64	; 0x40
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4a5b      	ldr	r2, [pc, #364]	; (8001ef4 <HAL_I2C_Mem_Read+0x228>)
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d8a:	88f8      	ldrh	r0, [r7, #6]
 8001d8c:	893a      	ldrh	r2, [r7, #8]
 8001d8e:	8979      	ldrh	r1, [r7, #10]
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4603      	mov	r3, r0
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 fa52 	bl	8002244 <I2C_RequestMemoryRead>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e1b0      	b.n	800210c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d113      	bne.n	8001dda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	623b      	str	r3, [r7, #32]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	623b      	str	r3, [r7, #32]
 8001dc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e184      	b.n	80020e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d11b      	bne.n	8001e1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e164      	b.n	80020e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d11b      	bne.n	8001e5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	e144      	b.n	80020e4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e70:	e138      	b.n	80020e4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	f200 80f1 	bhi.w	800205e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d123      	bne.n	8001ecc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 fc1b 	bl	80026c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e139      	b.n	800210c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eca:	e10b      	b.n	80020e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d14e      	bne.n	8001f72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eda:	2200      	movs	r2, #0
 8001edc:	4906      	ldr	r1, [pc, #24]	; (8001ef8 <HAL_I2C_Mem_Read+0x22c>)
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 fa98 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d008      	beq.n	8001efc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e10e      	b.n	800210c <HAL_I2C_Mem_Read+0x440>
 8001eee:	bf00      	nop
 8001ef0:	00100002 	.word	0x00100002
 8001ef4:	ffff0000 	.word	0xffff0000
 8001ef8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f70:	e0b8      	b.n	80020e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f78:	2200      	movs	r2, #0
 8001f7a:	4966      	ldr	r1, [pc, #408]	; (8002114 <HAL_I2C_Mem_Read+0x448>)
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 fa49 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0bf      	b.n	800210c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	494f      	ldr	r1, [pc, #316]	; (8002114 <HAL_I2C_Mem_Read+0x448>)
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fa1b 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e091      	b.n	800210c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002020:	b29b      	uxth	r3, r3
 8002022:	3b01      	subs	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002046:	3b01      	subs	r3, #1
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800205c:	e042      	b.n	80020e4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fb2e 	bl	80026c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e04c      	b.n	800210c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d118      	bne.n	80020e4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f47f aec2 	bne.w	8001e72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2220      	movs	r2, #32
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800210a:	2302      	movs	r3, #2
  }
}
 800210c:	4618      	mov	r0, r3
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	00010004 	.word	0x00010004

08002118 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	4608      	mov	r0, r1
 8002122:	4611      	mov	r1, r2
 8002124:	461a      	mov	r2, r3
 8002126:	4603      	mov	r3, r0
 8002128:	817b      	strh	r3, [r7, #10]
 800212a:	460b      	mov	r3, r1
 800212c:	813b      	strh	r3, [r7, #8]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002140:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	2200      	movs	r2, #0
 800214a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f960 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002168:	d103      	bne.n	8002172 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e05f      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002176:	897b      	ldrh	r3, [r7, #10]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002184:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	6a3a      	ldr	r2, [r7, #32]
 800218a:	492d      	ldr	r1, [pc, #180]	; (8002240 <I2C_RequestMemoryWrite+0x128>)
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f998 	bl	80024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e04c      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b4:	6a39      	ldr	r1, [r7, #32]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fa02 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d107      	bne.n	80021da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e02b      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021e4:	893b      	ldrh	r3, [r7, #8]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	611a      	str	r2, [r3, #16]
 80021ee:	e021      	b.n	8002234 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021f0:	893b      	ldrh	r3, [r7, #8]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002200:	6a39      	ldr	r1, [r7, #32]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f9dc 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2b04      	cmp	r3, #4
 8002214:	d107      	bne.n	8002226 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002224:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e005      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800222a:	893b      	ldrh	r3, [r7, #8]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	00010002 	.word	0x00010002

08002244 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	4608      	mov	r0, r1
 800224e:	4611      	mov	r1, r2
 8002250:	461a      	mov	r2, r3
 8002252:	4603      	mov	r3, r0
 8002254:	817b      	strh	r3, [r7, #10]
 8002256:	460b      	mov	r3, r1
 8002258:	813b      	strh	r3, [r7, #8]
 800225a:	4613      	mov	r3, r2
 800225c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800226c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800227c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	2200      	movs	r2, #0
 8002286:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f8c2 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00d      	beq.n	80022b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a4:	d103      	bne.n	80022ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0aa      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022b2:	897b      	ldrh	r3, [r7, #10]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	6a3a      	ldr	r2, [r7, #32]
 80022c6:	4952      	ldr	r1, [pc, #328]	; (8002410 <I2C_RequestMemoryRead+0x1cc>)
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f8fa 	bl	80024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e097      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f0:	6a39      	ldr	r1, [r7, #32]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f964 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00d      	beq.n	800231a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b04      	cmp	r3, #4
 8002304:	d107      	bne.n	8002316 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002314:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e076      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d105      	bne.n	800232c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002320:	893b      	ldrh	r3, [r7, #8]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	611a      	str	r2, [r3, #16]
 800232a:	e021      	b.n	8002370 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800232c:	893b      	ldrh	r3, [r7, #8]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	b29b      	uxth	r3, r3
 8002332:	b2da      	uxtb	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800233a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233c:	6a39      	ldr	r1, [r7, #32]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f93e 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00d      	beq.n	8002366 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	2b04      	cmp	r3, #4
 8002350:	d107      	bne.n	8002362 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002360:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e050      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002366:	893b      	ldrh	r3, [r7, #8]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002372:	6a39      	ldr	r1, [r7, #32]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f923 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00d      	beq.n	800239c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	2b04      	cmp	r3, #4
 8002386:	d107      	bne.n	8002398 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002396:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e035      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f82b 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d2:	d103      	bne.n	80023dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e013      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023e0:	897b      	ldrh	r3, [r7, #10]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	6a3a      	ldr	r2, [r7, #32]
 80023f4:	4906      	ldr	r1, [pc, #24]	; (8002410 <I2C_RequestMemoryRead+0x1cc>)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f863 	bl	80024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	00010002 	.word	0x00010002

08002414 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002424:	e025      	b.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242c:	d021      	beq.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242e:	f7fe ff5b 	bl	80012e8 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d302      	bcc.n	8002444 <I2C_WaitOnFlagUntilTimeout+0x30>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d116      	bne.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f043 0220 	orr.w	r2, r3, #32
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e023      	b.n	80024ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d10d      	bne.n	8002498 <I2C_WaitOnFlagUntilTimeout+0x84>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4013      	ands	r3, r2
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	e00c      	b.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4013      	ands	r3, r2
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf0c      	ite	eq
 80024aa:	2301      	moveq	r3, #1
 80024ac:	2300      	movne	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d0b6      	beq.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024d0:	e051      	b.n	8002576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e0:	d123      	bne.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f043 0204 	orr.w	r2, r3, #4
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e046      	b.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d021      	beq.n	8002576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002532:	f7fe fed9 	bl	80012e8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	429a      	cmp	r2, r3
 8002540:	d302      	bcc.n	8002548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d116      	bne.n	8002576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f043 0220 	orr.w	r2, r3, #32
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e020      	b.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d10c      	bne.n	800259a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	43da      	mvns	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4013      	ands	r3, r2
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	bf14      	ite	ne
 8002592:	2301      	movne	r3, #1
 8002594:	2300      	moveq	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	e00b      	b.n	80025b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	43da      	mvns	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	4013      	ands	r3, r2
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf14      	ite	ne
 80025ac:	2301      	movne	r3, #1
 80025ae:	2300      	moveq	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d18d      	bne.n	80024d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025cc:	e02d      	b.n	800262a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f8ce 	bl	8002770 <I2C_IsAcknowledgeFailed>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e02d      	b.n	800263a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d021      	beq.n	800262a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e6:	f7fe fe7f 	bl	80012e8 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d302      	bcc.n	80025fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d116      	bne.n	800262a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f043 0220 	orr.w	r2, r3, #32
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e007      	b.n	800263a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002634:	2b80      	cmp	r3, #128	; 0x80
 8002636:	d1ca      	bne.n	80025ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800264e:	e02d      	b.n	80026ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f88d 	bl	8002770 <I2C_IsAcknowledgeFailed>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e02d      	b.n	80026bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002666:	d021      	beq.n	80026ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002668:	f7fe fe3e 	bl	80012e8 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	429a      	cmp	r2, r3
 8002676:	d302      	bcc.n	800267e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d116      	bne.n	80026ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f043 0220 	orr.w	r2, r3, #32
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e007      	b.n	80026bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d1ca      	bne.n	8002650 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026d0:	e042      	b.n	8002758 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d119      	bne.n	8002714 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0210 	mvn.w	r2, #16
 80026e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e029      	b.n	8002768 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002714:	f7fe fde8 	bl	80012e8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	429a      	cmp	r2, r3
 8002722:	d302      	bcc.n	800272a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f043 0220 	orr.w	r2, r3, #32
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e007      	b.n	8002768 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d1b5      	bne.n	80026d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002786:	d11b      	bne.n	80027c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002790:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f043 0204 	orr.w	r2, r3, #4
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e267      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d075      	beq.n	80028da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ee:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d00c      	beq.n	8002814 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027fa:	4b85      	ldr	r3, [pc, #532]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002802:	2b08      	cmp	r3, #8
 8002804:	d112      	bne.n	800282c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002806:	4b82      	ldr	r3, [pc, #520]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002812:	d10b      	bne.n	800282c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d05b      	beq.n	80028d8 <HAL_RCC_OscConfig+0x108>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d157      	bne.n	80028d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e242      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002834:	d106      	bne.n	8002844 <HAL_RCC_OscConfig+0x74>
 8002836:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a75      	ldr	r2, [pc, #468]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800283c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	e01d      	b.n	8002880 <HAL_RCC_OscConfig+0xb0>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x98>
 800284e:	4b70      	ldr	r3, [pc, #448]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6f      	ldr	r2, [pc, #444]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b6d      	ldr	r3, [pc, #436]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a6c      	ldr	r2, [pc, #432]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e00b      	b.n	8002880 <HAL_RCC_OscConfig+0xb0>
 8002868:	4b69      	ldr	r3, [pc, #420]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a68      	ldr	r2, [pc, #416]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800286e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4b66      	ldr	r3, [pc, #408]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a65      	ldr	r2, [pc, #404]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800287a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d013      	beq.n	80028b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe fd2e 	bl	80012e8 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe fd2a 	bl	80012e8 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e207      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	4b5b      	ldr	r3, [pc, #364]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0xc0>
 80028ae:	e014      	b.n	80028da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe fd1a 	bl	80012e8 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b8:	f7fe fd16 	bl	80012e8 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e1f3      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	4b51      	ldr	r3, [pc, #324]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0xe8>
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d063      	beq.n	80029ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028e6:	4b4a      	ldr	r3, [pc, #296]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d11c      	bne.n	8002938 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fe:	4b44      	ldr	r3, [pc, #272]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d116      	bne.n	8002938 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_RCC_OscConfig+0x152>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d001      	beq.n	8002922 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e1c7      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002922:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4937      	ldr	r1, [pc, #220]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	e03a      	b.n	80029ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002940:	4b34      	ldr	r3, [pc, #208]	; (8002a14 <HAL_RCC_OscConfig+0x244>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7fe fccf 	bl	80012e8 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294e:	f7fe fccb 	bl	80012e8 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e1a8      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296c:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4925      	ldr	r1, [pc, #148]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
 8002980:	e015      	b.n	80029ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002982:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <HAL_RCC_OscConfig+0x244>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fcae 	bl	80012e8 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002990:	f7fe fcaa 	bl	80012e8 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e187      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d036      	beq.n	8002a28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d016      	beq.n	80029f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <HAL_RCC_OscConfig+0x248>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c8:	f7fe fc8e 	bl	80012e8 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d0:	f7fe fc8a 	bl	80012e8 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e167      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_OscConfig+0x240>)
 80029e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x200>
 80029ee:	e01b      	b.n	8002a28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCC_OscConfig+0x248>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f6:	f7fe fc77 	bl	80012e8 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	e00e      	b.n	8002a1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029fe:	f7fe fc73 	bl	80012e8 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d907      	bls.n	8002a1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e150      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
 8002a10:	40023800 	.word	0x40023800
 8002a14:	42470000 	.word	0x42470000
 8002a18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	4b88      	ldr	r3, [pc, #544]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ea      	bne.n	80029fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8097 	beq.w	8002b64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3a:	4b81      	ldr	r3, [pc, #516]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	4b7d      	ldr	r3, [pc, #500]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	4a7c      	ldr	r2, [pc, #496]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a54:	6413      	str	r3, [r2, #64]	; 0x40
 8002a56:	4b7a      	ldr	r3, [pc, #488]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a62:	2301      	movs	r3, #1
 8002a64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a66:	4b77      	ldr	r3, [pc, #476]	; (8002c44 <HAL_RCC_OscConfig+0x474>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d118      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a72:	4b74      	ldr	r3, [pc, #464]	; (8002c44 <HAL_RCC_OscConfig+0x474>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a73      	ldr	r2, [pc, #460]	; (8002c44 <HAL_RCC_OscConfig+0x474>)
 8002a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7e:	f7fe fc33 	bl	80012e8 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a86:	f7fe fc2f 	bl	80012e8 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e10c      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	4b6a      	ldr	r3, [pc, #424]	; (8002c44 <HAL_RCC_OscConfig+0x474>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_OscConfig+0x2ea>
 8002aac:	4b64      	ldr	r3, [pc, #400]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	4a63      	ldr	r2, [pc, #396]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab8:	e01c      	b.n	8002af4 <HAL_RCC_OscConfig+0x324>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0x30c>
 8002ac2:	4b5f      	ldr	r3, [pc, #380]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	4a5e      	ldr	r2, [pc, #376]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ace:	4b5c      	ldr	r3, [pc, #368]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4a5b      	ldr	r2, [pc, #364]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0x324>
 8002adc:	4b58      	ldr	r3, [pc, #352]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	4a57      	ldr	r2, [pc, #348]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae8:	4b55      	ldr	r3, [pc, #340]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a54      	ldr	r2, [pc, #336]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002aee:	f023 0304 	bic.w	r3, r3, #4
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe fbf4 	bl	80012e8 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe fbf0 	bl	80012e8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0cb      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1a:	4b49      	ldr	r3, [pc, #292]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0ee      	beq.n	8002b04 <HAL_RCC_OscConfig+0x334>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b28:	f7fe fbde 	bl	80012e8 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b30:	f7fe fbda 	bl	80012e8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e0b5      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b46:	4b3e      	ldr	r3, [pc, #248]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ee      	bne.n	8002b30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d105      	bne.n	8002b64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b58:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	4a38      	ldr	r2, [pc, #224]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80a1 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b6e:	4b34      	ldr	r3, [pc, #208]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d05c      	beq.n	8002c34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d141      	bne.n	8002c06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe fbae 	bl	80012e8 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fe fbaa 	bl	80012e8 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e087      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	019b      	lsls	r3, r3, #6
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	041b      	lsls	r3, r3, #16
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	491b      	ldr	r1, [pc, #108]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe fb83 	bl	80012e8 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be6:	f7fe fb7f 	bl	80012e8 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e05c      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x416>
 8002c04:	e054      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <HAL_RCC_OscConfig+0x478>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fb6c 	bl	80012e8 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fb68 	bl	80012e8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e045      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_RCC_OscConfig+0x470>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x444>
 8002c32:	e03d      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e038      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40007000 	.word	0x40007000
 8002c48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <HAL_RCC_OscConfig+0x4ec>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d028      	beq.n	8002cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d121      	bne.n	8002cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d11a      	bne.n	8002cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d111      	bne.n	8002cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	085b      	lsrs	r3, r3, #1
 8002c94:	3b01      	subs	r3, #1
 8002c96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d107      	bne.n	8002cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800

08002cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0cc      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b68      	ldr	r3, [pc, #416]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d90c      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b65      	ldr	r3, [pc, #404]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b63      	ldr	r3, [pc, #396]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0b8      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d14:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d2c:	4b53      	ldr	r3, [pc, #332]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4a52      	ldr	r2, [pc, #328]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d38:	4b50      	ldr	r3, [pc, #320]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	494d      	ldr	r1, [pc, #308]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d044      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b47      	ldr	r3, [pc, #284]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d119      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e07f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d003      	beq.n	8002d7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7e:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e06f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8e:	4b3b      	ldr	r3, [pc, #236]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e067      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d9e:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4934      	ldr	r1, [pc, #208]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db0:	f7fe fa9a 	bl	80012e8 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db8:	f7fe fa96 	bl	80012e8 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e04f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 020c 	and.w	r2, r3, #12
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d1eb      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de0:	4b25      	ldr	r3, [pc, #148]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d20c      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e032      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4916      	ldr	r1, [pc, #88]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	490e      	ldr	r1, [pc, #56]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e46:	f000 f821 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	490a      	ldr	r1, [pc, #40]	; (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	5ccb      	ldrb	r3, [r1, r3]
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	4a09      	ldr	r2, [pc, #36]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe f9fa 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023c00 	.word	0x40023c00
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	08004218 	.word	0x08004218
 8002e84:	20000000 	.word	0x20000000
 8002e88:	20000004 	.word	0x20000004

08002e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e90:	b094      	sub	sp, #80	; 0x50
 8002e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	647b      	str	r3, [r7, #68]	; 0x44
 8002e98:	2300      	movs	r3, #0
 8002e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ea4:	4b79      	ldr	r3, [pc, #484]	; (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d00d      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x40>
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	f200 80e1 	bhi.w	8003078 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d003      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ebe:	e0db      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec0:	4b73      	ldr	r3, [pc, #460]	; (8003090 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ec2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ec4:	e0db      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ec6:	4b73      	ldr	r3, [pc, #460]	; (8003094 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ec8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eca:	e0d8      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ecc:	4b6f      	ldr	r3, [pc, #444]	; (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ed6:	4b6d      	ldr	r3, [pc, #436]	; (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d063      	beq.n	8002faa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee2:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	099b      	lsrs	r3, r3, #6
 8002ee8:	2200      	movs	r2, #0
 8002eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8002efa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002efe:	4622      	mov	r2, r4
 8002f00:	462b      	mov	r3, r5
 8002f02:	f04f 0000 	mov.w	r0, #0
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	0159      	lsls	r1, r3, #5
 8002f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f10:	0150      	lsls	r0, r2, #5
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4621      	mov	r1, r4
 8002f18:	1a51      	subs	r1, r2, r1
 8002f1a:	6139      	str	r1, [r7, #16]
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f30:	4659      	mov	r1, fp
 8002f32:	018b      	lsls	r3, r1, #6
 8002f34:	4651      	mov	r1, sl
 8002f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f3a:	4651      	mov	r1, sl
 8002f3c:	018a      	lsls	r2, r1, #6
 8002f3e:	4651      	mov	r1, sl
 8002f40:	ebb2 0801 	subs.w	r8, r2, r1
 8002f44:	4659      	mov	r1, fp
 8002f46:	eb63 0901 	sbc.w	r9, r3, r1
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f5e:	4690      	mov	r8, r2
 8002f60:	4699      	mov	r9, r3
 8002f62:	4623      	mov	r3, r4
 8002f64:	eb18 0303 	adds.w	r3, r8, r3
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	462b      	mov	r3, r5
 8002f6c:	eb49 0303 	adc.w	r3, r9, r3
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f7e:	4629      	mov	r1, r5
 8002f80:	024b      	lsls	r3, r1, #9
 8002f82:	4621      	mov	r1, r4
 8002f84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f88:	4621      	mov	r1, r4
 8002f8a:	024a      	lsls	r2, r1, #9
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f92:	2200      	movs	r2, #0
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f9c:	f7fd f924 	bl	80001e8 <__aeabi_uldivmod>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fa8:	e058      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002faa:	4b38      	ldr	r3, [pc, #224]	; (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	099b      	lsrs	r3, r3, #6
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fba:	623b      	str	r3, [r7, #32]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fc4:	4642      	mov	r2, r8
 8002fc6:	464b      	mov	r3, r9
 8002fc8:	f04f 0000 	mov.w	r0, #0
 8002fcc:	f04f 0100 	mov.w	r1, #0
 8002fd0:	0159      	lsls	r1, r3, #5
 8002fd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd6:	0150      	lsls	r0, r2, #5
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4641      	mov	r1, r8
 8002fde:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ff4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ff8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ffc:	ebb2 040a 	subs.w	r4, r2, sl
 8003000:	eb63 050b 	sbc.w	r5, r3, fp
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	00eb      	lsls	r3, r5, #3
 800300e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003012:	00e2      	lsls	r2, r4, #3
 8003014:	4614      	mov	r4, r2
 8003016:	461d      	mov	r5, r3
 8003018:	4643      	mov	r3, r8
 800301a:	18e3      	adds	r3, r4, r3
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	464b      	mov	r3, r9
 8003020:	eb45 0303 	adc.w	r3, r5, r3
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003032:	4629      	mov	r1, r5
 8003034:	028b      	lsls	r3, r1, #10
 8003036:	4621      	mov	r1, r4
 8003038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800303c:	4621      	mov	r1, r4
 800303e:	028a      	lsls	r2, r1, #10
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003046:	2200      	movs	r2, #0
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	61fa      	str	r2, [r7, #28]
 800304c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003050:	f7fd f8ca 	bl	80001e8 <__aeabi_uldivmod>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4613      	mov	r3, r2
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	3301      	adds	r3, #1
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800306c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800306e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003076:	e002      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCC_GetSysClockFreq+0x204>)
 800307a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800307c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800307e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003080:	4618      	mov	r0, r3
 8003082:	3750      	adds	r7, #80	; 0x50
 8003084:	46bd      	mov	sp, r7
 8003086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800
 8003090:	00f42400 	.word	0x00f42400
 8003094:	007a1200 	.word	0x007a1200

08003098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <HAL_RCC_GetHCLKFreq+0x14>)
 800309e:	681b      	ldr	r3, [r3, #0]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000000 	.word	0x20000000

080030b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030b4:	f7ff fff0 	bl	8003098 <HAL_RCC_GetHCLKFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	0a9b      	lsrs	r3, r3, #10
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4903      	ldr	r1, [pc, #12]	; (80030d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c6:	5ccb      	ldrb	r3, [r1, r3]
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40023800 	.word	0x40023800
 80030d4:	08004228 	.word	0x08004228

080030d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030dc:	f7ff ffdc 	bl	8003098 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	0b5b      	lsrs	r3, r3, #13
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4903      	ldr	r1, [pc, #12]	; (80030fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	08004228 	.word	0x08004228

08003100 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e03f      	b.n	8003192 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fc2c 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2224      	movs	r2, #36	; 0x24
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003142:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f929 	bl	800339c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003158:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003168:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003178:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b08a      	sub	sp, #40	; 0x28
 800319e:	af02      	add	r7, sp, #8
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d17c      	bne.n	80032b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_UART_Transmit+0x2c>
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e075      	b.n	80032b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_UART_Transmit+0x3e>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e06e      	b.n	80032b6 <HAL_UART_Transmit+0x11c>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2221      	movs	r2, #33	; 0x21
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ee:	f7fe f87b 	bl	80012e8 <HAL_GetTick>
 80031f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	88fa      	ldrh	r2, [r7, #6]
 80031fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003208:	d108      	bne.n	800321c <HAL_UART_Transmit+0x82>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d104      	bne.n	800321c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	e003      	b.n	8003224 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003220:	2300      	movs	r3, #0
 8003222:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800322c:	e02a      	b.n	8003284 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2200      	movs	r2, #0
 8003236:	2180      	movs	r1, #128	; 0x80
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f840 	bl	80032be <UART_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e036      	b.n	80032b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10b      	bne.n	8003266 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800325c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	3302      	adds	r3, #2
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e007      	b.n	8003276 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	781a      	ldrb	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	3301      	adds	r3, #1
 8003274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1cf      	bne.n	800322e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2200      	movs	r2, #0
 8003296:	2140      	movs	r1, #64	; 0x40
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f810 	bl	80032be <UART_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e006      	b.n	80032b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	e000      	b.n	80032b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b090      	sub	sp, #64	; 0x40
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	4613      	mov	r3, r2
 80032cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ce:	e050      	b.n	8003372 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d04c      	beq.n	8003372 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d007      	beq.n	80032ee <UART_WaitOnFlagUntilTimeout+0x30>
 80032de:	f7fe f803 	bl	80012e8 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d241      	bcs.n	8003372 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	330c      	adds	r3, #12
 80032f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	330c      	adds	r3, #12
 800330c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800330e:	637a      	str	r2, [r7, #52]	; 0x34
 8003310:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e5      	bne.n	80032ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	3314      	adds	r3, #20
 8003328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	e853 3f00 	ldrex	r3, [r3]
 8003330:	613b      	str	r3, [r7, #16]
   return(result);
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	63bb      	str	r3, [r7, #56]	; 0x38
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3314      	adds	r3, #20
 8003340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003342:	623a      	str	r2, [r7, #32]
 8003344:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003346:	69f9      	ldr	r1, [r7, #28]
 8003348:	6a3a      	ldr	r2, [r7, #32]
 800334a:	e841 2300 	strex	r3, r2, [r1]
 800334e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e5      	bne.n	8003322 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e00f      	b.n	8003392 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4013      	ands	r3, r2
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	429a      	cmp	r2, r3
 8003380:	bf0c      	ite	eq
 8003382:	2301      	moveq	r3, #1
 8003384:	2300      	movne	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	429a      	cmp	r2, r3
 800338e:	d09f      	beq.n	80032d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3740      	adds	r7, #64	; 0x40
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800339c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a0:	b0c0      	sub	sp, #256	; 0x100
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	68d9      	ldr	r1, [r3, #12]
 80033ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	ea40 0301 	orr.w	r3, r0, r1
 80033c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	431a      	orrs	r2, r3
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033f4:	f021 010c 	bic.w	r1, r1, #12
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003402:	430b      	orrs	r3, r1
 8003404:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003416:	6999      	ldr	r1, [r3, #24]
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	ea40 0301 	orr.w	r3, r0, r1
 8003422:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4b8f      	ldr	r3, [pc, #572]	; (8003668 <UART_SetConfig+0x2cc>)
 800342c:	429a      	cmp	r2, r3
 800342e:	d005      	beq.n	800343c <UART_SetConfig+0xa0>
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4b8d      	ldr	r3, [pc, #564]	; (800366c <UART_SetConfig+0x2d0>)
 8003438:	429a      	cmp	r2, r3
 800343a:	d104      	bne.n	8003446 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800343c:	f7ff fe4c 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
 8003440:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003444:	e003      	b.n	800344e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003446:	f7ff fe33 	bl	80030b0 <HAL_RCC_GetPCLK1Freq>
 800344a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003458:	f040 810c 	bne.w	8003674 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800345c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003460:	2200      	movs	r2, #0
 8003462:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003466:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800346a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800346e:	4622      	mov	r2, r4
 8003470:	462b      	mov	r3, r5
 8003472:	1891      	adds	r1, r2, r2
 8003474:	65b9      	str	r1, [r7, #88]	; 0x58
 8003476:	415b      	adcs	r3, r3
 8003478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800347a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800347e:	4621      	mov	r1, r4
 8003480:	eb12 0801 	adds.w	r8, r2, r1
 8003484:	4629      	mov	r1, r5
 8003486:	eb43 0901 	adc.w	r9, r3, r1
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800349a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800349e:	4690      	mov	r8, r2
 80034a0:	4699      	mov	r9, r3
 80034a2:	4623      	mov	r3, r4
 80034a4:	eb18 0303 	adds.w	r3, r8, r3
 80034a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034ac:	462b      	mov	r3, r5
 80034ae:	eb49 0303 	adc.w	r3, r9, r3
 80034b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034ca:	460b      	mov	r3, r1
 80034cc:	18db      	adds	r3, r3, r3
 80034ce:	653b      	str	r3, [r7, #80]	; 0x50
 80034d0:	4613      	mov	r3, r2
 80034d2:	eb42 0303 	adc.w	r3, r2, r3
 80034d6:	657b      	str	r3, [r7, #84]	; 0x54
 80034d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034e0:	f7fc fe82 	bl	80001e8 <__aeabi_uldivmod>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4b61      	ldr	r3, [pc, #388]	; (8003670 <UART_SetConfig+0x2d4>)
 80034ea:	fba3 2302 	umull	r2, r3, r3, r2
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	011c      	lsls	r4, r3, #4
 80034f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003500:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003504:	4642      	mov	r2, r8
 8003506:	464b      	mov	r3, r9
 8003508:	1891      	adds	r1, r2, r2
 800350a:	64b9      	str	r1, [r7, #72]	; 0x48
 800350c:	415b      	adcs	r3, r3
 800350e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003510:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003514:	4641      	mov	r1, r8
 8003516:	eb12 0a01 	adds.w	sl, r2, r1
 800351a:	4649      	mov	r1, r9
 800351c:	eb43 0b01 	adc.w	fp, r3, r1
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800352c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003530:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003534:	4692      	mov	sl, r2
 8003536:	469b      	mov	fp, r3
 8003538:	4643      	mov	r3, r8
 800353a:	eb1a 0303 	adds.w	r3, sl, r3
 800353e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003542:	464b      	mov	r3, r9
 8003544:	eb4b 0303 	adc.w	r3, fp, r3
 8003548:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003558:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800355c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003560:	460b      	mov	r3, r1
 8003562:	18db      	adds	r3, r3, r3
 8003564:	643b      	str	r3, [r7, #64]	; 0x40
 8003566:	4613      	mov	r3, r2
 8003568:	eb42 0303 	adc.w	r3, r2, r3
 800356c:	647b      	str	r3, [r7, #68]	; 0x44
 800356e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003572:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003576:	f7fc fe37 	bl	80001e8 <__aeabi_uldivmod>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4611      	mov	r1, r2
 8003580:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <UART_SetConfig+0x2d4>)
 8003582:	fba3 2301 	umull	r2, r3, r3, r1
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2264      	movs	r2, #100	; 0x64
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	1acb      	subs	r3, r1, r3
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003596:	4b36      	ldr	r3, [pc, #216]	; (8003670 <UART_SetConfig+0x2d4>)
 8003598:	fba3 2302 	umull	r2, r3, r3, r2
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035a4:	441c      	add	r4, r3
 80035a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035b8:	4642      	mov	r2, r8
 80035ba:	464b      	mov	r3, r9
 80035bc:	1891      	adds	r1, r2, r2
 80035be:	63b9      	str	r1, [r7, #56]	; 0x38
 80035c0:	415b      	adcs	r3, r3
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035c8:	4641      	mov	r1, r8
 80035ca:	1851      	adds	r1, r2, r1
 80035cc:	6339      	str	r1, [r7, #48]	; 0x30
 80035ce:	4649      	mov	r1, r9
 80035d0:	414b      	adcs	r3, r1
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035e0:	4659      	mov	r1, fp
 80035e2:	00cb      	lsls	r3, r1, #3
 80035e4:	4651      	mov	r1, sl
 80035e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ea:	4651      	mov	r1, sl
 80035ec:	00ca      	lsls	r2, r1, #3
 80035ee:	4610      	mov	r0, r2
 80035f0:	4619      	mov	r1, r3
 80035f2:	4603      	mov	r3, r0
 80035f4:	4642      	mov	r2, r8
 80035f6:	189b      	adds	r3, r3, r2
 80035f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035fc:	464b      	mov	r3, r9
 80035fe:	460a      	mov	r2, r1
 8003600:	eb42 0303 	adc.w	r3, r2, r3
 8003604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003614:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003618:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800361c:	460b      	mov	r3, r1
 800361e:	18db      	adds	r3, r3, r3
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
 8003622:	4613      	mov	r3, r2
 8003624:	eb42 0303 	adc.w	r3, r2, r3
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800362e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003632:	f7fc fdd9 	bl	80001e8 <__aeabi_uldivmod>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <UART_SetConfig+0x2d4>)
 800363c:	fba3 1302 	umull	r1, r3, r3, r2
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	2164      	movs	r1, #100	; 0x64
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	3332      	adds	r3, #50	; 0x32
 800364e:	4a08      	ldr	r2, [pc, #32]	; (8003670 <UART_SetConfig+0x2d4>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	f003 0207 	and.w	r2, r3, #7
 800365a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4422      	add	r2, r4
 8003662:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003664:	e105      	b.n	8003872 <UART_SetConfig+0x4d6>
 8003666:	bf00      	nop
 8003668:	40011000 	.word	0x40011000
 800366c:	40011400 	.word	0x40011400
 8003670:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003678:	2200      	movs	r2, #0
 800367a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800367e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003682:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003686:	4642      	mov	r2, r8
 8003688:	464b      	mov	r3, r9
 800368a:	1891      	adds	r1, r2, r2
 800368c:	6239      	str	r1, [r7, #32]
 800368e:	415b      	adcs	r3, r3
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
 8003692:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003696:	4641      	mov	r1, r8
 8003698:	1854      	adds	r4, r2, r1
 800369a:	4649      	mov	r1, r9
 800369c:	eb43 0501 	adc.w	r5, r3, r1
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	00eb      	lsls	r3, r5, #3
 80036aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ae:	00e2      	lsls	r2, r4, #3
 80036b0:	4614      	mov	r4, r2
 80036b2:	461d      	mov	r5, r3
 80036b4:	4643      	mov	r3, r8
 80036b6:	18e3      	adds	r3, r4, r3
 80036b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036bc:	464b      	mov	r3, r9
 80036be:	eb45 0303 	adc.w	r3, r5, r3
 80036c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036e2:	4629      	mov	r1, r5
 80036e4:	008b      	lsls	r3, r1, #2
 80036e6:	4621      	mov	r1, r4
 80036e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ec:	4621      	mov	r1, r4
 80036ee:	008a      	lsls	r2, r1, #2
 80036f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036f4:	f7fc fd78 	bl	80001e8 <__aeabi_uldivmod>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4b60      	ldr	r3, [pc, #384]	; (8003880 <UART_SetConfig+0x4e4>)
 80036fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	011c      	lsls	r4, r3, #4
 8003706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800370a:	2200      	movs	r2, #0
 800370c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003710:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003714:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003718:	4642      	mov	r2, r8
 800371a:	464b      	mov	r3, r9
 800371c:	1891      	adds	r1, r2, r2
 800371e:	61b9      	str	r1, [r7, #24]
 8003720:	415b      	adcs	r3, r3
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003728:	4641      	mov	r1, r8
 800372a:	1851      	adds	r1, r2, r1
 800372c:	6139      	str	r1, [r7, #16]
 800372e:	4649      	mov	r1, r9
 8003730:	414b      	adcs	r3, r1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003740:	4659      	mov	r1, fp
 8003742:	00cb      	lsls	r3, r1, #3
 8003744:	4651      	mov	r1, sl
 8003746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800374a:	4651      	mov	r1, sl
 800374c:	00ca      	lsls	r2, r1, #3
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	4603      	mov	r3, r0
 8003754:	4642      	mov	r2, r8
 8003756:	189b      	adds	r3, r3, r2
 8003758:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800375c:	464b      	mov	r3, r9
 800375e:	460a      	mov	r2, r1
 8003760:	eb42 0303 	adc.w	r3, r2, r3
 8003764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	67bb      	str	r3, [r7, #120]	; 0x78
 8003772:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003780:	4649      	mov	r1, r9
 8003782:	008b      	lsls	r3, r1, #2
 8003784:	4641      	mov	r1, r8
 8003786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800378a:	4641      	mov	r1, r8
 800378c:	008a      	lsls	r2, r1, #2
 800378e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003792:	f7fc fd29 	bl	80001e8 <__aeabi_uldivmod>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4b39      	ldr	r3, [pc, #228]	; (8003880 <UART_SetConfig+0x4e4>)
 800379c:	fba3 1302 	umull	r1, r3, r3, r2
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	2164      	movs	r1, #100	; 0x64
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	3332      	adds	r3, #50	; 0x32
 80037ae:	4a34      	ldr	r2, [pc, #208]	; (8003880 <UART_SetConfig+0x4e4>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ba:	441c      	add	r4, r3
 80037bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c0:	2200      	movs	r2, #0
 80037c2:	673b      	str	r3, [r7, #112]	; 0x70
 80037c4:	677a      	str	r2, [r7, #116]	; 0x74
 80037c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037ca:	4642      	mov	r2, r8
 80037cc:	464b      	mov	r3, r9
 80037ce:	1891      	adds	r1, r2, r2
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	415b      	adcs	r3, r3
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037da:	4641      	mov	r1, r8
 80037dc:	1851      	adds	r1, r2, r1
 80037de:	6039      	str	r1, [r7, #0]
 80037e0:	4649      	mov	r1, r9
 80037e2:	414b      	adcs	r3, r1
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037f2:	4659      	mov	r1, fp
 80037f4:	00cb      	lsls	r3, r1, #3
 80037f6:	4651      	mov	r1, sl
 80037f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037fc:	4651      	mov	r1, sl
 80037fe:	00ca      	lsls	r2, r1, #3
 8003800:	4610      	mov	r0, r2
 8003802:	4619      	mov	r1, r3
 8003804:	4603      	mov	r3, r0
 8003806:	4642      	mov	r2, r8
 8003808:	189b      	adds	r3, r3, r2
 800380a:	66bb      	str	r3, [r7, #104]	; 0x68
 800380c:	464b      	mov	r3, r9
 800380e:	460a      	mov	r2, r1
 8003810:	eb42 0303 	adc.w	r3, r2, r3
 8003814:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	663b      	str	r3, [r7, #96]	; 0x60
 8003820:	667a      	str	r2, [r7, #100]	; 0x64
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800382e:	4649      	mov	r1, r9
 8003830:	008b      	lsls	r3, r1, #2
 8003832:	4641      	mov	r1, r8
 8003834:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003838:	4641      	mov	r1, r8
 800383a:	008a      	lsls	r2, r1, #2
 800383c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003840:	f7fc fcd2 	bl	80001e8 <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <UART_SetConfig+0x4e4>)
 800384a:	fba3 1302 	umull	r1, r3, r3, r2
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	2164      	movs	r1, #100	; 0x64
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	3332      	adds	r3, #50	; 0x32
 800385c:	4a08      	ldr	r2, [pc, #32]	; (8003880 <UART_SetConfig+0x4e4>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	f003 020f 	and.w	r2, r3, #15
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4422      	add	r2, r4
 8003870:	609a      	str	r2, [r3, #8]
}
 8003872:	bf00      	nop
 8003874:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003878:	46bd      	mov	sp, r7
 800387a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800387e:	bf00      	nop
 8003880:	51eb851f 	.word	0x51eb851f

08003884 <_ZdlPvj>:
 8003884:	f000 ba1c 	b.w	8003cc0 <_ZdlPv>

08003888 <_ZNSaIcEC1Ev>:
 8003888:	4770      	bx	lr

0800388a <_ZNSaIcED1Ev>:
 800388a:	4770      	bx	lr

0800388c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800388c:	b10a      	cbz	r2, 8003892 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800388e:	f000 bb2d 	b.w	8003eec <memcpy>
 8003892:	4770      	bx	lr

08003894 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8003894:	b508      	push	{r3, lr}
 8003896:	680b      	ldr	r3, [r1, #0]
 8003898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389c:	d302      	bcc.n	80038a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800389e:	480d      	ldr	r0, [pc, #52]	; (80038d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80038a0:	f000 fa27 	bl	8003cf2 <_ZSt20__throw_length_errorPKc>
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d90b      	bls.n	80038c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80038a8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80038ac:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80038b0:	d206      	bcs.n	80038c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80038b2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038b6:	bf2a      	itet	cs
 80038b8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80038bc:	6008      	strcc	r0, [r1, #0]
 80038be:	600b      	strcs	r3, [r1, #0]
 80038c0:	6808      	ldr	r0, [r1, #0]
 80038c2:	3001      	adds	r0, #1
 80038c4:	d501      	bpl.n	80038ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80038c6:	f000 fa0e 	bl	8003ce6 <_ZSt17__throw_bad_allocv>
 80038ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80038ce:	f000 b9f9 	b.w	8003cc4 <_Znwj>
 80038d2:	bf00      	nop
 80038d4:	0800430c 	.word	0x0800430c

080038d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80038d8:	f850 3b08 	ldr.w	r3, [r0], #8
 80038dc:	4283      	cmp	r3, r0
 80038de:	d002      	beq.n	80038e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 b9ed 	b.w	8003cc0 <_ZdlPv>
 80038e6:	4770      	bx	lr

080038e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80038e8:	b508      	push	{r3, lr}
 80038ea:	4603      	mov	r3, r0
 80038ec:	4608      	mov	r0, r1
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4298      	cmp	r0, r3
 80038f2:	4611      	mov	r1, r2
 80038f4:	d903      	bls.n	80038fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 80038f6:	4602      	mov	r2, r0
 80038f8:	4801      	ldr	r0, [pc, #4]	; (8003900 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80038fa:	f000 f9fd 	bl	8003cf8 <_ZSt24__throw_out_of_range_fmtPKcz>
 80038fe:	bd08      	pop	{r3, pc}
 8003900:	08004324 	.word	0x08004324

08003904 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8003904:	6840      	ldr	r0, [r0, #4]
 8003906:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800390a:	3901      	subs	r1, #1
 800390c:	1a09      	subs	r1, r1, r0
 800390e:	4291      	cmp	r1, r2
 8003910:	b508      	push	{r3, lr}
 8003912:	d202      	bcs.n	800391a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8003914:	4618      	mov	r0, r3
 8003916:	f000 f9ec 	bl	8003cf2 <_ZSt20__throw_length_errorPKc>
 800391a:	bd08      	pop	{r3, pc}

0800391c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800391c:	6803      	ldr	r3, [r0, #0]
 800391e:	428b      	cmp	r3, r1
 8003920:	d806      	bhi.n	8003930 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8003922:	6840      	ldr	r0, [r0, #4]
 8003924:	4418      	add	r0, r3
 8003926:	4281      	cmp	r1, r0
 8003928:	bf94      	ite	ls
 800392a:	2000      	movls	r0, #0
 800392c:	2001      	movhi	r0, #1
 800392e:	4770      	bx	lr
 8003930:	2001      	movs	r0, #1
 8003932:	4770      	bx	lr

08003934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8003934:	2a01      	cmp	r2, #1
 8003936:	b410      	push	{r4}
 8003938:	d104      	bne.n	8003944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800393a:	780a      	ldrb	r2, [r1, #0]
 800393c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003940:	7002      	strb	r2, [r0, #0]
 8003942:	4770      	bx	lr
 8003944:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003948:	f7ff bfa0 	b.w	800388c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800394c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800394c:	2a01      	cmp	r2, #1
 800394e:	b430      	push	{r4, r5}
 8003950:	d103      	bne.n	800395a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8003952:	780b      	ldrb	r3, [r1, #0]
 8003954:	7003      	strb	r3, [r0, #0]
 8003956:	bc30      	pop	{r4, r5}
 8003958:	4770      	bx	lr
 800395a:	2a00      	cmp	r2, #0
 800395c:	d0fb      	beq.n	8003956 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800395e:	bc30      	pop	{r4, r5}
 8003960:	f000 bad2 	b.w	8003f08 <memmove>

08003964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8003964:	460b      	mov	r3, r1
 8003966:	2b01      	cmp	r3, #1
 8003968:	b410      	push	{r4}
 800396a:	4611      	mov	r1, r2
 800396c:	4604      	mov	r4, r0
 800396e:	d103      	bne.n	8003978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8003970:	7022      	strb	r2, [r4, #0]
 8003972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0fa      	beq.n	8003972 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 800397c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003980:	461a      	mov	r2, r3
 8003982:	f000 badb 	b.w	8003f3c <memset>

08003986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8003986:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003988:	290f      	cmp	r1, #15
 800398a:	4604      	mov	r4, r0
 800398c:	9101      	str	r1, [sp, #4]
 800398e:	4615      	mov	r5, r2
 8003990:	d906      	bls.n	80039a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8003992:	2200      	movs	r2, #0
 8003994:	a901      	add	r1, sp, #4
 8003996:	f7ff ff7d 	bl	8003894 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800399a:	9b01      	ldr	r3, [sp, #4]
 800399c:	6020      	str	r0, [r4, #0]
 800399e:	60a3      	str	r3, [r4, #8]
 80039a0:	9901      	ldr	r1, [sp, #4]
 80039a2:	b119      	cbz	r1, 80039ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 80039a4:	6820      	ldr	r0, [r4, #0]
 80039a6:	462a      	mov	r2, r5
 80039a8:	f7ff ffdc 	bl	8003964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80039ac:	9b01      	ldr	r3, [sp, #4]
 80039ae:	6822      	ldr	r2, [r4, #0]
 80039b0:	6063      	str	r3, [r4, #4]
 80039b2:	2100      	movs	r1, #0
 80039b4:	54d1      	strb	r1, [r2, r3]
 80039b6:	b003      	add	sp, #12
 80039b8:	bd30      	pop	{r4, r5, pc}

080039ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80039ba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80039be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80039c0:	461f      	mov	r7, r3
 80039c2:	6843      	ldr	r3, [r0, #4]
 80039c4:	eb01 0802 	add.w	r8, r1, r2
 80039c8:	1ab2      	subs	r2, r6, r2
 80039ca:	441a      	add	r2, r3
 80039cc:	eba3 0908 	sub.w	r9, r3, r8
 80039d0:	4603      	mov	r3, r0
 80039d2:	9201      	str	r2, [sp, #4]
 80039d4:	f853 2b08 	ldr.w	r2, [r3], #8
 80039d8:	429a      	cmp	r2, r3
 80039da:	bf18      	it	ne
 80039dc:	6882      	ldrne	r2, [r0, #8]
 80039de:	460d      	mov	r5, r1
 80039e0:	bf08      	it	eq
 80039e2:	220f      	moveq	r2, #15
 80039e4:	a901      	add	r1, sp, #4
 80039e6:	4604      	mov	r4, r0
 80039e8:	f7ff ff54 	bl	8003894 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80039ec:	4682      	mov	sl, r0
 80039ee:	b11d      	cbz	r5, 80039f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80039f0:	6821      	ldr	r1, [r4, #0]
 80039f2:	462a      	mov	r2, r5
 80039f4:	f7ff ff9e 	bl	8003934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80039f8:	b137      	cbz	r7, 8003a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80039fa:	b12e      	cbz	r6, 8003a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80039fc:	4632      	mov	r2, r6
 80039fe:	4639      	mov	r1, r7
 8003a00:	eb0a 0005 	add.w	r0, sl, r5
 8003a04:	f7ff ff96 	bl	8003934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003a08:	f1b9 0f00 	cmp.w	r9, #0
 8003a0c:	d007      	beq.n	8003a1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8003a0e:	6821      	ldr	r1, [r4, #0]
 8003a10:	4435      	add	r5, r6
 8003a12:	464a      	mov	r2, r9
 8003a14:	4441      	add	r1, r8
 8003a16:	eb0a 0005 	add.w	r0, sl, r5
 8003a1a:	f7ff ff8b 	bl	8003934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f7ff ff5a 	bl	80038d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003a24:	9b01      	ldr	r3, [sp, #4]
 8003a26:	f8c4 a000 	str.w	sl, [r4]
 8003a2a:	60a3      	str	r3, [r4, #8]
 8003a2c:	b002      	add	sp, #8
 8003a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003a32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8003a32:	f100 0208 	add.w	r2, r0, #8
 8003a36:	6002      	str	r2, [r0, #0]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	6042      	str	r2, [r0, #4]
 8003a3c:	7202      	strb	r2, [r0, #8]
 8003a3e:	4770      	bx	lr

08003a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 8003a40:	b510      	push	{r4, lr}
 8003a42:	f100 0308 	add.w	r3, r0, #8
 8003a46:	4604      	mov	r4, r0
 8003a48:	6003      	str	r3, [r0, #0]
 8003a4a:	f7ff ff9c 	bl	8003986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8003a4e:	4620      	mov	r0, r4
 8003a50:	bd10      	pop	{r4, pc}

08003a52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8003a52:	b570      	push	{r4, r5, r6, lr}
 8003a54:	4604      	mov	r4, r0
 8003a56:	460e      	mov	r6, r1
 8003a58:	3008      	adds	r0, #8
 8003a5a:	6020      	str	r0, [r4, #0]
 8003a5c:	f856 3b08 	ldr.w	r3, [r6], #8
 8003a60:	429e      	cmp	r6, r3
 8003a62:	460d      	mov	r5, r1
 8003a64:	d10b      	bne.n	8003a7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8003a66:	2210      	movs	r2, #16
 8003a68:	4631      	mov	r1, r6
 8003a6a:	f7ff ff0f 	bl	800388c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8003a6e:	686b      	ldr	r3, [r5, #4]
 8003a70:	6063      	str	r3, [r4, #4]
 8003a72:	2300      	movs	r3, #0
 8003a74:	602e      	str	r6, [r5, #0]
 8003a76:	606b      	str	r3, [r5, #4]
 8003a78:	722b      	strb	r3, [r5, #8]
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	bd70      	pop	{r4, r5, r6, pc}
 8003a7e:	6023      	str	r3, [r4, #0]
 8003a80:	688b      	ldr	r3, [r1, #8]
 8003a82:	60a3      	str	r3, [r4, #8]
 8003a84:	e7f3      	b.n	8003a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08003a86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8003a86:	b510      	push	{r4, lr}
 8003a88:	4604      	mov	r4, r0
 8003a8a:	f7ff ff25 	bl	80038d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003a8e:	4620      	mov	r0, r4
 8003a90:	bd10      	pop	{r4, pc}

08003a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8003a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a94:	460d      	mov	r5, r1
 8003a96:	f851 3b08 	ldr.w	r3, [r1], #8
 8003a9a:	686a      	ldr	r2, [r5, #4]
 8003a9c:	4299      	cmp	r1, r3
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	6800      	ldr	r0, [r0, #0]
 8003aa2:	d10d      	bne.n	8003ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8003aa4:	b10a      	cbz	r2, 8003aaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 8003aa6:	f7ff ff45 	bl	8003934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003aaa:	686b      	ldr	r3, [r5, #4]
 8003aac:	6822      	ldr	r2, [r4, #0]
 8003aae:	6063      	str	r3, [r4, #4]
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	54d1      	strb	r1, [r2, r3]
 8003ab4:	682a      	ldr	r2, [r5, #0]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	606b      	str	r3, [r5, #4]
 8003aba:	7013      	strb	r3, [r2, #0]
 8003abc:	4620      	mov	r0, r4
 8003abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ac0:	e9c4 3200 	strd	r3, r2, [r4]
 8003ac4:	f104 0708 	add.w	r7, r4, #8
 8003ac8:	42b8      	cmp	r0, r7
 8003aca:	68ab      	ldr	r3, [r5, #8]
 8003acc:	bf18      	it	ne
 8003ace:	68a6      	ldrne	r6, [r4, #8]
 8003ad0:	60a3      	str	r3, [r4, #8]
 8003ad2:	bf08      	it	eq
 8003ad4:	2000      	moveq	r0, #0
 8003ad6:	b110      	cbz	r0, 8003ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 8003ad8:	6028      	str	r0, [r5, #0]
 8003ada:	60ae      	str	r6, [r5, #8]
 8003adc:	e7ea      	b.n	8003ab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 8003ade:	6029      	str	r1, [r5, #0]
 8003ae0:	e7e8      	b.n	8003ab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

08003ae2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8003ae2:	6840      	ldr	r0, [r0, #4]
 8003ae4:	4770      	bx	lr

08003ae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8003ae6:	6800      	ldr	r0, [r0, #0]
 8003ae8:	4408      	add	r0, r1
 8003aea:	4770      	bx	lr

08003aec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8003aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003af2:	4614      	mov	r4, r2
 8003af4:	4680      	mov	r8, r0
 8003af6:	462a      	mov	r2, r5
 8003af8:	4689      	mov	r9, r1
 8003afa:	461f      	mov	r7, r3
 8003afc:	4621      	mov	r1, r4
 8003afe:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 8003b00:	f7ff ff00 	bl	8003904 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8003b04:	4642      	mov	r2, r8
 8003b06:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003b0a:	f852 6b08 	ldr.w	r6, [r2], #8
 8003b0e:	4296      	cmp	r6, r2
 8003b10:	bf18      	it	ne
 8003b12:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8003b16:	eba5 0b04 	sub.w	fp, r5, r4
 8003b1a:	eb03 0a0b 	add.w	sl, r3, fp
 8003b1e:	bf08      	it	eq
 8003b20:	220f      	moveq	r2, #15
 8003b22:	4552      	cmp	r2, sl
 8003b24:	d351      	bcc.n	8003bca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8003b26:	444e      	add	r6, r9
 8003b28:	4639      	mov	r1, r7
 8003b2a:	44a1      	add	r9, r4
 8003b2c:	4640      	mov	r0, r8
 8003b2e:	eba3 0909 	sub.w	r9, r3, r9
 8003b32:	f7ff fef3 	bl	800391c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8003b36:	b180      	cbz	r0, 8003b5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8003b38:	f1b9 0f00 	cmp.w	r9, #0
 8003b3c:	d006      	beq.n	8003b4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8003b3e:	42ac      	cmp	r4, r5
 8003b40:	d004      	beq.n	8003b4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8003b42:	464a      	mov	r2, r9
 8003b44:	1931      	adds	r1, r6, r4
 8003b46:	1970      	adds	r0, r6, r5
 8003b48:	f7ff ff00 	bl	800394c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003b4c:	b315      	cbz	r5, 8003b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8003b4e:	462a      	mov	r2, r5
 8003b50:	4639      	mov	r1, r7
 8003b52:	4630      	mov	r0, r6
 8003b54:	f7ff feee 	bl	8003934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003b58:	e01c      	b.n	8003b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8003b5a:	b135      	cbz	r5, 8003b6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8003b5c:	42ac      	cmp	r4, r5
 8003b5e:	d33c      	bcc.n	8003bda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8003b60:	462a      	mov	r2, r5
 8003b62:	4639      	mov	r1, r7
 8003b64:	4630      	mov	r0, r6
 8003b66:	f7ff fef1 	bl	800394c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003b6a:	f1b9 0f00 	cmp.w	r9, #0
 8003b6e:	d011      	beq.n	8003b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8003b70:	42ac      	cmp	r4, r5
 8003b72:	d00f      	beq.n	8003b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8003b74:	464a      	mov	r2, r9
 8003b76:	1931      	adds	r1, r6, r4
 8003b78:	1970      	adds	r0, r6, r5
 8003b7a:	f7ff fee7 	bl	800394c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003b7e:	42ac      	cmp	r4, r5
 8003b80:	d208      	bcs.n	8003b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8003b82:	4434      	add	r4, r6
 8003b84:	197b      	adds	r3, r7, r5
 8003b86:	429c      	cmp	r4, r3
 8003b88:	d30f      	bcc.n	8003baa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 8003b8a:	462a      	mov	r2, r5
 8003b8c:	4639      	mov	r1, r7
 8003b8e:	4630      	mov	r0, r6
 8003b90:	f7ff fedc 	bl	800394c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003b94:	f8d8 3000 	ldr.w	r3, [r8]
 8003b98:	f8c8 a004 	str.w	sl, [r8, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	f803 200a 	strb.w	r2, [r3, sl]
 8003ba4:	b003      	add	sp, #12
 8003ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003baa:	42bc      	cmp	r4, r7
 8003bac:	d803      	bhi.n	8003bb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8003bae:	462a      	mov	r2, r5
 8003bb0:	eb07 010b 	add.w	r1, r7, fp
 8003bb4:	e7cd      	b.n	8003b52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8003bb6:	1be4      	subs	r4, r4, r7
 8003bb8:	4622      	mov	r2, r4
 8003bba:	4639      	mov	r1, r7
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	f7ff fec5 	bl	800394c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003bc2:	1b2a      	subs	r2, r5, r4
 8003bc4:	1971      	adds	r1, r6, r5
 8003bc6:	1930      	adds	r0, r6, r4
 8003bc8:	e7c4      	b.n	8003b54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8003bca:	9500      	str	r5, [sp, #0]
 8003bcc:	463b      	mov	r3, r7
 8003bce:	4622      	mov	r2, r4
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	f7ff fef1 	bl	80039ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8003bd8:	e7dc      	b.n	8003b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8003bda:	f1b9 0f00 	cmp.w	r9, #0
 8003bde:	d0d0      	beq.n	8003b82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8003be0:	e7c8      	b.n	8003b74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8003be2:	bf00      	nop
 8003be4:	08004371 	.word	0x08004371

08003be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8003be8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003bea:	4604      	mov	r4, r0
 8003bec:	4615      	mov	r5, r2
 8003bee:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8003bf0:	9303      	str	r3, [sp, #12]
 8003bf2:	460e      	mov	r6, r1
 8003bf4:	f7ff fe78 	bl	80038e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8003bf8:	6862      	ldr	r2, [r4, #4]
 8003bfa:	9b03      	ldr	r3, [sp, #12]
 8003bfc:	1b92      	subs	r2, r2, r6
 8003bfe:	4601      	mov	r1, r0
 8003c00:	42aa      	cmp	r2, r5
 8003c02:	9808      	ldr	r0, [sp, #32]
 8003c04:	9000      	str	r0, [sp, #0]
 8003c06:	bf28      	it	cs
 8003c08:	462a      	movcs	r2, r5
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f7ff ff6e 	bl	8003aec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8003c10:	b004      	add	sp, #16
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	0800435b 	.word	0x0800435b

08003c18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8003c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	9103      	str	r1, [sp, #12]
 8003c20:	9202      	str	r2, [sp, #8]
 8003c22:	f7fc fad9 	bl	80001d8 <strlen>
 8003c26:	9b02      	ldr	r3, [sp, #8]
 8003c28:	9000      	str	r0, [sp, #0]
 8003c2a:	9903      	ldr	r1, [sp, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7ff ffda 	bl	8003be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8003c34:	b004      	add	sp, #16
 8003c36:	bd10      	pop	{r4, pc}

08003c38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8003c38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	4623      	mov	r3, r4
 8003c3e:	6840      	ldr	r0, [r0, #4]
 8003c40:	f853 6b08 	ldr.w	r6, [r3], #8
 8003c44:	429e      	cmp	r6, r3
 8003c46:	bf18      	it	ne
 8003c48:	68a3      	ldrne	r3, [r4, #8]
 8003c4a:	eb00 0502 	add.w	r5, r0, r2
 8003c4e:	bf08      	it	eq
 8003c50:	230f      	moveq	r3, #15
 8003c52:	429d      	cmp	r5, r3
 8003c54:	d80a      	bhi.n	8003c6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8003c56:	b112      	cbz	r2, 8003c5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8003c58:	4430      	add	r0, r6
 8003c5a:	f7ff fe6b 	bl	8003934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	6065      	str	r5, [r4, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	4620      	mov	r0, r4
 8003c66:	555a      	strb	r2, [r3, r5]
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	9200      	str	r2, [sp, #0]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	2200      	movs	r2, #0
 8003c72:	4601      	mov	r1, r0
 8003c74:	4620      	mov	r0, r4
 8003c76:	f7ff fea0 	bl	80039ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8003c7a:	e7f0      	b.n	8003c5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08003c7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8003c7c:	b508      	push	{r3, lr}
 8003c7e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8003c82:	f7ff ffd9 	bl	8003c38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8003c86:	bd08      	pop	{r3, pc}

08003c88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 8003c88:	b508      	push	{r3, lr}
 8003c8a:	f7ff fff7 	bl	8003c7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8003c8e:	bd08      	pop	{r3, pc}

08003c90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8003c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c92:	4604      	mov	r4, r0
 8003c94:	4608      	mov	r0, r1
 8003c96:	460d      	mov	r5, r1
 8003c98:	f7fc fa9e 	bl	80001d8 <strlen>
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8003c9e:	9001      	str	r0, [sp, #4]
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f7ff fe2d 	bl	8003904 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8003caa:	9a01      	ldr	r2, [sp, #4]
 8003cac:	4629      	mov	r1, r5
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f7ff ffc2 	bl	8003c38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8003cb4:	b003      	add	sp, #12
 8003cb6:	bd30      	pop	{r4, r5, pc}
 8003cb8:	0800438a 	.word	0x0800438a

08003cbc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8003cbc:	6800      	ldr	r0, [r0, #0]
 8003cbe:	4770      	bx	lr

08003cc0 <_ZdlPv>:
 8003cc0:	f000 b90c 	b.w	8003edc <free>

08003cc4 <_Znwj>:
 8003cc4:	2801      	cmp	r0, #1
 8003cc6:	bf38      	it	cc
 8003cc8:	2001      	movcc	r0, #1
 8003cca:	b510      	push	{r4, lr}
 8003ccc:	4604      	mov	r4, r0
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f000 f8fc 	bl	8003ecc <malloc>
 8003cd4:	b930      	cbnz	r0, 8003ce4 <_Znwj+0x20>
 8003cd6:	f000 f8bf 	bl	8003e58 <_ZSt15get_new_handlerv>
 8003cda:	b908      	cbnz	r0, 8003ce0 <_Znwj+0x1c>
 8003cdc:	f000 f8c4 	bl	8003e68 <abort>
 8003ce0:	4780      	blx	r0
 8003ce2:	e7f4      	b.n	8003cce <_Znwj+0xa>
 8003ce4:	bd10      	pop	{r4, pc}

08003ce6 <_ZSt17__throw_bad_allocv>:
 8003ce6:	b508      	push	{r3, lr}
 8003ce8:	f000 f8be 	bl	8003e68 <abort>

08003cec <_ZSt19__throw_logic_errorPKc>:
 8003cec:	b508      	push	{r3, lr}
 8003cee:	f000 f8bb 	bl	8003e68 <abort>

08003cf2 <_ZSt20__throw_length_errorPKc>:
 8003cf2:	b508      	push	{r3, lr}
 8003cf4:	f000 f8b8 	bl	8003e68 <abort>

08003cf8 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8003cf8:	b40f      	push	{r0, r1, r2, r3}
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	f107 0418 	add.w	r4, r7, #24
 8003d04:	f854 2b04 	ldr.w	r2, [r4], #4
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f7fc fa64 	bl	80001d8 <strlen>
 8003d10:	f200 2307 	addw	r3, r0, #519	; 0x207
 8003d14:	f023 0307 	bic.w	r3, r3, #7
 8003d18:	ebad 0d03 	sub.w	sp, sp, r3
 8003d1c:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	60fc      	str	r4, [r7, #12]
 8003d24:	4623      	mov	r3, r4
 8003d26:	4668      	mov	r0, sp
 8003d28:	f000 f854 	bl	8003dd4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8003d2c:	f000 f89c 	bl	8003e68 <abort>

08003d30 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b09c      	sub	sp, #112	; 0x70
 8003d34:	4606      	mov	r6, r0
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	460c      	mov	r4, r1
 8003d3a:	1ba4      	subs	r4, r4, r6
 8003d3c:	490e      	ldr	r1, [pc, #56]	; (8003d78 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8003d3e:	2269      	movs	r2, #105	; 0x69
 8003d40:	1d38      	adds	r0, r7, #4
 8003d42:	f000 f8d3 	bl	8003eec <memcpy>
 8003d46:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8003d4a:	f023 0307 	bic.w	r3, r3, #7
 8003d4e:	ebad 0d03 	sub.w	sp, sp, r3
 8003d52:	466d      	mov	r5, sp
 8003d54:	2268      	movs	r2, #104	; 0x68
 8003d56:	1d39      	adds	r1, r7, #4
 8003d58:	4628      	mov	r0, r5
 8003d5a:	f000 f8c7 	bl	8003eec <memcpy>
 8003d5e:	4622      	mov	r2, r4
 8003d60:	4631      	mov	r1, r6
 8003d62:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8003d66:	442c      	add	r4, r5
 8003d68:	f000 f8c0 	bl	8003eec <memcpy>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8003d72:	4628      	mov	r0, r5
 8003d74:	f7ff ffba 	bl	8003cec <_ZSt19__throw_logic_errorPKc>
 8003d78:	0800439f 	.word	0x0800439f

08003d7c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8003d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	b084      	sub	sp, #16
 8003d84:	466d      	mov	r5, sp
 8003d86:	f105 040c 	add.w	r4, r5, #12
 8003d8a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8003dd0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8003d8e:	4623      	mov	r3, r4
 8003d90:	f04f 0c0a 	mov.w	ip, #10
 8003d94:	fbb2 f6fc 	udiv	r6, r2, ip
 8003d98:	fb0c 2e16 	mls	lr, ip, r6, r2
 8003d9c:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8003da0:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8003da4:	4696      	mov	lr, r2
 8003da6:	f1be 0f09 	cmp.w	lr, #9
 8003daa:	4632      	mov	r2, r6
 8003dac:	d8f2      	bhi.n	8003d94 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8003dae:	1ae4      	subs	r4, r4, r3
 8003db0:	428c      	cmp	r4, r1
 8003db2:	d809      	bhi.n	8003dc8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8003db4:	f1c4 030c 	rsb	r3, r4, #12
 8003db8:	4622      	mov	r2, r4
 8003dba:	18e9      	adds	r1, r5, r3
 8003dbc:	f000 f896 	bl	8003eec <memcpy>
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dc8:	f04f 34ff 	mov.w	r4, #4294967295
 8003dcc:	e7f8      	b.n	8003dc0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8003dce:	bf00      	nop
 8003dd0:	08004408 	.word	0x08004408

08003dd4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8003dd4:	3901      	subs	r1, #1
 8003dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dda:	4607      	mov	r7, r0
 8003ddc:	4615      	mov	r5, r2
 8003dde:	eb00 0801 	add.w	r8, r0, r1
 8003de2:	4604      	mov	r4, r0
 8003de4:	782a      	ldrb	r2, [r5, #0]
 8003de6:	b392      	cbz	r2, 8003e4e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8003de8:	4544      	cmp	r4, r8
 8003dea:	d22a      	bcs.n	8003e42 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8003dec:	2a25      	cmp	r2, #37	; 0x25
 8003dee:	d107      	bne.n	8003e00 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8003df0:	786a      	ldrb	r2, [r5, #1]
 8003df2:	2a73      	cmp	r2, #115	; 0x73
 8003df4:	d009      	beq.n	8003e0a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8003df6:	2a7a      	cmp	r2, #122	; 0x7a
 8003df8:	d012      	beq.n	8003e20 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8003dfa:	2a25      	cmp	r2, #37	; 0x25
 8003dfc:	d100      	bne.n	8003e00 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8003dfe:	3501      	adds	r5, #1
 8003e00:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003e04:	f804 2b01 	strb.w	r2, [r4], #1
 8003e08:	e7ec      	b.n	8003de4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8003e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e0e:	3a01      	subs	r2, #1
 8003e10:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8003e14:	b1c9      	cbz	r1, 8003e4a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8003e16:	4544      	cmp	r4, r8
 8003e18:	d013      	beq.n	8003e42 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8003e1a:	f804 1b01 	strb.w	r1, [r4], #1
 8003e1e:	e7f7      	b.n	8003e10 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8003e20:	78aa      	ldrb	r2, [r5, #2]
 8003e22:	2a75      	cmp	r2, #117	; 0x75
 8003e24:	d1ec      	bne.n	8003e00 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8003e26:	461e      	mov	r6, r3
 8003e28:	eba8 0104 	sub.w	r1, r8, r4
 8003e2c:	f856 2b04 	ldr.w	r2, [r6], #4
 8003e30:	4620      	mov	r0, r4
 8003e32:	f7ff ffa3 	bl	8003d7c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8003e36:	2800      	cmp	r0, #0
 8003e38:	dd03      	ble.n	8003e42 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8003e3a:	4404      	add	r4, r0
 8003e3c:	3503      	adds	r5, #3
 8003e3e:	4633      	mov	r3, r6
 8003e40:	e7d0      	b.n	8003de4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8003e42:	4621      	mov	r1, r4
 8003e44:	4638      	mov	r0, r7
 8003e46:	f7ff ff73 	bl	8003d30 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8003e4a:	3502      	adds	r5, #2
 8003e4c:	e7ca      	b.n	8003de4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8003e4e:	7022      	strb	r2, [r4, #0]
 8003e50:	1be0      	subs	r0, r4, r7
 8003e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003e58 <_ZSt15get_new_handlerv>:
 8003e58:	4b02      	ldr	r3, [pc, #8]	; (8003e64 <_ZSt15get_new_handlerv+0xc>)
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	f3bf 8f5b 	dmb	ish
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	20000158 	.word	0x20000158

08003e68 <abort>:
 8003e68:	b508      	push	{r3, lr}
 8003e6a:	2006      	movs	r0, #6
 8003e6c:	f000 f986 	bl	800417c <raise>
 8003e70:	2001      	movs	r0, #1
 8003e72:	f7fc fd0b 	bl	800088c <_exit>
	...

08003e78 <__errno>:
 8003e78:	4b01      	ldr	r3, [pc, #4]	; (8003e80 <__errno+0x8>)
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	2000000c 	.word	0x2000000c

08003e84 <__libc_init_array>:
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	4d0d      	ldr	r5, [pc, #52]	; (8003ebc <__libc_init_array+0x38>)
 8003e88:	4c0d      	ldr	r4, [pc, #52]	; (8003ec0 <__libc_init_array+0x3c>)
 8003e8a:	1b64      	subs	r4, r4, r5
 8003e8c:	10a4      	asrs	r4, r4, #2
 8003e8e:	2600      	movs	r6, #0
 8003e90:	42a6      	cmp	r6, r4
 8003e92:	d109      	bne.n	8003ea8 <__libc_init_array+0x24>
 8003e94:	4d0b      	ldr	r5, [pc, #44]	; (8003ec4 <__libc_init_array+0x40>)
 8003e96:	4c0c      	ldr	r4, [pc, #48]	; (8003ec8 <__libc_init_array+0x44>)
 8003e98:	f000 f99a 	bl	80041d0 <_init>
 8003e9c:	1b64      	subs	r4, r4, r5
 8003e9e:	10a4      	asrs	r4, r4, #2
 8003ea0:	2600      	movs	r6, #0
 8003ea2:	42a6      	cmp	r6, r4
 8003ea4:	d105      	bne.n	8003eb2 <__libc_init_array+0x2e>
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eac:	4798      	blx	r3
 8003eae:	3601      	adds	r6, #1
 8003eb0:	e7ee      	b.n	8003e90 <__libc_init_array+0xc>
 8003eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb6:	4798      	blx	r3
 8003eb8:	3601      	adds	r6, #1
 8003eba:	e7f2      	b.n	8003ea2 <__libc_init_array+0x1e>
 8003ebc:	0800441c 	.word	0x0800441c
 8003ec0:	0800441c 	.word	0x0800441c
 8003ec4:	0800441c 	.word	0x0800441c
 8003ec8:	08004424 	.word	0x08004424

08003ecc <malloc>:
 8003ecc:	4b02      	ldr	r3, [pc, #8]	; (8003ed8 <malloc+0xc>)
 8003ece:	4601      	mov	r1, r0
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	f000 b8a7 	b.w	8004024 <_malloc_r>
 8003ed6:	bf00      	nop
 8003ed8:	2000000c 	.word	0x2000000c

08003edc <free>:
 8003edc:	4b02      	ldr	r3, [pc, #8]	; (8003ee8 <free+0xc>)
 8003ede:	4601      	mov	r1, r0
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	f000 b833 	b.w	8003f4c <_free_r>
 8003ee6:	bf00      	nop
 8003ee8:	2000000c 	.word	0x2000000c

08003eec <memcpy>:
 8003eec:	440a      	add	r2, r1
 8003eee:	4291      	cmp	r1, r2
 8003ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ef4:	d100      	bne.n	8003ef8 <memcpy+0xc>
 8003ef6:	4770      	bx	lr
 8003ef8:	b510      	push	{r4, lr}
 8003efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f02:	4291      	cmp	r1, r2
 8003f04:	d1f9      	bne.n	8003efa <memcpy+0xe>
 8003f06:	bd10      	pop	{r4, pc}

08003f08 <memmove>:
 8003f08:	4288      	cmp	r0, r1
 8003f0a:	b510      	push	{r4, lr}
 8003f0c:	eb01 0402 	add.w	r4, r1, r2
 8003f10:	d902      	bls.n	8003f18 <memmove+0x10>
 8003f12:	4284      	cmp	r4, r0
 8003f14:	4623      	mov	r3, r4
 8003f16:	d807      	bhi.n	8003f28 <memmove+0x20>
 8003f18:	1e43      	subs	r3, r0, #1
 8003f1a:	42a1      	cmp	r1, r4
 8003f1c:	d008      	beq.n	8003f30 <memmove+0x28>
 8003f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f26:	e7f8      	b.n	8003f1a <memmove+0x12>
 8003f28:	4402      	add	r2, r0
 8003f2a:	4601      	mov	r1, r0
 8003f2c:	428a      	cmp	r2, r1
 8003f2e:	d100      	bne.n	8003f32 <memmove+0x2a>
 8003f30:	bd10      	pop	{r4, pc}
 8003f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f3a:	e7f7      	b.n	8003f2c <memmove+0x24>

08003f3c <memset>:
 8003f3c:	4402      	add	r2, r0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d100      	bne.n	8003f46 <memset+0xa>
 8003f44:	4770      	bx	lr
 8003f46:	f803 1b01 	strb.w	r1, [r3], #1
 8003f4a:	e7f9      	b.n	8003f40 <memset+0x4>

08003f4c <_free_r>:
 8003f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f4e:	2900      	cmp	r1, #0
 8003f50:	d044      	beq.n	8003fdc <_free_r+0x90>
 8003f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f56:	9001      	str	r0, [sp, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8003f5e:	bfb8      	it	lt
 8003f60:	18e4      	addlt	r4, r4, r3
 8003f62:	f000 f927 	bl	80041b4 <__malloc_lock>
 8003f66:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <_free_r+0x94>)
 8003f68:	9801      	ldr	r0, [sp, #4]
 8003f6a:	6813      	ldr	r3, [r2, #0]
 8003f6c:	b933      	cbnz	r3, 8003f7c <_free_r+0x30>
 8003f6e:	6063      	str	r3, [r4, #4]
 8003f70:	6014      	str	r4, [r2, #0]
 8003f72:	b003      	add	sp, #12
 8003f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f78:	f000 b922 	b.w	80041c0 <__malloc_unlock>
 8003f7c:	42a3      	cmp	r3, r4
 8003f7e:	d908      	bls.n	8003f92 <_free_r+0x46>
 8003f80:	6825      	ldr	r5, [r4, #0]
 8003f82:	1961      	adds	r1, r4, r5
 8003f84:	428b      	cmp	r3, r1
 8003f86:	bf01      	itttt	eq
 8003f88:	6819      	ldreq	r1, [r3, #0]
 8003f8a:	685b      	ldreq	r3, [r3, #4]
 8003f8c:	1949      	addeq	r1, r1, r5
 8003f8e:	6021      	streq	r1, [r4, #0]
 8003f90:	e7ed      	b.n	8003f6e <_free_r+0x22>
 8003f92:	461a      	mov	r2, r3
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	b10b      	cbz	r3, 8003f9c <_free_r+0x50>
 8003f98:	42a3      	cmp	r3, r4
 8003f9a:	d9fa      	bls.n	8003f92 <_free_r+0x46>
 8003f9c:	6811      	ldr	r1, [r2, #0]
 8003f9e:	1855      	adds	r5, r2, r1
 8003fa0:	42a5      	cmp	r5, r4
 8003fa2:	d10b      	bne.n	8003fbc <_free_r+0x70>
 8003fa4:	6824      	ldr	r4, [r4, #0]
 8003fa6:	4421      	add	r1, r4
 8003fa8:	1854      	adds	r4, r2, r1
 8003faa:	42a3      	cmp	r3, r4
 8003fac:	6011      	str	r1, [r2, #0]
 8003fae:	d1e0      	bne.n	8003f72 <_free_r+0x26>
 8003fb0:	681c      	ldr	r4, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	6053      	str	r3, [r2, #4]
 8003fb6:	4421      	add	r1, r4
 8003fb8:	6011      	str	r1, [r2, #0]
 8003fba:	e7da      	b.n	8003f72 <_free_r+0x26>
 8003fbc:	d902      	bls.n	8003fc4 <_free_r+0x78>
 8003fbe:	230c      	movs	r3, #12
 8003fc0:	6003      	str	r3, [r0, #0]
 8003fc2:	e7d6      	b.n	8003f72 <_free_r+0x26>
 8003fc4:	6825      	ldr	r5, [r4, #0]
 8003fc6:	1961      	adds	r1, r4, r5
 8003fc8:	428b      	cmp	r3, r1
 8003fca:	bf04      	itt	eq
 8003fcc:	6819      	ldreq	r1, [r3, #0]
 8003fce:	685b      	ldreq	r3, [r3, #4]
 8003fd0:	6063      	str	r3, [r4, #4]
 8003fd2:	bf04      	itt	eq
 8003fd4:	1949      	addeq	r1, r1, r5
 8003fd6:	6021      	streq	r1, [r4, #0]
 8003fd8:	6054      	str	r4, [r2, #4]
 8003fda:	e7ca      	b.n	8003f72 <_free_r+0x26>
 8003fdc:	b003      	add	sp, #12
 8003fde:	bd30      	pop	{r4, r5, pc}
 8003fe0:	2000015c 	.word	0x2000015c

08003fe4 <sbrk_aligned>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	4e0e      	ldr	r6, [pc, #56]	; (8004020 <sbrk_aligned+0x3c>)
 8003fe8:	460c      	mov	r4, r1
 8003fea:	6831      	ldr	r1, [r6, #0]
 8003fec:	4605      	mov	r5, r0
 8003fee:	b911      	cbnz	r1, 8003ff6 <sbrk_aligned+0x12>
 8003ff0:	f000 f88c 	bl	800410c <_sbrk_r>
 8003ff4:	6030      	str	r0, [r6, #0]
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f000 f887 	bl	800410c <_sbrk_r>
 8003ffe:	1c43      	adds	r3, r0, #1
 8004000:	d00a      	beq.n	8004018 <sbrk_aligned+0x34>
 8004002:	1cc4      	adds	r4, r0, #3
 8004004:	f024 0403 	bic.w	r4, r4, #3
 8004008:	42a0      	cmp	r0, r4
 800400a:	d007      	beq.n	800401c <sbrk_aligned+0x38>
 800400c:	1a21      	subs	r1, r4, r0
 800400e:	4628      	mov	r0, r5
 8004010:	f000 f87c 	bl	800410c <_sbrk_r>
 8004014:	3001      	adds	r0, #1
 8004016:	d101      	bne.n	800401c <sbrk_aligned+0x38>
 8004018:	f04f 34ff 	mov.w	r4, #4294967295
 800401c:	4620      	mov	r0, r4
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	20000160 	.word	0x20000160

08004024 <_malloc_r>:
 8004024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004028:	1ccd      	adds	r5, r1, #3
 800402a:	f025 0503 	bic.w	r5, r5, #3
 800402e:	3508      	adds	r5, #8
 8004030:	2d0c      	cmp	r5, #12
 8004032:	bf38      	it	cc
 8004034:	250c      	movcc	r5, #12
 8004036:	2d00      	cmp	r5, #0
 8004038:	4607      	mov	r7, r0
 800403a:	db01      	blt.n	8004040 <_malloc_r+0x1c>
 800403c:	42a9      	cmp	r1, r5
 800403e:	d905      	bls.n	800404c <_malloc_r+0x28>
 8004040:	230c      	movs	r3, #12
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	2600      	movs	r6, #0
 8004046:	4630      	mov	r0, r6
 8004048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800404c:	4e2e      	ldr	r6, [pc, #184]	; (8004108 <_malloc_r+0xe4>)
 800404e:	f000 f8b1 	bl	80041b4 <__malloc_lock>
 8004052:	6833      	ldr	r3, [r6, #0]
 8004054:	461c      	mov	r4, r3
 8004056:	bb34      	cbnz	r4, 80040a6 <_malloc_r+0x82>
 8004058:	4629      	mov	r1, r5
 800405a:	4638      	mov	r0, r7
 800405c:	f7ff ffc2 	bl	8003fe4 <sbrk_aligned>
 8004060:	1c43      	adds	r3, r0, #1
 8004062:	4604      	mov	r4, r0
 8004064:	d14d      	bne.n	8004102 <_malloc_r+0xde>
 8004066:	6834      	ldr	r4, [r6, #0]
 8004068:	4626      	mov	r6, r4
 800406a:	2e00      	cmp	r6, #0
 800406c:	d140      	bne.n	80040f0 <_malloc_r+0xcc>
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	4631      	mov	r1, r6
 8004072:	4638      	mov	r0, r7
 8004074:	eb04 0803 	add.w	r8, r4, r3
 8004078:	f000 f848 	bl	800410c <_sbrk_r>
 800407c:	4580      	cmp	r8, r0
 800407e:	d13a      	bne.n	80040f6 <_malloc_r+0xd2>
 8004080:	6821      	ldr	r1, [r4, #0]
 8004082:	3503      	adds	r5, #3
 8004084:	1a6d      	subs	r5, r5, r1
 8004086:	f025 0503 	bic.w	r5, r5, #3
 800408a:	3508      	adds	r5, #8
 800408c:	2d0c      	cmp	r5, #12
 800408e:	bf38      	it	cc
 8004090:	250c      	movcc	r5, #12
 8004092:	4629      	mov	r1, r5
 8004094:	4638      	mov	r0, r7
 8004096:	f7ff ffa5 	bl	8003fe4 <sbrk_aligned>
 800409a:	3001      	adds	r0, #1
 800409c:	d02b      	beq.n	80040f6 <_malloc_r+0xd2>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	442b      	add	r3, r5
 80040a2:	6023      	str	r3, [r4, #0]
 80040a4:	e00e      	b.n	80040c4 <_malloc_r+0xa0>
 80040a6:	6822      	ldr	r2, [r4, #0]
 80040a8:	1b52      	subs	r2, r2, r5
 80040aa:	d41e      	bmi.n	80040ea <_malloc_r+0xc6>
 80040ac:	2a0b      	cmp	r2, #11
 80040ae:	d916      	bls.n	80040de <_malloc_r+0xba>
 80040b0:	1961      	adds	r1, r4, r5
 80040b2:	42a3      	cmp	r3, r4
 80040b4:	6025      	str	r5, [r4, #0]
 80040b6:	bf18      	it	ne
 80040b8:	6059      	strne	r1, [r3, #4]
 80040ba:	6863      	ldr	r3, [r4, #4]
 80040bc:	bf08      	it	eq
 80040be:	6031      	streq	r1, [r6, #0]
 80040c0:	5162      	str	r2, [r4, r5]
 80040c2:	604b      	str	r3, [r1, #4]
 80040c4:	4638      	mov	r0, r7
 80040c6:	f104 060b 	add.w	r6, r4, #11
 80040ca:	f000 f879 	bl	80041c0 <__malloc_unlock>
 80040ce:	f026 0607 	bic.w	r6, r6, #7
 80040d2:	1d23      	adds	r3, r4, #4
 80040d4:	1af2      	subs	r2, r6, r3
 80040d6:	d0b6      	beq.n	8004046 <_malloc_r+0x22>
 80040d8:	1b9b      	subs	r3, r3, r6
 80040da:	50a3      	str	r3, [r4, r2]
 80040dc:	e7b3      	b.n	8004046 <_malloc_r+0x22>
 80040de:	6862      	ldr	r2, [r4, #4]
 80040e0:	42a3      	cmp	r3, r4
 80040e2:	bf0c      	ite	eq
 80040e4:	6032      	streq	r2, [r6, #0]
 80040e6:	605a      	strne	r2, [r3, #4]
 80040e8:	e7ec      	b.n	80040c4 <_malloc_r+0xa0>
 80040ea:	4623      	mov	r3, r4
 80040ec:	6864      	ldr	r4, [r4, #4]
 80040ee:	e7b2      	b.n	8004056 <_malloc_r+0x32>
 80040f0:	4634      	mov	r4, r6
 80040f2:	6876      	ldr	r6, [r6, #4]
 80040f4:	e7b9      	b.n	800406a <_malloc_r+0x46>
 80040f6:	230c      	movs	r3, #12
 80040f8:	603b      	str	r3, [r7, #0]
 80040fa:	4638      	mov	r0, r7
 80040fc:	f000 f860 	bl	80041c0 <__malloc_unlock>
 8004100:	e7a1      	b.n	8004046 <_malloc_r+0x22>
 8004102:	6025      	str	r5, [r4, #0]
 8004104:	e7de      	b.n	80040c4 <_malloc_r+0xa0>
 8004106:	bf00      	nop
 8004108:	2000015c 	.word	0x2000015c

0800410c <_sbrk_r>:
 800410c:	b538      	push	{r3, r4, r5, lr}
 800410e:	4d06      	ldr	r5, [pc, #24]	; (8004128 <_sbrk_r+0x1c>)
 8004110:	2300      	movs	r3, #0
 8004112:	4604      	mov	r4, r0
 8004114:	4608      	mov	r0, r1
 8004116:	602b      	str	r3, [r5, #0]
 8004118:	f7fc fbc2 	bl	80008a0 <_sbrk>
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	d102      	bne.n	8004126 <_sbrk_r+0x1a>
 8004120:	682b      	ldr	r3, [r5, #0]
 8004122:	b103      	cbz	r3, 8004126 <_sbrk_r+0x1a>
 8004124:	6023      	str	r3, [r4, #0]
 8004126:	bd38      	pop	{r3, r4, r5, pc}
 8004128:	20000164 	.word	0x20000164

0800412c <_raise_r>:
 800412c:	291f      	cmp	r1, #31
 800412e:	b538      	push	{r3, r4, r5, lr}
 8004130:	4604      	mov	r4, r0
 8004132:	460d      	mov	r5, r1
 8004134:	d904      	bls.n	8004140 <_raise_r+0x14>
 8004136:	2316      	movs	r3, #22
 8004138:	6003      	str	r3, [r0, #0]
 800413a:	f04f 30ff 	mov.w	r0, #4294967295
 800413e:	bd38      	pop	{r3, r4, r5, pc}
 8004140:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004142:	b112      	cbz	r2, 800414a <_raise_r+0x1e>
 8004144:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004148:	b94b      	cbnz	r3, 800415e <_raise_r+0x32>
 800414a:	4620      	mov	r0, r4
 800414c:	f000 f830 	bl	80041b0 <_getpid_r>
 8004150:	462a      	mov	r2, r5
 8004152:	4601      	mov	r1, r0
 8004154:	4620      	mov	r0, r4
 8004156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800415a:	f000 b817 	b.w	800418c <_kill_r>
 800415e:	2b01      	cmp	r3, #1
 8004160:	d00a      	beq.n	8004178 <_raise_r+0x4c>
 8004162:	1c59      	adds	r1, r3, #1
 8004164:	d103      	bne.n	800416e <_raise_r+0x42>
 8004166:	2316      	movs	r3, #22
 8004168:	6003      	str	r3, [r0, #0]
 800416a:	2001      	movs	r0, #1
 800416c:	e7e7      	b.n	800413e <_raise_r+0x12>
 800416e:	2400      	movs	r4, #0
 8004170:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004174:	4628      	mov	r0, r5
 8004176:	4798      	blx	r3
 8004178:	2000      	movs	r0, #0
 800417a:	e7e0      	b.n	800413e <_raise_r+0x12>

0800417c <raise>:
 800417c:	4b02      	ldr	r3, [pc, #8]	; (8004188 <raise+0xc>)
 800417e:	4601      	mov	r1, r0
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	f7ff bfd3 	b.w	800412c <_raise_r>
 8004186:	bf00      	nop
 8004188:	2000000c 	.word	0x2000000c

0800418c <_kill_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4d07      	ldr	r5, [pc, #28]	; (80041ac <_kill_r+0x20>)
 8004190:	2300      	movs	r3, #0
 8004192:	4604      	mov	r4, r0
 8004194:	4608      	mov	r0, r1
 8004196:	4611      	mov	r1, r2
 8004198:	602b      	str	r3, [r5, #0]
 800419a:	f7fc fb67 	bl	800086c <_kill>
 800419e:	1c43      	adds	r3, r0, #1
 80041a0:	d102      	bne.n	80041a8 <_kill_r+0x1c>
 80041a2:	682b      	ldr	r3, [r5, #0]
 80041a4:	b103      	cbz	r3, 80041a8 <_kill_r+0x1c>
 80041a6:	6023      	str	r3, [r4, #0]
 80041a8:	bd38      	pop	{r3, r4, r5, pc}
 80041aa:	bf00      	nop
 80041ac:	20000164 	.word	0x20000164

080041b0 <_getpid_r>:
 80041b0:	f7fc bb54 	b.w	800085c <_getpid>

080041b4 <__malloc_lock>:
 80041b4:	4801      	ldr	r0, [pc, #4]	; (80041bc <__malloc_lock+0x8>)
 80041b6:	f000 b809 	b.w	80041cc <__retarget_lock_acquire_recursive>
 80041ba:	bf00      	nop
 80041bc:	20000168 	.word	0x20000168

080041c0 <__malloc_unlock>:
 80041c0:	4801      	ldr	r0, [pc, #4]	; (80041c8 <__malloc_unlock+0x8>)
 80041c2:	f000 b804 	b.w	80041ce <__retarget_lock_release_recursive>
 80041c6:	bf00      	nop
 80041c8:	20000168 	.word	0x20000168

080041cc <__retarget_lock_acquire_recursive>:
 80041cc:	4770      	bx	lr

080041ce <__retarget_lock_release_recursive>:
 80041ce:	4770      	bx	lr

080041d0 <_init>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	bf00      	nop
 80041d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	469e      	mov	lr, r3
 80041da:	4770      	bx	lr

080041dc <_fini>:
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	bf00      	nop
 80041e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e2:	bc08      	pop	{r3}
 80041e4:	469e      	mov	lr, r3
 80041e6:	4770      	bx	lr
